import struct Color
{
	import var Red : Uint8;
	import var Green : Uint8;
	import var Blue : Uint8;
	import var Alpha : Uint8;

	public static function ToHDRColorDirect( color : Color ) : HDRColor
	{
		return HDRColor( ( ( Float )( color.Red ) ) / 255.0, ( ( Float )( color.Green ) ) / 255.0, ( ( Float )( color.Blue ) ) / 255.0, ( ( Float )( color.Alpha ) ) / 255.0 );
	}

	public static function HSBToColor( hue : Float, onlyHue : Bool, optional saturation : Float, optional brightness : Float ) : Color
	{
		var sector : Int32;
		var sectorFraction : Float;
		var p, q, t : Float;
		var pScaled, qScaled, tScaled, vScaled : Int32;
		var color : Color;
		if( onlyHue )
		{
			saturation = 1.0;
			brightness = 1.0;
		}
		hue /= 360.0;
		sector = FloorF( hue * 6.0 ) % 6;
		sectorFraction = ( hue * 6.0 ) - ( ( Float )( FloorF( hue * 6.0 ) ) );
		p = brightness * ( 1.0 - saturation );
		q = brightness * ( 1.0 - ( sectorFraction * saturation ) );
		t = brightness * ( 1.0 - ( ( 1.0 - sectorFraction ) * saturation ) );
		pScaled = ( ( Int32 )( p * 255.0 ) );
		qScaled = ( ( Int32 )( q * 255.0 ) );
		tScaled = ( ( Int32 )( t * 255.0 ) );
		vScaled = ( ( Int32 )( brightness * 255.0 ) );
		switch( sector )
		{
			case 0:
				color = Color( ( ( Uint8 )( vScaled ) ), ( ( Uint8 )( tScaled ) ), ( ( Uint8 )( pScaled ) ), ( ( Uint8 )( 255.0 ) ) );
			break;
			case 1:
				color = Color( ( ( Uint8 )( qScaled ) ), ( ( Uint8 )( vScaled ) ), ( ( Uint8 )( pScaled ) ), ( ( Uint8 )( 255.0 ) ) );
			break;
			case 2:
				color = Color( ( ( Uint8 )( pScaled ) ), ( ( Uint8 )( vScaled ) ), ( ( Uint8 )( tScaled ) ), ( ( Uint8 )( 255.0 ) ) );
			break;
			case 3:
				color = Color( ( ( Uint8 )( pScaled ) ), ( ( Uint8 )( qScaled ) ), ( ( Uint8 )( vScaled ) ), ( ( Uint8 )( 255.0 ) ) );
			break;
			case 4:
				color = Color( ( ( Uint8 )( tScaled ) ), ( ( Uint8 )( pScaled ) ), ( ( Uint8 )( vScaled ) ), ( ( Uint8 )( 255.0 ) ) );
			break;
			default:
				color = Color( ( ( Uint8 )( vScaled ) ), ( ( Uint8 )( pScaled ) ), ( ( Uint8 )( qScaled ) ), ( ( Uint8 )( 255.0 ) ) );
			break;
		}
		return color;
	}

	public static function ColorToHSB( color : Color ) : HSBColor
	{
		var min : Float;
		var max : Float;
		var delta : Float;
		var hsbColor : HSBColor;
		min = ( ( color.Red < color.Green ) ? ( color.Red / 255.0 ) : ( color.Green / 255.0 ) );
		min = ( ( min < ( color.Blue / 255.0 ) ) ? ( min ) : ( color.Blue / 255.0 ) );
		max = ( ( color.Red > color.Green ) ? ( color.Red / 255.0 ) : ( color.Green / 255.0 ) );
		max = ( ( max > ( color.Blue / 255.0 ) ) ? ( max ) : ( color.Blue / 255.0 ) );
		hsbColor.Brightness = max;
		delta = max - min;
		if( delta < 0.00001 )
		{
			hsbColor.Saturation = 0.0;
			hsbColor.Hue = 0.0;
			return hsbColor;
		}
		if( max > 0.0 )
		{
			hsbColor.Saturation = delta / max;
		}
		else
		{
			hsbColor.Saturation = 0.0;
			hsbColor.Hue = 0.0;
			return hsbColor;
		}
		if( ( color.Red / 255.0 ) >= max )
		{
			hsbColor.Hue = ( ( color.Green / 255.0 ) - ( color.Blue / 255.0 ) ) / delta;
		}
		else if( ( color.Green / 255.0 ) >= max )
		{
			hsbColor.Hue = 2.0 + ( ( ( color.Blue / 255.0 ) - ( color.Red / 255.0 ) ) / delta );
		}
		else
		{
			hsbColor.Hue = 4.0 + ( ( ( color.Red / 255.0 ) - ( color.Green / 255.0 ) ) / delta );
		}
		hsbColor.Hue *= 60.0;
		if( hsbColor.Hue < 0.0 )
		{
			hsbColor.Hue += 360.0;
		}
		return hsbColor;
	}

	public static function Equals( colorA : Color, colorB : Color, optional tolerance : Int32 ) : Bool
	{
		return ( ( ( Abs( ( ( Int32 )( colorA.Red ) ) - ( ( Int32 )( colorB.Red ) ) ) <= tolerance ) && ( Abs( ( ( Int32 )( colorA.Green ) ) - ( ( Int32 )( colorB.Green ) ) ) <= tolerance ) ) && ( Abs( ( ( Int32 )( colorA.Blue ) ) - ( ( Int32 )( colorB.Blue ) ) ) <= tolerance ) ) && ( Abs( ( ( Int32 )( colorA.Alpha ) ) - ( ( Int32 )( colorB.Alpha ) ) ) <= tolerance );
	}

	public static function ToLinear( sRGBColor : Color ) : Color
	{
		return Color( ( ( Uint8 )( PowF( ( ( Float )( sRGBColor.Red ) ) / 255.0, 2.20000005 ) * 255.0 ) ), ( ( Uint8 )( PowF( ( ( Float )( sRGBColor.Green ) ) / 255.0, 2.20000005 ) * 255.0 ) ), ( ( Uint8 )( PowF( ( ( Float )( sRGBColor.Blue ) ) / 255.0, 2.20000005 ) * 255.0 ) ), sRGBColor.Alpha );
	}

	public static function ToSRGB( linearColor : Color ) : Color
	{
		return Color( ( ( Uint8 )( PowF( ( ( Float )( linearColor.Red ) ) / 255.0, 1.0 / 2.20000005 ) * 255.0 ) ), ( ( Uint8 )( PowF( ( ( Float )( linearColor.Green ) ) / 255.0, 1.0 / 2.20000005 ) * 255.0 ) ), ( ( Uint8 )( PowF( ( ( Float )( linearColor.Blue ) ) / 255.0, 1.0 / 2.20000005 ) * 255.0 ) ), linearColor.Alpha );
	}

}

import struct HDRColor
{
	import var Red : Float;
	import var Green : Float;
	import var Blue : Float;
	import var Alpha : Float;
}

struct HSBColor
{
	var Hue : Float;
	var Saturation : Float;
	var Brightness : Float;
}

