importonly abstract class IVehicleSystem extends IGameSystem
{
}

import class VehicleSystem extends IVehicleSystem
{
	private var m_restrictionTags : array< CName >;

	public import function SpawnPlayerVehicle( optional vehicleType : gamedataVehicleType );
	public import function ToggleSummonMode();
	public import function DespawnPlayerVehicle( vehicleID : GarageVehicleID );
	public import function EnablePlayerVehicle( vehicle : String, enable : Bool, optional despawnIfDisabling : Bool ) : Bool;
	public import function EnableAllPlayerVehicles();
	public import function GetPlayerVehicles( out vehicles : array< PlayerVehicle > );
	public import function GetPlayerUnlockedVehicles( out unlockedVehicles : array< PlayerVehicle > );
	public import function TogglePlayerActiveVehicle( vehicleID : GarageVehicleID, vehicleType : gamedataVehicleType, enable : Bool );
	public import testonly function EnablePlayerVehicleCollision( enable : Bool );

	public const function GetVehicleRestrictions() : array< CName >
	{
		return m_restrictionTags;
	}

	protected export function OnVehicleSystemAttach()
	{
		PlayerGameplayRestrictions.AcquireHotkeyRestrictionTags( EHotkey.DPAD_RIGHT, m_restrictionTags );
	}

	public static function IsSummoningVehiclesRestricted( game : GameInstance ) : Bool
	{
		var blackboard : IBlackboard;
		var garageState : Uint32;
		var garageReady : Bool;
		var gameplayRestricted : Bool;
		var unlockedVehicles : array< PlayerVehicle >;
		var isPlayerInVehicle : Bool;
		var isUIRadialContextActive : Bool;
		var restrictions : array< CName >;
		var player : PlayerPuppet;
		var questRestricted : Bool;
		var uiQuickSlotsDataBB : IBlackboard;
		player = GetPlayer( game );
		if( StatusEffectSystem.ObjectHasStatusEffectWithTag( player, 'CustomVehicleSummon' ) )
		{
			return false;
		}
		questRestricted = GameInstance.GetQuestsSystem( game ).GetFact( 'unlock_car_hud_dpad' ) == 0;
		if( questRestricted )
		{
			return true;
		}
		blackboard = GameInstance.GetBlackboardSystem( game ).Get( GetAllBlackboardDefs().VehicleSummonData );
		garageState = ( ( Uint32 )( blackboard.GetUint( GetAllBlackboardDefs().VehicleSummonData.GarageState ) ) );
		garageReady = ( ( vehicleGarageState )( garageState ) ) == vehicleGarageState.SummonAvailable;
		isPlayerInVehicle = player.GetPlayerStateMachineBlackboard().GetBool( GetAllBlackboardDefs().PlayerStateMachine.MountedToVehicle );
		uiQuickSlotsDataBB = GameInstance.GetBlackboardSystem( game ).Get( GetAllBlackboardDefs().UI_QuickSlotsData );
		isUIRadialContextActive = uiQuickSlotsDataBB.GetBool( GetAllBlackboardDefs().UI_QuickSlotsData.UIRadialContextRequest );
		GameInstance.GetVehicleSystem( game ).GetPlayerUnlockedVehicles( unlockedVehicles );
		if( ( !( garageReady ) || ( unlockedVehicles.Size() == 0 ) ) || ( isPlayerInVehicle && !( isUIRadialContextActive ) ) )
		{
			return true;
		}
		restrictions = GameInstance.GetVehicleSystem( game ).GetVehicleRestrictions();
		if( restrictions.Size() > 0 )
		{
			gameplayRestricted = StatusEffectSystem.ObjectHasStatusEffectWithTags( player, restrictions );
		}
		else
		{
			gameplayRestricted = PlayerGameplayRestrictions.IsHotkeyRestricted( game, EHotkey.DPAD_RIGHT );
		}
		return gameplayRestricted;
	}

}

importonly struct PlayerVehicle
{
	import var name : CName;
	import var recordID : TweakDBID;
	import var vehicleType : gamedataVehicleType;
	import var isUnlocked : Bool;
}

importonly struct GarageVehicleID
{
	import var name : CName;
	import var recordID : TweakDBID;

	public import static function Resolve( vehicleID : String ) : GarageVehicleID;
}

import enum vehicleGarageState
{
	NoVehiclesAvailable,
	SummonAvailable,
	SummonDisabled,
}

import enum vehicleSummonState
{
	Idle,
	EnRoute,
	AlreadySummoned,
	PathfindingFailed,
	Arrived,
}

import implicit cast ( a : TweakDBID ) : GarageVehicleID;

exec function DespawnPlayerVehicle( inst : GameInstance, vehicleID : String )
{
	GameInstance.GetVehicleSystem( inst ).DespawnPlayerVehicle( GarageVehicleID.Resolve( vehicleID ) );
}

exec function EnableAllPlayerVehicles( inst : GameInstance )
{
	GameInstance.GetVehicleSystem( inst ).EnableAllPlayerVehicles();
}

