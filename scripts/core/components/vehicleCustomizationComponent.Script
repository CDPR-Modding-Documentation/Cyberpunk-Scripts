import struct VehicleDecalAttachmentData
{
	import var componentToAttachTo : CName;
	import var decalReference : ResRef;

	public static function FromRecord( record : VehicleDecalAttachment_Record ) : VehicleDecalAttachmentData
	{
		var ret : VehicleDecalAttachmentData;
		ret.componentToAttachTo = record.ComponentToAttachTo();
		ret.decalReference = record.DecalResource();
		return ret;
	}

}

import struct VehicleClearCoatOverrides
{
	import var opacity : Float;
	import var coatTintFwd : Color;
	import var coatTintSide : Color;
	import var coatTintFresnelBias : Float;
	import var coatSpecularColor : Color;
	import var coatFresnelBias : Float;

	public static function FromRecord( record : VehicleClearCoatOverrides_Record ) : VehicleClearCoatOverrides
	{
		var ret : VehicleClearCoatOverrides;
		ret.opacity = record.Opacity();
		if( record.GetCoatTintFwdCount() >= 3 )
		{
			ret.coatTintFwd = Color( ( ( Uint8 )( record.GetCoatTintFwdItem( 0 ) ) ), ( ( Uint8 )( record.GetCoatTintFwdItem( 1 ) ) ), ( ( Uint8 )( record.GetCoatTintFwdItem( 2 ) ) ), 255 );
		}
		else
		{
			ret.coatTintFwd = Color( 0, 0, 0, 0 );
		}
		if( record.GetCoatTintSideCount() >= 3 )
		{
			ret.coatTintSide = Color( ( ( Uint8 )( record.GetCoatTintSideItem( 0 ) ) ), ( ( Uint8 )( record.GetCoatTintSideItem( 1 ) ) ), ( ( Uint8 )( record.GetCoatTintSideItem( 2 ) ) ), 255 );
		}
		else
		{
			ret.coatTintSide = Color( 0, 0, 0, 0 );
		}
		ret.coatTintFresnelBias = record.CoatTintFresnelBias();
		if( record.GetCoatSpecularColorCount() >= 3 )
		{
			ret.coatSpecularColor = Color( ( ( Uint8 )( record.GetCoatSpecularColorItem( 0 ) ) ), ( ( Uint8 )( record.GetCoatSpecularColorItem( 1 ) ) ), ( ( Uint8 )( record.GetCoatSpecularColorItem( 2 ) ) ), 255 );
		}
		else
		{
			ret.coatSpecularColor = Color( 0, 0, 0, 0 );
		}
		ret.coatFresnelBias = record.CoatFresnelBias();
		return ret;
	}

}

import struct VehiclePartsClearCoatOverrides
{
	import var partsName : array< CName >;
	import var overrides : VehicleClearCoatOverrides;

	public static function FromRecord( record : VehiclePartsClearCoatOverrides_Record ) : VehiclePartsClearCoatOverrides
	{
		var ret : VehiclePartsClearCoatOverrides;
		ret.partsName = record.PartsName();
		ret.overrides = VehicleClearCoatOverrides.FromRecord( record.OverridesHandle() );
		return ret;
	}

}

importonly class VehicleCustomizationComponent extends IComponent
{
	public import final function SetupGenericCustomization( componentsExcludedFromMask : array< CName >, mask : ResRef );
	public import final function SetupUniqueCustomization( customMultilayers : array< VehicleCustomMultilayer >, globalClearCoatOverrides : VehicleClearCoatOverrides, partsClearCoatOverrides : array< VehiclePartsClearCoatOverrides > );
	public import final function ShowUniqueCustomizationDecalsWithDisolve( decals : array< VehicleDecalAttachmentData > );
	public import final function HideUniqueCustomizationDecalsWithDisolve();
	public import final function SetDefaultDecalsEnabled( enabled : Bool );
}

