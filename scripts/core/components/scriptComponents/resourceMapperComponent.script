struct SAreaEffectData
{
	instanceeditable inlined var action : ScriptableDeviceAction;
	instanceeditable var areaEffectID : CName;
	[ category = "VFX Data" ]
	instanceeditable var indicatorEffectName : CName;
	default indicatorEffectName = 'focus_10m';
	[ category = "VFX Data" ]
	instanceeditable var useIndicatorEffect : Bool;
	default useIndicatorEffect = false;
	[ category = "VFX Data" ][ rangeMin = "0.f" ][ rangeMax = "1.f" ]
	instanceeditable var indicatorEffectSize : Float;
	default indicatorEffectSize = 1.f;
	[ category = "Stim Data" ]
	instanceeditable var stimRange : Float;
	default stimRange = 10.f;
	[ category = "Stim Data" ]
	instanceeditable var stimLifetime : Float;
	default stimLifetime = 3.f;
	[ category = "Stim Data" ]
	instanceeditable var stimType : DeviceStimType;
	default stimType = DeviceStimType.Distract;
	[ category = "Stim Data" ]
	instanceeditable var stimSource : NodeRef;
	[ category = "Stim Data" ]
	const instanceeditable var additionaStimSources : array< NodeRef >;
	[ category = "Stim Data" ]
	instanceeditable var investigateSpot : NodeRef;
	[ category = "Stim Data" ]
	instanceeditable var investigateController : Bool;
	[ category = "Stim Data" ]
	instanceeditable var controllerSource : NodeRef;
	[ category = "Highlight Data" ]
	instanceeditable var highlightTargets : Bool;
	default highlightTargets = true;
	[ category = "Highlight Data" ]
	instanceeditable var highlightType : EFocusForcedHighlightType;
	default highlightType = EFocusForcedHighlightType.DISTRACTION;
	[ category = "Highlight Data" ]
	instanceeditable var highlightPriority : EPriority;
	default highlightPriority = EPriority.High;
	var effectInstance : EffectInstance;
}

class AreaEffectData extends IScriptable
{
	instanceeditable inlined var action : ScriptableDeviceAction;
	[ customEditor = "TweakDBGroupInheritance;ObjectAction" ]
	instanceeditable inlined var actionRecordID : TweakDBID;
	instanceeditable var areaEffectID : CName;
	[ category = "VFX Data" ]
	instanceeditable var indicatorEffectName : CName;
	default indicatorEffectName = 'focus_10m';
	[ category = "VFX Data" ]
	instanceeditable var useIndicatorEffect : Bool;
	default useIndicatorEffect = false;
	[ category = "VFX Data" ][ rangeMin = "0.f" ][ rangeMax = "1.f" ]
	instanceeditable var indicatorEffectSize : Float;
	default indicatorEffectSize = 1.f;
	[ category = "Stim Data" ]
	instanceeditable var stimRange : Float;
	default stimRange = 10.f;
	[ category = "Stim Data" ]
	instanceeditable var stimLifetime : Float;
	default stimLifetime = 3.f;
	[ category = "Stim Data" ]
	instanceeditable var stimType : DeviceStimType;
	default stimType = DeviceStimType.Distract;
	[ category = "Stim Data" ]
	instanceeditable var stimSource : NodeRef;
	[ category = "Stim Data" ]
	mutable instanceeditable var additionaStimSources : array< NodeRef >;
	[ category = "Stim Data" ]
	instanceeditable var investigateSpot : NodeRef;
	[ category = "Stim Data" ]
	instanceeditable var investigateController : Bool;
	[ category = "Stim Data" ]
	instanceeditable var controllerSource : NodeRef;
	[ category = "Highlight Data" ]
	instanceeditable var highlightTargets : Bool;
	default highlightTargets = true;
	[ category = "Highlight Data" ]
	instanceeditable var highlightType : EFocusForcedHighlightType;
	default highlightType = EFocusForcedHighlightType.INVALID;
	[ category = "Highlight Data" ]
	instanceeditable var outlineType : EFocusOutlineType;
	default outlineType = EFocusOutlineType.DISTRACTION;
	[ category = "Highlight Data" ]
	instanceeditable var highlightPriority : EPriority;
	default highlightPriority = EPriority.High;
	var effectInstance : EffectInstance;
	var gameEffectOverrideName : CName;

	public function EffectInstanceClear()
	{
		effectInstance = NULL;
	}

	public function SetEffectInstance( effect : EffectInstance )
	{
		effectInstance = effect;
	}

	public const function GetActionRecord() : weak< ObjectAction_Record >
	{
		return TweakDBInterface.GetObjectActionRecord( actionRecordID );
	}

	private const function GetActionNameFromRecord( record : weak< ObjectAction_Record > ) : CName
	{
		if( record != NULL )
		{
			return record.ActionName();
		}
		else
		{
			return '';
		}
	}

	public const function GetActionNameFromRecord() : CName
	{
		return GetActionNameFromRecord( GetActionRecord() );
	}

	public const function IsMatching( _action : BaseScriptableAction ) : Bool
	{
		if( !( _action ) )
		{
			return false;
		}
		if( TDBID.IsValid( actionRecordID ) && ( _action.GetObjectActionID() == actionRecordID ) )
		{
			return true;
		}
		else if( action && action.GetClassName() == _action.GetClassName() )
		{
			return true;
		}
		else if( areaEffectID == _action.GetClassName() )
		{
			return true;
		}
		else if( TDBID.IsValid( actionRecordID ) && areaEffectID == _action.GetObjectActionRecord().ActionName() )
		{
			return true;
		}
		else
		{
			return false;
		}
	}

}

struct SAreaEffectTargetData
{
	instanceeditable var areaEffectID : CName;
	instanceeditable var onSelf : Bool;
	default onSelf = true;
	instanceeditable var onSlaves : Bool;
}

class AreaEffectTargetData extends IScriptable
{
	instanceeditable var areaEffectID : CName;
	instanceeditable var onSelf : Bool;
	default onSelf = true;
	instanceeditable var onSlaves : Bool;
}

class FxResourceMapperComponent extends ScriptableComponent
{
	[ category = "Area effects - OBSOLETE USE ONLY TO CORRECT DATA OF EXISTING EFFECTS" ]
	protected mutable var m_areaEffectsData : array< SAreaEffectData >;
	[ category = "Area effects - OBSOLETE USE ONLY TO CORRECT DATA OF EXISTING EFFECTS" ]
	protected mutable var m_areaEffectsInFocusMode : array< SAreaEffectTargetData >;
	[ category = "Area effects - DEFINE NEW EFFECTS HERE" ]
	protected mutable instanceeditable inlined var m_areaEffectData : array< AreaEffectData >;
	[ category = "Area effects - DEFINE NEW EFFECTS HERE" ]
	protected mutable instanceeditable inlined var m_investigationSlotOffsetMultiplier : Float;
	default m_investigationSlotOffsetMultiplier = 1.0f;
	[ category = "Area effects - DEFINE NEW EFFECTS HERE" ]
	protected mutable instanceeditable inlined var m_areaEffectInFocusMode : array< AreaEffectTargetData >;
	private var DEBUG_copiedDataFromEntity : Bool;
	private var DEBUG_copiedDataFromFXStruct : Bool;

	public function CopyDataToFxMapClass( areaEffectsData : array< SAreaEffectData >, DEBUG_entityCopy : Bool, DEBUG_fxCopy : Bool )
	{
		var i : Int32;
		var i2 : Int32;
		var areaEffectDataClass : AreaEffectData;
		if( m_areaEffectData.Size() > 0 )
		{
			return;
		}
		for( i = 0; i < areaEffectsData.Size(); i += 1 )
		{
			areaEffectDataClass = new AreaEffectData;
			areaEffectDataClass.action = areaEffectsData[ i ].action;
			areaEffectDataClass.areaEffectID = areaEffectsData[ i ].areaEffectID;
			areaEffectDataClass.indicatorEffectName = areaEffectsData[ i ].indicatorEffectName;
			areaEffectDataClass.useIndicatorEffect = areaEffectsData[ i ].useIndicatorEffect;
			areaEffectDataClass.indicatorEffectSize = areaEffectsData[ i ].indicatorEffectSize;
			areaEffectDataClass.stimRange = areaEffectsData[ i ].stimRange;
			areaEffectDataClass.stimLifetime = areaEffectsData[ i ].stimLifetime;
			areaEffectDataClass.stimType = areaEffectsData[ i ].stimType;
			areaEffectDataClass.stimSource = areaEffectsData[ i ].stimSource;
			for( i2 = 0; i < areaEffectsData[ i ].additionaStimSources.Size(); i2 += 1 )
			{
				areaEffectDataClass.additionaStimSources.PushBack( areaEffectsData[ i ].additionaStimSources[ i2 ] );
			}
			areaEffectDataClass.investigateSpot = areaEffectsData[ i ].investigateSpot;
			areaEffectDataClass.investigateController = areaEffectsData[ i ].investigateController;
			areaEffectDataClass.controllerSource = areaEffectsData[ i ].controllerSource;
			areaEffectDataClass.highlightTargets = areaEffectsData[ i ].highlightTargets;
			areaEffectDataClass.highlightType = areaEffectsData[ i ].highlightType;
			areaEffectDataClass.highlightPriority = areaEffectsData[ i ].highlightPriority;
			areaEffectDataClass.effectInstance = areaEffectsData[ i ].effectInstance;
			m_areaEffectData.PushBack( areaEffectDataClass );
			if( DEBUG_entityCopy )
			{
				DEBUG_copiedDataFromEntity = DEBUG_entityCopy;
			}
			if( DEBUG_fxCopy )
			{
				DEBUG_copiedDataFromFXStruct = DEBUG_fxCopy;
			}
		}
	}

	public function CopyEffectToFxMapClass( areaEffectsInFocusMode : array< SAreaEffectTargetData > )
	{
		var i : Int32;
		var effctDataClass : AreaEffectTargetData;
		if( m_areaEffectInFocusMode.Size() > 0 )
		{
			return;
		}
		for( i = 0; i < areaEffectsInFocusMode.Size(); i += 1 )
		{
			effctDataClass = new AreaEffectTargetData;
			effctDataClass.areaEffectID = areaEffectsInFocusMode[ i ].areaEffectID;
			effctDataClass.onSelf = areaEffectsInFocusMode[ i ].onSelf;
			effctDataClass.onSlaves = areaEffectsInFocusMode[ i ].onSlaves;
			m_areaEffectInFocusMode.PushBack( effctDataClass );
		}
	}

	public const function GetInvestigationSlotOffset() : Float
	{
		return m_investigationSlotOffsetMultiplier;
	}

	public const function GetAreaEffectData() : array< AreaEffectData >
	{
		return m_areaEffectData;
	}

	public const function GetAreaEffectDataByIndex( index : Int32 ) : AreaEffectData
	{
		return m_areaEffectData[ index ];
	}

	public const function GetAreaEffectDataSize() : Int32
	{
		return m_areaEffectData.Size();
	}

	public const function GetAreaEffectInFocusMode() : array< AreaEffectTargetData >
	{
		return m_areaEffectInFocusMode;
	}

	public const function GetAreaEffectInFocusModeByIndex( index : Int32 ) : AreaEffectTargetData
	{
		return m_areaEffectInFocusMode[ index ];
	}

	public const function GetAreaEffectInFocusSize() : Int32
	{
		return m_areaEffectInFocusMode.Size();
	}

	public const function HasAnyDistractions() : Bool
	{
		var i : Int32;
		for( i = 0; i < m_areaEffectData.Size(); i += 1 )
		{
			if( m_areaEffectData[ i ].stimType == DeviceStimType.Distract || m_areaEffectData[ i ].stimType == DeviceStimType.VisualDistract )
			{
				return true;
			}
		}
		return false;
	}

	public function CreateEffectStructDataFromAttack( attackTDBID : TweakDBID, index : Int32, optional gameEffectNameOverride : CName, optional dontHighlightOnLookat : Bool )
	{
		CreateData( attackTDBID, index, gameEffectNameOverride, dontHighlightOnLookat );
	}

	private function CreateData( attackTDBID : TweakDBID, index : Int32, optional gameEffectNameOverride : CName, optional dontHighlightOnLookat : Bool )
	{
		var effectData : AreaEffectData;
		var distractForEffectData : AreaEffectData;
		var effectRange : Float;
		effectData = new AreaEffectData;
		distractForEffectData = new AreaEffectData;
		effectRange = TweakDBInterface.GetAttackRecord( attackTDBID ).Range();
		effectData.areaEffectID = StringToName( "hardCodeDoNotRemove" + index );
		effectData.stimRange = effectRange;
		effectData.highlightTargets = true;
		effectData.highlightType = EFocusForcedHighlightType.INVALID;
		effectData.outlineType = EFocusOutlineType.AOE;
		effectData.highlightPriority = EPriority.Medium;
		effectData.stimType = DeviceStimType.None;
		effectData.indicatorEffectName = '';
		effectData.gameEffectOverrideName = gameEffectNameOverride;
		m_areaEffectData.PushBack( effectData );
		if( !( dontHighlightOnLookat ) )
		{
			CreateAreaEffectTargetData( effectData );
		}
		distractForEffectData.areaEffectID = StringToName( "hardCodeDoNotRemoveExplosion" + index );
		CalculateRangeSphere( effectRange * 3.0, distractForEffectData.indicatorEffectName, distractForEffectData.indicatorEffectSize );
		distractForEffectData.stimRange = effectRange * 3.0;
		distractForEffectData.highlightTargets = false;
		distractForEffectData.stimType = DeviceStimType.Explosion;
		m_areaEffectData.PushBack( distractForEffectData );
		if( !( dontHighlightOnLookat ) )
		{
			CreateAreaEffectTargetData( distractForEffectData );
		}
	}

	private function CalculateRangeSphere( desiredRange : Float, out effectName : CName, out effectSize : Float )
	{
		if( desiredRange <= 5.0 )
		{
			effectName = 'focus_5m';
			effectSize = desiredRange / 5.0;
		}
		else if( desiredRange <= 10.0 )
		{
			effectName = 'focus_10m';
			effectSize = desiredRange / 10.0;
		}
		else if( desiredRange <= 20.0 )
		{
			effectName = 'focus_20m';
			effectSize = desiredRange / 20.0;
		}
		else if( desiredRange <= 30.0 )
		{
			effectName = 'focus_30m';
			effectSize = desiredRange / 30.0;
		}
	}

	protected function CreateAreaEffectTargetData( mainEffect : AreaEffectData )
	{
		var data : AreaEffectTargetData;
		data = new AreaEffectTargetData;
		data.areaEffectID = mainEffect.areaEffectID;
		data.onSelf = true;
		m_areaEffectInFocusMode.PushBack( data );
	}

	public const function GetAreaEffectDataIndexByName( effectName : CName ) : Int32
	{
		var i : Int32;
		for( i = 0; i < m_areaEffectData.Size(); i += 1 )
		{
			if( ( m_areaEffectData[ i ].action != NULL ) && m_areaEffectData[ i ].action.GetClassName() == effectName )
			{
				return i;
			}
			else if( IsNameValid( effectName ) && m_areaEffectData[ i ].areaEffectID == effectName )
			{
				return i;
			}
		}
		return -1;
	}

	public const function GetAreaEffectDataIndexByAction( action : BaseScriptableAction ) : Int32
	{
		var i : Int32;
		if( !( action ) )
		{
			return -1;
		}
		for( i = 0; i < m_areaEffectData.Size(); i += 1 )
		{
			if( m_areaEffectData[ i ].IsMatching( action ) )
			{
				return i;
			}
		}
		return -1;
	}

	public const function GetAreaEffectDataNameByIndex( effectIndex : Int32 ) : CName
	{
		if( ( effectIndex < 0 ) || ( effectIndex >= m_areaEffectData.Size() ) )
		{
			return '';
		}
		if( TDBID.IsValid( m_areaEffectData[ effectIndex ].actionRecordID ) )
		{
			return m_areaEffectData[ effectIndex ].GetActionNameFromRecord();
		}
		else if( m_areaEffectData[ effectIndex ].action != NULL )
		{
			return m_areaEffectData[ effectIndex ].action.GetClassName();
		}
		else
		{
			return m_areaEffectData[ effectIndex ].areaEffectID;
		}
	}

	public const function GetDistractionRange( type : DeviceStimType ) : Float
	{
		var i : Int32;
		var currentRange : Float;
		for( i = 0; i < m_areaEffectData.Size(); i += 1 )
		{
			if( type == DeviceStimType.Distract || type == DeviceStimType.VisualDistract )
			{
				if( m_areaEffectData[ i ].stimType == DeviceStimType.Distract || m_areaEffectData[ i ].stimType == DeviceStimType.VisualDistract )
				{
					if( m_areaEffectData[ i ].stimRange > currentRange )
					{
						currentRange = m_areaEffectData[ i ].stimRange;
					}
				}
			}
			else if( type == m_areaEffectData[ i ].stimType )
			{
				if( m_areaEffectData[ i ].stimRange > currentRange )
				{
					currentRange = m_areaEffectData[ i ].stimRange;
				}
			}
		}
		return currentRange;
	}

	public const function GetSmallestDistractionRange( type : DeviceStimType ) : Float
	{
		var i : Int32;
		var currentRange : Float;
		for( i = 0; i < m_areaEffectData.Size(); i += 1 )
		{
			if( type == DeviceStimType.Distract || type == DeviceStimType.VisualDistract )
			{
				if( m_areaEffectData[ i ].stimType == DeviceStimType.Distract || m_areaEffectData[ i ].stimType == DeviceStimType.VisualDistract )
				{
					if( m_areaEffectData[ i ].stimRange < currentRange )
					{
						currentRange = m_areaEffectData[ i ].stimRange;
					}
				}
			}
			else if( type == m_areaEffectData[ i ].stimType )
			{
				if( m_areaEffectData[ i ].stimRange < currentRange )
				{
					currentRange = m_areaEffectData[ i ].stimRange;
				}
			}
		}
		return currentRange;
	}

}

