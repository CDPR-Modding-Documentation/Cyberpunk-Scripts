import class inkTextParams extends IScriptable
{

	public function AddString( value : String )
	{
		Internal_AddString( value );
	}

	public function AddString( key : String, value : String )
	{
		Internal_AddString( value, key );
	}

	public function UpdateString( index : Int32, value : String )
	{
		Internal_UpdateString( index, value );
	}

	public function UpdateString( key : String, value : String )
	{
		Internal_UpdateStringKey( key, value );
	}

	public function AddLocalizedString( valueLocKey : String )
	{
		Internal_AddLocalizedString( valueLocKey );
	}

	public function AddLocalizedString( key : String, valueLocKey : String )
	{
		Internal_AddLocalizedString( valueLocKey, key );
	}

	public function UpdateLocalizedString( index : Int32, valueLocKey : String )
	{
		Internal_UpdateLocalizedString( index, valueLocKey );
	}

	public function UpdateLocalizedString( key : String, valueLocKey : String )
	{
		Internal_UpdateLocalizedStringKey( key, valueLocKey );
	}

	public function AddLocalizedName( valueLocKey : CName )
	{
		Internal_AddLocalizedName( valueLocKey );
	}

	public function AddLocalizedName( key : String, valueLocKey : CName )
	{
		Internal_AddLocalizedName( valueLocKey, key );
	}

	public function UpdateLocalizedName( index : Int32, valueLocKey : CName )
	{
		Internal_UpdateLocalizedName( index, valueLocKey );
	}

	public function UpdateLocalizedName( key : String, valueLocKey : CName )
	{
		Internal_UpdateLocalizedNameKey( key, valueLocKey );
	}

	public function AddNumber( value : Int32 )
	{
		Internal_AddInteger( value );
	}

	public function AddNumber( key : String, value : Int32 )
	{
		Internal_AddInteger( value, key );
	}

	public function UpdateNumber( index : Int32, value : Int32 )
	{
		Internal_UpdateInteger( index, value );
	}

	public function UpdateNumber( key : String, value : Int32 )
	{
		Internal_UpdateIntegerKey( key, value );
	}

	public function AddNumber( value : Float )
	{
		Internal_AddFloat( value );
	}

	public function AddNumber( key : String, value : Float )
	{
		Internal_AddFloat( value, key );
	}

	public function UpdateNumber( index : Int32, value : Float )
	{
		Internal_UpdateFloat( index, value );
	}

	public function UpdateNumber( key : String, value : Float )
	{
		Internal_UpdateFloatKey( key, value );
	}

	public function AddMeasurement( value : Float, valueUnit : EMeasurementUnit )
	{
		Internal_AddMeasurement( value, valueUnit );
	}

	public function AddMeasurement( key : String, value : Float, valueUnit : EMeasurementUnit )
	{
		Internal_AddMeasurement( value, valueUnit, key );
	}

	public function UpdateMeasurement( index : Int32, value : Float, valueUnit : EMeasurementUnit )
	{
		Internal_UpdateMeasurement( index, value, valueUnit );
	}

	public function UpdateMeasurement( key : String, value : Float, valueUnit : EMeasurementUnit )
	{
		Internal_UpdateMeasurementKey( key, value, valueUnit );
	}

	public function AddTime( valueSeconds : Int32 )
	{
		Internal_AddTime( valueSeconds );
	}

	public function AddTime( value : GameTime )
	{
		Internal_AddTime( GameTime.Seconds( value ) );
	}

	public function AddTime( key : String, valueSeconds : Int32 )
	{
		Internal_AddTime( valueSeconds, key );
	}

	public function AddTime( key : String, value : GameTime )
	{
		Internal_AddTime( GameTime.GetSeconds( value ), key );
	}

	public function UpdateTime( index : Int32, valueSeconds : Int32 )
	{
		Internal_UpdateTime( index, valueSeconds );
	}

	public function UpdateTime( index : Int32, value : GameTime )
	{
		Internal_UpdateTime( index, GameTime.GetSeconds( value ) );
	}

	public function UpdateTime( key : String, valueSeconds : Int32 )
	{
		Internal_UpdateTimeKey( key, valueSeconds );
	}

	public function UpdateTime( key : String, value : GameTime )
	{
		Internal_UpdateTimeKey( key, GameTime.GetSeconds( value ) );
	}

	public function AddNCGameTime( value : GameTime )
	{
		Internal_AddNCGameTime( GameTime.Seconds( value ) );
	}

	public function AddNCGameTime( key : String, value : GameTime )
	{
		Internal_AddNCGameTime( GameTime.GetSeconds( value ), key );
	}

	public function AddCurrentDate()
	{
		Internal_AddCurrentDate();
	}

	public function AddCurrentDate( key : String )
	{
		Internal_AddCurrentDate( key );
	}

	public function UpdateCurrentDate( index : Int32 )
	{
		Internal_UpdateCurrentDate( index );
	}

	public function UpdateCurrentDate( key : String )
	{
		Internal_UpdateCurrentDateKey( key );
	}

	public function SetAsyncFormat( value : Bool )
	{
		Internal_SetAsyncFormat( value );
	}

	private import function Internal_AddString( value : String, optional key : String );
	private import function Internal_UpdateString( index : Int32, value : String );
	private import function Internal_UpdateStringKey( key : String, value : String );
	private import function Internal_AddLocalizedString( valueLocKey : String, optional key : String );
	private import function Internal_UpdateLocalizedString( index : Int32, valueLocKey : String );
	private import function Internal_UpdateLocalizedStringKey( key : String, valueLocKey : String );
	private import function Internal_AddLocalizedName( valueLocKey : CName, optional key : String );
	private import function Internal_UpdateLocalizedName( index : Int32, valueLocKey : CName );
	private import function Internal_UpdateLocalizedNameKey( key : String, valueLocKey : CName );
	private import function Internal_AddInteger( value : Int32, optional key : String );
	private import function Internal_UpdateInteger( index : Int32, value : Int32 );
	private import function Internal_UpdateIntegerKey( key : String, value : Int32 );
	private import function Internal_AddFloat( value : Float, optional key : String );
	private import function Internal_UpdateFloat( index : Int32, value : Float );
	private import function Internal_UpdateFloatKey( key : String, value : Float );
	private import function Internal_AddMeasurement( value : Float, valueUnit : EMeasurementUnit, optional key : String );
	private import function Internal_UpdateMeasurement( index : Int32, value : Float, valueUnit : EMeasurementUnit );
	private import function Internal_UpdateMeasurementKey( key : String, value : Float, valueUnit : EMeasurementUnit );
	private import function Internal_AddTime( valueSeconds : Int32, optional key : String );
	private import function Internal_UpdateTime( index : Int32, valueSeconds : Int32 );
	private import function Internal_UpdateTimeKey( key : String, valueSeconds : Int32 );
	private import function Internal_AddNCGameTime( valueSeconds : Int32, optional key : String );
	private import function Internal_AddCurrentDate( optional key : String );
	private import function Internal_UpdateCurrentDate( index : Int32 );
	private import function Internal_UpdateCurrentDateKey( key : String );
	private import function Internal_SetAsyncFormat( value : Bool );
}

