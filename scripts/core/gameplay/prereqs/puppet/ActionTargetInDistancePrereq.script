class ActionTargetInDistancePrereq extends IScriptablePrereq
{
	var m_targetRecord : weak< AIActionTarget_Record >;
	var m_distance : Float;
	var m_invert : Bool;

	protected export override function Initialize( recordID : TweakDBID )
	{
		var prereqRecord : ActionTargetInDistancePrereq_Record;
		prereqRecord = TweakDBInterface.GetActionTargetInDistancePrereqRecord( recordID );
		m_targetRecord = prereqRecord.Target();
		m_distance = prereqRecord.Distance();
		m_invert = prereqRecord.Invert();
	}

	protected const override function OnApplied( state : PrereqState, game : GameInstance, context : IScriptable )
	{
		state.OnChanged( IsFulfilled( game, context ) );
	}

	public export const override function IsFulfilled( game : GameInstance, context : IScriptable ) : Bool
	{
		var targetObject : weak< GameObject >;
		var owner : weak< ScriptedPuppet >;
		var ownerContext : ScriptExecutionContext;
		var distSqr : Float;
		var succ : Bool;
		owner = ( ( weak< weak< ScriptedPuppet > > )( context ) );
		if( !( AIHumanComponent.GetScriptContext( owner, ownerContext ) ) )
		{
			LogAIError( "Owner must have AIHumanComponent" );
			return ( ( m_invert ) ? ( true ) : ( false ) );
		}
		if( !( AIActionTarget.GetObject( ownerContext, m_targetRecord, targetObject ) ) )
		{
			return ( ( m_invert ) ? ( true ) : ( false ) );
		}
		if( m_distance < 0.0 )
		{
			return ( ( m_invert ) ? ( true ) : ( false ) );
		}
		distSqr = Vector4.DistanceSquared( owner.GetWorldPosition(), targetObject.GetWorldPosition() );
		succ = distSqr < ( m_distance * m_distance );
		return ( ( m_invert ) ? ( !( succ ) ) : ( succ ) );
	}

}

