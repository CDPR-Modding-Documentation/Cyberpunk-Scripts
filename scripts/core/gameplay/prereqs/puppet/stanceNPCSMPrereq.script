class StanceNPCStatePrereqState extends NPCStatePrereqState
{
}

class StanceNPCStatePrereq extends NPCStatePrereq
{
	var m_valueToListen : gamedataNPCStanceState;

	protected export const override function OnRegister( state : PrereqState, game : GameInstance, context : IScriptable ) : Bool
	{
		var bb : IBlackboard;
		var castedState : StanceNPCStatePrereqState;
		bb = ( ( ScriptedPuppet )( context ) ).GetPuppetStateBlackboard();
		castedState = ( ( StanceNPCStatePrereqState )( state ) );
		castedState.m_owner = ( ( GameObject )( context ) );
		castedState.m_prevValue = bb.GetInt( GetAllBlackboardDefs().PuppetState.Stance );
		castedState.m_listenerInt = bb.RegisterListenerInt( GetAllBlackboardDefs().PuppetState.Stance, castedState, 'OnStateUpdate' );
		return false;
	}

	protected export const override function OnUnregister( state : PrereqState, game : GameInstance, context : IScriptable )
	{
		var castedState : StanceNPCStatePrereqState;
		castedState = ( ( StanceNPCStatePrereqState )( state ) );
		( ( ScriptedPuppet )( context ) ).GetPuppetStateBlackboard().UnregisterListenerInt( GetAllBlackboardDefs().PuppetState.Stance, castedState.m_listenerInt );
	}

	public export const override function IsFulfilled( game : GameInstance, context : IScriptable ) : Bool
	{
		var owner : ScriptedPuppet;
		var bb : IBlackboard;
		var currentState : Int32;
		owner = ( ( ScriptedPuppet )( context ) );
		bb = owner.GetPuppetStateBlackboard();
		currentState = bb.GetInt( GetAllBlackboardDefs().PuppetState.Stance );
		return Evaluate( owner, currentState, currentState );
	}

	protected export override function Initialize( recordID : TweakDBID )
	{
		super.Initialize( recordID );
		m_valueToListen = ( ( gamedataNPCStanceState )( ( ( Int32 )( EnumValueFromString( "gamedataNPCStanceState", GetStateName( recordID ) ) ) ) ) );
	}

	protected const override function GetStateToCheck() : Int32
	{
		return ( ( Int32 )( m_valueToListen ) );
	}

}

class CurrentStanceNPCStatePrereq extends IScriptablePrereq
{
	var m_valueToCheck : gamedataNPCStanceState;
	var m_invert : Bool;

	protected override function Initialize( record : TweakDBID )
	{
		var stateName : String;
		stateName = TweakDBInterface.GetString( record + T".stateName", "" );
		m_valueToCheck = ( ( gamedataNPCStanceState )( ( ( Int32 )( EnumValueFromString( "gamedataNPCStanceState", stateName ) ) ) ) );
		m_invert = TweakDBInterface.GetBool( record + T".invert", false );
	}

	public const override function IsFulfilled( game : GameInstance, context : IScriptable ) : Bool
	{
		var bb : IBlackboard;
		var puppet : weak< ScriptedPuppet >;
		var currentPuppetState : gamedataNPCStanceState;
		puppet = ( ( ScriptedPuppet )( context ) );
		if( !( puppet ) )
		{
			return false;
		}
		bb = puppet.GetPuppetStateBlackboard();
		currentPuppetState = ( ( gamedataNPCStanceState )( ( ( Int32 )( bb.GetInt( GetAllBlackboardDefs().PuppetState.Stance ) ) ) ) );
		if( currentPuppetState != m_valueToCheck )
		{
			return ( ( m_invert ) ? ( true ) : ( false ) );
		}
		return ( ( m_invert ) ? ( false ) : ( true ) );
	}

}

