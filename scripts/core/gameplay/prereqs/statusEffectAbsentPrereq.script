class StatusEffectAbsentPrereqState extends StatusEffectPrereqState
{

	public override function StatusEffectUpdate( statusEffect : weak< StatusEffect_Record >, isApplied : Bool )
	{
		OnChanged( !( isApplied ) );
	}

}

class StatusEffectAbsentPrereq extends StatusEffectPrereq
{

	protected export const override function OnRegister( state : PrereqState, game : GameInstance, context : IScriptable ) : Bool
	{
		super.OnRegister( state, game, context );
		return false;
	}

	protected export override function Initialize( recordID : TweakDBID )
	{
		var record : StatusEffectPrereq_Record;
		record = TweakDBInterface.GetStatusEffectPrereqRecord( recordID );
		m_statusEffectRecordID = record.StatusEffect().GetID();
		m_checkType = record.CheckType().Type();
		m_invert = record.Invert();
		m_tag = TweakDBInterface.GetCName( recordID + T".tagToCheck", '' );
		m_fireAndForget = TweakDBInterface.GetBool( recordID + T".fireAndForget", false );
	}

	public export const override function IsFulfilled( game : GameInstance, context : IScriptable ) : Bool
	{
		var owner : GameObject;
		var statusEffectSystem : StatusEffectSystem;
		var result : Bool;
		statusEffectSystem = GameInstance.GetStatusEffectSystem( game );
		owner = ( ( GameObject )( context ) );
		switch( m_checkType )
		{
			case gamedataCheckType.Tag:
				result = statusEffectSystem.HasStatusEffectWithTag( owner.GetEntityID(), m_tag );
			break;
			case gamedataCheckType.Type:
				result = StatusEffectSystem.ObjectHasStatusEffectOfType( owner, TweakDBInterface.GetStatusEffectRecord( m_statusEffectRecordID ).StatusEffectType().Type() );
			break;
			case gamedataCheckType.Record:
				result = statusEffectSystem.HasStatusEffect( owner.GetEntityID(), m_statusEffectRecordID );
			break;
			default:
				result = statusEffectSystem.HasStatusEffect( owner.GetEntityID(), m_statusEffectRecordID );
			break;
		}
		if( m_invert )
		{
			return result;
		}
		return !( result );
	}

	protected export const override function OnApplied( state : PrereqState, game : GameInstance, context : IScriptable )
	{
		var result : Bool;
		result = IsFulfilled( game, context );
		state.OnChanged( result );
	}

}

