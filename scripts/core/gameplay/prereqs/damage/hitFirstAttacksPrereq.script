class HitFirstAttacksPrereqState extends PrereqState
{
	var m_listenerWeaponInt : CallbackHandle;
	var m_listenerMeleeInt : CallbackHandle;
	var m_listenerActiveWeaponVariant : CallbackHandle;
	var m_weaponObj : weak< WeaponObject >;
	var m_owner : weak< GameObject >;
	var m_howManyAttacks : Int32;
	var m_remainingAttacks : Int32;

	public function CheckIfPlayerWeaponChanged()
	{
		var weaponObj : weak< WeaponObject >;
		weaponObj = ScriptedPuppet.GetActiveWeapon( m_owner );
		if( weaponObj != m_weaponObj )
		{
			m_weaponObj = weaponObj;
			m_remainingAttacks = m_howManyAttacks;
		}
	}

	protected event OnMeleeStateUpdate( value : Int32 )
	{
		var checkPassed : Bool;
		const var prereq : HitFirstAttacksPrereq;
		prereq = ( ( HitFirstAttacksPrereq )( GetPrereq() ) );
		CheckIfPlayerWeaponChanged();
		if( gamePSMMelee.Attack == ( ( gamePSMMelee )( value ) ) )
		{
			m_remainingAttacks -= 1;
		}
		checkPassed = prereq.Evaluate( m_owner, m_remainingAttacks );
		OnChanged( checkPassed );
	}

	protected event OnWeaponStateUpdate( value : Int32 )
	{
		var checkPassed : Bool;
		const var prereq : HitFirstAttacksPrereq;
		prereq = ( ( HitFirstAttacksPrereq )( GetPrereq() ) );
		CheckIfPlayerWeaponChanged();
		if( gamePSMRangedWeaponStates.Shoot == ( ( gamePSMRangedWeaponStates )( value ) ) )
		{
			m_remainingAttacks -= 1;
		}
		checkPassed = prereq.Evaluate( m_owner, m_remainingAttacks );
		OnChanged( checkPassed );
	}

	protected event OnInventoryChangeStateUpdate( value : Variant )
	{
		var checkPassed : Bool;
		const var prereq : HitFirstAttacksPrereq;
		prereq = ( ( HitFirstAttacksPrereq )( GetPrereq() ) );
		CheckIfPlayerWeaponChanged();
		checkPassed = prereq.Evaluate( m_owner, m_remainingAttacks );
		OnChanged( checkPassed );
	}

}

class HitFirstAttacksPrereq extends IScriptablePrereq
{
	var m_howManyAttacks : Int32;

	protected export override function Initialize( recordID : TweakDBID )
	{
		m_howManyAttacks = TweakDBInterface.GetInt( recordID + T".howManyAttacks", 0 );
	}

	public const function Evaluate( owner : GameObject, remainingAttacks : Int32 ) : Bool
	{
		if( remainingAttacks < 0 )
		{
			return false;
		}
		return true;
	}

	protected const override function OnRegister( state : PrereqState, game : GameInstance, context : IScriptable ) : Bool
	{
		var bb : weak< IBlackboard >;
		var bb2 : weak< IBlackboard >;
		var castedState : HitFirstAttacksPrereqState;
		var player : weak< PlayerPuppet >;
		castedState = ( ( HitFirstAttacksPrereqState )( state ) );
		castedState.m_howManyAttacks = m_howManyAttacks;
		castedState.m_owner = ( ( GameObject )( context ) );
		player = ( ( PlayerPuppet )( context ) );
		if( player )
		{
			bb = GameInstance.GetBlackboardSystem( player.GetGame() ).GetLocalInstanced( player.GetEntityID(), GetAllBlackboardDefs().PlayerStateMachine );
			castedState.m_listenerWeaponInt = bb.RegisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Weapon, castedState, 'OnWeaponStateUpdate' );
			castedState.m_listenerMeleeInt = bb.RegisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Melee, castedState, 'OnMeleeStateUpdate' );
			bb2 = GameInstance.GetBlackboardSystem( castedState.m_owner.GetGame() ).Get( GetAllBlackboardDefs().UI_ActiveWeaponData );
			castedState.m_listenerActiveWeaponVariant = bb2.RegisterListenerVariant( GetAllBlackboardDefs().UI_ActiveWeaponData.WeaponRecordID, castedState, 'OnInventoryChangeStateUpdate' );
		}
		return false;
	}

	protected const override function OnUnregister( state : PrereqState, game : GameInstance, context : IScriptable )
	{
		var bb : weak< IBlackboard >;
		var bb2 : weak< IBlackboard >;
		var castedState : HitFirstAttacksPrereqState;
		var player : weak< PlayerPuppet >;
		player = ( ( PlayerPuppet )( context ) );
		if( player )
		{
			bb = GameInstance.GetBlackboardSystem( player.GetGame() ).GetLocalInstanced( player.GetEntityID(), GetAllBlackboardDefs().PlayerStateMachine );
			castedState = ( ( HitFirstAttacksPrereqState )( state ) );
			bb.UnregisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Weapon, castedState.m_listenerWeaponInt );
			bb.UnregisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Melee, castedState.m_listenerMeleeInt );
			bb2 = GameInstance.GetBlackboardSystem( castedState.m_owner.GetGame() ).Get( GetAllBlackboardDefs().UI_ActiveWeaponData );
			bb2.UnregisterListenerVariant( GetAllBlackboardDefs().UI_ActiveWeaponData.WeaponRecordID, castedState.m_listenerActiveWeaponVariant );
		}
	}

	protected const override function OnApplied( state : PrereqState, game : GameInstance, context : IScriptable )
	{
		var player : weak< PlayerPuppet >;
		var castedState : HitFirstAttacksPrereqState;
		player = ( ( PlayerPuppet )( context ) );
		if( player )
		{
			castedState.OnChanged( true );
		}
	}

}

