class BaseStatPoolPrereqListener extends CustomValueStatPoolsListener
{

	public virtual function RegisterState( state : PrereqState ) {}
}

class StatPoolPrereqState extends PrereqState
{
	var m_statPoolListener : BaseStatPoolPrereqListener;
	var m_inventoryCallback : StatPoolPrereqInventoryScriptCallback;
	var m_inventoryListener : InventoryScriptListener;
	var m_statpoolWasMissing : Bool;
	var m_statsObjID : StatsObjectID;

	public virtual function StatPoolUpdate( oldValue : Float, newValue : Float )
	{
		var checkPassed : Bool;
		const var prereq : StatPoolPrereq;
		prereq = ( ( StatPoolPrereq )( GetPrereq() ) );
		checkPassed = ProcessCompare( prereq.m_comparisonType, newValue, prereq.m_valueToCheck );
		OnChanged( checkPassed );
	}

	public virtual function UpdateItemID( statsObjID : StatsObjectID )
	{
		var prereq : StatPoolPrereq;
		var owner : GameObject;
		var checkPassed : Bool;
		var currentValue : Float;
		owner = ( ( GameObject )( GetContext() ) );
		prereq = ( ( StatPoolPrereq )( GetPrereq() ) );
		if( !( StatsObjectID.IsDefined( m_statsObjID ) ) )
		{
			m_statsObjID = statsObjID;
			if( GameInstance.GetStatPoolsSystem( owner.GetGame() ).IsStatPoolAdded( m_statsObjID, prereq.m_statPoolType ) )
			{
				currentValue = GameInstance.GetStatPoolsSystem( owner.GetGame() ).GetStatPoolValue( m_statsObjID, prereq.m_statPoolType, prereq.m_comparePercentage );
				checkPassed = ProcessCompare( prereq.m_comparisonType, currentValue, prereq.m_valueToCheck );
				OnChanged( checkPassed );
			}
			RegisterStatPoolListener( owner.GetGame(), prereq.m_statPoolType, prereq.m_valueToCheck );
		}
	}

	public virtual function RegisterInventoryListener( game : GameInstance, owner : GameObject, itemTDBID : TweakDBID )
	{
		m_inventoryCallback = new StatPoolPrereqInventoryScriptCallback;
		m_inventoryCallback.Init( itemTDBID, this );
		m_inventoryListener = GameInstance.GetTransactionSystem( game ).RegisterInventoryListener( owner, m_inventoryCallback );
	}

	public virtual function UnregisterInventoryListener( game : GameInstance, owner : GameObject )
	{
		if( m_inventoryListener )
		{
			GameInstance.GetTransactionSystem( game ).UnregisterInventoryListener( owner, m_inventoryListener );
		}
		m_inventoryCallback = NULL;
		m_statPoolListener = NULL;
	}

	public virtual function RegisterStatPoolListener( game : GameInstance, statPoolType : gamedataStatPoolType, valueToCheck : Float )
	{
		if( StatsObjectID.IsDefined( m_statsObjID ) )
		{
			m_statPoolListener = new StatPoolPrereqListener;
			m_statPoolListener.RegisterState( this );
			m_statPoolListener.SetValue( valueToCheck );
			GameInstance.GetStatPoolsSystem( game ).RequestRegisteringListener( m_statsObjID, statPoolType, m_statPoolListener );
		}
	}

	public virtual function UnregisterStatPoolListener( game : GameInstance, statPoolType : gamedataStatPoolType )
	{
		if( m_statPoolListener )
		{
			GameInstance.GetStatPoolsSystem( game ).RequestUnregisteringListener( m_statsObjID, statPoolType, m_statPoolListener );
		}
		m_statPoolListener = NULL;
	}

}

class StatPoolPrereq extends IScriptablePrereq
{
	var m_statPoolType : gamedataStatPoolType;
	var m_valueToCheck : Float;
	var m_comparisonType : EComparisonType;
	var m_skipOnApply : Bool;
	var m_comparePercentage : Bool;
	var m_itemTDBID : TweakDBID;
	var m_checkItem : Bool;

	protected const function GetStatsObjectID( owner : GameObject ) : StatsObjectID
	{
		var itemData : weak< gameItemData >;
		if( m_checkItem )
		{
			if( TDBID.IsValid( m_itemTDBID ) )
			{
				itemData = GameInstance.GetTransactionSystem( owner.GetGame() ).GetItemDataByTDBID( owner, m_itemTDBID );
				return ( ( StatsObjectID )( itemData.GetID() ) );
			}
			return StatsObjectID();
		}
		else
		{
			return owner.GetEntityID();
		}
	}

	protected export const override function OnRegister( state : PrereqState, game : GameInstance, context : IScriptable ) : Bool
	{
		var owner : GameObject;
		var castedState : StatPoolPrereqState;
		owner = ( ( GameObject )( context ) );
		castedState = ( ( StatPoolPrereqState )( state ) );
		castedState.m_statsObjID = GetStatsObjectID( owner );
		if( m_checkItem && !( StatsObjectID.IsDefined( castedState.m_statsObjID ) ) )
		{
			castedState.RegisterInventoryListener( game, owner, m_itemTDBID );
		}
		else
		{
			castedState.RegisterStatPoolListener( game, m_statPoolType, m_valueToCheck );
		}
		return false;
	}

	protected export const override function OnUnregister( state : PrereqState, game : GameInstance, context : IScriptable )
	{
		var castedState : StatPoolPrereqState;
		castedState = ( ( StatPoolPrereqState )( state ) );
		castedState.UnregisterStatPoolListener( game, m_statPoolType );
		castedState.UnregisterInventoryListener( game, ( ( GameObject )( context ) ) );
	}

	protected export override function Initialize( recordID : TweakDBID )
	{
		var record : StatPoolPrereq_Record;
		var itemObjectToCheckRec : weak< ItemObjectToCheck_Record >;
		record = TweakDBInterface.GetStatPoolPrereqRecord( recordID );
		m_statPoolType = ( ( gamedataStatPoolType )( ( ( Int32 )( EnumValueFromName( 'gamedataStatPoolType', record.StatPoolType() ) ) ) ) );
		m_valueToCheck = record.ValueToCheck();
		m_comparisonType = ( ( EComparisonType )( ( ( Int32 )( EnumValueFromName( 'EComparisonType', record.ComparisonType() ) ) ) ) );
		m_skipOnApply = TweakDBInterface.GetBool( recordID + T".skipOnApply", false );
		m_comparePercentage = TweakDBInterface.GetBool( recordID + T".comparePercentage", true );
		itemObjectToCheckRec = ( ( ItemObjectToCheck_Record )( record.ObjectToCheck() ) );
		if( itemObjectToCheckRec )
		{
			m_checkItem = true;
			m_itemTDBID = itemObjectToCheckRec.Item().GetID();
		}
	}

	public const override function IsFulfilled( game : GameInstance, context : IScriptable ) : Bool
	{
		return CompareValues( GetStatsObjectID( ( ( GameObject )( context ) ) ), context );
	}

	protected export const override function OnApplied( state : PrereqState, game : GameInstance, context : IScriptable )
	{
		var result : Bool;
		var castedState : StatPoolPrereqState;
		if( m_skipOnApply )
		{
			return;
		}
		castedState = ( ( StatPoolPrereqState )( state ) );
		if( GameInstance.GetStatPoolsSystem( game ).IsStatPoolAdded( castedState.m_statsObjID, m_statPoolType ) )
		{
			result = CompareValues( castedState.m_statsObjID, context );
			castedState.OnChanged( result );
		}
		else
		{
			castedState.m_statpoolWasMissing = true;
		}
	}

	private const function CompareValues( statsObjID : StatsObjectID, context : IScriptable ) : Bool
	{
		var currentValue : Float;
		var owner : weak< GameObject >;
		owner = ( ( GameObject )( context ) );
		if( owner )
		{
			currentValue = GameInstance.GetStatPoolsSystem( owner.GetGame() ).GetStatPoolValue( statsObjID, m_statPoolType, m_comparePercentage );
			return ProcessCompare( m_comparisonType, currentValue, m_valueToCheck );
		}
		return false;
	}

}

class StatPoolPrereqInventoryScriptCallback extends InventoryScriptCallback
{
	protected var m_itemTDBID : TweakDBID;
	protected var m_state : weak< StatPoolPrereqState >;

	public function Init( itemTDBID : TweakDBID, state : StatPoolPrereqState )
	{
		m_itemTDBID = itemTDBID;
		m_state = state;
	}

	public override function OnItemAdded( item : ItemID, itemData : weak< gameItemData >, flaggedAsSilent : Bool )
	{
		var itemTDBID : TweakDBID;
		itemTDBID = ItemID.GetTDBID( item );
		if( itemTDBID == m_itemTDBID )
		{
			m_state.UpdateItemID( ( ( StatsObjectID )( item ) ) );
		}
	}

}

class StatPoolPrereqListener extends BaseStatPoolPrereqListener
{
	protected var m_state : weak< StatPoolPrereqState >;

	protected event OnStatPoolValueReached( oldValue : Float, newValue : Float, percToPoints : Float )
	{
		m_state.StatPoolUpdate( oldValue, newValue );
	}

	public override function RegisterState( state : PrereqState )
	{
		m_state = ( ( StatPoolPrereqState )( state ) );
	}

	public export override function OnStatPoolValueChanged( oldValue : Float, newValue : Float, percToPoints : Float )
	{
		if( m_state.m_statpoolWasMissing )
		{
			m_state.m_statpoolWasMissing = false;
			m_state.StatPoolUpdate( oldValue, newValue );
		}
	}

}

