class TriggerAttackOnTargetEffect extends Effector
{
	var m_isRandom : Bool;
	var m_applicationChance : Float;
	var m_owner : weak< GameObject >;
	var m_attackTDBID : TweakDBID;
	var m_attack : Attack_GameEffect;

	protected override function Initialize( record : TweakDBID, game : GameInstance, parentRecord : TweakDBID )
	{
		var effectorRecord : TriggerAttackEffector_Record;
		m_isRandom = TweakDBInterface.GetBool( record + T".isRandom", false );
		m_applicationChance = TweakDBInterface.GetFloat( record + T".applicationChance", 0.0 );
		effectorRecord = TweakDBInterface.GetTriggerAttackEffectorRecord( record );
		m_attackTDBID = effectorRecord.AttackRecord().GetID();
	}

	protected override function ActionOn( owner : GameObject )
	{
		var i : Int32;
		var target : weak< GameObject >;
		var tempArr : array< String >;
		var flag : SHitFlag;
		var hitFlags : array< SHitFlag >;
		tempArr = TweakDBInterface.GetAttackRecord( m_attackTDBID ).HitFlags();
		for( i = 0; i < tempArr.Size(); i += 1 )
		{
			flag.flag = ( ( hitFlag )( ( ( Int32 )( EnumValueFromString( "hitFlag", tempArr[ i ] ) ) ) ) );
			flag.source = 'Attack';
			hitFlags.PushBack( flag );
		}
		target = GameInstance.GetTargetingSystem( owner.GetGame() ).GetLookAtObject( owner, true );
		if( !( target ) )
		{
			return;
		}
		m_attack = RPGManager.PrepareGameEffectAttack( owner.GetGame(), owner, owner, m_attackTDBID, target.GetWorldPosition(), hitFlags );
		Uninitialize( owner.GetGame() );
	}

	protected override function RepeatedAction( owner : GameObject )
	{
		var rand : Float;
		ActionOn( owner );
		if( m_isRandom )
		{
			rand = RandF();
			if( rand <= m_applicationChance )
			{
				m_attack.StartAttack();
			}
		}
	}

}

