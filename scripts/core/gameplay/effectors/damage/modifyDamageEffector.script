class ModifyDamageEffector extends ModifyAttackEffector
{
	var m_operationType : EMathOperator;
	var m_value : Float;

	protected export override function Initialize( record : TweakDBID, game : GameInstance, parentRecord : TweakDBID )
	{
		var str : String;
		str = TweakDBInterface.GetString( record + T".operationType", "" );
		m_operationType = ( ( EMathOperator )( ( ( Int32 )( EnumValueFromString( "EMathOperator", str ) ) ) ) );
		m_value = TweakDBInterface.GetFloat( record + T".value", 0.0 );
	}

	protected export override function Uninitialize( game : GameInstance ) {}

	protected export override function RepeatedAction( owner : GameObject )
	{
		var hitEvent : gameHitEvent;
		hitEvent = GetHitEvent();
		if( !( hitEvent ) )
		{
			return;
		}
		ModifyDamage( hitEvent, m_operationType, m_value );
	}

	protected function ModifyDamage( hitEvent : gameHitEvent, operationType : EMathOperator, value : Float )
	{
		switch( operationType )
		{
			case EMathOperator.Add:
				hitEvent.attackComputed.AddAttackValue( value );
			break;
			case EMathOperator.Subtract:
				hitEvent.attackComputed.AddAttackValue( -( value ) );
			break;
			case EMathOperator.Multiply:
				hitEvent.attackComputed.MultAttackValue( value );
			break;
			case EMathOperator.Divide:
				hitEvent.attackComputed.MultAttackValue( 1.0 / value );
			break;
			default:
				return;
		}
	}

}

