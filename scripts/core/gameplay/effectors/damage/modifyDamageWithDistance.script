class ModifyDamageWithDistance extends ModifyDamageEffector
{
	var m_increaseWithDistance : Bool;
	var m_percentMult : Float;
	var m_unitThreshold : Float;

	protected override function Initialize( record : TweakDBID, game : GameInstance, parentRecord : TweakDBID )
	{
		super.Initialize( record, game, parentRecord );
		m_percentMult = TweakDBInterface.GetFloat( record + T".percentMult", 0.0 );
		m_unitThreshold = TweakDBInterface.GetFloat( record + T".unitThreshold", 0.0 );
		m_increaseWithDistance = TweakDBInterface.GetBool( record + T".increaseWithDistance", false );
	}

	protected override function Uninitialize( game : GameInstance ) {}

	protected override function RepeatedAction( owner : GameObject )
	{
		var hitEvent : gameHitEvent;
		var coveredDistance : Float;
		hitEvent = GetHitEvent();
		if( !( hitEvent ) )
		{
			return;
		}
		if( ( m_unitThreshold != 0.0 ) && ( m_percentMult != 0.0 ) )
		{
			coveredDistance = MinF( Vector4.Distance( hitEvent.attackData.GetAttackPosition(), hitEvent.target.GetWorldPosition() ), m_unitThreshold );
			if( m_increaseWithDistance )
			{
				m_value = ( coveredDistance / m_unitThreshold ) * m_percentMult;
			}
			else
			{
				m_value = ( 1.0 - ( coveredDistance / m_unitThreshold ) ) * m_percentMult;
			}
			ModifyDamage( hitEvent, m_operationType, 1.0 + m_value );
		}
	}

}

