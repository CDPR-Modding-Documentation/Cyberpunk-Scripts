class ModifyStatPoolValueEffector extends Effector
{
	var m_statPoolUpdates : array< weak< StatPoolUpdate_Record > >;
	var m_usePercent : Bool;
	var m_applicationTarget : CName;
	var m_setValue : Bool;

	protected export override function Initialize( record : TweakDBID, game : GameInstance, parentRecord : TweakDBID )
	{
		TweakDBInterface.GetModifyStatPoolValueEffectorRecord( record ).StatPoolUpdates( m_statPoolUpdates );
		m_usePercent = TweakDBInterface.GetBool( record + T".usePercent", false );
		m_applicationTarget = TweakDBInterface.GetCName( record + T".applicationTarget", '' );
		m_setValue = TweakDBInterface.GetBool( record + T".setValue", false );
	}

	protected export override function ActionOn( owner : GameObject )
	{
		ProcessEffector( owner );
	}

	protected export override function RepeatedAction( owner : GameObject )
	{
		ProcessEffector( owner );
	}

	private function ProcessEffector( owner : GameObject )
	{
		var poolSys : StatPoolsSystem;
		var statPoolType : gamedataStatPoolType;
		var statPoolValue : Float;
		var statModifiers : array< weak< StatModifier_Record > >;
		var i : Int32;
		var applicationTargetID : EntityID;
		if( !( GetApplicationTarget( owner, m_applicationTarget, applicationTargetID ) ) )
		{
			return;
		}
		poolSys = GameInstance.GetStatPoolsSystem( owner.GetGame() );
		for( i = 0; i < m_statPoolUpdates.Size(); i += 1 )
		{
			statPoolType = m_statPoolUpdates[ i ].StatPoolType().StatPoolType();
			if( m_statPoolUpdates[ i ].GetStatModifiersCount() > 0 )
			{
				statModifiers.Clear();
				m_statPoolUpdates[ i ].StatModifiers( statModifiers );
				statPoolValue = GameInstance.GetStatsSystem( owner.GetGame() ).CalculateModifierListValue( applicationTargetID, statModifiers );
			}
			else
			{
				statPoolValue = m_statPoolUpdates[ i ].StatPoolValue();
			}
			if( m_setValue )
			{
				poolSys.RequestSettingStatPoolValue( applicationTargetID, statPoolType, statPoolValue, owner, m_usePercent );
			}
			else
			{
				poolSys.RequestChangingStatPoolValue( applicationTargetID, statPoolType, statPoolValue, owner, false, m_usePercent );
			}
		}
	}

}

