class ConvertDamageToStatPoolEffector extends HitEventEffector
{
	private var m_statPoolType : gamedataStatPoolType;
	private var m_operationType : EMathOperator;
	private var m_value : Float;

	protected export override function Initialize( recordID : TweakDBID, game : GameInstance, parentRecord : TweakDBID )
	{
		var record : ConvertDamageToStatPoolEffector_Record;
		record = TweakDBInterface.GetConvertDamageToStatPoolEffectorRecord( recordID );
		m_statPoolType = record.StatPoolType().StatPoolType();
		m_operationType = ( ( EMathOperator )( ( ( Int32 )( EnumValueFromName( 'EMathOperator', record.OpSymbol() ) ) ) ) );
		m_value = record.Value();
	}

	protected export override function ActionOn( owner : GameObject )
	{
		ProcessAction( owner );
	}

	protected export override function RepeatedAction( owner : GameObject )
	{
		ProcessAction( owner );
	}

	private function ProcessAction( owner : GameObject )
	{
		var statPoolsSystem : StatPoolsSystem;
		var hitEvent : gameHitEvent;
		var damageScaled : Float;
		var calculatedValue : Float;
		statPoolsSystem = GameInstance.GetStatPoolsSystem( owner.GetGame() );
		hitEvent = GetHitEvent();
		damageScaled = hitEvent.attackComputed.GetTotalAttackValue( gamedataStatPoolType.Health ) * m_value;
		calculatedValue = 0.0;
		switch( m_operationType )
		{
			case EMathOperator.Add:
				calculatedValue = statPoolsSystem.GetStatPoolValue( owner.GetEntityID(), m_statPoolType ) + damageScaled;
			break;
			case EMathOperator.Subtract:
				calculatedValue = statPoolsSystem.GetStatPoolValue( owner.GetEntityID(), m_statPoolType ) - damageScaled;
			break;
			case EMathOperator.Multiply:
				calculatedValue = statPoolsSystem.GetStatPoolValue( owner.GetEntityID(), m_statPoolType ) * damageScaled;
			break;
			case EMathOperator.Divide:
				calculatedValue = statPoolsSystem.GetStatPoolValue( owner.GetEntityID(), m_statPoolType ) / damageScaled;
			break;
			default:
				return;
		}
		statPoolsSystem.RequestSettingStatPoolValue( owner.GetEntityID(), m_statPoolType, calculatedValue, owner );
	}

}

