class StuckInEffector extends ContinuousEffector
{
	var m_maxEnemyDistance : Float;
	var m_enemyCount : Int32;
	var m_statusEffectID : TweakDBID;

	protected override function Initialize( record : TweakDBID, game : GameInstance, parentRecord : TweakDBID )
	{
		m_maxEnemyDistance = TweakDBInterface.GetFloat( record + T".maxEnemyDistance", 4.0 );
		m_statusEffectID = TDB.GetForeignKey( record + T".statusEffect" );
	}

	protected export override function ActionOn( owner : GameObject )
	{
		ProcessAction( owner );
	}

	protected export override function ActionOff( owner : GameObject )
	{
		GameInstance.GetStatusEffectSystem( owner.GetGame() ).RemoveStatusEffect( owner.GetEntityID(), m_statusEffectID, ( ( Uint32 )( m_enemyCount ) ) );
	}

	protected export override function ContinuousAction( owner : GameObject, instigator : GameObject )
	{
		ProcessAction( owner );
	}

	private function ProcessAction( owner : GameObject )
	{
		var enemySearchQuery : TargetSearchQuery;
		var enemyPartInfoArray : array< TS_TargetPartInfo >;
		var newEnemyCount : Int32;
		var stackDiff : Int32;
		enemySearchQuery.testedSet = TargetingSet.Complete;
		enemySearchQuery.searchFilter = TSF_And( TSF_All( ( TSFMV.Obj_Puppet | TSFMV.Att_Hostile ) | TSFMV.St_AliveAndActive ), TSF_Not( TSFMV.Obj_Player ) );
		enemySearchQuery.includeSecondaryTargets = false;
		enemySearchQuery.maxDistance = m_maxEnemyDistance;
		enemySearchQuery.filterObjectByDistance = true;
		GameInstance.GetTargetingSystem( owner.GetGame() ).GetTargetParts( owner, enemySearchQuery, enemyPartInfoArray );
		newEnemyCount = enemyPartInfoArray.Size();
		if( newEnemyCount == m_enemyCount )
		{
			return;
		}
		stackDiff = newEnemyCount - m_enemyCount;
		m_enemyCount = newEnemyCount;
		if( stackDiff > 0 )
		{
			GameInstance.GetStatusEffectSystem( owner.GetGame() ).ApplyStatusEffect( owner.GetEntityID(), m_statusEffectID, TDBID.None(), owner.GetEntityID(), ( ( Uint32 )( stackDiff ) ), Vector4.EmptyVector(), false );
		}
		else
		{
			GameInstance.GetStatusEffectSystem( owner.GetGame() ).RemoveStatusEffect( owner.GetEntityID(), m_statusEffectID, ( ( Uint32 )( Abs( stackDiff ) ) ) );
		}
	}

}

