class sampleTimeListener extends TimeDilationListener
{
	var myOwner : weak< sampleTimeDilatable >;

	protected event OnFinished( reason : CName )
	{
		myOwner.OnFinished( reason );
	}

	public function SetOwner( owner : sampleTimeDilatable )
	{
		Log( "owner set for minigame listener" );
		myOwner = owner;
	}

}

class sampleTimeDilatable extends TimeDilatable
{
	var listener : sampleTimeListener;

	protected event OnGameAttached()
	{
		if( !( listener ) )
		{
			listener = new sampleTimeListener;
			listener.SetOwner( this );
		}
	}

	protected event OnInteractionChoice( choice : InteractionChoiceEvent )
	{
		GameInstance.GetTimeSystem( GetGame() ).SetTimeDilation( 'ScriptsDebug', 0.2, 2.0, 'Linear', 'Log', listener );
		Log( "Check for existing" );
		Log( ( ( String )( GameInstance.GetTimeSystem( GetGame() ).IsTimeDilationActive( 'ScriptsDebug' ) ) ) );
		Log( "Check for not existing" );
		Log( ( ( String )( GameInstance.GetTimeSystem( GetGame() ).IsTimeDilationActive( 'NotExistingReason' ) ) ) );
		Log( "Check for any - no parameter passed" );
		Log( ( ( String )( GameInstance.GetTimeSystem( GetGame() ).IsTimeDilationActive() ) ) );
	}

	protected event OnTimeDilationFinished()
	{
		Log( "finished TIME DILATION" );
	}

	public function OnFinished( reason : CName )
	{
		Log( "TIME DILATION FINISHED" );
		if( reason == 'ScriptsDebug' )
		{
			Log( "reason was Scripts Debug" );
		}
	}

}

