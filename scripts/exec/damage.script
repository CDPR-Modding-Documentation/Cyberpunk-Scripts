exec function DamagePlayer( gameInstance : GameInstance, TEMP_dmg : String, dmgType : String, percentage : String )
{
	var dmgVal : Float;
	var attackComputed : gameAttackComputed;
	var type : gamedataDamageType;
	var attackData : AttackData;
	var hitEvent : gameHitEvent;
	var valuesLost : array< SDamageDealt >;
	dmgVal = StringToFloat( TEMP_dmg );
	type = ( ( gamedataDamageType )( ( ( Int32 )( EnumValueFromString( "gamedataDamageType", dmgType ) ) ) ) );
	attackComputed = new gameAttackComputed;
	attackComputed.SetAttackValue( dmgVal, type );
	attackData = new AttackData;
	attackData.SetAttackType( gamedataAttackType.Ranged );
	hitEvent = new gameHitEvent;
	hitEvent.attackData = attackData;
	hitEvent.attackComputed = attackComputed;
	StatPoolsManager.ApplyDamage( hitEvent, true, valuesLost );
}

exec function PrintHealth( gameInst : GameInstance )
{
	var player : GameObject;
	var val : Float;
	var valPerc : Float;
	var playerID : StatsObjectID;
	player = GetPlayer( gameInst );
	playerID = player.GetEntityID();
	valPerc = GameInstance.GetStatPoolsSystem( gameInst ).GetStatPoolValue( playerID, gamedataStatPoolType.Health );
	val = GameInstance.GetStatPoolsSystem( gameInst ).ToPoints( playerID, gamedataStatPoolType.Health, valPerc );
	Log( "StatPool: " + EnumValueToString( "gamedataStatPoolType", ( ( Int64 )( gamedataStatPoolType.Health ) ) ) );
	Log( "Stat %: " + FloatToString( valPerc ) );
	Log( "Stat value: " + FloatToString( val ) );
}

exec function ChangeStatPoolVal( inst : GameInstance, type : String, value : String, optional subtract : String, optional percentage : String )
{
	var player : GameObject;
	var statPoolSystem : StatPoolsSystem;
	var statVal : Float;
	var statType : gamedataStatPoolType;
	var factor : Float;
	var playerID : StatsObjectID;
	if( StringToBool( subtract ) )
	{
		factor = -1.0;
	}
	else
	{
		factor = 1.0;
	}
	player = GetPlayer( inst );
	playerID = player.GetEntityID();
	statVal = StringToFloat( value );
	statType = ( ( gamedataStatPoolType )( ( ( Int32 )( EnumValueFromString( "gamedataStatPoolType", type ) ) ) ) );
	statPoolSystem = GameInstance.GetStatPoolsSystem( inst );
	statPoolSystem.RequestChangingStatPoolValue( playerID, statType, statVal * factor, NULL, false, StringToBool( percentage ) );
}

exec function Heal( gi : GameInstance, optional valStr : String, optional isScalarStr : String )
{
	var val : Float;
	var isScalar : Bool;
	var playerID : StatsObjectID;
	var statPoolsSystem : StatPoolsSystem;
	playerID = GetPlayer( gi ).GetEntityID();
	statPoolsSystem = GameInstance.GetStatPoolsSystem( gi );
	val = StringToFloat( valStr );
	if( FloatIsEqual( val, 0.0 ) )
	{
		statPoolsSystem.RequestSettingStatPoolMaxValue( playerID, gamedataStatPoolType.Health, NULL );
		return;
	}
	else if( val <= 0.0 )
	{
		return;
	}
	else
	{
		isScalar = StringToBool( isScalarStr );
	}
	if( isScalar )
	{
		val = statPoolsSystem.ToPercentage( playerID, gamedataStatPoolType.Health, val );
	}
	statPoolsSystem.RequestSettingStatPoolValue( playerID, gamedataStatPoolType.Health, val, NULL );
}

exec function God1( gi : GameInstance )
{
	SwitchPlayerImmortalityMode( gi, gamecheatsystemFlag.God_Immortal );
}

exec function God2( gi : GameInstance )
{
	SwitchPlayerImmortalityMode( gi, gamecheatsystemFlag.God_Invulnerable );
}

exec function ToggleShowWeaponsStreaming( gi : GameInstance )
{
	var player : PlayerPuppet;
	player = ( ( PlayerPuppet )( GetPlayerObject( gi ) ) );
	if( player && player.DEBUG_Visualizer )
	{
		player.DEBUG_Visualizer.ToggleShowWeaponsStreaming();
	}
}

exec function GodClearAll( gi : GameInstance )
{
	var player : GameObject;
	var cheatSystem : DebugCheatsSystem;
	cheatSystem = GameInstance.GetDebugCheatsSystem( gi );
	player = GetPlayerObject( gi );
	cheatSystem.EnableCheat( player, gamecheatsystemFlag.God_Immortal, false );
	cheatSystem.EnableCheat( player, gamecheatsystemFlag.God_Invulnerable, false );
}

function SwitchPlayerImmortalityMode( const gi : GameInstance, cheat : gamecheatsystemFlag )
{
	var player : GameObject;
	var cheatSystem : DebugCheatsSystem;
	cheatSystem = GameInstance.GetDebugCheatsSystem( gi );
	player = GetPlayerObject( gi );
	if( !( cheatSystem ) )
	{
		return;
	}
	if( cheatSystem.ToggleCheat( player, cheat ) )
	{
		LogStats( cheat + " cheat changed on PLAYER" );
	}
	else
	{
		LogStats( ( "Failed to change " + cheat ) + " cheat on PLAYER" );
	}
}

exec function Weak( gameInstance : GameInstance, modeStr : String )
{
	var mode : Int32;
	mode = StringToInt( modeStr );
	SetFactValue( gameInstance, 'cheat_weak', mode );
	LogStats( "Weak cheat mode changed to " + IntToString( mode ) );
}

exec function OP( gameInstance : GameInstance, modeStr : String )
{
	var mode : Int32;
	mode = StringToInt( modeStr );
	SetFactValue( gameInstance, 'cheat_op', mode );
	LogStats( "OP cheat mode changed to " + IntToString( mode ) );
}

exec function IDDQD( gi : GameInstance, optional iamstiffcorpoguy : String )
{
	if( StringToBool( iamstiffcorpoguy ) )
	{
		SetFactValue( gi, 'legacy_mode_is_on', 0 );
		SetFactValue( gi, 'legacy_hits_on', 0 );
		SetFactValue( gi, 'legacy_mode_is_disabled', 1 );
	}
	else
	{
		SetFactValue( gi, 'legacy_mode_is_on', 1 );
		SetFactValue( gi, 'legacy_hits_on', 1 );
		SetFactValue( gi, 'legacy_mode_is_disabled', 0 );
	}
}

exec function Kill( gameInstance : GameInstance )
{
	if( GameInstance.GetRuntimeInfo( gameInstance ).IsMultiplayer() )
	{
		LogError( "exec(Kill) does not work in multiplayer, use 'K' key instead" );
		return;
	}
	Kill_NonExec( gameInstance, ( ( PlayerPuppet )( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject() ) ) );
}

function Kill_NonExec( const gi : GameInstance, player : PlayerPuppet )
{
	var gameEffectInstance : EffectInstance;
	gameEffectInstance = GameInstance.GetGameEffectSystem( gi ).CreateEffectStatic( 'killAll', 'kill', player );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.position, player.GetWorldPosition() );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.forward, player.GetWorldForward() );
	EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.range, 50.0 );
	gameEffectInstance.Run();
}

exec function KillAll( gameInstance : GameInstance, radiusStr : String )
{
	if( GameInstance.GetRuntimeInfo( gameInstance ).IsMultiplayer() )
	{
		LogError( "exec(Kill) does not work in multiplayer, use 'L' key instead" );
		return;
	}
	KillAll_NonExec( gameInstance, ( ( PlayerPuppet )( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject() ) ), radiusStr );
}

function KillAll_NonExec( const gameInstance : GameInstance, player : PlayerPuppet, optional radiusStr : String )
{
	var gameEffectInstance : EffectInstance;
	var radius : Float;
	radius = StringToFloat( radiusStr );
	if( FloatIsEqual( radius, 0.0 ) )
	{
		radius = 20.0;
	}
	gameEffectInstance = GameInstance.GetGameEffectSystem( gameInstance ).CreateEffectStatic( 'killAll', 'killAll', player );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.position, player.GetWorldPosition() );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.forward, player.GetWorldForward() );
	EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.radius, radius );
	gameEffectInstance.Run();
}

exec function HealAll( gameInstance : GameInstance, optional radiusStr : String )
{
	var gameEffectInstance : EffectInstance;
	var player : PlayerPuppet;
	var radius : Float;
	radius = StringToFloat( radiusStr );
	if( FloatIsEqual( radius, 0.0 ) )
	{
		radius = 20.0;
	}
	player = GetPlayer( gameInstance );
	gameEffectInstance = GameInstance.GetGameEffectSystem( gameInstance ).CreateEffectStatic( 'healAll', 'healAll', player );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.position, player.GetWorldPosition() );
	EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.radius, radius );
	gameEffectInstance.Run();
}

exec function PrintNPCItemBySlot( gi : GameInstance, slotName : String )
{
	var target : GameObject;
	var slotID : TweakDBID;
	var itemID : ItemID;
	var itemName : String;
	var item : ItemObject;
	var localPlayer : GameObject;
	localPlayer = GameInstance.GetPlayerSystem( gi ).GetLocalPlayerMainGameObject();
	target = GameInstance.GetTargetingSystem( gi ).GetLookAtObject( localPlayer );
	if( !( target ) )
	{
		Log( "PrintNPCItemBySlot(): No valid target found!" );
		return;
	}
	slotID = TDBID.Create( "AttachmentSlots." + slotName );
	item = ( ( ItemObject )( GameInstance.GetTransactionSystem( gi ).GetItemInSlot( target, slotID ) ) );
	if( !( item ) )
	{
		return;
	}
	itemID = item.GetItemID();
	itemName = TweakDBInterface.GetItemRecord( ItemID.GetTDBID( itemID ) ).FriendlyName();
	Log( ( ( "PrintNPCItemBySlot(): Item in slot: " + slotName ) + " : " ) + itemName );
}

exec function PrintDPS( gi : GameInstance )
{
	var obj : GameObject;
	var dps : DPSPackage;
	obj = GameInstance.GetTransactionSystem( gi ).GetItemInSlot( GetPlayer( gi ), T"AttachmentSlots.WeaponRight" );
	dps = StatsManager.GetObjectDPS( obj );
	LogStats( EnumValueToString( "gamedataDamageType", ( ( Int64 )( dps.type ) ) ) );
	LogStats( FloatToString( dps.value ) );
}

exec function GetAllPerks( gi : GameInstance )
{
	var i : Int32;
	var playerDevData : PlayerDevelopmentData;
	playerDevData = PlayerDevelopmentSystem.GetData( GameInstance.GetPlayerSystem( gi ).GetLocalPlayerMainGameObject() );
	for( i = 0; i < ( ( Int32 )( gamedataPerkType.Count ) ); i += 1 )
	{
		playerDevData.BuyPerk( ( ( gamedataPerkType )( i ) ) );
	}
}

exec function GetQuickhacks( gi : GameInstance )
{
	var ts : TransactionSystem;
	ts = GameInstance.GetTransactionSystem( gi );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.SuicideLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.SuicideLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BlindProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BlindLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BlindLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BlindLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.GrenadeExplodeLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.GrenadeExplodeLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.EMPOverloadProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.EMPOverloadLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.EMPOverloadLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.EMPOverloadLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BrainMeltProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BrainMetlLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BrainMeltLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BrainMeltLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.MadnessLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.MadnessLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsNoiseProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsNoiseLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsNoiseLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsNoiseLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsCallInProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsCallInLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsCallInLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsCallInLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.DisableCyberwareProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.DisableCyberwareLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.OverheatProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.OverheatLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.OverheatLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.OverheatLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.SystemCollapseLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.SystemCollapseLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WeaponMalfunctionProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WeaponMalfunctionLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WeaponMalfunctionLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WeaponMalfunctionLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.LocomotionMalfunctionLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.LocomotionMalfunctionLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.LocomotionMalfunctionLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.LocomotionMalfunctionProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WhistleProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WhistleLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WhistleLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.MemoryWipeLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.MemoryWipeLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.PingProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.PingLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.PingLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.PingLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.ContagionProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.ContagionLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.ContagionLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.ContagionLvl4Program", 1 );
}

exec function EnableFinishers( gi : GameInstance, enable : String )
{
	var val : Bool;
	val = StringToBool( enable );
	if( val )
	{
		GameInstance.GetQuestsSystem( gi ).SetFact( 'DEBUG_FINISHERS_ENABLED', 1 );
	}
	else
	{
		GameInstance.GetQuestsSystem( gi ).SetFact( 'DEBUG_FINISHERS_ENABLED', 0 );
	}
}

exec function InfiniteStamina( gi : GameInstance, optional enable : String )
{
	var toEnable : Bool;
	var playerID : StatsObjectID;
	var statPoolSys : StatPoolsSystem;
	var mod : StatPoolModifier;
	toEnable = true;
	if( enable != "" )
	{
		toEnable = StringToBool( enable );
	}
	playerID = GameInstance.GetPlayerSystem( gi ).GetLocalPlayerMainGameObject().GetEntityID();
	statPoolSys = GameInstance.GetStatPoolsSystem( gi );
	if( toEnable )
	{
		mod.enabled = true;
		mod.rangeBegin = 0.0;
		mod.rangeEnd = 100.0;
		mod.delayOnChange = false;
		mod.valuePerSec = 1000000000.0;
		statPoolSys.RequestSettingModifier( playerID, gamedataStatPoolType.Stamina, gameStatPoolModificationTypes.Regeneration, mod );
	}
	else
	{
		statPoolSys.RequestResetingModifier( playerID, gamedataStatPoolType.Stamina, gameStatPoolModificationTypes.Regeneration );
	}
}

exec function NetrunnerTesting( gi : GameInstance )
{
	var playerID : EntityID;
	var statusEffectSystem : StatusEffectSystem;
	var itemID : ItemID;
	var itemTDBID : TweakDBID;
	var equipRequest : EquipRequest;
	var equipSys : EquipmentSystem;
	var ts : TransactionSystem;
	ts = GameInstance.GetTransactionSystem( gi );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.SuicideProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.SuicideLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BlindProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BlindLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BlindLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BlindLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.GrenadeExplodeProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.GrenadeExplodeLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.EMPOverloadProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.EMPOverloadLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.EMPOverloadLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.EMPOverloadLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.MadnessProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.MadnessLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsNoiseProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsNoiseLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsNoiseLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsNoiseLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsCallInProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsCallInLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsCallInLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.CommsCallInLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WhistleProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WhistleLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WhistleLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.DisableCyberwareProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.DisableCyberwareLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.DisableCyberwareLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.DisableCyberwareLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.OverheatProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.OverheatLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.OverheatLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.OverheatLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.SystemCollapseProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.SystemCollapseLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WeaponMalfunctionProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WeaponMalfunctionLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WeaponMalfunctionLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.WeaponMalfunctionLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.LocomotionMalfunctionLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.LocomotionMalfunctionLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.LocomotionMalfunctionLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.LocomotionMalfunctionProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.PingProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.PingLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.PingLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.PingLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.MemoryWipeLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.MemoryWipeLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BrainMeltLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BrainMeltLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.BrainMeltLvl4Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.ContagionProgram", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.ContagionLvl2Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.ContagionLvl3Program", 1 );
	ts.GiveItemByTDBID( GetPlayer( gi ), T"Items.ContagionLvl4Program", 1 );
	playerID = GameInstance.GetPlayerSystem( gi ).GetLocalPlayerMainGameObject().GetEntityID();
	itemTDBID = T"TEST.CyberdeckHybridMid";
	itemID = ItemID.FromTDBID( itemTDBID );
	equipRequest = new EquipRequest;
	equipRequest.itemID = itemID;
	equipRequest.owner = GetPlayer( gi );
	equipRequest.addToInventory = true;
	equipSys = ( ( EquipmentSystem )( GameInstance.GetScriptableSystemsContainer( gi ).Get( 'EquipmentSystem' ) ) );
	equipSys.QueueRequest( equipRequest );
	statusEffectSystem = GameInstance.GetStatusEffectSystem( gi );
	if( statusEffectSystem.HasStatusEffect( playerID, T"TEST.UltimateNetrunner" ) )
	{
		GameInstance.GetStatusEffectSystem( gi ).RemoveStatusEffect( playerID, T"TEST.UltimateNetrunner" );
	}
	else
	{
		GameInstance.GetStatusEffectSystem( gi ).ApplyStatusEffect( playerID, T"TEST.UltimateNetrunner" );
	}
}

