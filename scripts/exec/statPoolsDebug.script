exec function ModifyPlayerStatPoolValue( gi : GameInstance, statPoolTypeString : String, value : String, optional percentage : String )
{
	var statPoolType : gamedataStatPoolType;
	var statPoolTypeInt : Int32;
	var player : PlayerPuppet;
	var statPoolValue : Float;
	var isPercent : Bool;
	var playerID : StatsObjectID;
	statPoolTypeInt = ( ( Int32 )( EnumValueFromString( "gamedataStatPoolType", statPoolTypeString ) ) );
	if( statPoolTypeInt == -1 )
	{
		LogWarning( ( "ModifyPlayerStatPoolValue: provided stat pool type " + statPoolTypeString ) + " is not a stat pool!" );
		return;
	}
	player = GetPlayer( gi );
	playerID = player.GetEntityID();
	statPoolType = ( ( gamedataStatPoolType )( statPoolTypeInt ) );
	statPoolValue = StringToFloat( value );
	isPercent = StringToBool( percentage );
	if( percentage != "" )
	{
		GameInstance.GetStatPoolsSystem( gi ).RequestSettingStatPoolValue( playerID, statPoolType, statPoolValue, NULL, isPercent );
	}
	else
	{
		GameInstance.GetStatPoolsSystem( gi ).RequestSettingStatPoolValue( playerID, statPoolType, statPoolValue, NULL );
	}
}

exec function ModifyNPCStatPoolValue( gi : GameInstance, statPoolTypeString : String, value : String, optional percentage : String )
{
	var gameEffectInstance : EffectInstance;
	var statPool : Int32;
	var player : PlayerPuppet;
	var statPoolValue : Float;
	var isPercent : Bool;
	statPool = ( ( Int32 )( EnumValueFromString( "gamedataStatPoolType", statPoolTypeString ) ) );
	if( statPool == -1 )
	{
		LogWarning( ( "ModifyNPCStatPoolValue: provided stat pool type " + statPoolTypeString ) + " is not a stat pool!" );
		return;
	}
	player = GetPlayer( gi );
	statPoolValue = StringToFloat( value );
	if( percentage != "" )
	{
		isPercent = StringToBool( percentage );
	}
	else
	{
		isPercent = true;
	}
	gameEffectInstance = GameInstance.GetGameEffectSystem( gi ).CreateEffectStatic( 'debugStrike', 'modStatPoolRay', GetPlayer( gi ) );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.position, player.GetWorldPosition() );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.forward, player.GetWorldForward() );
	EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.range, 50.0 );
	EffectData.SetInt( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.statType, statPool );
	EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.value, statPoolValue );
	EffectData.SetBool( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.debugBool, isPercent );
	gameEffectInstance.Run();
}

exec function AddPlayerStatPoolBonus( gi : GameInstance, statPoolTypeString : String, bonusValueString : String, persistance : String, optional percentage : String )
{
	var statPoolTypeInt : Int32;
	var statPoolType : gamedataStatPoolType;
	var bonusValue : Float;
	var isPercent : Bool;
	var isPersistent : Bool;
	var playerID : StatsObjectID;
	statPoolTypeInt = ( ( Int32 )( EnumValueFromString( "gamedataStatPoolType", statPoolTypeString ) ) );
	if( statPoolTypeInt == -1 )
	{
		LogWarning( ( "AddStatPoolBonus: provided stat pool type " + statPoolTypeString ) + " is not a stat pool!" );
		return;
	}
	statPoolType = ( ( gamedataStatPoolType )( statPoolTypeInt ) );
	playerID = GetPlayer( gi ).GetEntityID();
	bonusValue = StringToFloat( bonusValueString );
	isPercent = StringToBool( percentage );
	isPersistent = StringToBool( persistance );
	if( percentage != "" )
	{
		GameInstance.GetStatPoolsSystem( gi ).RequestSettingStatPoolBonus( playerID, statPoolType, bonusValue, NULL, isPersistent, isPercent );
	}
	else
	{
		GameInstance.GetStatPoolsSystem( gi ).RequestSettingStatPoolBonus( playerID, statPoolType, bonusValue, NULL, isPersistent );
	}
}

exec function ApplyRegenData( gi : GameInstance, statPoolTypeString : String, rangeBeginString : String, rangeEndString : String, startDelayString : String, valuePerSecString : String, delayOnChangeString : String )
{
	ApplyStatPoolModifier( gi, statPoolTypeString, StringToFloat( rangeBeginString ), StringToFloat( rangeEndString ), StringToFloat( startDelayString ), StringToFloat( valuePerSecString ), StringToBool( delayOnChangeString ), gameStatPoolModificationTypes.Regeneration );
}

exec function ApplyRegenModifier( gi : GameInstance, statPoolTypeString : String, statPoolModName : String )
{
	var statPoolMod : PoolValueModifier_Record;
	statPoolMod = TweakDBInterface.GetPoolValueModifierRecord( TDBID.Create( "BaseStatPools." + statPoolModName ) );
	ApplyStatPoolModifier( gi, statPoolTypeString, statPoolMod.RangeBegin(), statPoolMod.RangeEnd(), statPoolMod.StartDelay(), statPoolMod.ValuePerSec(), statPoolMod.DelayOnChange(), gameStatPoolModificationTypes.Regeneration );
}

exec function ApplyDecayData( gi : GameInstance, statPoolTypeString : String, rangeBeginString : String, rangeEndString : String, startDelayString : String, valuePerSecString : String, delayOnChangeString : String )
{
	ApplyStatPoolModifier( gi, statPoolTypeString, StringToFloat( rangeBeginString ), StringToFloat( rangeEndString ), StringToFloat( startDelayString ), StringToFloat( valuePerSecString ), StringToBool( delayOnChangeString ), gameStatPoolModificationTypes.Decay );
}

exec function ApplyDecayModifier( gi : GameInstance, statPoolTypeString : String, statPoolModName : String )
{
	var statPoolMod : PoolValueModifier_Record;
	statPoolMod = TweakDBInterface.GetPoolValueModifierRecord( TDBID.Create( "BaseStatPools." + statPoolModName ) );
	ApplyStatPoolModifier( gi, statPoolTypeString, statPoolMod.RangeBegin(), statPoolMod.RangeEnd(), statPoolMod.StartDelay(), statPoolMod.ValuePerSec(), statPoolMod.DelayOnChange(), gameStatPoolModificationTypes.Decay );
}

function ApplyStatPoolModifier( gi : GameInstance, statPoolTypeString : String, rangeBegin : Float, rangeEnd : Float, startDelay : Float, valuePerSec : Float, delayOnChange : Bool, statPoolModType : gameStatPoolModificationTypes )
{
	var statPoolInt : Int32;
	var playerID : StatsObjectID;
	var statPool : gamedataStatPoolType;
	var statPoolModifier : StatPoolModifier;
	statPoolInt = ( ( Int32 )( EnumValueFromString( "gamedataStatPoolType", statPoolTypeString ) ) );
	if( statPoolInt == -1 )
	{
		LogWarning( ( "ApplyStatPoolModifier: provided stat pool type " + statPoolTypeString ) + " is not a stat pool!" );
		return;
	}
	playerID = GetPlayer( gi ).GetEntityID();
	statPool = ( ( gamedataStatPoolType )( statPoolInt ) );
	statPoolModifier.enabled = true;
	statPoolModifier.rangeBegin = rangeBegin;
	statPoolModifier.rangeEnd = rangeEnd;
	statPoolModifier.startDelay = startDelay;
	statPoolModifier.valuePerSec = valuePerSec;
	statPoolModifier.delayOnChange = delayOnChange;
	GameInstance.GetStatPoolsSystem( gi ).RequestSettingModifier( playerID, statPool, statPoolModType, statPoolModifier );
}

exec function SetDefaultRegen( gi : GameInstance, statPoolTypeString : String )
{
	SetDefaultStatPoolModifiers( gi, statPoolTypeString, gameStatPoolModificationTypes.Regeneration );
}

exec function SetDefaultDecay( gi : GameInstance, statPoolTypeString : String )
{
	SetDefaultStatPoolModifiers( gi, statPoolTypeString, gameStatPoolModificationTypes.Decay );
}

function SetDefaultStatPoolModifiers( gi : GameInstance, statPoolTypeString : String, statPoolModType : gameStatPoolModificationTypes )
{
	var statPoolInt : Int32;
	var playerID : StatsObjectID;
	var statPool : gamedataStatPoolType;
	statPoolInt = ( ( Int32 )( EnumValueFromString( "gamedataStatPoolType", statPoolTypeString ) ) );
	if( statPoolInt == -1 )
	{
		LogWarning( ( "SetDefault(Regen/Decay): provided stat pool type " + statPoolTypeString ) + " is not a stat pool!" );
		return;
	}
	playerID = GetPlayer( gi ).GetEntityID();
	statPool = ( ( gamedataStatPoolType )( statPoolInt ) );
	GameInstance.GetStatPoolsSystem( gi ).RequestResetingModifier( playerID, statPool, statPoolModType );
}

