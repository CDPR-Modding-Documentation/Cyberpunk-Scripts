exec function AnimationSystemSetForcedVisibleTrueTest( gameInstance : GameInstance )
{
	var targetingSystem : TargetingSystem;
	var target : GameObject;
	var angleDist : EulerAngles;
	targetingSystem = GameInstance.GetTargetingSystem( gameInstance );
	if( targetingSystem )
	{
		target = targetingSystem.GetObjectClosestToCrosshair( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject(), angleDist, TSQ_ALL() );
		if( target )
		{
			GameInstance.GetAnimationSystem( gameInstance ).SetForcedVisible( target.GetEntityID(), true );
		}
		else
		{
			Log( "Finding target failed" );
		}
	}
	else
	{
		Log( "Finding target system failed" );
	}
}

exec function AnimationSystemSetForcedVisibleFalseTest( gameInstance : GameInstance )
{
	var targetingSystem : TargetingSystem;
	var target : GameObject;
	var angleDist : EulerAngles;
	targetingSystem = GameInstance.GetTargetingSystem( gameInstance );
	if( targetingSystem )
	{
		target = targetingSystem.GetObjectClosestToCrosshair( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject(), angleDist, TSQ_ALL() );
		if( target )
		{
			GameInstance.GetAnimationSystem( gameInstance ).SetForcedVisible( target.GetEntityID(), false );
		}
		else
		{
			Log( "Finding target failed" );
		}
	}
	else
	{
		Log( "Finding target system failed" );
	}
}

exec function AnimWrapperWeightSetterTest( gameInstance : GameInstance, keyStr : String, valueStr : String )
{
	var targetingSystem : TargetingSystem;
	var target : GameObject;
	var ev : AnimWrapperWeightSetter;
	var angleDist : EulerAngles;
	targetingSystem = GameInstance.GetTargetingSystem( gameInstance );
	if( targetingSystem )
	{
		target = targetingSystem.GetObjectClosestToCrosshair( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject(), angleDist, TSQ_ALL() );
		if( target )
		{
			ev = new AnimWrapperWeightSetter;
			ev.key = StringToName( keyStr );
			ev.value = StringToFloat( valueStr );
			target.QueueEvent( ev );
		}
		else
		{
			Log( "Finding target failed" );
		}
	}
	else
	{
		Log( "Finding target system failed" );
	}
}

exec function LookAtAdd( gameInstance : GameInstance, xStr : String, yStr : String, zStr : String, part : String )
{
	var targetingSystem : TargetingSystem;
	var target : GameObject;
	var ev : LookAtAddEvent;
	var angleDist : EulerAngles;
	targetingSystem = GameInstance.GetTargetingSystem( gameInstance );
	if( targetingSystem )
	{
		target = targetingSystem.GetObjectClosestToCrosshair( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject(), angleDist, TSQ_ALL() );
		if( target )
		{
			ev = new LookAtAddEvent;
			if( part != "" )
			{
				ev.bodyPart = StringToName( part );
			}
			ev.SetStaticTarget( Vector4( StringToFloat( xStr ), StringToFloat( yStr ), StringToFloat( zStr ), 1.0 ) );
			ev.SetLimits( animLookAtLimitDegreesType.Wide, animLookAtLimitDegreesType.None, animLookAtLimitDistanceType.None, animLookAtLimitDegreesType.None );
			target.QueueEvent( ev );
		}
		else
		{
			Log( "Finding target failed" );
		}
	}
	else
	{
		Log( "Finding target system failed" );
	}
}

exec function LookAtAddWithOffset( gameInstance : GameInstance, xStr : String, yStr : String, zStr : String )
{
	var targetingSystem : TargetingSystem;
	var target : GameObject;
	var ev : LookAtAddEvent;
	var angleDist : EulerAngles;
	targetingSystem = GameInstance.GetTargetingSystem( gameInstance );
	if( targetingSystem )
	{
		target = targetingSystem.GetObjectClosestToCrosshair( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject(), angleDist, TSQ_ALL() );
		if( target )
		{
			ev = new LookAtAddEvent;
			ev.SetEntityTarget( target, '', Vector4( StringToFloat( xStr ), StringToFloat( yStr ), StringToFloat( zStr ), 1.0 ) );
			ev.SetLimits( animLookAtLimitDegreesType.Wide, animLookAtLimitDegreesType.None, animLookAtLimitDistanceType.None, animLookAtLimitDegreesType.None );
			target.QueueEvent( ev );
		}
		else
		{
			Log( "Finding target failed" );
		}
	}
	else
	{
		Log( "Finding target system failed" );
	}
}

exec function LookAtAddPlayerCameraSlot( gameInstance : GameInstance )
{
	var targetingSystem : TargetingSystem;
	var target : GameObject;
	var ev : LookAtAddEvent;
	var angleDist : EulerAngles;
	targetingSystem = GameInstance.GetTargetingSystem( gameInstance );
	if( targetingSystem )
	{
		target = targetingSystem.GetObjectClosestToCrosshair( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject(), angleDist, TSQ_ALL() );
		if( target )
		{
			ev = new LookAtAddEvent;
			ev.SetEntityTarget( GetPlayer( gameInstance ), 'camera', Vector4.EmptyVector() );
			ev.SetLimits( animLookAtLimitDegreesType.Narrow, animLookAtLimitDegreesType.Normal, animLookAtLimitDistanceType.Normal, animLookAtLimitDegreesType.None );
			if( !( GetPlayer( gameInstance ) ) )
			{
				Log( "Finding player failed" );
			}
			target.QueueEvent( ev );
		}
		else
		{
			Log( "Finding target failed" );
		}
	}
	else
	{
		Log( "Finding target system failed" );
	}
}

exec function LookAtAddPlayerCameraSlotWithHands( gameInstance : GameInstance )
{
	var targetingSystem : TargetingSystem;
	var target : GameObject;
	var evEyes : LookAtAddEvent;
	var evLeftHand : LookAtAddEvent;
	var evRightHand : LookAtAddEvent;
	var angleDist : EulerAngles;
	targetingSystem = GameInstance.GetTargetingSystem( gameInstance );
	if( targetingSystem )
	{
		target = targetingSystem.GetObjectClosestToCrosshair( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject(), angleDist, TSQ_ALL() );
		if( target )
		{
			if( !( GetPlayer( gameInstance ) ) )
			{
				Log( "Finding player failed" );
			}
			evEyes = new LookAtAddEvent;
			evEyes.SetEntityTarget( GetPlayer( gameInstance ), 'camera', Vector4.EmptyVector() );
			evEyes.SetLimits( animLookAtLimitDegreesType.Wide, animLookAtLimitDegreesType.None, animLookAtLimitDistanceType.None, animLookAtLimitDegreesType.None );
			target.QueueEvent( evEyes );
			evLeftHand = new LookAtAddEvent;
			evLeftHand.bodyPart = 'LeftHand';
			evLeftHand.SetEntityTarget( GetPlayer( gameInstance ), 'camera', Vector4.EmptyVector() );
			evLeftHand.SetLimits( animLookAtLimitDegreesType.Wide, animLookAtLimitDegreesType.None, animLookAtLimitDistanceType.None, animLookAtLimitDegreesType.None );
			target.QueueEvent( evLeftHand );
			evRightHand = new LookAtAddEvent;
			evRightHand.bodyPart = 'RightHand';
			evRightHand.SetEntityTarget( GetPlayer( gameInstance ), 'camera', Vector4.EmptyVector() );
			evRightHand.SetLimits( animLookAtLimitDegreesType.Wide, animLookAtLimitDegreesType.None, animLookAtLimitDistanceType.None, animLookAtLimitDegreesType.None );
			target.QueueEvent( evRightHand );
		}
		else
		{
			Log( "Finding target failed" );
		}
	}
	else
	{
		Log( "Finding target system failed" );
	}
}

exec function LookAtAddStaticLeftHand( gameInstance : GameInstance )
{
	var targetingSystem : TargetingSystem;
	var target : GameObject;
	var ev : LookAtAddEvent;
	var angleDist : EulerAngles;
	targetingSystem = GameInstance.GetTargetingSystem( gameInstance );
	if( targetingSystem )
	{
		target = targetingSystem.GetObjectClosestToCrosshair( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject(), angleDist, TSQ_ALL() );
		if( target )
		{
			ev = new LookAtAddEvent;
			ev.bodyPart = 'LeftHand';
			ev.SetStaticTarget( Vector4( 0.5, 2.0, 1.0, 1.0 ) );
			if( !( GetPlayer( gameInstance ) ) )
			{
				Log( "Finding player failed" );
			}
			target.QueueEvent( ev );
		}
		else
		{
			Log( "Finding target failed" );
		}
	}
	else
	{
		Log( "Finding target system failed" );
	}
}

