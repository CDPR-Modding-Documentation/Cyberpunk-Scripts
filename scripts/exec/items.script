exec function GiveItem( gi : GameInstance, itemName : String, optional amountStr : String )
{
	var transSys : TransactionSystem;
	var amount : Int32;
	transSys = GameInstance.GetTransactionSystem( gi );
	amount = StringToInt( amountStr );
	if( amount == 0 )
	{
		amount = 1;
	}
	transSys.GiveItem( GetPlayer( gi ), ItemID.FromTDBID( TDBID.Create( itemName ) ), amount );
}

exec function PrintItems( gi : GameInstance )
{
	var itemList : array< weak< gameItemData > >;
	var i, quantity : Int32;
	var itemID : ItemID;
	var str : String;
	var player : PlayerPuppet;
	var trans : TransactionSystem;
	player = GetPlayer( gi );
	trans = GameInstance.GetTransactionSystem( gi );
	trans.GetItemList( player, itemList );
	LogItems( "" );
	LogItems( "--== Printing inventory contents of player:" );
	for( i = 0; i < itemList.Size(); i += 1 )
	{
		itemID = itemList[ i ].GetID();
		quantity = trans.GetItemQuantity( player, itemID );
		str = ( SpaceFill( IntToString( quantity ), 6, ESpaceFillMode.JustifyRight ) + "x " ) + TDBID.ToStringDEBUG( ItemID.GetTDBID( itemID ) );
		LogItems( str );
	}
	LogItems( "--== End of inventory contents of player" );
}

exec function PrintStatsItem( gi : GameInstance, itemName : String )
{
	var transSys : TransactionSystem;
	var object : GameObject;
	var stats : StatsSystem;
	var player : PlayerPuppet;
	var i : Int32;
	var valF : Float;
	var itemID : ItemID;
	var itemTDBID : TweakDBID;
	var objectID : StatsObjectID;
	itemTDBID = TDBID.Create( "Items." + itemName );
	itemID = ItemID.CreateQuery( itemTDBID );
	transSys = GameInstance.GetTransactionSystem( gi );
	player = GetPlayer( gi );
	object = transSys.GetItemInSlotByItemID( player, itemID );
	LogStats( "" );
	if( !( object ) )
	{
		LogStats( ( "exec PrintStatsItem(): cannot find item object with specified ID '" + TDBID.ToNumber( itemTDBID ) ) + "'" );
		return;
	}
	objectID = object.GetEntityID();
	stats = GameInstance.GetStatsSystem( gi );
	LogStats( ( "---- stats of item '" + TDBID.ToNumber( itemTDBID ) ) + "' ----" );
	for( i = 0; i <= ( ( Int32 )( EnumGetMax( 'gamedataStatType' ) ) ); i += 1 )
	{
		valF = stats.GetStatValue( objectID, ( ( gamedataStatType )( i ) ) );
		if( !( FloatIsEqual( valF, 0.0 ) ) )
		{
			LogStats( ( EnumValueToString( "gamedataStatType", i ) + ": " ) + NoTrailZeros( valF ) );
		}
	}
	LogStats( ( "---- end of stats of item '" + TDBID.ToNumber( itemTDBID ) ) + "' ----" );
}

exec function EquipItemOnPlayer( gi : GameInstance, item : String, slot : String )
{
	GameInstance.GetTransactionSystem( gi ).AddItemToSlot( GetPlayer( gi ), TDBID.Create( "AttachmentSlots." + slot ), ItemID.FromTDBID( TDBID.Create( item ) ) );
}

function PrintItemInSlot( gi : GameInstance, object : GameObject, slot : TweakDBID )
{
	var slotName : String;
	var itemObj : ItemObject;
	slotName = TweakDBInterface.GetAttachmentSlotRecord( slot ).EntitySlotName();
	itemObj = ( ( ItemObject )( GameInstance.GetTransactionSystem( gi ).GetItemInSlot( ( ( PlayerPuppet )( object ) ), slot ) ) );
	if( !( itemObj ) )
	{
		LogItems( ( "Item in slot: " + slotName ) + " NULL " );
		return;
	}
	LogItems( ( ( "Item in slot: " + slotName ) + " : " ) + TweakDBInterface.GetItemRecord( ItemID.GetTDBID( itemObj.GetItemID() ) ).FriendlyName() );
}

exec function PrintItemsInSlots( gi : GameInstance )
{
	var i : Int32;
	var player : PlayerPuppet;
	var slots : array< weak< AttachmentSlot_Record > >;
	player = GetPlayer( gi );
	TweakDBInterface.GetCharacterRecord( player.GetRecordID() ).AttachmentSlots( slots );
	for( i = 0; i < slots.Size(); i += 1 )
	{
		PrintItemInSlot( gi, player, slots[ i ].GetID() );
	}
}

exec function PrintNPCItems( gi : GameInstance )
{
	var i : Int32;
	var target : GameObject;
	var itemName : String;
	var items : array< weak< gameItemData > >;
	target = GameInstance.GetTargetingSystem( gi ).GetLookAtObject( GetPlayer( gi ) );
	if( !( target ) )
	{
		Log( "PrintNPCItems(): No valid target found!" );
		return;
	}
	GameInstance.GetTransactionSystem( gi ).GetItemList( target, items );
	for( i = 0; i < items.Size(); i += 1 )
	{
		itemName = TweakDBInterface.GetItemRecord( ItemID.GetTDBID( items[ i ].GetID() ) ).FriendlyName();
		LogItems( ( ( "Item name: " + itemName ) + ", Quantity: " ) + IntToString( items[ i ].GetQuantity() ) );
	}
}

exec function SwapItemPart( gi : GameInstance )
{
	var ts : TransactionSystem;
	var player : PlayerPuppet;
	var weaponID : ItemID;
	var partID : ItemID;
	var req : SwapItemPart;
	ts = GameInstance.GetTransactionSystem( gi );
	player = GetPlayer( gi );
	partID = ItemID.FromTDBID( T"Items.w_rifle_assault__nokota_copperhead__mag_std_maelstrom" );
	ts.GiveItem( player, partID, 1 );
	weaponID = ItemID.CreateQuery( T"Items.Base_Copperhead" );
	req = new SwapItemPart;
	req.obj = player;
	req.baseItem = weaponID;
	req.partToInstall = partID;
	req.slotID = T"AttachmentSlots.Magazine";
	GameInstance.GetScriptableSystemsContainer( gi ).Get( 'ItemModificationSystem' ).QueueRequest( req );
}

exec function ToggleFlashlight( gi : GameInstance, val : String )
{
	var player : PlayerPuppet;
	var evt : TogglePlayerFlashlightEvent;
	evt = new TogglePlayerFlashlightEvent;
	evt.enable = StringToBool( val );
	player = GetPlayer( gi );
	player.QueueEvent( evt );
}

exec function Rev( gi : GameInstance )
{
	var ts : TransactionSystem;
	var pl : PlayerPuppet;
	var equipRequest : EquipRequest;
	var equipSys : EquipmentSystem;
	var id : ItemID;
	ts = GameInstance.GetTransactionSystem( gi );
	pl = GetPlayer( gi );
	equipSys = ( ( EquipmentSystem )( GameInstance.GetScriptableSystemsContainer( gi ).Get( 'EquipmentSystem' ) ) );
	ts.GiveItemByTDBID( pl, T"Items.Preset_Saratoga_Default", 1 );
	ts.GiveItemByTDBID( pl, T"Items.Preset_Sidewinder_Default", 1 );
	ts.GiveItemByTDBID( pl, T"Items.Preset_Zhuo_Default", 1 );
	ts.GiveItemByTDBID( pl, T"Items.Preset_Ashura_Default", 1 );
	ts.GiveItemByTDBID( pl, T"Items.Preset_Copperhead_Military1", 1 );
	ts.GiveItemByTDBID( pl, T"Items.Preset_Burya_Default", 1 );
	ts.GiveItemByTDBID( pl, T"Items.SuicideProgram", 1 );
	ts.GiveItemByTDBID( pl, T"Items.MadnessProgram", 1 );
	ts.GiveItemByTDBID( pl, T"Items.MalfunctionProgram", 1 );
	ts.GiveItemByTDBID( pl, T"Items.TakeControlProgram", 1 );
	ts.GiveItemByTDBID( pl, T"Items.SystemCollapseProgram", 1 );
	ts.GiveItemByTDBID( pl, T"Items.CommsCallProgram", 1 );
	ts.GiveItemByTDBID( pl, T"Items.w_att_scope_short_01", 1 );
	ts.GiveItemByTDBID( pl, T"Items.w_att_scope_short_02", 1 );
	ts.GiveItemByTDBID( pl, T"Items.w_att_scope_short_03", 1 );
	ts.GiveItemByTDBID( pl, T"Items.w_att_scope_long_01", 1 );
	ts.GiveItemByTDBID( pl, T"Items.w_att_scope_long_02", 1 );
	ts.GiveItemByTDBID( pl, T"Items.w_att_scope_long_03", 1 );
	ts.GiveItemByTDBID( pl, T"Items.w_silencer_01", 1 );
	ts.GiveItemByTDBID( pl, T"Items.GrenadeFragRegular", 3 );
	ts.GiveItemByTDBID( pl, T"Items.GrenadeFlashRegularV0", 3 );
	ts.GiveItemByTDBID( pl, T"Items.GrenadeSonicBubbleSticky", 3 );
	ts.GiveItemByTDBID( pl, T"Items.FirstAidWhiff", 3 );
	id = ItemID.FromTDBID( T"Items.MilitechParaline" );
	ts.GiveItem( pl, id, 1 );
	equipRequest = new EquipRequest;
	equipRequest.itemID = id;
	equipRequest.owner = pl;
	equipSys.QueueRequest( equipRequest );
	id = ItemID.FromTDBID( T"Items.OpticalCamo" );
	ts.GiveItem( pl, id, 1 );
	equipRequest = new EquipRequest;
	equipRequest.itemID = id;
	equipRequest.owner = pl;
	equipSys.QueueRequest( equipRequest );
	id = ItemID.FromTDBID( T"Items.SmartLink" );
	ts.GiveItem( pl, id, 1 );
	equipRequest = new EquipRequest;
	equipRequest.itemID = id;
	equipRequest.owner = pl;
	equipSys.QueueRequest( equipRequest );
	id = ItemID.FromTDBID( T"Items.BoostedTendons" );
	ts.GiveItem( pl, id, 1 );
	equipRequest = new EquipRequest;
	equipRequest.itemID = id;
	equipRequest.owner = pl;
	equipSys.QueueRequest( equipRequest );
}

