exec function SetLevel( inst : GameInstance, stringType : String, stringVal : String )
{
	PlayerPuppet.SetLevel( inst, stringType, stringVal, telemetryLevelGainReason.IsDebug );
}

exec function AddExp( inst : GameInstance, stringType : String, stringVal : String )
{
	var expAmount : Int32;
	var expType : gamedataProficiencyType;
	var expRequest : AddExperience;
	expType = ( ( gamedataProficiencyType )( ( ( Int32 )( EnumValueFromString( "gamedataProficiencyType", stringType ) ) ) ) );
	expAmount = StringToInt( stringVal );
	expRequest = new AddExperience;
	expRequest.Set( GetPlayer( inst ), expAmount, expType, true );
	GameInstance.GetScriptableSystemsContainer( inst ).Get( 'PlayerDevelopmentSystem' ).QueueRequest( expRequest );
}

exec function BuyPerk( inst : GameInstance, pString : String )
{
	var pType : gamedataPerkType;
	var request : BuyPerk;
	pType = ( ( gamedataPerkType )( ( ( Int32 )( EnumValueFromString( "gamedataPerkType", pString ) ) ) ) );
	request = new BuyPerk;
	request.Set( GetPlayer( inst ), pType );
	GameInstance.GetScriptableSystemsContainer( inst ).Get( 'PlayerDevelopmentSystem' ).QueueRequest( request );
}

exec function RemovePerk( inst : GameInstance, pString : String )
{
	var pType : gamedataPerkType;
	var request : RemovePerk;
	pType = ( ( gamedataPerkType )( ( ( Int32 )( EnumValueFromString( "gamedataPerkType", pString ) ) ) ) );
	request = new RemovePerk;
	request.Set( GetPlayer( inst ), pType );
	GameInstance.GetScriptableSystemsContainer( inst ).Get( 'PlayerDevelopmentSystem' ).QueueRequest( request );
}

exec function GiveDevPoints( inst : GameInstance, stringType : String, stringVal : String )
{
	var devPtsAmount : Int32;
	var devPtsType : gamedataDevelopmentPointType;
	var request : AddDevelopmentPoints;
	devPtsType = ( ( gamedataDevelopmentPointType )( ( ( Int32 )( EnumValueFromString( "gamedataDevelopmentPointType", stringType ) ) ) ) );
	devPtsAmount = StringToInt( stringVal );
	request = new AddDevelopmentPoints;
	request.Set( GetPlayer( inst ), devPtsAmount, devPtsType );
	GameInstance.GetScriptableSystemsContainer( inst ).Get( 'PlayerDevelopmentSystem' ).QueueRequest( request );
}

exec function BuyAtt( inst : GameInstance, stringType : String )
{
	var attType : gamedataStatType;
	var request : BuyAttribute;
	attType = ( ( gamedataStatType )( ( ( Int32 )( EnumValueFromString( "gamedataStatType", stringType ) ) ) ) );
	request = new BuyAttribute;
	request.Set( GetPlayer( inst ), attType );
	GameInstance.GetScriptableSystemsContainer( inst ).Get( 'PlayerDevelopmentSystem' ).QueueRequest( request );
}

exec function SetAtt( inst : GameInstance, stringType : String, stringVal : String )
{
	var attValue : Float;
	var attType : gamedataStatType;
	var request : SetAttribute;
	attType = ( ( gamedataStatType )( ( ( Int32 )( EnumValueFromString( "gamedataStatType", stringType ) ) ) ) );
	attValue = StringToFloat( stringVal );
	request = new SetAttribute;
	request.Set( GetPlayer( inst ), attValue, attType );
	GameInstance.GetScriptableSystemsContainer( inst ).Get( 'PlayerDevelopmentSystem' ).QueueRequest( request );
}

exec function PrintAttributes( inst : GameInstance )
{
	var i : Int32;
	var val : Int32;
	var statSys : StatsSystem;
	var player : PlayerPuppet;
	var playerID : StatsObjectID;
	player = ( ( PlayerPuppet )( GetPlayer( inst ) ) );
	statSys = GameInstance.GetStatsSystem( player.GetGame() );
	playerID = player.GetEntityID();
	for( i = 0; i <= ( ( Int32 )( gamedataStatType.Count ) ); i += 1 )
	{
		val = ( ( Int32 )( statSys.GetStatValue( playerID, ( ( gamedataStatType )( i ) ) ) ) );
		Log( ( EnumValueToString( "gamedataStatType", i ) + ": " ) + IntToString( val ) );
	}
}

exec function SetBuild( inst : GameInstance, stringType : String )
{
	PlayerPuppet.SetBuild( inst, stringType );
}

exec function PrintProfs( inst : GameInstance )
{
	var i : Int32;
	for( i = 0; i < ( ( Int32 )( gamedataProficiencyType.Count ) ); i += 1 )
	{
		LogDM( ( ( "Proficiency: " + EnumValueToString( "gamedataProficiencyType", ( ( Int32 )( i ) ) ) ) + " current level is - " ) + ( ( PlayerDevelopmentSystem )( GameInstance.GetScriptableSystemsContainer( inst ).Get( 'PlayerDevelopmentSystem' ) ) ).GetProficiencyLevel( GetPlayer( inst ), ( ( gamedataProficiencyType )( i ) ) ) );
	}
}

exec function PrintPerks( gi : GameInstance )
{
	var i : Int32;
	var perks : array< SPerk >;
	var PDS : PlayerDevelopmentSystem;
	var player : PlayerPuppet;
	player = GetPlayer( gi );
	PDS = ( ( PlayerDevelopmentSystem )( GameInstance.GetScriptableSystemsContainer( gi ).Get( 'PlayerDevelopmentSystem' ) ) );
	perks = PDS.GetPerks( player );
	for( i = 0; i < perks.Size(); i += 1 )
	{
		LogDM( " ========================== " );
		LogDM( "Perk type: " + EnumValueToString( "gamedataPerkType", ( ( Int32 )( perks[ i ].type ) ) ) );
		LogDM( "Perk current level: " + perks[ i ].currLevel );
		LogDM( "Perk max level: " + PDS.GetPerkMaxLevel( player, perks[ i ].type ) );
	}
}

exec function PrintProfExpToNextLevel( inst : GameInstance, stringProfType : String )
{
	var enumProfType : gamedataProficiencyType;
	var playerDevSystem : PlayerDevelopmentSystem;
	var currentProfExp : Int32;
	var profExpToNextLevel : Int32;
	enumProfType = ( ( gamedataProficiencyType )( ( ( Int32 )( EnumValueFromString( "gamedataProficiencyType", stringProfType ) ) ) ) );
	playerDevSystem = ( ( PlayerDevelopmentSystem )( GameInstance.GetScriptableSystemsContainer( inst ).Get( 'PlayerDevelopmentSystem' ) ) );
	currentProfExp = playerDevSystem.GetCurrentLevelProficiencyExp( GetPlayer( inst ), enumProfType );
	profExpToNextLevel = playerDevSystem.GetRemainingExpForLevelUp( GetPlayer( inst ), enumProfType );
	LogDM( ( ( ( ( "Proficiency: " + stringProfType ) + " current level experience is - " ) + currentProfExp ) + ", experience to next level is - " ) + profExpToNextLevel );
}

exec function ModifyDifficulty( inst : GameInstance, stringDifficultyLevel : String )
{
	var player : GameObject;
	var statsSystem : StatsSystem;
	var statMod : gameConstantStatModifierData;
	player = GameInstance.GetPlayerSystem( inst ).GetLocalPlayerMainGameObject();
	statsSystem = GameInstance.GetStatsSystem( inst );
	statMod = new gameConstantStatModifierData;
	statMod.modifierType = gameStatModifierType.Additive;
	statMod.statType = gamedataStatType.PowerLevel;
	if( stringDifficultyLevel == "Increase" )
	{
		statMod.value = 0.5;
		statsSystem.AddModifier( player.GetEntityID(), statMod );
	}
	else if( stringDifficultyLevel == "Decrease" )
	{
		statMod.value = -0.5;
		statsSystem.AddModifier( player.GetEntityID(), statMod );
	}
}

exec function APE( gi : GameInstance, perk : String, level : String )
{
	var lvl : Int32;
	var data : array< weak< PerkLevelData_Record > >;
	var packageID : TweakDBID;
	lvl = StringToInt( level );
	TweakDBInterface.GetPerkRecord( TDBID.Create( "Perks." + perk ) ).Levels( data );
	packageID = data[ lvl - 1 ].DataPackage().GetID();
	GameInstance.GetGameplayLogicPackageSystem( gi ).ApplyPackage( GetPlayer( gi ), GetPlayer( gi ), packageID );
}

exec function CGLP( gi : GameInstance )
{
	var packages : array< TweakDBID >;
	var glps : GameplayLogicPackageSystem;
	var i : Int32;
	glps = GameInstance.GetGameplayLogicPackageSystem( gi );
	glps.GetAppliedPackages( GetPlayer( gi ), packages );
	for( i = 0; i < packages.Size(); i += 1 )
	{
		glps.RemovePackage( GetPlayer( gi ), packages[ i ] );
	}
}

