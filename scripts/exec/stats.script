exec function DebugNPC( gi : GameInstance, optional durationStr : String )
{
	var durationFloat : Float;
	var gameEffectInstance : EffectInstance;
	var player : PlayerPuppet;
	var infiniteDuration : Bool;
	durationFloat = StringToFloat( durationStr );
	player = GetPlayer( gi );
	if( durationFloat < 0.0 )
	{
		GetPlayer( gi ).DEBUG_Visualizer.ClearPuppetVisualization();
	}
	else
	{
		infiniteDuration = FloatIsEqual( durationFloat, 0.0 );
		gameEffectInstance = GameInstance.GetGameEffectSystem( gi ).CreateEffectStatic( 'debugStrike', 'vdb_ray', GetPlayer( gi ) );
		EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.duration, durationFloat );
		EffectData.SetBool( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.infiniteDuration, infiniteDuration );
		EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.position, player.GetWorldPosition() );
		EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.forward, player.GetWorldForward() );
		EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.range, 20.0 );
		gameEffectInstance.Run();
	}
}

exec function DebugNPCs( gi : GameInstance, optional durationStr : String, optional radiusStr : String, optional moveWithPlayerStr : String )
{
	DebugNPCs_NonExec( gi, durationStr, radiusStr, moveWithPlayerStr );
}

function DebugNPCs_NonExec( const gi : GameInstance, optional durationStr : String, optional radiusStr : String, optional moveWithPlayerStr : String )
{
	var durationFloat : Float;
	var gameEffectInstance : EffectInstance;
	var player : PlayerPuppet;
	var radius : Float;
	var infiniteDuration, moveWithPlayer : Bool;
	durationFloat = StringToFloat( durationStr );
	radius = StringToFloat( radiusStr );
	moveWithPlayer = StringToBool( moveWithPlayerStr );
	player = GetPlayer( gi );
	if( FloatIsEqual( radius, 0.0 ) )
	{
		radius = 20.0;
	}
	if( durationFloat < 0.0 )
	{
		SetFactValue( gi, 'cheat_vdb_const', 0 );
		GetPlayer( gi ).DEBUG_Visualizer.ClearPuppetVisualization();
	}
	else if( moveWithPlayer )
	{
		SetFactValue( gi, 'cheat_vdb_const', 1 );
		gameEffectInstance = GameInstance.GetGameEffectSystem( gi ).CreateEffectStatic( 'debugStrike', 'vdb_sphere_constant', GetPlayer( gi ) );
		EffectData.SetBool( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.infiniteDuration, true );
		EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.position, player.GetWorldPosition() );
		EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.radius, radius );
		gameEffectInstance.Run();
	}
	else
	{
		infiniteDuration = FloatIsEqual( durationFloat, 0.0 );
		gameEffectInstance = GameInstance.GetGameEffectSystem( gi ).CreateEffectStatic( 'debugStrike', 'vdb_sphere', GetPlayer( gi ) );
		EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.duration, durationFloat );
		EffectData.SetBool( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.infiniteDuration, infiniteDuration );
		EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.position, player.GetWorldPosition() );
		EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.radius, radius );
		gameEffectInstance.Run();
	}
}

exec function PrintStatsPlayer( gi : GameInstance )
{
	var gameEffectInstance : EffectInstance;
	var player : PlayerPuppet;
	player = GetPlayer( gi );
	gameEffectInstance = GameInstance.GetGameEffectSystem( gi ).CreateEffectStatic( 'debugStrike', 'printStatsPlayer', GetPlayer( gi ) );
	EffectData.SetEntity( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.entity, player );
	gameEffectInstance.Run();
}

exec function PrintStatsTarget( gi : GameInstance )
{
	var gameEffectInstance : EffectInstance;
	var player : PlayerPuppet;
	player = GetPlayer( gi );
	gameEffectInstance = GameInstance.GetGameEffectSystem( gi ).CreateEffectStatic( 'debugStrike', 'printStatsRay', GetPlayer( gi ) );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.position, player.GetWorldPosition() );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.forward, player.GetWorldForward() );
	EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.range, 50.0 );
	gameEffectInstance.Run();
}

exec function PrintStatTarget( gi : GameInstance, statType : String )
{
	var gameEffectInstance : EffectInstance;
	var player : PlayerPuppet;
	var stat : Int32;
	stat = ( ( Int32 )( EnumValueFromString( "gamedataStatType", statType ) ) );
	if( stat == -1 )
	{
		LogWarning( ( "PrintStatTarget: provided stat type " + statType ) + " is not a stat!" );
		return;
	}
	player = GetPlayer( gi );
	gameEffectInstance = GameInstance.GetGameEffectSystem( gi ).CreateEffectStatic( 'debugStrike', 'printStatRay', GetPlayer( gi ) );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.position, player.GetWorldPosition() );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.forward, player.GetWorldForward() );
	EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.range, 50.0 );
	EffectData.SetInt( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.statType, stat );
	gameEffectInstance.Run();
}

exec function ModStatPlayer( gi : GameInstance, TEMP_stat : String, TEMP_val : String )
{
	var hack : StrikeExecutor_ModifyStat;
	var stat : gamedataStatType;
	var val : Float;
	stat = ( ( gamedataStatType )( ( ( Int32 )( EnumValueFromString( "gamedataStatType", TEMP_stat ) ) ) ) );
	val = StringToFloat( TEMP_val );
	hack = new StrikeExecutor_ModifyStat;
	hack.ModStatPuppet( GetPlayer( gi ), stat, val, GetPlayer( gi ) );
}

exec function ModStatTarget( gi : GameInstance, TEMP_stat : String, TEMP_val : String )
{
	var gameEffectInstance : EffectInstance;
	var player : PlayerPuppet;
	var stat : Int32;
	var val : Float;
	player = GetPlayer( gi );
	stat = ( ( Int32 )( EnumValueFromString( "gamedataStatType", TEMP_stat ) ) );
	val = StringToFloat( TEMP_val );
	gameEffectInstance = GameInstance.GetGameEffectSystem( gi ).CreateEffectStatic( 'stats', 'modStatRay', GetPlayer( gi ) );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.position, player.GetWorldPosition() );
	EffectData.SetVector( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.forward, player.GetWorldForward() );
	EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.range, 50.0 );
	EffectData.SetInt( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.statType, stat );
	EffectData.SetFloat( gameEffectInstance.GetSharedData(), GetAllBlackboardDefs().EffectSharedData.value, val );
	gameEffectInstance.Run();
}

exec function PlayerSD( gameInstance : GameInstance )
{
	PrintStatsDetails( gameInstance, GetPlayer( gameInstance ) );
}

exec function WeaponSD( gi : GameInstance )
{
	var obj : WeaponObject;
	obj = ( ( WeaponObject )( ScriptedPuppet.GetActiveWeapon( GetPlayer( gi ) ) ) );
	PrintStatsDetails( gi, obj );
}

function PrintStatsDetails( gameInstance : GameInstance, obj : GameObject )
{
	var i : Int32;
	var detailedList : array< gameStatDetailedData >;
	detailedList = GameInstance.GetStatsSystem( gameInstance ).GetStatDetails( obj.GetEntityID() );
	for( i = 0; i < detailedList.Size(); i += 1 )
	{
		PrintStatDetails( gameInstance, detailedList[ i ] );
	}
	LogStats( "__________________________END__________________________" );
}

function PrintStatDetails( gameInstance : GameInstance, statDetails : gameStatDetailedData )
{
	var j : Int32;
	var statModifierDetails : gameStatModifierDetailedData;
	var boolValue : Bool;
	var modifierType : String;
	LogStats( "Stat: " + statDetails.statType );
	LogStats( "IsBool: " + statDetails.boolStatType );
	if( statDetails.boolStatType )
	{
		if( statDetails.value > 0.0 )
		{
			boolValue = true;
		}
		LogStats( "        Value: " + boolValue );
	}
	else
	{
		LogStats( "        Value: " + statDetails.value );
	}
	LogStats( ( ( "        Limits: " + NoTrailZeros( statDetails.limitMin ) ) + " - " ) + NoTrailZeros( statDetails.limitMax ) );
	if( statDetails.modifiers.Size() > 0 )
	{
		LogStats( "        Modifiers:" );
		for( j = 0; j < statDetails.modifiers.Size(); j += 1 )
		{
			statModifierDetails = statDetails.modifiers[ j ];
			modifierType = ModifierTypeToString( statModifierDetails.modifierType );
			LogStats( "                {" );
			LogStats( "                    Type: " + modifierType );
			LogStats( "                    Value: " + NoTrailZeros( statModifierDetails.value ) );
			LogStats( "                }" );
		}
	}
	LogStats( "--------" );
}

function ModifierTypeToString( type : gameStatModifierType ) : String
{
	var modifierType : String;
	if( ( ( Int32 )( type ) ) == 0 )
	{
		modifierType = "Additive";
	}
	else if( ( ( Int32 )( type ) ) == 1 )
	{
		modifierType = "AdditiveMultiplier";
	}
	else if( ( ( Int32 )( type ) ) == 2 )
	{
		modifierType = "Multiplier";
	}
	else
	{
		modifierType = "Invalid";
	}
	return modifierType;
}

exec function PrintGodModeSources( gameInstance : GameInstance )
{
	var i : Int32;
	var player : PlayerPuppet;
	var playerID : EntityID;
	var godModeSystem : GodModeSystem;
	var invulnerableCount : Int32;
	var immortalCount : Int32;
	var invulnerableSources : array< CName >;
	var immortalSources : array< CName >;
	godModeSystem = GameInstance.GetGodModeSystem( gameInstance );
	player = GetPlayer( gameInstance );
	playerID = player.GetEntityID();
	LogStats( "Printing God Modes:" );
	invulnerableCount = ( ( Int32 )( godModeSystem.GetGodModeCount( playerID, gameGodModeType.Invulnerable ) ) );
	if( invulnerableCount > 0 )
	{
		LogStats( "Invulnerable: " + IntToString( invulnerableCount ) );
		invulnerableSources = godModeSystem.GetGodModeSources( playerID, gameGodModeType.Invulnerable );
		for( i = 0; i < invulnerableCount; i += 1 )
		{
			LogStats( "    " + NameToString( invulnerableSources[ i ] ) );
		}
	}
	immortalCount = ( ( Int32 )( godModeSystem.GetGodModeCount( playerID, gameGodModeType.Immortal ) ) );
	if( immortalCount > 0 )
	{
		LogStats( "Immortal: " + IntToString( immortalCount ) );
		immortalSources = godModeSystem.GetGodModeSources( playerID, gameGodModeType.Immortal );
		for( i = 0; i < immortalCount; i += 1 )
		{
			LogStats( "    " + NameToString( immortalSources[ i ] ) );
		}
	}
	if( ( invulnerableCount == 0 ) && ( immortalCount == 0 ) )
	{
		LogStats( "    No god modes" );
	}
	LogStats( "------" );
}

exec function TEST_TargetImmortal( gameInstance : GameInstance, shouldSetStr : String )
{
	var target : GameObject;
	var shouldSet : Bool;
	var angleDist : EulerAngles;
	var targetID : EntityID;
	shouldSet = StringToBool( shouldSetStr );
	target = GameInstance.GetTargetingSystem( gameInstance ).GetObjectClosestToCrosshair( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject(), angleDist, TSQ_ALL() );
	targetID = target.GetEntityID();
	if( target )
	{
		if( shouldSet )
		{
			GameInstance.GetGodModeSystem( gameInstance ).AddGodMode( targetID, gameGodModeType.Immortal, 'TEST_TargetImmortal' );
		}
		else
		{
			GameInstance.GetGodModeSystem( gameInstance ).RemoveGodMode( targetID, gameGodModeType.Immortal, 'TEST_TargetImmortal' );
		}
	}
}

exec function TEST_TargetInvulnerable( gameInstance : GameInstance, shouldSetStr : String )
{
	var target : GameObject;
	var shouldSet : Bool;
	var angleDist : EulerAngles;
	var targetID : EntityID;
	shouldSet = StringToBool( shouldSetStr );
	target = GameInstance.GetTargetingSystem( gameInstance ).GetObjectClosestToCrosshair( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject(), angleDist, TSQ_ALL() );
	targetID = target.GetEntityID();
	if( target )
	{
		if( shouldSet )
		{
			GameInstance.GetGodModeSystem( gameInstance ).AddGodMode( targetID, gameGodModeType.Invulnerable, 'TEST_TargetInvulnerable' );
		}
		else
		{
			GameInstance.GetGodModeSystem( gameInstance ).RemoveGodMode( targetID, gameGodModeType.Invulnerable, 'TEST_TargetInvulnerable' );
		}
	}
}

function Debug_WeaponSpread_Set( gameInstance : GameInstance, useCircularDistribution : Bool, useEvenDistribution : Bool, rowCount : Int32, projectilesPerShot : Int32 )
{
	var bbSystem : BlackboardSystem;
	var debugBB : IBlackboard;
	bbSystem = GameInstance.GetBlackboardSystem( gameInstance );
	debugBB = bbSystem.Get( GetAllBlackboardDefs().DebugData );
	debugBB.SetBool( GetAllBlackboardDefs().DebugData.WeaponSpread_UseEvenDistribution, useEvenDistribution );
	debugBB.SetBool( GetAllBlackboardDefs().DebugData.WeaponSpread_UseCircularSpread, useCircularDistribution );
	debugBB.SetInt( GetAllBlackboardDefs().DebugData.WeaponSpread_EvenDistributionRowCount, rowCount );
	debugBB.SetInt( GetAllBlackboardDefs().DebugData.WeaponSpread_ProjectilesPerShot, projectilesPerShot );
}

exec function Debug_WeaponSpread( gameInstance : GameInstance, useCircularDistribution : String, useEvenDistribution : String, rowCount : String, projectilesPerShot : String )
{
	var _useEvenDistribution : Bool;
	var _useCircularDistribution : Bool;
	var _rowCount : Int32;
	var _projectilesPerShot : Int32;
	if( useEvenDistribution == "true" )
	{
		_useEvenDistribution = true;
	}
	if( useEvenDistribution == "false" )
	{
		_useEvenDistribution = false;
	}
	if( useCircularDistribution == "true" )
	{
		_useCircularDistribution = true;
	}
	if( useCircularDistribution == "false" )
	{
		_useCircularDistribution = false;
	}
	_rowCount = StringToInt( rowCount, 1 );
	_projectilesPerShot = StringToInt( projectilesPerShot, 1 );
	Debug_WeaponSpread_Set( gameInstance, _useCircularDistribution, _useEvenDistribution, _rowCount, _projectilesPerShot );
}

exec function Debug_WeaponSpread_RandomGrid( gameInstance : GameInstance )
{
	Debug_WeaponSpread_Set( gameInstance, false, true, RandRange( 1, 10 ), RandRange( 1, 40 ) );
}

exec function Debug_WeaponSpread_RandomCircular( gameInstance : GameInstance )
{
	Debug_WeaponSpread_Set( gameInstance, true, true, RandRange( 1, 10 ), RandRange( 1, 40 ) );
}

exec function PrintPlayerStat( gi : GameInstance, TEMP_Type : String )
{
	var stat : gamedataStatType;
	var player : PlayerPuppet;
	var playerID : StatsObjectID;
	var statValue : Float;
	stat = ( ( gamedataStatType )( ( ( Int32 )( EnumValueFromString( "gamedataStatType", TEMP_Type ) ) ) ) );
	player = GetPlayer( gi );
	playerID = player.GetEntityID();
	statValue = GameInstance.GetStatsSystem( gi ).GetStatValue( playerID, stat );
	LogStats( ( ( "Stat: " + TEMP_Type ) + " Value: " ) + statValue );
}

exec function PrintPlayerStats( gi : GameInstance )
{
	var i : Int32;
	var player : PlayerPuppet;
	var statValue : Float;
	var playerStat : gamedataStatType;
	var playerID : StatsObjectID;
	player = GetPlayer( gi );
	playerID = player.GetEntityID();
	for( i = 0; i < ( ( Int32 )( gamedataStatType.Count ) ); i += 1 )
	{
		playerStat = ( ( gamedataStatType )( i ) );
		statValue = GameInstance.GetStatsSystem( gi ).GetStatValue( playerID, playerStat );
		if( statValue != 0.0 )
		{
			LogStats( ( ( "Stat: " + EnumValueToString( "gamedataStatType", i ) ) + " Value: " ) + statValue );
		}
	}
}

exec function PrintTargetStats( gi : GameInstance )
{
	var i : Int32;
	var statValue : Float;
	var target : GameObject;
	target = GameInstance.GetTargetingSystem( gi ).GetLookAtObject( GetPlayer( gi ) );
	for( i = 0; i < ( ( Int32 )( gamedataStatType.Count ) ); i += 1 )
	{
		statValue = GameInstance.GetStatsSystem( gi ).GetStatValue( target.GetEntityID(), ( ( gamedataStatType )( i ) ) );
		if( statValue != 0.0 )
		{
			LogStats( ( ( "Stat: " + EnumValueToString( "gamedataStatType", i ) ) + " Value: " ) + statValue );
		}
	}
}

exec function PrintPlayerStatModifiers( gi : GameInstance, type : String )
{
	var i : Int32;
	var player : PlayerPuppet;
	var statSystem : StatsSystem;
	var statType : gamedataStatType;
	var statVal : Float;
	var statDetails : array< gameStatDetailedData >;
	var statMods : array< gameStatModifierDetailedData >;
	var playerID : StatsObjectID;
	player = GetPlayer( gi );
	if( !( player ) )
	{
		return;
	}
	playerID = player.GetEntityID();
	statSystem = GameInstance.GetStatsSystem( gi );
	statType = ( ( gamedataStatType )( ( ( Int32 )( EnumValueFromString( "gamedataStatType", type ) ) ) ) );
	statDetails = statSystem.GetStatDetails( playerID );
	for( i = 0; i < statDetails.Size(); i += 1 )
	{
		if( statDetails[ i ].statType == statType )
		{
			statVal = statDetails[ i ].value;
			statMods = statDetails[ i ].modifiers;
			break;
		}
	}
	if( statMods.Size() != 0 )
	{
		LogStats( "================================" );
		LogStats( ( "========= STAT: " + type ) + " =========" );
		LogStats( ( "========= Value: " + FloatToString( statVal ) ) + " ==========" );
		LogStats( "================================" );
		LogStats( "Modifiers: " );
	}
	for( i = 0; i < statMods.Size(); i += 1 )
	{
		LogStats( ( ( "Mod #" + IntToString( i ) ) + " ; Value: " ) + FloatToString( statMods[ i ].value ) );
	}
}

exec function AddStatModifier( gi : GameInstance, type : String, value : String, modType : String )
{
	var player : PlayerPuppet;
	var statSystem : StatsSystem;
	var statType : gamedataStatType;
	var statModType : gameStatModifierType;
	var statVal : Float;
	var playerID : StatsObjectID;
	player = GetPlayer( gi );
	playerID = player.GetEntityID();
	statSystem = GameInstance.GetStatsSystem( gi );
	statType = ( ( gamedataStatType )( ( ( Int32 )( EnumValueFromString( "gamedataStatType", type ) ) ) ) );
	statModType = ( ( gameStatModifierType )( ( ( Int32 )( EnumValueFromString( "gameStatModifierType", modType ) ) ) ) );
	statVal = StringToFloat( value );
	statSystem.AddModifier( playerID, RPGManager.CreateStatModifier( statType, statModType, statVal ) );
}

