importonly abstract class StatusEffectBase extends IScriptable
{
}

importonly class StatusEffect extends StatusEffectBase
{
	public import function GetRecord() : weak< StatusEffect_Record >;
	public import function GetInitialApplicationSimTimestamp() : EngineTime;
	public import function GetLastApplicationSimTimestamp() : EngineTime;
	public import function GetRemainingDuration() : Float;
	public import function GetMaxStacks() : Uint32;
	public import function GetStackCount() : Uint32;
	public import function GetInstigatorStaticDataID() : TweakDBID;
	public import function GetInstigatorEntityID() : EntityID;
	public import function GetDirection() : Vector4;
}

import struct StatusEffectTDBPicker
{
	import var statusEffect : TweakDBID;
}

exec function ApplyEffectOnPlayer( gi : GameInstance, effect : String )
{
	var player : PlayerPuppet;
	var seID : TweakDBID;
	player = ( ( PlayerPuppet )( GameInstance.GetPlayerSystem( gi ).GetLocalPlayerControlledGameObject() ) );
	seID = TDBID.Create( effect );
	GameInstance.GetStatusEffectSystem( gi ).ApplyStatusEffect( player.GetEntityID(), seID, player.GetRecordID(), player.GetEntityID() );
}

exec function ApplyEffectStackOnPlayer( gi : GameInstance, effect : String, count : String )
{
	var player : PlayerPuppet;
	var seID : TweakDBID;
	var countInt : Int32;
	player = ( ( PlayerPuppet )( GameInstance.GetPlayerSystem( gi ).GetLocalPlayerControlledGameObject() ) );
	seID = TDBID.Create( effect );
	countInt = StringToInt( count );
	GameInstance.GetStatusEffectSystem( gi ).ApplyStatusEffect( player.GetEntityID(), seID, player.GetRecordID(), player.GetEntityID(), ( ( Uint32 )( countInt ) ) );
}

exec function RemoveEffectPlayer( gi : GameInstance, effect : String )
{
	var player : PlayerPuppet;
	var seID : TweakDBID;
	player = ( ( PlayerPuppet )( GameInstance.GetPlayerSystem( gi ).GetLocalPlayerControlledGameObject() ) );
	seID = TDBID.Create( effect );
	GameInstance.GetStatusEffectSystem( gi ).RemoveStatusEffect( player.GetEntityID(), seID );
}

exec function PrintEffectsOnPlayer( gi : GameInstance )
{
	var player : PlayerPuppet;
	var effects : array< StatusEffect >;
	var i : Int32;
	var effectString : String;
	player = GetPlayer( gi );
	GameInstance.GetStatusEffectSystem( gi ).GetAppliedEffects( player.GetEntityID(), effects );
	Log( "Status effects currently on Player:" );
	for( i = 0; i < effects.Size(); i += 1 )
	{
		effectString = TDBID.ToStringDEBUG( effects[ i ].GetRecord().GetID() );
		Log( effectString );
	}
}

exec function PrintEffectsOnNPC( gi : GameInstance )
{
	var player : PlayerPuppet;
	var effects : array< StatusEffect >;
	var i : Int32;
	var effectString : String;
	player = GetPlayer( gi );
	GameInstance.GetStatusEffectSystem( gi ).GetAppliedEffects( GameInstance.GetTargetingSystem( gi ).GetLookAtObject( player ).GetEntityID(), effects );
	Log( "Status effects currently on an NPC:" );
	for( i = 0; i < effects.Size(); i += 1 )
	{
		effectString = TDBID.ToStringDEBUG( effects[ i ].GetRecord().GetID() );
		Log( effectString );
	}
}

exec function ApplyEffectOnNPC( gi : GameInstance, effect : String )
{
	var player : PlayerPuppet;
	var seID : TweakDBID;
	player = GetPlayer( gi );
	seID = TDBID.Create( effect );
	GameInstance.GetStatusEffectSystem( gi ).ApplyStatusEffect( GameInstance.GetTargetingSystem( gi ).GetLookAtObject( player ).GetEntityID(), seID, player.GetRecordID(), player.GetEntityID() );
}

exec function RagdollNPC( gi : GameInstance, pushForce : String )
{
	var player : PlayerPuppet;
	var target : NPCPuppet;
	var playerCamPos : Vector4;
	var playerCamFwd : Vector4;
	var distance : Float;
	var pulseOrigin : Vector4;
	player = GetPlayer( gi );
	target = ( ( NPCPuppet )( GameInstance.GetTargetingSystem( gi ).GetLookAtObject( player ) ) );
	if( target )
	{
		target.QueueEvent( CreateForceRagdollEvent( 'Debug Command' ) );
		if( pushForce != "" )
		{
			distance = Vector4.Distance( target.GetWorldPosition(), player.GetWorldPosition() );
			playerCamPos = Matrix.GetTranslation( player.GetFPPCameraComponent().GetLocalToWorld() );
			playerCamFwd = Matrix.GetDirectionVector( player.GetFPPCameraComponent().GetLocalToWorld() );
			pulseOrigin = playerCamPos + ( ( Vector4.Normalize( playerCamFwd ) * distance ) * 0.85000002 );
			GameInstance.GetDelaySystem( player.GetGame() ).DelayEvent( target, CreateRagdollApplyImpulseEvent( pulseOrigin, Vector4.Normalize( playerCamFwd ) * StringToFloat( pushForce ), 5.0 ), 0.1, false );
			GameInstance.GetDebugVisualizerSystem( player.GetGame() ).DrawWireSphere( pulseOrigin, 0.30000001, Color( 255, 0, 0, 255 ), 3.0 );
			GameInstance.GetDebugVisualizerSystem( player.GetGame() ).DrawLine3D( pulseOrigin, pulseOrigin + ( Vector4.Normalize( playerCamFwd ) * StringToFloat( pushForce ) ), Color( 0, 0, 255, 255 ), 3.0 );
		}
	}
}

