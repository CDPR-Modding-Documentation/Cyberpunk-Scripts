class SimpleTargetManager extends ScriptableComponent
{

	public static function AddTarget( out targetsList : array< Target >, goTarget : weak< GameObject >, isInteresting : Bool, isVisible : Bool )
	{
		var newTarget : Target;
		var targetIndex : Int32;
		targetIndex = IsTargetAlreadyAdded( targetsList, goTarget );
		if( targetIndex >= 0 )
		{
			targetsList[ targetIndex ].SetIsVisible( isVisible );
			targetsList[ targetIndex ].SetIsInteresting( isInteresting );
			if( !( IsFinal() ) )
			{
				LogTargetManager( "AddTarget / Target already added. Request rejected", 'w' );
			}
			return;
		}
		newTarget = new Target;
		newTarget.CreateTarget( goTarget, isInteresting, isVisible );
		if( goTarget.IsPlayer() )
		{
			targetsList.Insert( 0, newTarget );
		}
		else
		{
			targetsList.PushBack( newTarget );
		}
	}

	public static function RemoveTarget( out targetsList : array< Target >, targetToRemove : weak< GameObject > ) : Bool
	{
		var foundTarget : Target;
		foundTarget = GetSpecificTarget( targetsList, targetToRemove );
		if( !( foundTarget ) )
		{
			if( !( IsFinal() ) )
			{
				LogTargetManager( "CameraTargetsManager / RemoveTarget / Target not found" );
			}
			return false;
		}
		targetsList.Remove( foundTarget );
		return true;
	}

	public static function SetTargetVisible( targetsList : array< Target >, targetToRemove : weak< GameObject >, isVisible : Bool ) : Bool
	{
		var foundTarget : Target;
		foundTarget = GetSpecificTarget( targetsList, targetToRemove );
		if( !( foundTarget ) )
		{
			if( !( IsFinal() ) )
			{
				LogTargetManager( "CameraTargetsManager / RemoveTarget / Target not found" );
			}
			return false;
		}
		foundTarget.SetIsVisible( isVisible );
		return true;
	}

	public static function RemoveAllTargets( out targetsList : array< Target > )
	{
		targetsList.Clear();
	}

	public static function GetFirstInterestingTargetObject( targetsList : array< Target > ) : weak< GameObject >
	{
		var target : Target;
		var goTarget : weak< GameObject >;
		target = GetFirstInterestingTarget( targetsList );
		if( target )
		{
			goTarget = target.GetTarget();
			if( goTarget )
			{
				return goTarget;
			}
			else
			{
				if( !( IsFinal() ) )
				{
					LogTargetManager( "Target has no puppet - SHOULD NEVER HAPPEN. Debug!" );
				}
				return NULL;
			}
		}
		else
		{
			if( !( IsFinal() ) )
			{
				LogTargetManager( "Interesting Target not found" );
			}
			return NULL;
		}
	}

	public static function GetFirstInterestingTarget( targetsList : array< Target > ) : Target
	{
		var i : Int32;
		for( i = 0; i < targetsList.Size(); i += 1 )
		{
			if( targetsList[ i ].IsInteresting() && targetsList[ i ].IsVisible() )
			{
				return targetsList[ i ];
			}
		}
		if( !( IsFinal() ) )
		{
			LogTargetManager( "/ CameraTargetsManager / Interesting Target Not Found" );
		}
		return NULL;
	}

	public static function GetSpecificTarget( targetsList : array< Target >, target : weak< GameObject > ) : Target
	{
		var i : Int32;
		for( i = 0; i < targetsList.Size(); i += 1 )
		{
			if( target == targetsList[ i ] )
			{
				return targetsList[ i ];
			}
		}
		if( !( IsFinal() ) )
		{
			LogTargetManager( "CameraTargetsManager / Wrong Camera Target Requested - DEBUG" );
		}
		return NULL;
	}

	public static function GetSpecificTarget( targetsList : array< Target >, targetID : EntityID ) : Target
	{
		var i : Int32;
		for( i = 0; i < targetsList.Size(); i += 1 )
		{
			if( targetID == targetsList[ i ].GetTarget().GetEntityID() )
			{
				return targetsList[ i ];
			}
		}
		if( !( IsFinal() ) )
		{
			LogTargetManager( "CameraTargetsManager / Wrong Camera Target Requested - DEBUG" );
		}
		return NULL;
	}

	public static function GetSpecificTarget( targetsList : array< Target >, index : Int32 ) : Target
	{
		if( targetsList.Size() == 0 )
		{
			if( !( IsFinal() ) )
			{
				LogTargetManager( "CameraTargetsManager / CameraManager empty - no targets" );
			}
			return NULL;
		}
		if( ( index >= 0 ) && ( index < targetsList.Size() ) )
		{
			return targetsList[ index ];
		}
		if( !( IsFinal() ) )
		{
			LogTargetManager( "CameraTargetsManager / Wrong Camera Target Index Requested - DEBUG" );
		}
		return NULL;
	}

	public static function IsTargetAlreadyAdded( targets : array< Target >, targetToCheck : Target ) : Int32
	{
		var i : Int32;
		for( i = 0; i < targets.Size(); i += 1 )
		{
			if( targetToCheck == targets[ i ] )
			{
				return i;
			}
		}
		return -1;
	}

	public static function IsTargetAlreadyAdded( targetsList : array< Target >, gameObject : weak< GameObject > ) : Int32
	{
		var i : Int32;
		for( i = 0; i < targetsList.Size(); i += 1 )
		{
			if( gameObject == targetsList[ i ].GetTarget() )
			{
				return i;
			}
		}
		return -1;
	}

	public static function IsTargetVisible( targetsList : array< Target >, gameObject : weak< GameObject > ) : Bool
	{
		var i : Int32;
		for( i = 0; i < targetsList.Size(); i += 1 )
		{
			if( gameObject == targetsList[ i ].GetTarget() )
			{
				return targetsList[ i ].IsVisible();
			}
		}
		return false;
	}

	public static function HasInterestingTargets( targetsList : array< Target > ) : Bool
	{
		var i : Int32;
		for( i = 0; i < targetsList.Size(); i += 1 )
		{
			if( targetsList[ i ].IsInteresting() && targetsList[ i ].IsVisible() )
			{
				return true;
			}
		}
		return false;
	}

}

class Target
{
	private var target : weak< GameObject >;
	private var isInteresting : Bool;
	private var isVisible : Bool;

	public function CreateTarget( currentTarget : weak< GameObject >, interesting : Bool, visible : Bool )
	{
		target = currentTarget;
		isInteresting = interesting;
		isVisible = visible;
	}

	public function GetTarget() : weak< GameObject >
	{
		return target;
	}

	public function IsInteresting() : Bool
	{
		return isInteresting;
	}

	public function IsVisible() : Bool
	{
		return isVisible;
	}

	public function SetIsInteresting( interestingChange : Bool )
	{
		isInteresting = interestingChange;
	}

	public function SetIsVisible( _isVisible : Bool )
	{
		isVisible = _isVisible;
	}

}

operator==( goTarget : weak< GameObject >, target : Target ) : Bool
{
	if( goTarget == target.GetTarget() )
	{
		return true;
	}
	return false;
}

operator==( target : Target, goTarget : weak< GameObject > ) : Bool
{
	if( goTarget == target.GetTarget() )
	{
		return true;
	}
	return false;
}

