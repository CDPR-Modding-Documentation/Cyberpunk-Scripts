struct SColor
{

	public static function Red( optional alpha : Uint8 ) : Color
	{
		var value : Uint8;
		value = ( ( alpha == 0 ) ? ( ( ( Uint8 )( 200 ) ) ) : ( alpha ) );
		return Color( 255, 0, 0, value );
	}

	public static function Green( optional alpha : Uint8 ) : Color
	{
		var value : Uint8;
		value = ( ( alpha == 0 ) ? ( ( ( Uint8 )( 200 ) ) ) : ( alpha ) );
		return Color( 0, 255, 0, value );
	}

	public static function Blue( optional alpha : Uint8 ) : Color
	{
		var value : Uint8;
		value = ( ( alpha == 0 ) ? ( ( ( Uint8 )( 200 ) ) ) : ( alpha ) );
		return Color( 0, 0, 255, value );
	}

	public static function White( optional alpha : Uint8 ) : Color
	{
		var value : Uint8;
		value = ( ( alpha == 0 ) ? ( ( ( Uint8 )( 200 ) ) ) : ( alpha ) );
		return Color( 255, 255, 255, value );
	}

	public static function Black( optional alpha : Uint8 ) : Color
	{
		var value : Uint8;
		value = ( ( alpha == 0 ) ? ( ( ( Uint8 )( 200 ) ) ) : ( alpha ) );
		return Color( 0, 0, 0, value );
	}

	public static function Grey( optional alpha : Uint8 ) : Color
	{
		var value : Uint8;
		value = ( ( alpha == 0 ) ? ( ( ( Uint8 )( 200 ) ) ) : ( alpha ) );
		return Color( 0, 0, 0, value );
	}

	public static function Yellow( optional alpha : Uint8 ) : Color
	{
		var value : Uint8;
		value = ( ( alpha == 0 ) ? ( ( ( Uint8 )( 200 ) ) ) : ( alpha ) );
		return Color( 255, 215, 0, value );
	}

	public static function Orange( optional alpha : Uint8 ) : Color
	{
		var value : Uint8;
		value = ( ( alpha == 0 ) ? ( ( ( Uint8 )( 200 ) ) ) : ( alpha ) );
		return Color( 255, 140, 0, value );
	}

	public static function Pink( optional alpha : Uint8 ) : Color
	{
		var value : Uint8;
		value = ( ( alpha == 0 ) ? ( ( ( Uint8 )( 200 ) ) ) : ( alpha ) );
		return Color( 255, 20, 147, value );
	}

	public static function Purple( optional alpha : Uint8 ) : Color
	{
		var value : Uint8;
		value = ( ( alpha == 0 ) ? ( ( ( Uint8 )( 200 ) ) ) : ( alpha ) );
		return Color( 148, 0, 211, value );
	}

}

