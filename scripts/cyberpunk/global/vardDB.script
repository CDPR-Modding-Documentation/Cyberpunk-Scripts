exec function CheckFactValue( gameInstance : GameInstance, fact : String )
{
	var convertedFact : CName;
	var value : Int32;
	convertedFact = StringToName( fact );
	value = GetFact( gameInstance, convertedFact );
	Log( ( ( "Fact " + fact ) + ": " ) + IntToString( value ) );
}

exec function Hotkeys( gameInstance : GameInstance )
{
	DebugGiveHotkeys( gameInstance );
}

exec function HotkeysNOW( gameInstance : GameInstance )
{
	DebugGiveHotkeys( gameInstance );
}

function DebugGiveHotkeys( gameInstance : GameInstance )
{
	AddFact( gameInstance, 'dpad_hints_visibility_enabled' );
	AddFact( gameInstance, 'unlock_phone_hud_dpad' );
	AddFact( gameInstance, 'unlock_car_hud_dpad' );
	AddFact( gameInstance, 'initial_gadget_picked' );
}

exec function AddDebugFact( gameInstance : GameInstance, fact : String )
{
	var convertedFact : CName;
	convertedFact = StringToName( fact );
	AddFact( gameInstance, convertedFact );
}

exec function SetDebugFact( gameInstance : GameInstance, fact : String, value : String )
{
	var convertedFact : CName;
	convertedFact = StringToName( fact );
	SetFactValue( gameInstance, convertedFact, StringToInt( value ) );
}

function AddFact( game : GameInstance, factName : CName, optional factCount : Int32 ) : Bool
{
	var currentFactCount : Int32;
	if( !( GameInstance.IsValid( game ) ) )
	{
		Log( "AddFact / Invalid Game Instance" );
		return false;
	}
	if( !( IsNameValid( factName ) ) )
	{
		Log( "fact name is not valid, fact not added" );
		return false;
	}
	if( factCount == 0 )
	{
		factCount = 1;
	}
	currentFactCount = GameInstance.GetQuestsSystem( game ).GetFact( factName ) + factCount;
	GameInstance.GetQuestsSystem( game ).SetFact( factName, currentFactCount );
	return true;
}

function SetFactValue( game : GameInstance, factName : CName, factCount : Int32 ) : Bool
{
	if( !( GameInstance.IsValid( game ) ) )
	{
		Log( "SetFactValue / Invalid Game Instance" );
		return false;
	}
	if( !( IsNameValid( factName ) ) )
	{
		Log( NameToString( factName ) + " is not valid, fact not added" );
		return false;
	}
	GameInstance.GetQuestsSystem( game ).SetFact( factName, factCount );
	return true;
}

function GetFact( game : GameInstance, factName : CName ) : Int32
{
	if( !( IsNameValid( factName ) ) )
	{
		Log( ( "GetFact(" + NameToString( factName ) ) + "): fact name is not valid, cannot get fact value" );
		return 0;
	}
	if( !( GameInstance.IsValid( game ) ) )
	{
		Log( ( "GetFact(" + NameToString( factName ) ) + "): game instance is not valid, cannot get fact value" );
		return 0;
	}
	return GameInstance.GetQuestsSystem( game ).GetFact( factName );
}

