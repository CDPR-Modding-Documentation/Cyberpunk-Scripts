class StrikeExecutor_Debug_PrintStats extends StrikeExecutor_Debug
{

	public function Process( ctx : EffectScriptContext, applierCtx : EffectExecutionScriptContext ) : Bool
	{
		var puppet : ScriptedPuppet;
		var entity : Entity;
		entity = EffectExecutionScriptContext.GetTarget( applierCtx );
		puppet = ( ( ScriptedPuppet )( entity ) );
		if( puppet )
		{
			PrintStats( puppet );
			return true;
		}
		return false;
	}

	public function PrintStats( puppet : ScriptedPuppet )
	{
		var valInt : Int32;
		var valStr : String;
		var spaceFillSize : Int32;
		var godMode : gameGodModeType;
		var attToPlayer : EAIAttitude;
		var attFromPlayer : EAIAttitude;
		var statsPack : array< gamedataStatType >;
		var gi : GameInstance;
		var i : Int32;
		var objectID : StatsObjectID;
		var statsSystem : StatsSystem;
		gi = puppet.GetGame();
		objectID = puppet.GetEntityID();
		statsSystem = GameInstance.GetStatsSystem( gi );
		spaceFillSize = 12;
		LogStats( "" );
		LogStats( ( "---- stats of " + puppet ) + " ----" );
		LogStats( "" );
		if( GetImmortality( puppet, godMode ) )
		{
			valStr = "" + godMode;
		}
		else
		{
			valStr = "None";
		}
		LogStats( "Godmode: " + valStr );
		attToPlayer = GameObject.GetAttitudeTowards( puppet, GetPlayer( gi ) );
		attFromPlayer = GameObject.GetAttitudeTowards( puppet, GetPlayer( gi ) );
		LogStats( ( ( "Attitude - " + puppet ) + " towards Player: " ) + attToPlayer );
		LogStats( ( ( "Attitude - Player towards " + puppet ) + ": " ) + attFromPlayer );
		valInt = ( ( Int32 )( statsSystem.GetStatValue( objectID, gamedataStatType.Level ) ) );
		LogStats( "Character Level: " + valInt );
		PrintStatGroupHeader( "RESOURCES", spaceFillSize );
		statsPack.Clear();
		for( i = 0; i < ( ( Int32 )( gamedataStatPoolType.Count ) ); i += 1 )
		{
			PrintStatPool( puppet, ( ( gamedataStatPoolType )( i ) ), spaceFillSize );
		}
		PrintStatGroupHeader( "ATTRIBUTES", spaceFillSize );
		statsPack.Clear();
		statsPack.PushBack( gamedataStatType.Strength );
		statsPack.PushBack( gamedataStatType.Reflexes );
		statsPack.PushBack( gamedataStatType.Intelligence );
		statsPack.PushBack( gamedataStatType.TechnicalAbility );
		statsPack.PushBack( gamedataStatType.Cool );
		PrintStats( puppet, statsPack, spaceFillSize );
		PrintStatGroupHeader( "PRIMARY STATS", spaceFillSize );
		statsPack.Clear();
		statsPack.PushBack( gamedataStatType.Accuracy );
		PrintStats( puppet, statsPack, spaceFillSize );
		PrintStatGroupHeader( "SECONDARY STATS", spaceFillSize );
		statsPack.Clear();
		for( i = 0; i < ( ( Int32 )( gamedataDamageType.Count ) ); i += 1 )
		{
			statsPack.PushBack( statsSystem.GetStatType( ( ( gamedataDamageType )( i ) ) ) );
		}
		PrintStats( puppet, statsPack, spaceFillSize );
		LogStats( "" );
		LogStats( ( "---- end of stats of " + puppet ) + " ----" );
		LogStats( "" );
	}

	private const function PrintStatGroupHeader( str : String, spaceFillSize : Int32 )
	{
		LogStats( "" );
		LogStats( SpaceFill( str, ( 2 * spaceFillSize ) + 3, ESpaceFillMode.JustifyCenter ) );
	}

	private function PrintStats( obj : GameObject, stats : array< gamedataStatType >, spaceFillSize : Int32 )
	{
		var i : Int32;
		for( i = 0; i < stats.Size(); i += 1 )
		{
			PrintStat( obj, stats[ i ], spaceFillSize );
		}
	}

	private function PrintStat( obj : GameObject, stat : gamedataStatType, spaceFillSize : Int32 )
	{
		var val : Float;
		var str : String;
		var objectID : StatsObjectID;
		objectID = obj.GetEntityID();
		val = GameInstance.GetStatsSystem( obj.GetGame() ).GetStatValue( objectID, stat );
		str = NoTrailZeros( val );
		LogStats( ( SpaceFill( str, spaceFillSize, ESpaceFillMode.JustifyRight ) + " | " ) + stat );
	}

	private function PrintStatPool( obj : GameObject, statPool : gamedataStatPoolType, spaceFillSize : Int32 )
	{
		var val : Float;
		var str : String;
		var objectID : StatsObjectID;
		objectID = obj.GetEntityID();
		val = GameInstance.GetStatPoolsSystem( obj.GetGame() ).GetStatPoolValue( objectID, statPool );
		str = NoTrailZeros( val );
		LogStatPools( ( SpaceFill( str, spaceFillSize, ESpaceFillMode.JustifyRight ) + " | " ) + EnumValueToString( "gamedataStatPoolType", ( ( Int64 )( statPool ) ) ) );
	}

}

