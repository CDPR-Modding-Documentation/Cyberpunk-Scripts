class ConsumeAction extends BaseItemAction
{

	public override function CompleteAction( gameInstance : GameInstance )
	{
		var removePoint : Float;
		var removeConsumableEvent : RemoveConsumableDelayedEvent;
		super.CompleteAction( gameInstance );
		if( ShouldRemoveAfterUse() )
		{
			RemoveConsumableItem( gameInstance );
		}
		else
		{
			removePoint = TweakDBInterface.GetConsumableItemRecord( ItemID.GetTDBID( GetItemData().GetID() ) ).RemovePoint();
			removeConsumableEvent = new RemoveConsumableDelayedEvent;
			removeConsumableEvent.consumeAction = this;
			GameInstance.GetDelaySystem( gameInstance ).DelayEvent( GetExecutor(), removeConsumableEvent, removePoint );
		}
		NotifyAutocraftSystem( gameInstance );
	}

	public function RemoveConsumableItem( gameInstance : GameInstance )
	{
		var eqs : EquipmentSystem;
		var blackboardSystem : BlackboardSystem;
		var blackboard : IBlackboard;
		GameInstance.GetTransactionSystem( gameInstance ).RemoveItem( GetExecutor(), GetItemData().GetID(), 1 );
		eqs = ( ( EquipmentSystem )( GameInstance.GetScriptableSystemsContainer( gameInstance ).Get( 'EquipmentSystem' ) ) );
		if( eqs )
		{
		}
		if( ShouldEquipAnotherConsumable() )
		{
			TryToEquipSameTypeConsumable();
		}
		blackboardSystem = GameInstance.GetBlackboardSystem( gameInstance );
		blackboard = blackboardSystem.Get( GetAllBlackboardDefs().UI_QuickSlotsData );
		blackboard.SetVariant( GetAllBlackboardDefs().UI_QuickSlotsData.consumableBeingUsed, ItemID.None() );
	}

	private function ShouldEquipAnotherConsumable() : Bool
	{
		if( ( GetItemData().GetQuantity() > 0 ) || ShouldRemoveAfterUse() )
		{
			return false;
		}
		return true;
	}

	private function TryToEquipSameTypeConsumable()
	{
		var inventoryManager : InventoryDataManagerV2;
		var inventoryItems : array< InventoryItemData >;
		var currentConsumable : InventoryItemData;
		var consumableToEquip : InventoryItemData;
		var consumableType : gamedataConsumableType;
		var consumableRecord : ConsumableItem_Record;
		var consumableQuality : Int32;
		var bestQuality : Int32;
		var i : Int32;
		inventoryManager = new InventoryDataManagerV2;
		inventoryManager.Initialize( ( ( PlayerPuppet )( GetExecutor() ) ) );
		currentConsumable = inventoryManager.GetInventoryItemData( GetItemData() );
		consumableType = TweakDBInterface.GetConsumableItemRecord( ItemID.GetTDBID( GetItemData().GetID() ) ).ConsumableType().Type();
		inventoryItems = inventoryManager.GetPlayerInventoryData( InventoryItemData.GetEquipmentArea( currentConsumable ), true );
		if( inventoryItems.Size() == 0 )
		{
			return;
		}
		for( i = 0; i < inventoryItems.Size(); i += 1 )
		{
			consumableRecord = TweakDBInterface.GetConsumableItemRecord( ItemID.GetTDBID( InventoryItemData.GetID( inventoryItems[ i ] ) ) );
			consumableQuality = consumableRecord.Quality().Value();
			if( consumableRecord.ConsumableType().Type() == consumableType && ( consumableQuality >= bestQuality ) )
			{
				bestQuality = consumableQuality;
				consumableToEquip = inventoryItems[ i ];
			}
		}
		if( !( InventoryItemData.IsEmpty( consumableToEquip ) ) )
		{
			inventoryManager.EquipItem( InventoryItemData.GetID( consumableToEquip ), InventoryItemData.GetSlotIndex( currentConsumable ) );
		}
	}

	protected override function ProcessStatusEffects( actionEffects : array< weak< ObjectActionEffect_Record > >, gameInstance : GameInstance )
	{
		var effectInstigator : TweakDBID;
		var appliedEffects : array< StatusEffect >;
		var newConsumableTDBID : TweakDBID;
		var newConsumableName : gamedataConsumableBaseName;
		var usedConsumableName : gamedataConsumableBaseName;
		var i : Int32;
		appliedEffects = StatusEffectHelper.GetAppliedEffects( GetExecutor() );
		newConsumableTDBID = ItemID.GetTDBID( GetItemData().GetID() );
		newConsumableName = TweakDBInterface.GetConsumableItemRecord( newConsumableTDBID ).ConsumableBaseName().Type();
		for( i = 0; i < appliedEffects.Size(); i += 1 )
		{
			effectInstigator = appliedEffects[ i ].GetInstigatorStaticDataID();
			usedConsumableName = TweakDBInterface.GetConsumableItemRecord( effectInstigator ).ConsumableBaseName().Type();
			if( newConsumableName == usedConsumableName && ( ( ( Int32 )( appliedEffects[ i ].GetMaxStacks() ) ) == 1 ) )
			{
				StatusEffectHelper.RemoveStatusEffect( GetExecutor(), appliedEffects[ i ] );
				break;
			}
		}
		for( i = 0; i < actionEffects.Size(); i += 1 )
		{
			StatusEffectHelper.ApplyStatusEffect( GetExecutor(), actionEffects[ i ].StatusEffect().GetID(), ItemID.GetTDBID( GetItemData().GetID() ) );
		}
	}

	protected function NotifyAutocraftSystem( gameInstance : GameInstance )
	{
		var autocraftSystem : AutocraftSystem;
		var autocraftItemUsedRequest : RegisterItemUsedRequest;
		autocraftSystem = ( ( AutocraftSystem )( GameInstance.GetScriptableSystemsContainer( gameInstance ).Get( 'AutocraftSystem' ) ) );
		autocraftItemUsedRequest = new RegisterItemUsedRequest;
		autocraftItemUsedRequest.itemUsed = GetItemData().GetID();
		autocraftSystem.QueueRequest( autocraftItemUsedRequest );
	}

	public override function IsVisible( context : GetActionsContext, objectActionsCallbackController : weak< gameObjectActionsCallbackController > ) : Bool
	{
		if( ( ( PlayerPuppet )( GetExecutor() ) ).IsInCombat() && GetItemData().GetItemType() != gamedataItemType.Con_Skillbook )
		{
			return false;
		}
		return true;
	}

}

class RemoveConsumableDelayedEvent extends Event
{
	var consumeAction : ConsumeAction;
}

