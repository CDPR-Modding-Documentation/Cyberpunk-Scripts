class PlayerHandicapSystem extends ScriptableSystem
{
	private var m_canDropHealingConsumable : Bool;
	default m_canDropHealingConsumable = true;
	private var m_canDropAmmo : Bool;
	default m_canDropAmmo = true;

	public static function GetInstance( owner : weak< GameObject > ) : PlayerHandicapSystem
	{
		var PHS : PlayerHandicapSystem;
		PHS = ( ( PlayerHandicapSystem )( GameInstance.GetScriptableSystemsContainer( owner.GetGame() ).Get( 'PlayerHandicapSystem' ) ) );
		return PHS;
	}

	public const function CanDropHealingConsumable() : Bool
	{
		return m_canDropHealingConsumable;
	}

	private function OnBlockHealingConsumableDrop( request : BlockHealingConsumableDrop )
	{
		var delay : Float;
		var newRequest : UnblockHealingConsumableDrop;
		if( m_canDropHealingConsumable )
		{
			newRequest = new UnblockHealingConsumableDrop;
			delay = TDB.GetFloat( T"GlobalStats.DelayOnDroppingSupportiveConsumable.value", 30.0 );
			GameInstance.GetDelaySystem( GetGameInstance() ).DelayScriptableSystemRequest( 'PlayerHandicapSystem', newRequest, delay, true );
		}
		m_canDropHealingConsumable = false;
	}

	private function OnUnblockHealingConsumableDrop( request : UnblockHealingConsumableDrop )
	{
		m_canDropHealingConsumable = true;
	}

	public const function CanDropAmmo() : Bool
	{
		return m_canDropAmmo;
	}

	private function OnBlockAmmoDrop( request : BlockAmmoDrop )
	{
		var delay : Float;
		var unblockRequest : UnblockAmmoDrop;
		if( m_canDropAmmo )
		{
			delay = TDB.GetFloat( T"GlobalStats.DelayOnDroppingHandicapAmmo.value", 30.0 );
			unblockRequest = new UnblockAmmoDrop;
			GameInstance.GetDelaySystem( GetGameInstance() ).DelayScriptableSystemRequest( 'PlayerHandicapSystem', unblockRequest, delay, true );
		}
		m_canDropAmmo = false;
	}

	private function OnUnblockAmmoDrop( request : UnblockAmmoDrop )
	{
		m_canDropAmmo = true;
	}

	public const function GetHandicapAmmo() : array< TweakDBID >
	{
		var equippedWeapons : array< ItemID >;
		var i : Int32;
		var awardedAmmo : array< TweakDBID >;
		var player : weak< GameObject >;
		var statsSystem : StatsSystem;
		var transactionSystem : TransactionSystem;
		var itemData : weak< gameItemData >;
		player = GetPlayer( GetGameInstance() );
		equippedWeapons = EquipmentSystem.GetItemsInArea( player, gamedataEquipmentArea.Weapon );
		if( CanDropAmmo() )
		{
			statsSystem = GameInstance.GetStatsSystem( GetGameInstance() );
			transactionSystem = GameInstance.GetTransactionSystem( GetGameInstance() );
			for( i = 0; i < equippedWeapons.Size(); i += 1 )
			{
				if( ItemID.IsValid( equippedWeapons[ i ] ) )
				{
					itemData = transactionSystem.GetItemData( player, equippedWeapons[ i ] );
					if( ( RPGManager.GetAmmoCountValue( player, equippedWeapons[ i ] ) <= ( ( Int32 )( statsSystem.GetStatValue( itemData.GetStatsObjectID(), gamedataStatType.MagazineCapacity ) ) ) ) && WeaponObject.IsRanged( equippedWeapons[ i ] ) )
					{
						awardedAmmo.PushBack( RPGManager.GetWeaponAmmoTDBID( equippedWeapons[ i ] ) );
					}
				}
			}
		}
		return awardedAmmo;
	}

}

