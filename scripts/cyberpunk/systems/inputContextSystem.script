class InputContextSystem extends ScriptableSystem
{
	private var activeContext : inputContextType;

	private export function OnPlayerAttach( request : PlayerAttachRequest )
	{
		activeContext = inputContextType.RPG;
	}

	public const function GetActiveContext() : inputContextType
	{
		return activeContext;
	}

	public const function IsActiveContextAction() : Bool
	{
		return activeContext == inputContextType.Action;
	}

	public const function IsActiveContextRPG() : Bool
	{
		return activeContext == inputContextType.RPG;
	}

	private function OnChangeActiveContextRequest( request : ChangeActiveContextRequest )
	{
		activeContext = request.newContext;
	}

}

class ChangeActiveContextRequest extends PlayerScriptableSystemRequest
{
	var newContext : inputContextType;
}

enum inputContextType
{
	Action = 0,
	RPG = 1,
}

exec function SetActionContext( gameInstance : GameInstance )
{
	var ContextRequest : ChangeActiveContextRequest;
	var setProgressionBuildReq : SetProgressionBuild;
	ContextRequest = new ChangeActiveContextRequest;
	ContextRequest.newContext = inputContextType.Action;
	setProgressionBuildReq = new SetProgressionBuild;
	setProgressionBuildReq.Set( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject(), gamedataBuildType.StartingBuild );
	GameInstance.GetScriptableSystemsContainer( gameInstance ).Get( 'InputContextSystem' ).QueueRequest( ContextRequest );
	GameInstance.GetScriptableSystemsContainer( gameInstance ).Get( 'PlayerDevelopmentSystem' ).QueueRequest( setProgressionBuildReq );
}

exec function SetRpgContext( gameInstance : GameInstance )
{
	var ContextRequest : ChangeActiveContextRequest;
	var setProgressionBuildReq : SetProgressionBuild;
	ContextRequest = new ChangeActiveContextRequest;
	ContextRequest.newContext = inputContextType.RPG;
	setProgressionBuildReq = new SetProgressionBuild;
	setProgressionBuildReq.Set( GameInstance.GetPlayerSystem( gameInstance ).GetLocalPlayerMainGameObject(), gamedataBuildType.StartingBuild );
	GameInstance.GetScriptableSystemsContainer( gameInstance ).Get( 'InputContextSystem' ).QueueRequest( ContextRequest );
	GameInstance.GetScriptableSystemsContainer( gameInstance ).Get( 'PlayerDevelopmentSystem' ).QueueRequest( setProgressionBuildReq );
}

