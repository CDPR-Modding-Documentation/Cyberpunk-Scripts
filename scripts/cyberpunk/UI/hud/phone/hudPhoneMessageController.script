class HudPhoneMessageController extends HUDPhoneElement
{
	private editable var m_MessageText : inkTextRef;
	private var m_MessageAnim : inkAnimProxy;
	private editable var m_ShowingAnimationName : CName;
	default m_ShowingAnimationName = 'messageShowingAnimation';
	private editable var m_HidingAnimationName : CName;
	default m_HidingAnimationName = 'messageHidingAnimation';
	private editable var m_VisibleAnimationName : CName;
	default m_VisibleAnimationName = 'messageVisibleAnimation';
	private editable var m_MessageMaxLength : Int32;
	default m_MessageMaxLength = 120;
	private editable var m_MessageTopper : String;
	default m_MessageTopper = "...";
	private var m_Paused : Bool;
	default m_Paused = false;
	private var m_CurrentMessage : weak< JournalPhoneMessage >;
	private var m_Queue : array< weak< JournalPhoneMessage > >;

	protected function GetNumElementsInQueue() : Int32
	{
		return m_Queue.Size();
	}

	protected function ClearQueue()
	{
		m_Queue.Clear();
	}

	protected function Enqueue( element : weak< JournalPhoneMessage > )
	{
		m_Queue.PushBack( element );
	}

	protected function Dequeue()
	{
		var element : weak< JournalPhoneMessage >;
		if( GetNumElementsInQueue() > 0 )
		{
			element = m_Queue[ 0 ];
			m_Queue.Erase( 0 );
			OnDequeue( element );
		}
	}

	public function ShowMessage( messageToShow : weak< JournalPhoneMessage > )
	{
		Enqueue( messageToShow );
		CheckIfReadyToDequeue();
	}

	protected event OnStateChanged( widget : weak< inkWidget >, oldState : CName, newState : CName )
	{
		var currentState : EHudPhoneVisibility;
		StopAllAnimations();
		currentState = GetStateFromName( newState );
		if( currentState == EHudPhoneVisibility.Showing )
		{
			m_MessageAnim = PlayLibraryAnimation( m_ShowingAnimationName );
			m_MessageAnim.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnAnimationFinished' );
		}
		else if( currentState == EHudPhoneVisibility.Visible )
		{
			m_RootWidget.SetOpacity( 1.0 );
			m_MessageAnim = PlayLibraryAnimation( m_VisibleAnimationName );
			m_MessageAnim.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnAnimationFinished' );
		}
		else if( currentState == EHudPhoneVisibility.Hiding )
		{
			m_MessageAnim = PlayLibraryAnimation( m_HidingAnimationName );
			m_MessageAnim.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnAnimationFinished' );
		}
		else if( currentState == EHudPhoneVisibility.Invisible )
		{
			m_RootWidget.SetOpacity( 0.0 );
		}
		CheckIfReadyToDequeue();
	}

	private function CheckIfReadyToDequeue()
	{
		if( !( m_Paused ) && GetState() == EHudPhoneVisibility.Invisible )
		{
			Dequeue();
		}
	}

	protected function OnDequeue( message : weak< JournalPhoneMessage > )
	{
		var msgText : String;
		if( message )
		{
			m_CurrentMessage = message;
			msgText = message.GetText();
			if( StrLen( msgText ) > m_MessageMaxLength )
			{
				msgText = StrLeft( msgText, m_MessageMaxLength - StrLen( m_MessageTopper ) ) + m_MessageTopper;
			}
			inkTextRef.SetText( m_MessageText, msgText );
			Show();
		}
	}

	private function StopAllAnimations()
	{
		if( m_MessageAnim )
		{
			m_MessageAnim.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnAnimationFinished' );
			m_MessageAnim.Stop();
			m_MessageAnim = NULL;
		}
	}

	protected event OnAnimationFinished( anim : inkAnimProxy )
	{
		var currentState : EHudPhoneVisibility;
		StopAllAnimations();
		currentState = GetState();
		if( currentState == EHudPhoneVisibility.Showing )
		{
			SetState( EHudPhoneVisibility.Visible );
		}
		else if( currentState == EHudPhoneVisibility.Visible )
		{
			Hide();
		}
		else if( currentState == EHudPhoneVisibility.Hiding )
		{
			SetState( EHudPhoneVisibility.Invisible );
		}
	}

	public function Dismiss()
	{
		ClearQueue();
		Hide();
	}

	public function Pause()
	{
		if( !( m_Paused ) )
		{
			m_Paused = true;
			Hide();
		}
	}

	public function Unpause()
	{
		if( m_Paused )
		{
			m_Paused = false;
			CheckIfReadyToDequeue();
		}
	}

	public function GetCurrentMessage() : weak< JournalPhoneMessage >
	{
		return m_CurrentMessage;
	}

}

