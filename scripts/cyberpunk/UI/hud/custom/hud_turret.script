class hudTurretController extends inkHUDGameController
{
	private editable var m_Date : inkTextRef;
	private editable var m_Timer : inkTextRef;
	private editable var m_CameraID : inkTextRef;
	private editable var healthStatus : inkTextRef;
	private editable var m_MessageText : inkTextRef;
	private editable var m_pitchFluff : inkTextRef;
	private editable var m_yawFluff : inkTextRef;
	private editable var m_leftPart : inkWidgetRef;
	private editable var m_rightPart : inkWidgetRef;
	private var offsetLeft : Float;
	default offsetLeft = -838.0f;
	private var offsetRight : Float;
	default offsetRight = 1495.0f;
	private var currentTime : GameTime;
	private var m_bbPlayerStats : weak< IBlackboard >;
	private var m_bbPlayerEventId : CallbackHandle;
	private var m_currentHealth : Int32;
	private var m_previousHealth : Int32;
	private var m_maximumHealth : Int32;
	private var m_playerObject : weak< GameObject >;
	private var m_playerPuppet : weak< GameObject >;
	private var m_gameInstance : GameInstance;
	private var m_animationProxy : inkAnimProxy;

	protected event OnInitialize()
	{
		var delayInitialize : DelayedHUDInitializeEvent;
		var ownerObject : GameObject;
		ownerObject = ( ( GameObject )( GetOwnerEntity() ) );
		currentTime = GameInstance.GetTimeSystem( ownerObject.GetGame() ).GetGameTime();
		inkTextRef.SetText( m_Date, "XX-XX-XXXX" );
		inkTextRef.SetText( m_CameraID, GetLocalizedText( "Story-base-gameplay-gui-widgets-turret_hud-turret_hud-_localizationString7" ) );
		inkTextRef.SetText( m_Timer, ( ( ( ( ( String )( GameTime.Hours( currentTime ) ) ) + ":" ) + ( ( String )( GameTime.Minutes( currentTime ) ) ) ) + ":" ) + ( ( String )( GameTime.Seconds( currentTime ) ) ) );
		delayInitialize = new DelayedHUDInitializeEvent;
		GameInstance.GetDelaySystem( GetPlayerControlledObject().GetGame() ).DelayEvent( GetPlayerControlledObject(), delayInitialize, 0.1 );
		GetPlayerControlledObject().RegisterInputListener( this );
	}

	protected event OnUninitialize()
	{
		TakeOverControlSystem.CreateInputHint( GetPlayerControlledObject().GetGame(), false );
		SecurityTurret.CreateInputHint( GetPlayerControlledObject().GetGame(), false );
	}

	protected event OnPlayerAttach( playerPuppet : GameObject )
	{
		var optionIntro : inkAnimOptions;
		m_bbPlayerStats = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_PlayerBioMonitor );
		m_bbPlayerEventId = m_bbPlayerStats.RegisterListenerVariant( GetAllBlackboardDefs().UI_PlayerBioMonitor.PlayerStatsInfo, this, 'OnStatsChanged' );
		m_playerObject = ( ( GameObject )( playerPuppet ) );
		m_playerPuppet = playerPuppet;
		m_gameInstance = GetPlayerControlledObject().GetGame();
		PlayLibraryAnimation( 'Malfunction' );
		optionIntro.executionDelay = 1.5;
		PlaySound( 'MiniGame', 'AccessGranted' );
		PlayLibraryAnimation( 'intro', optionIntro );
		PlayAnim( 'intro2', 'OnIntroComplete' );
		optionIntro.executionDelay = 2.0;
		PlayLibraryAnimation( 'Malfunction_off', optionIntro );
		PlayAnim( 'Malfunction_timed', 'OnMalfunction' );
		UpdateJohnnyThemeOverride( true );
	}

	protected event OnPlayerDetach( playerPuppet : GameObject )
	{
		if( m_bbPlayerStats )
		{
			m_bbPlayerStats.UnregisterListenerVariant( GetAllBlackboardDefs().UI_PlayerBioMonitor.PlayerStatsInfo, m_bbPlayerEventId );
		}
		PlayLibraryAnimation( 'outro' );
		UpdateJohnnyThemeOverride( false );
	}

	protected event OnAction( action : ListenerAction, consumer : ListenerActionConsumer )
	{
		var yaw : Float;
		yaw = ClampF( m_playerPuppet.GetWorldYaw(), -300.0, 300.0 );
		inkTextRef.SetText( m_yawFluff, ( ( String )( yaw ) ) );
		inkTextRef.SetText( m_pitchFluff, ( ( String )( yaw * 1.5 ) ) );
		inkWidgetRef.SetMargin( m_leftPart, inkMargin( yaw, offsetLeft, 0.0, 0.0 ) );
		inkWidgetRef.SetMargin( m_rightPart, inkMargin( offsetRight, yaw, 0.0, 0.0 ) );
	}

	protected event OnMalfunction( anim : inkAnimProxy )
	{
		var optionMalfunction : inkAnimOptions;
		var optionIntro : inkAnimOptions;
		if( ( GameInstance.GetQuestsSystem( m_gameInstance ).GetFact( 'q104_turret_broken' ) == 1 ) && ( GameInstance.GetQuestsSystem( m_gameInstance ).GetFact( 'q104_turret_fixed' ) == 0 ) )
		{
			PlaySound( 'MiniGame', 'AccessDenied' );
			inkTextRef.SetText( m_MessageText, "LocKey#11338" );
			optionMalfunction.fromMarker = 'intro';
			optionMalfunction.toMarker = 'loop_start';
			PlayAnim( 'Malfunction', 'OnMalfunctionLoop', optionMalfunction );
			optionIntro.executionDelay = 28.0;
			PlayLibraryAnimation( 'Malfunction_off', optionIntro );
		}
	}

	protected event OnMalfunctionLoop( anim : inkAnimProxy )
	{
		var optionMalfunctionLoop : inkAnimOptions;
		optionMalfunctionLoop.loopInfinite = false;
		optionMalfunctionLoop.loopType = inkanimLoopType.Cycle;
		optionMalfunctionLoop.loopCounter = 65;
		optionMalfunctionLoop.fromMarker = 'loop_start';
		optionMalfunctionLoop.toMarker = 'loop_end';
		PlayAnim( 'Malfunction', 'OnMalfunctionLoopEnd', optionMalfunctionLoop );
	}

	protected event OnMalfunctionLoopEnd( anim : inkAnimProxy )
	{
		var optionMalfunctionLoopEnd : inkAnimOptions;
		optionMalfunctionLoopEnd.fromMarker = 'loop_end';
		PlayAnim( 'Malfunction', '', optionMalfunctionLoopEnd );
	}

	protected event OnIntroComplete( anim : inkAnimProxy )
	{
		GameInstance.GetAudioSystem( GetPlayerControlledObject().GetGame() ).Play( 'ui_main_menu_cc_loading' );
	}

	protected event OnStatsChanged( value : Variant )
	{
		var incomingData : PlayerBioMonitor;
		incomingData = ( ( PlayerBioMonitor )value );
		m_previousHealth = m_currentHealth;
		m_maximumHealth = incomingData.maximumHealth;
		m_currentHealth = CeilF( GameInstance.GetStatPoolsSystem( m_playerObject.GetGame() ).GetStatPoolValue( GetPlayer( m_playerObject.GetGame() ).GetEntityID(), gamedataStatPoolType.Health, false ) );
		m_currentHealth = Clamp( m_currentHealth, 0, m_maximumHealth );
		inkTextRef.SetText( healthStatus, ( IntToString( RoundF( ( ( Float )( m_currentHealth ) ) ) ) + "/" ) + IntToString( RoundF( ( ( Float )( m_maximumHealth ) ) ) ) );
	}

	protected event OnDelayedHUDInitializeEvent( evt : DelayedHUDInitializeEvent )
	{
		TakeOverControlSystem.CreateInputHint( GetPlayerControlledObject().GetGame(), true );
		SecurityTurret.CreateInputHint( GetPlayerControlledObject().GetGame(), true );
	}

	public function PlayAnim( animName : CName, optional callBack : CName, optional animOptions : inkAnimOptions )
	{
		if( m_animationProxy && m_animationProxy.IsPlaying() )
		{
			m_animationProxy.Stop( true );
		}
		m_animationProxy = PlayLibraryAnimation( animName, animOptions );
		if( callBack != '' )
		{
			m_animationProxy.RegisterToCallback( inkanimEventType.OnFinish, this, callBack );
		}
	}

	private function UpdateJohnnyThemeOverride( value : Bool )
	{
		var controlledPuppet : weak< gamePuppetBase >;
		var uiSystem : UISystem;
		controlledPuppet = ( ( gamePuppetBase )( GetPlayer( m_gameInstance ) ) );
		if( controlledPuppet && controlledPuppet.IsJohnnyReplacer() )
		{
			uiSystem = GameInstance.GetUISystem( m_gameInstance );
			if( uiSystem )
			{
				if( value )
				{
					uiSystem.SetGlobalThemeOverride( 'Johnny' );
				}
				else
				{
					uiSystem.ClearGlobalThemeOverride();
				}
			}
		}
	}

}

class DelayedHUDInitializeEvent extends Event
{
}

