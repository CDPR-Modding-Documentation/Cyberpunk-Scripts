class PoliceMessageGameController extends inkHUDGameController
{
	private editable var m_messageTextRef : inkTextRef;
	private var m_blackboard : weak< IBlackboard >;
	private var m_blackboardDef : UI_NotificationsDef;
	private var m_warningMessageCallbackId : CallbackHandle;
	private var m_simpleMessage : SimpleScreenMessage;
	private var m_root : weak< inkWidget >;
	private var m_animProxy : inkAnimProxy;

	protected event OnInitialize()
	{
		var msgVariant : Variant;
		var message : SimpleScreenMessage;
		m_root = GetRootWidget();
		m_root.SetVisible( false );
		m_blackboardDef = GetAllBlackboardDefs().UI_Notifications;
		m_blackboard = GetBlackboardSystem().Get( m_blackboardDef );
		m_warningMessageCallbackId = m_blackboard.RegisterDelayedListenerVariant( m_blackboardDef.WarningMessage, this, 'OnWarningMessageUpdate' );
		msgVariant = m_blackboard.GetVariant( m_blackboardDef.WarningMessage );
		message = ( ( SimpleScreenMessage )msgVariant );
		if( msgVariant.IsValid() && message.type == SimpleMessageType.Police )
		{
			m_simpleMessage = message;
		}
	}

	protected event OnUnitialize()
	{
		m_blackboard.UnregisterDelayedListener( m_blackboardDef.WarningMessage, m_warningMessageCallbackId );
	}

	protected event OnWarningMessageUpdate( value : Variant )
	{
		var message : SimpleScreenMessage;
		message = ( ( SimpleScreenMessage )value );
		if( message.type == SimpleMessageType.Police )
		{
			m_simpleMessage = message;
			UpdateWidgets();
		}
		else
		{
			m_root.StopAllAnimations();
			if( m_animProxy )
			{
				m_animProxy.Stop();
			}
			m_root.SetVisible( false );
		}
	}

	private function UpdateWidgets()
	{
		m_root.StopAllAnimations();
		if( ( m_simpleMessage.isShown && m_simpleMessage.message != "Lorem Ipsum" ) && m_simpleMessage.message != "" )
		{
			inkTextRef.SetLetterCase( m_messageTextRef, textLetterCase.UpperCase );
			inkTextRef.SetText( m_messageTextRef, m_simpleMessage.message );
			GameInstance.GetAudioSystem( GetPlayerControlledObject().GetGame() ).Play( 'ui_jingle_chip_malfunction' );
			if( m_animProxy )
			{
				m_animProxy.Stop();
			}
			m_animProxy = PlayLibraryAnimation( 'animation' );
			m_animProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnFinished' );
			m_root.SetVisible( true );
		}
		else
		{
			if( m_animProxy )
			{
				m_animProxy.Stop();
			}
			m_root.SetVisible( false );
		}
	}

	protected event OnFinished( anim : inkAnimProxy )
	{
		m_root.SetVisible( false );
	}

}

