class RadioStationsDataView extends ScriptableDataView
{

	public override function SortItem( left : IScriptable, right : IScriptable ) : Bool
	{
		return true;
	}

	public override function FilterItem( data : IScriptable ) : Bool
	{
		return true;
	}

}

class RadioStationChangedEvent extends Event
{
	var m_radioIndex : Int32;
}

class VehicleRadioPopupGameController extends BaseModalListPopupGameController
{
	private editable var m_icon : inkImageRef;
	private editable var m_scrollArea : inkScrollAreaRef;
	private editable var m_scrollControllerWidget : inkWidgetRef;
	private editable var m_trackName : inkTextRef;
	private var m_dataView : RadioStationsDataView;
	private var m_dataSource : ScriptableDataSource;
	private var m_quickSlotsManager : weak< QuickSlotsManager >;
	private var m_playerVehicle : weak< VehicleObject >;
	private var m_startupIndex : Uint32;
	private var m_currentRadioId : Int32;
	private var m_selectedItem : weak< RadioStationListItemController >;
	private var m_scrollController : weak< inkScrollController >;

	protected event OnPlayerAttach( playerPuppet : GameObject )
	{
		var player : weak< PlayerPuppet >;
		var trackName : CName;
		player = ( ( PlayerPuppet )( playerPuppet ) );
		VehicleComponent.GetVehicle( player.GetGame(), player, m_playerVehicle );
		super.OnPlayerAttach( playerPuppet );
		m_quickSlotsManager = player.GetQuickSlotsManager();
		m_scrollController = ( ( inkScrollController )( inkWidgetRef.GetControllerByType( m_scrollControllerWidget, 'inkScrollController' ) ) );
		inkScrollAreaRef.RegisterToCallback( m_scrollArea, 'OnScrollChanged', this, 'OnScrollChanged' );
		trackName = m_playerVehicle.GetRadioReceiverTrackName();
		SetTrackName( trackName );
		PlaySound( 'VehicleRadioPopup', 'OnOpen' );
	}

	protected override function VirtualListReady()
	{
		var radioIndexEvent : RadioStationChangedEvent;
		m_listController.SelectItem( 0 );
		m_listController.SelectItem( m_startupIndex );
		radioIndexEvent = new RadioStationChangedEvent;
		radioIndexEvent.m_radioIndex = m_currentRadioId;
		QueueEvent( radioIndexEvent );
	}

	protected event OnScrollChanged( value : Vector2 )
	{
		m_scrollController.UpdateScrollPositionFromScrollArea();
	}

	protected override function Select( previous : inkVirtualCompoundItemController, next : inkVirtualCompoundItemController )
	{
		var data : RadioListItemData;
		m_selectedItem = ( ( RadioStationListItemController )( next ) );
		data = m_selectedItem.GetStationData();
		InkImageUtils.RequestSetImage( this, m_icon, data.m_record.Icon().GetID() );
	}

	protected override function SetupTimeModifierConfig()
	{
		m_timeDilationProfile = "vehicleRadioMenu";
	}

	protected override function SetupVirtualList()
	{
		m_dataView = new RadioStationsDataView;
		m_dataSource = new ScriptableDataSource;
		m_dataView.SetSource( m_dataSource );
		m_listController.SetSource( m_dataView );
	}

	protected override function CleanVirtualList()
	{
		m_dataView.SetSource( NULL );
		m_listController.SetSource( NULL );
		m_dataView = NULL;
		m_dataSource = NULL;
	}

	protected override function SetupData()
	{
		var radioOn : Bool;
		var radioName : CName;
		var stationRecord : RadioStation_Record;
		var i, radioArraySize : Int32;
		m_dataSource.Reset( VehiclesManagerDataHelper.GetRadioStations( m_playerPuppet ) );
		m_startupIndex = 0;
		m_currentRadioId = -1;
		if( m_playerVehicle )
		{
			radioOn = m_playerVehicle.IsRadioReceiverActive();
			if( radioOn )
			{
				radioName = m_playerVehicle.GetRadioReceiverStationName();
				if( IsNameValid( radioName ) )
				{
					radioArraySize = ( ( Int32 )( m_dataSource.GetArraySize() ) );
					for( i = 0; i < radioArraySize; i += 1 )
					{
						stationRecord = ( ( RadioListItemData )( m_dataSource.GetItem( ( ( Uint32 )( i ) ) ) ) ).m_record;
						if( stationRecord )
						{
							if( GetLocalizedText( stationRecord.DisplayName() ) == GetLocalizedTextByKey( radioName ) )
							{
								m_startupIndex = ( ( Uint32 )( i ) );
								m_currentRadioId = stationRecord.Index();
								break;
							}
						}
					}
				}
			}
		}
	}

	protected event OnVehicleRadioSongChanged( evt : VehicleRadioSongChanged )
	{
		if( m_playerVehicle )
		{
			SetTrackName( evt.radioSongName );
		}
	}

	protected event OnVehicleRadioEvent( evt : UIVehicleRadioEvent )
	{
		var data : RadioListItemData;
		var track : CName;
		var radioIndexEvent : RadioStationChangedEvent;
		track = m_playerVehicle.GetRadioReceiverTrackName();
		SetTrackName( track );
		data = m_selectedItem.GetStationData();
		radioIndexEvent = new RadioStationChangedEvent;
		radioIndexEvent.m_radioIndex = data.m_record.Index();
		QueueEvent( radioIndexEvent );
	}

	private function SetTrackName( track : CName )
	{
		if( IsNameValid( track ) && track != '' )
		{
			inkTextRef.SetLocalizedText( m_trackName, track );
			inkTextRef.SetVisible( m_trackName, true );
		}
		else
		{
			inkTextRef.SetVisible( m_trackName, false );
		}
	}

	protected override function Activate()
	{
		var data : RadioListItemData;
		var radioIndexEvent : RadioStationChangedEvent;
		if( !( m_selectedItem ) )
		{
			return;
		}
		data = m_selectedItem.GetStationData();
		if( data.m_record.Index() == -1 )
		{
			m_quickSlotsManager.SendRadioEvent( false, false, -1 );
			inkTextRef.SetVisible( m_trackName, false );
			radioIndexEvent = new RadioStationChangedEvent;
			radioIndexEvent.m_radioIndex = -1;
			QueueEvent( radioIndexEvent );
		}
		else
		{
			m_quickSlotsManager.SendRadioEvent( true, true, data.m_record.Index() );
		}
	}

	protected override function OnClose()
	{
		var controller : weak< VehicleRadioLogicController >;
		controller = ( ( VehicleRadioLogicController )( GetRootWidget().GetController() ) );
		if( controller )
		{
			controller.StopSound();
		}
	}

}

class RadioStationListItemController extends inkVirtualCompoundItemController
{
	private editable var m_label : inkTextRef;
	private editable var m_typeIcon : inkImageRef;
	private editable var m_equilizerIcon : inkHorizontalPanelRef;
	private editable var m_codeTLicon : inkImageRef;
	private editable var m_trackName : inkTextRef;
	private var m_playerVehicle : weak< VehicleObject >;
	private var m_stationData : RadioListItemData;
	private var m_currentRadioStationId : Int32;
	default m_currentRadioStationId = -1;

	public function GetStationData() : RadioListItemData
	{
		return m_stationData;
	}

	protected event OnInitialize()
	{
		RegisterToCallback( 'OnSelected', this, 'OnSelected' );
		RegisterToCallback( 'OnDeselected', this, 'OnDeselected' );
	}

	protected event OnDataChanged( value : Variant )
	{
		m_stationData = ( ( RadioListItemData )( ( ( IScriptable )value ) ) );
		inkTextRef.SetText( m_label, m_stationData.m_record.DisplayName() );
		UpdateEquializer();
	}

	protected event OnSelected( itemController : weak< inkVirtualCompoundItemController >, discreteNav : Bool )
	{
		GetRootWidget().SetState( 'Active' );
	}

	protected event OnDeselected( itemController : weak< inkVirtualCompoundItemController > )
	{
		GetRootWidget().SetState( 'Default' );
	}

	protected event OnRadioStationChangedEvent( evt : RadioStationChangedEvent )
	{
		m_currentRadioStationId = evt.m_radioIndex;
		UpdateEquializer();
	}

	private function UpdateEquializer()
	{
		var isCurrentRadioStation : Bool;
		isCurrentRadioStation = ( m_currentRadioStationId == m_stationData.m_record.Index() ) && ( m_currentRadioStationId != -1 );
		inkHorizontalPanelRef.SetVisible( m_equilizerIcon, isCurrentRadioStation );
		inkImageRef.SetVisible( m_codeTLicon, !( isCurrentRadioStation ) );
	}

}

class VehicleRadioLogicController extends inkLogicController
{
	var m_isSoundStopped : Bool;
	default m_isSoundStopped = false;

	protected event OnUninitialize()
	{
		StopSound();
	}

	public function StopSound()
	{
		if( !( m_isSoundStopped ) )
		{
			m_isSoundStopped = true;
			PlaySound( 'VehicleRadioPopup', 'OnClose' );
		}
	}

}

class UIVehicleRadioEvent extends Event
{
}

