class VehiclesManagerDataView extends ScriptableDataView
{

	public override function SortItem( left : IScriptable, right : IScriptable ) : Bool
	{
		var leftData : VehicleListItemData;
		var rightData : VehicleListItemData;
		var leftStr : String;
		var rightStr : String;
		leftData = ( ( VehicleListItemData )( left ) );
		rightData = ( ( VehicleListItemData )( right ) );
		leftStr = GetLocalizedTextByKey( leftData.m_displayName );
		rightStr = GetLocalizedTextByKey( rightData.m_displayName );
		return UnicodeStringLessThan( leftStr, rightStr );
	}

	public override function FilterItem( data : IScriptable ) : Bool
	{
		return true;
	}

}

class VehiclesManagerPopupGameController extends BaseModalListPopupGameController
{
	private editable var m_icon : inkImageRef;
	private editable var m_scrollArea : inkScrollAreaRef;
	private editable var m_scrollControllerWidget : inkWidgetRef;
	private var m_dataView : VehiclesManagerDataView;
	private var m_dataSource : ScriptableDataSource;
	private var m_quickSlotsManager : weak< QuickSlotsManager >;
	private var m_scrollController : weak< inkScrollController >;

	protected event OnPlayerAttach( playerPuppet : GameObject )
	{
		var player : weak< PlayerPuppet >;
		super.OnPlayerAttach( playerPuppet );
		player = ( ( PlayerPuppet )( playerPuppet ) );
		m_quickSlotsManager = player.GetQuickSlotsManager();
		m_scrollController = ( ( inkScrollController )( inkWidgetRef.GetControllerByType( m_scrollControllerWidget, 'inkScrollController' ) ) );
		inkScrollAreaRef.RegisterToCallback( m_scrollArea, 'OnScrollChanged', this, 'OnScrollChanged' );
	}

	protected event OnScrollChanged( value : Vector2 )
	{
		m_scrollController.UpdateScrollPositionFromScrollArea();
	}

	protected override function Select( previous : inkVirtualCompoundItemController, next : inkVirtualCompoundItemController )
	{
		var selectedItem : weak< VehiclesManagerListItemController >;
		var vehicleData : VehicleListItemData;
		selectedItem = ( ( VehiclesManagerListItemController )( next ) );
		vehicleData = selectedItem.GetVehicleData();
		InkImageUtils.RequestSetImage( this, m_icon, vehicleData.m_icon.GetID() );
	}

	protected override function SetupVirtualList()
	{
		m_dataView = new VehiclesManagerDataView;
		m_dataSource = new ScriptableDataSource;
		m_dataView.SetSource( m_dataSource );
		m_listController.SetSource( m_dataView );
	}

	protected override function CleanVirtualList()
	{
		m_dataView.SetSource( NULL );
		m_listController.SetSource( NULL );
		m_dataView = NULL;
		m_dataSource = NULL;
	}

	protected override function SetupData()
	{
		m_dataView.EnableSorting();
		m_dataSource.Reset( VehiclesManagerDataHelper.GetVehicles( m_playerPuppet ) );
	}

	protected override function Activate()
	{
		var selectedItem : weak< VehiclesManagerListItemController >;
		var vehicleData : VehicleListItemData;
		selectedItem = ( ( VehiclesManagerListItemController )( m_listController.GetSelectedItem() ) );
		vehicleData = selectedItem.GetVehicleData();
		m_quickSlotsManager.SetActiveVehicle( vehicleData.m_data );
		m_quickSlotsManager.SummonVehicle();
		Close();
	}

}

class VehiclesManagerListItemController extends inkVirtualCompoundItemController
{
	private editable var m_label : inkTextRef;
	private editable var m_typeIcon : inkImageRef;
	private var m_vehicleData : VehicleListItemData;

	public function GetVehicleData() : VehicleListItemData
	{
		return m_vehicleData;
	}

	protected event OnInitialize()
	{
		RegisterToCallback( 'OnSelected', this, 'OnSelected' );
		RegisterToCallback( 'OnDeselected', this, 'OnDeselected' );
	}

	protected event OnDataChanged( value : Variant )
	{
		m_vehicleData = ( ( VehicleListItemData )( ( ( IScriptable )value ) ) );
		inkTextRef.SetLocalizedTextScript( m_label, m_vehicleData.m_displayName );
		if( m_vehicleData.m_data.vehicleType == gamedataVehicleType.Bike )
		{
			inkImageRef.SetTexturePart( m_typeIcon, 'motorcycle' );
		}
		else
		{
			inkImageRef.SetTexturePart( m_typeIcon, 'car' );
		}
	}

	protected event OnSelected( itemController : weak< inkVirtualCompoundItemController >, discreteNav : Bool )
	{
		GetRootWidget().SetState( 'Active' );
	}

	protected event OnDeselected( itemController : weak< inkVirtualCompoundItemController > )
	{
		GetRootWidget().SetState( 'Default' );
	}

}

