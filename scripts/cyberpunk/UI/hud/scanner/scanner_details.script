enum ScannerDetailTab
{
	Data = 0,
	Hacking = 1,
	TwinTone = 2,
}

class ScannerTabChangeEvent extends Event
{
}

class scannerDetailsGameController extends inkHUDGameController
{
	private editable var m_scannerCountainer : inkCompoundRef;
	private editable var m_cluesContainer : inkCompoundRef;
	private editable var m_quickhackContainer : inkCompoundRef;
	private editable var m_twintoneContainer : inkCompoundRef;
	private editable var m_toggleDescirptionHackPart : inkWidgetRef;
	private editable var m_toggleDescriptionTwintonePart : inkWidgetRef;
	private editable var m_kiroshiLogo : inkWidgetRef;
	private editable var m_bottomFluff : inkWidgetRef;
	private editable var m_twintoneNoModelAvailable : inkWidgetRef;
	private editable var m_twintoneSaveButtonHints : inkWidgetRef;
	private editable var m_twintoneApplyButtonHints : inkWidgetRef;
	private editable var m_changeTabButtonHints : inkWidgetRef;
	private editable var m_changeTabInlineHint : inkWidgetRef;
	private editable var m_spaceTab01 : inkWidgetRef;
	private editable var m_spaceTab02 : inkWidgetRef;
	private editable var m_twotabs01BottomLine : inkWidgetRef;
	private editable var m_twotabs02BottomLine : inkWidgetRef;
	private editable var m_threetabs01BottomLine : inkWidgetRef;
	private editable var m_threetabs02BottomLine : inkWidgetRef;
	private editable var m_threetabs03BottomLine : inkWidgetRef;
	private persistent var m_lastOpenTab : ScannerDetailTab;
	private var m_player : weak< GameObject >;
	private var m_scannedObject : weak< GameObject >;
	private var m_scanningState : gameScanningState;
	private var m_scannedObjectType : ScannerObjectType;
	private var m_currentTab : ScannerDetailTab;
	default m_currentTab = ScannerDetailTab.Data;
	private var m_isQuickHackAble : Bool;
	private var m_isQuickHackPanelOpenedOrBlocked : Bool;
	private var m_isQuickHackPanelOpened : Bool;
	private var m_isQuickHackPanelBlocked : Bool;
	private var m_twintoneAvailable : Bool;
	private var m_twintoneApplyAvailable : Bool;
	private var m_twintoneNoModelApplicable : Bool;
	private var m_asyncSpawnRequests : array< weak< inkAsyncSpawnRequest > >;
	private var m_uiScannedObjectTypeChangedCallbackID : CallbackHandle;
	private var m_uiScanningStateChangedCallbackID : CallbackHandle;
	private var m_uiScannedObjectChangedCallbackID : CallbackHandle;
	private var m_twintoneAvailableCallbackID : CallbackHandle;
	private var m_twintoneApplyAvailableCallbackID : CallbackHandle;
	private var m_twintoneNoModelAvailableCallbackID : CallbackHandle;
	private var m_uiQHPanelOpenedCallbackID : CallbackHandle;
	private var m_uiQHPanelBlockedCallbackID : CallbackHandle;
	private var m_uiSystemIsInMenuCallbackID : CallbackHandle;
	private var m_twintoneFactListenerId : Uint32;
	private var m_possessedByJohnnyFactListenerId : Uint32;
	private var m_introAnimProxy : inkAnimProxy;
	private var m_outroAnimProxy : inkAnimProxy;
	private var m_scannerToggleTabOpenAnimProxy : inkAnimProxy;
	private var m_scannerToggleTabCloseAnimProxy : inkAnimProxy;

	protected event OnInitialize()
	{
		var bbSys : BlackboardSystem;
		var uiBlackboard : weak< IBlackboard >;
		var uiQuickSlotsDataBB : weak< IBlackboard >;
		bbSys = GetBlackboardSystem();
		uiBlackboard = bbSys.Get( GetAllBlackboardDefs().UI_Scanner );
		uiQuickSlotsDataBB = bbSys.Get( GetAllBlackboardDefs().UI_QuickSlotsData );
		GetRootWidget().SetVisible( false );
		inkCompoundRef.SetVisible( m_scannerCountainer, false );
		AsyncSpawnFromLocal( inkCompoundRef.Get( m_quickhackContainer ), 'QuickHackDescription' );
		AsyncSpawnFromLocal( inkCompoundRef.Get( m_twintoneContainer ), 'TwintoneDescription' );
		m_uiScanningStateChangedCallbackID = uiBlackboard.RegisterDelayedListenerVariant( GetAllBlackboardDefs().UI_Scanner.CurrentState, this, 'OnScanningStateChanged' );
		m_uiScannedObjectChangedCallbackID = uiBlackboard.RegisterDelayedListenerEntityID( GetAllBlackboardDefs().UI_Scanner.ScannedObject, this, 'OnScannedObjectChanged' );
		m_twintoneAvailableCallbackID = uiBlackboard.RegisterDelayedListenerBool( GetAllBlackboardDefs().UI_Scanner.twintoneAvailable, this, 'OnTwintoneAvailabilityChanged' );
		m_twintoneApplyAvailableCallbackID = uiBlackboard.RegisterDelayedListenerBool( GetAllBlackboardDefs().UI_Scanner.twintoneApplyAvailable, this, 'OnTwintoneApplyAvailabilityChanged' );
		m_twintoneNoModelAvailableCallbackID = uiBlackboard.RegisterDelayedListenerBool( GetAllBlackboardDefs().UI_Scanner.twintoneNoModelAvailable, this, 'OnTwintoneNoModelAvailableChanged' );
		m_uiScannedObjectTypeChangedCallbackID = bbSys.Get( GetAllBlackboardDefs().UI_ScannerModules ).RegisterDelayedListenerInt( GetAllBlackboardDefs().UI_ScannerModules.ObjectType, this, 'OnScannedObjectTypeChanged' );
		m_uiQHPanelOpenedCallbackID = uiQuickSlotsDataBB.RegisterDelayedListenerBool( GetAllBlackboardDefs().UI_QuickSlotsData.quickhackPanelOpen, this, 'OnQuickHackPanelOpened' );
		m_uiQHPanelBlockedCallbackID = uiQuickSlotsDataBB.RegisterDelayedListenerBool( GetAllBlackboardDefs().UI_QuickSlotsData.quickhackPanelBlocked, this, 'OnQuickHackPanelBlocked' );
		m_uiSystemIsInMenuCallbackID = bbSys.Get( GetAllBlackboardDefs().UI_System ).RegisterDelayedListenerBool( GetAllBlackboardDefs().UI_System.IsInMenu, this, 'OnMenuUpdate' );
		AsyncSpawnFromLocal( inkCompoundRef.Get( m_cluesContainer ), 'ScannerQuestEntries' );
		UpdateButtonHint();
		UpdateTwintoneNoModelAvailableVisibility();
	}

	protected event OnUnitialize()
	{
		var bbSys : BlackboardSystem;
		var uiBlackboard : weak< IBlackboard >;
		var uiScannerChunkBlackboard : weak< IBlackboard >;
		var uiQuickSlotsDataBB : weak< IBlackboard >;
		bbSys = GetBlackboardSystem();
		uiBlackboard = bbSys.Get( GetAllBlackboardDefs().UI_Scanner );
		uiScannerChunkBlackboard = bbSys.Get( GetAllBlackboardDefs().UI_ScannerModules );
		uiQuickSlotsDataBB = bbSys.Get( GetAllBlackboardDefs().UI_QuickSlotsData );
		if( m_uiScannedObjectTypeChangedCallbackID )
		{
			uiScannerChunkBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_ScannerModules.ObjectType, m_uiScannedObjectTypeChangedCallbackID );
		}
		if( m_uiScannedObjectChangedCallbackID )
		{
			uiBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_Scanner.ScannedObject, m_uiScannedObjectChangedCallbackID );
		}
		if( m_twintoneAvailableCallbackID )
		{
			uiBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_Scanner.twintoneAvailable, m_twintoneAvailableCallbackID );
		}
		if( m_twintoneApplyAvailableCallbackID )
		{
			uiBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_Scanner.twintoneApplyAvailable, m_twintoneApplyAvailableCallbackID );
		}
		if( m_twintoneAvailableCallbackID )
		{
			uiBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_Scanner.twintoneNoModelAvailable, m_twintoneAvailableCallbackID );
		}
		if( m_uiScanningStateChangedCallbackID )
		{
			uiBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_Scanner.CurrentState, m_uiScanningStateChangedCallbackID );
		}
		if( m_uiQHPanelOpenedCallbackID )
		{
			uiQuickSlotsDataBB.UnregisterDelayedListener( GetAllBlackboardDefs().UI_QuickSlotsData.quickhackPanelOpen, m_uiQHPanelOpenedCallbackID );
		}
		if( m_uiQHPanelBlockedCallbackID )
		{
			uiQuickSlotsDataBB.UnregisterDelayedListener( GetAllBlackboardDefs().UI_QuickSlotsData.quickhackPanelBlocked, m_uiQHPanelBlockedCallbackID );
		}
		if( m_uiSystemIsInMenuCallbackID )
		{
			bbSys.Get( GetAllBlackboardDefs().UI_System ).UnregisterDelayedListener( GetAllBlackboardDefs().UI_System.IsInMenu, m_uiSystemIsInMenuCallbackID );
		}
		if( m_twintoneFactListenerId && m_player )
		{
			GameInstance.GetQuestsSystem( m_player.GetGame() ).UnregisterListener( 'twintone_scan_disabled', m_twintoneFactListenerId );
		}
		if( m_possessedByJohnnyFactListenerId && m_player )
		{
			GameInstance.GetQuestsSystem( m_player.GetGame() ).UnregisterListener( GetPlayAsJohnnyFactName(), m_possessedByJohnnyFactListenerId );
		}
	}

	protected event OnPlayerAttach( player : GameObject )
	{
		m_player = player;
		m_twintoneFactListenerId = GameInstance.GetQuestsSystem( m_player.GetGame() ).RegisterListener( 'twintone_scan_disabled', this, 'OnFactChanged' );
		m_possessedByJohnnyFactListenerId = GameInstance.GetQuestsSystem( m_player.GetGame() ).RegisterListener( GetPlayAsJohnnyFactName(), this, 'OnFactChanged' );
	}

	protected event OnScanningStateChanged( value : Variant )
	{
		var isRefreshingLayout : Bool;
		isRefreshingLayout = m_scanningState == gameScanningState.Default || m_scanningState == gameScanningState.Stopped;
		m_scanningState = ( ( gameScanningState )value );
		if( isRefreshingLayout )
		{
			RefreshLayout();
		}
	}

	protected event OnScannedObjectChanged( value : EntityID )
	{
		if( EntityID.IsDefined( value ) )
		{
			m_scannedObject = ( ( GameObject )( GameInstance.FindEntityByID( m_player.GetGame(), value ) ) );
			m_isQuickHackAble = m_scannedObject.IsQuickHackAble();
			ToggleQHTabVisibility();
			UpdateKiroshiLogoVisibility();
		}
		else
		{
			m_scannedObjectType = ScannerObjectType.INVALID;
			m_isQuickHackAble = false;
			PlayOutroAnimation();
		}
	}

	protected event OnScannedObjectTypeChanged( value : Int32 )
	{
		m_scannedObjectType = ( ( ScannerObjectType )( value ) );
		ToggleTwintoneVisibility();
		RefreshLayout();
	}

	protected event OnScannerTabChangeEvent( evt : ScannerTabChangeEvent )
	{
		var availableTabs : array< ScannerDetailTab >;
		var currentTabIndex : Int32;
		var newTabIndex : Int32;
		availableTabs = GetAvailablesTabs();
		if( !( ( m_scanningState == gameScanningState.Started || m_scanningState == gameScanningState.Complete ) || m_scanningState == gameScanningState.ShallowComplete ) )
		{
			return false;
		}
		if( m_outroAnimProxy && m_outroAnimProxy.IsValid() )
		{
			return true;
		}
		currentTabIndex = availableTabs.FindFirst( m_currentTab );
		if( currentTabIndex != -1 )
		{
			newTabIndex = ( ( currentTabIndex + 1 ) + availableTabs.Size() ) % availableTabs.Size();
		}
		else
		{
			newTabIndex = 0;
		}
		SetTab( availableTabs[ newTabIndex ] );
	}

	private const function GetAvailablesTabs() : array< ScannerDetailTab >
	{
		var availableTabs : array< ScannerDetailTab >;
		availableTabs.PushBack( ScannerDetailTab.Data );
		if( m_isQuickHackAble && m_isQuickHackPanelOpenedOrBlocked )
		{
			availableTabs.PushBack( ScannerDetailTab.Hacking );
		}
		if( ShouldDisplayTwintoneTab() )
		{
			availableTabs.PushBack( ScannerDetailTab.TwinTone );
		}
		return availableTabs;
	}

	protected event OnMenuUpdate( value : Bool )
	{
		if( ( !( value ) && m_player ) && m_isQuickHackPanelOpened )
		{
			GameInstance.GetDelaySystem( m_player.GetGame() ).DelayEventNextFrame( m_player, new RefreshQuickhackMenuEvent );
		}
	}

	protected event OnQuickHackPanelOpened( value : Bool )
	{
		m_isQuickHackPanelOpened = value;
		OnQuickHackPanelOpenedOrBlocked();
		UpdateButtonHint();
	}

	protected event OnQuickHackPanelBlocked( value : Bool )
	{
		m_isQuickHackPanelBlocked = value;
		OnQuickHackPanelOpenedOrBlocked();
	}

	protected event OnQuickHackPanelOpenedOrBlocked()
	{
		var value : Bool;
		value = m_isQuickHackPanelOpened || m_isQuickHackPanelBlocked;
		if( m_isQuickHackPanelOpenedOrBlocked == value )
		{
			return true;
		}
		m_isQuickHackPanelOpenedOrBlocked = value;
		if( ( m_outroAnimProxy && m_outroAnimProxy.IsValid() ) && !( value ) )
		{
			return true;
		}
		ToggleQHTabVisibility();
		if( ( m_introAnimProxy && m_introAnimProxy.IsValid() ) && value )
		{
			return true;
		}
	}

	private function RefreshLayout()
	{
		var i : Int32;
		StopAnimations();
		if( HUDManager.GetActiveMode( m_player.GetGame() ) != ActiveMode.FOCUS )
		{
			PlayOutroAnimation();
		}
		if( ( m_scanningState == gameScanningState.Started || m_scanningState == gameScanningState.Complete ) || m_scanningState == gameScanningState.ShallowComplete )
		{
			GetRootWidget().SetVisible( false );
			for( i = 0; i < m_asyncSpawnRequests.Size(); i += 1 )
			{
				m_asyncSpawnRequests[ i ].Cancel();
			}
			m_asyncSpawnRequests.Clear();
			inkCompoundRef.RemoveAllChildren( m_scannerCountainer );
			switch( m_scannedObjectType )
			{
				case ScannerObjectType.PUPPET:
				{
					GetRootWidget().SetVisible( true );
					AsyncSpawnScannerModule( 'ScannerNPCHeaderWidget' );
					AsyncSpawnScannerModule( 'ScannerNPCBodyWidget' );
					AsyncSpawnScannerModule( 'ScannerBountySystemWidget' );
					AsyncSpawnScannerModule( 'ScannerRequirementsWidget' );
					AsyncSpawnScannerModule( 'ScannerAbilitiesWidget' );
					AsyncSpawnScannerModule( 'ScannerResistancesWidget' );
					AsyncSpawnScannerModule( 'ScannerDeviceDescriptionWidget' );
					break;
				}
				case ScannerObjectType.DEVICE:
				{
					GetRootWidget().SetVisible( true );
					AsyncSpawnScannerModule( 'ScannerDeviceHeaderWidget' );
					AsyncSpawnScannerModule( 'ScannerVulnerabilitiesWidget' );
					AsyncSpawnScannerModule( 'ScannerRequirementsWidget' );
					AsyncSpawnScannerModule( 'ScannerDeviceDescriptionWidget' );
					break;
				}
				case ScannerObjectType.VEHICLE:
				{
					GetRootWidget().SetVisible( true );
					AsyncSpawnScannerModule( 'ScannerVehicleBody' );
					AsyncSpawnScannerModule( 'ScannerDeviceDescriptionWidget' );
					break;
				}
				case ScannerObjectType.GENERIC:
				{
					GetRootWidget().SetVisible( true );
					AsyncSpawnScannerModule( 'ScannerDeviceHeaderWidget' );
					AsyncSpawnScannerModule( 'ScannerDeviceDescriptionWidget' );
					break;
				}
				default:
				{
					return;
				}
			}
			RestoreLastTab();
			inkCompoundRef.SetVisible( m_scannerCountainer, !( m_isQuickHackAble ) );
			m_introAnimProxy = PlayLibraryAnimation( 'intro' );
			m_introAnimProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnScannerDetailsShown' );
		}
		else if( m_scanningState == gameScanningState.Default || m_scanningState == gameScanningState.Stopped )
		{
			PlayOutroAnimation();
		}
	}

	private function AsyncSpawnScannerModule( scannerWidgetLibraryName : CName )
	{
		m_asyncSpawnRequests.PushBack( AsyncSpawnFromLocal( inkCompoundRef.Get( m_scannerCountainer ), scannerWidgetLibraryName ) );
	}

	private function StopAnimations()
	{
		if( m_introAnimProxy && m_introAnimProxy.IsValid() )
		{
			m_introAnimProxy.UnregisterFromAllCallbacks( inkanimEventType.OnFinish );
			m_introAnimProxy.Stop();
			m_introAnimProxy = NULL;
		}
		if( m_outroAnimProxy && m_outroAnimProxy.IsValid() )
		{
			m_outroAnimProxy.UnregisterFromAllCallbacks( inkanimEventType.OnFinish );
			m_outroAnimProxy.Stop();
			m_outroAnimProxy = NULL;
		}
	}

	private function PlayOutroAnimation()
	{
		var progress : Float;
		if( m_introAnimProxy && m_introAnimProxy.IsValid() )
		{
			progress = 1.0 - m_introAnimProxy.GetProgression();
			m_introAnimProxy.UnregisterFromAllCallbacks( inkanimEventType.OnFinish );
			m_introAnimProxy.Stop();
			m_introAnimProxy = NULL;
		}
		if( m_outroAnimProxy && m_outroAnimProxy.IsValid() )
		{
			return;
		}
		m_outroAnimProxy = PlayLibraryAnimation( 'outro' );
		m_outroAnimProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnScannerDetailsHidden' );
		if( progress > 0.0 )
		{
			m_outroAnimProxy.SetNormalizedPosition( progress, true );
		}
	}

	private function SetTab( scannerDetailTab : ScannerDetailTab, optional isForceSkippingToggleAnimation : Bool )
	{
		var previousTab : ScannerDetailTab;
		var openAnimation : CName;
		var closeAnimation : CName;
		previousTab = m_currentTab;
		m_currentTab = scannerDetailTab;
		UpdateActiveTab( m_currentTab );
		if( previousTab == m_currentTab )
		{
			return;
		}
		if( m_scannerToggleTabOpenAnimProxy && m_scannerToggleTabOpenAnimProxy.IsValid() )
		{
			m_scannerToggleTabOpenAnimProxy.GotoEndAndStop();
		}
		if( m_scannerToggleTabCloseAnimProxy && m_scannerToggleTabCloseAnimProxy.IsValid() )
		{
			m_scannerToggleTabCloseAnimProxy.GotoEndAndStop();
		}
		switch( previousTab )
		{
			case ScannerDetailTab.Data:
			{
				closeAnimation = 'tab_data_close';
				break;
			}
			case ScannerDetailTab.Hacking:
			{
				closeAnimation = 'tab_hack_close';
				break;
			}
			case ScannerDetailTab.TwinTone:
			{
				closeAnimation = 'tab_twintone_close';
				break;
			}
		}
		switch( m_currentTab )
		{
			case ScannerDetailTab.Data:
			{
				openAnimation = 'tab_data_open';
				break;
			}
			case ScannerDetailTab.Hacking:
			{
				openAnimation = 'tab_hack_open';
				break;
			}
			case ScannerDetailTab.TwinTone:
			{
				openAnimation = 'tab_twintone_open';
				break;
			}
		}
		UpdateTabBottomLine();
		m_scannerToggleTabOpenAnimProxy = PlayLibraryAnimation( openAnimation );
		m_scannerToggleTabCloseAnimProxy = PlayLibraryAnimation( closeAnimation );
		if( isForceSkippingToggleAnimation )
		{
			m_scannerToggleTabOpenAnimProxy.GotoEndAndStop();
			m_scannerToggleTabCloseAnimProxy.GotoEndAndStop();
		}
		UpdateButtonHint();
		UpdateTwintoneNoModelAvailableVisibility();
		m_lastOpenTab = m_currentTab;
	}

	private function UpdateTabBottomLine()
	{
		inkWidgetRef.SetVisible( m_twotabs01BottomLine, false );
		inkWidgetRef.SetVisible( m_twotabs02BottomLine, false );
		inkWidgetRef.SetVisible( m_threetabs01BottomLine, false );
		inkWidgetRef.SetVisible( m_threetabs02BottomLine, false );
		inkWidgetRef.SetVisible( m_threetabs03BottomLine, false );
		if( GetNumberOfTabsDiplayed() == 2 )
		{
			if( m_currentTab == ScannerDetailTab.Data )
			{
				inkWidgetRef.SetVisible( m_twotabs01BottomLine, true );
			}
			else
			{
				inkWidgetRef.SetVisible( m_twotabs02BottomLine, true );
			}
		}
		else if( GetNumberOfTabsDiplayed() == 3 )
		{
			if( m_currentTab == ScannerDetailTab.Data )
			{
				inkWidgetRef.SetVisible( m_threetabs01BottomLine, true );
			}
			else if( m_currentTab == ScannerDetailTab.Hacking )
			{
				inkWidgetRef.SetVisible( m_threetabs02BottomLine, true );
			}
			else
			{
				inkWidgetRef.SetVisible( m_threetabs03BottomLine, true );
			}
		}
	}

	private function UpdateActiveTab( tab : ScannerDetailTab )
	{
		var uiBlackboard : weak< IBlackboard >;
		uiBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_Scanner );
		uiBlackboard.SetVariant( GetAllBlackboardDefs().UI_Scanner.scannerActiveTab, tab, true );
	}

	protected event OnTwintoneAvailabilityChanged( value : Bool )
	{
		m_twintoneAvailable = value;
		UpdateButtonHint();
	}

	protected event OnTwintoneApplyAvailabilityChanged( value : Bool )
	{
		m_twintoneApplyAvailable = value;
		UpdateButtonHint();
	}

	protected event OnTwintoneNoModelAvailableChanged( value : Bool )
	{
		m_twintoneNoModelApplicable = value;
		UpdateTwintoneNoModelAvailableVisibility();
	}

	private function UpdateButtonHint()
	{
		inkWidgetRef.SetVisible( m_twintoneSaveButtonHints, m_currentTab == ScannerDetailTab.TwinTone && m_twintoneAvailable );
		inkWidgetRef.SetVisible( m_twintoneApplyButtonHints, m_currentTab == ScannerDetailTab.TwinTone && m_twintoneApplyAvailable );
		inkWidgetRef.SetVisible( m_changeTabButtonHints, !( m_isQuickHackPanelOpened ) && ( GetNumberOfTabsDiplayed() != 1 ) );
		inkWidgetRef.SetVisible( m_changeTabInlineHint, GetNumberOfTabsDiplayed() != 1 );
	}

	private function UpdateTwintoneNoModelAvailableVisibility()
	{
		inkWidgetRef.SetVisible( m_twintoneNoModelAvailable, m_twintoneNoModelApplicable && m_currentTab == ScannerDetailTab.TwinTone );
		inkWidgetRef.SetVisible( m_bottomFluff, !( inkWidgetRef.IsVisible( m_twintoneNoModelAvailable ) ) );
		UpdateKiroshiLogoVisibility();
	}

	private function UpdateKiroshiLogoVisibility()
	{
		inkWidgetRef.SetVisible( m_kiroshiLogo, ( GameInstance.GetStatsSystem( m_player.GetGame() ).GetStatValue( m_player.GetEntityID(), gamedataStatType.HasLinkToBountySystem ) > 0.0 ) && !( inkWidgetRef.IsVisible( m_twintoneNoModelAvailable ) ) );
	}

	private function OnFactChanged( value : Int32 )
	{
		ToggleTwintoneVisibility();
		RefreshLayout();
	}

	private function ToggleQHTabVisibility()
	{
		var tabVisible : Bool;
		tabVisible = m_isQuickHackAble && m_isQuickHackPanelOpenedOrBlocked;
		inkWidgetRef.SetVisible( m_toggleDescirptionHackPart, tabVisible );
		inkWidgetRef.SetVisible( m_spaceTab01, tabVisible );
		UpdateTabBottomLine();
		UpdateButtonHint();
	}

	private function ToggleTwintoneVisibility()
	{
		var tabVisible : Bool;
		tabVisible = ShouldDisplayTwintoneTab();
		inkWidgetRef.SetVisible( m_toggleDescriptionTwintonePart, tabVisible );
		inkWidgetRef.SetVisible( m_spaceTab02, tabVisible );
		UpdateTabBottomLine();
		UpdateButtonHint();
	}

	private function GetNumberOfTabsDiplayed() : Int32
	{
		var tabsCounter : Int32;
		tabsCounter = 1;
		if( inkWidgetRef.IsVisible( m_toggleDescirptionHackPart ) )
		{
			tabsCounter += 1;
		}
		if( inkWidgetRef.IsVisible( m_toggleDescriptionTwintonePart ) )
		{
			tabsCounter += 1;
		}
		return tabsCounter;
	}

	private const function ShouldDisplayTwintoneTab() : Bool
	{
		var playerVehicles : array< TweakDBID >;
		var i : Int32;
		if( ( !( m_player ) || GetFact( m_player.GetGame(), 'twintone_scan_disabled' ) ) || GetFact( m_player.GetGame(), GetPlayAsJohnnyFactName() ) )
		{
			return false;
		}
		if( m_scannedObjectType != ScannerObjectType.VEHICLE || !( ( ( VehicleObject )( m_scannedObject ) ) ) )
		{
			return false;
		}
		playerVehicles = TDB.GetForeignKeyArray( T"Vehicle.vehicle_list.list" );
		for( i = 0; i < playerVehicles.Size(); i += 1 )
		{
			if( ( ( VehicleObject )( m_scannedObject ) ).GetRecord().GetRecordID() == playerVehicles[ i ] )
			{
				return false;
			}
		}
		return true;
	}

	private function RestoreLastTab()
	{
		var availableTabs : array< ScannerDetailTab >;
		availableTabs = GetAvailablesTabs();
		if( availableTabs.Contains( m_lastOpenTab ) )
		{
			SetTab( m_lastOpenTab, true );
		}
		else
		{
			SetTab( ScannerDetailTab.Data, true );
		}
	}

	protected event OnScannerDetailsShown( animationProxy : inkAnimProxy )
	{
		m_introAnimProxy = NULL;
		inkCompoundRef.SetVisible( m_scannerCountainer, true );
		RestoreLastTab();
	}

	protected event OnScannerDetailsHidden( animationProxy : inkAnimProxy )
	{
		m_outroAnimProxy = NULL;
		inkCompoundRef.SetVisible( m_scannerCountainer, false );
		inkWidgetRef.SetVisible( m_toggleDescirptionHackPart, false );
	}

	private const function GetPlayAsJohnnyFactName() : CName
	{
		if( !( m_player ) )
		{
			return '';
		}
		return StringToName( GameInstance.GetPlayerSystem( m_player.GetGame() ).GetPossessedByJohnnyFactName() );
	}

}

