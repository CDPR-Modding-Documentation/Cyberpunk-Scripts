class CrouchIndicatorGameController extends inkHUDGameController
{
	private editable var m_CurrentAmmoRef : inkTextRef;
	private editable var m_AllAmmoRef : inkTextRef;
	private editable var m_ammoWrapper : inkWidgetRef;
	private editable var m_container : inkWidgetRef;
	private editable var m_warningMessageWraper : inkWidgetRef;
	private editable var m_smartLinkFirmwareOnline : inkCompoundRef;
	private editable var m_smartLinkFirmwareOffline : inkCompoundRef;
	private editable var m_weaponIcon : inkImageRef;
	private const editable var m_FireModes : array< inkImageRef >;
	private const editable var m_WeaponMods : array< inkImageRef >;
	private editable var m_modHolder : inkWidgetRef;
	private editable var m_weaponName : inkTextRef;
	private editable var m_damageTypeRef : inkWidgetRef;
	private editable var m_crouchIcon : inkImageRef;
	private var m_folded : Bool;
	private var m_InventoryManager : InventoryDataManagerV2;
	private var m_weaponItemData : InventoryItemData;
	private var m_damageTypeIndicator : weak< DamageTypeIndicator >;
	private var m_WeaponAreas : array< gamedataItemType >;
	private var m_BBWeaponList : CallbackHandle;
	private var m_BBAmmoLooted : CallbackHandle;
	private var m_BBCurrentWeapon : CallbackHandle;
	private var m_LocomotionStateBlackboardId : CallbackHandle;
	private var m_VisionStateBlackboardId : CallbackHandle;
	private var m_UIStateBlackboardId : CallbackHandle;
	private var m_PlayerSpawnedCallbackID : CallbackHandle;
	private var m_ammoHackedListenerId : CallbackHandle;
	private var m_BufferedRosterData : SlotDataHolder;
	private var m_UIBlackboard : weak< IBlackboard >;
	private var m_ActiveWeapon : SlotWeaponData;
	private var m_hackingBlackboard : weak< IBlackboard >;
	private var m_Player : weak< PlayerPuppet >;
	private var m_PlayerMuppet : weak< Muppet >;
	private var m_outOfAmmoAnim : inkAnimProxy;
	private var m_transitionAnimProxy : inkAnimProxy;
	private var m_blackboard : weak< IBlackboard >;
	private var m_bbDefinition : UIInteractionsDef;
	private var m_onMagazineAmmoCount : CallbackHandle;
	private var m_dataListenerId : CallbackHandle;
	private var m_weaponBlackboard : weak< IBlackboard >;
	private var m_weaponParamsListenerId : CallbackHandle;
	private var m_bufferedMaxAmmo : Int32;
	private var m_bufferedAmmoId : Int32;
	private var m_genderName : CName;

	protected event OnInitialize()
	{
		PlayInitFoldingAnim();
		inkWidgetRef.SetVisible( m_warningMessageWraper, false );
		m_damageTypeIndicator = ( ( DamageTypeIndicator )( inkWidgetRef.GetController( m_damageTypeRef ) ) );
		m_bbDefinition = GetAllBlackboardDefs().UIInteractions;
		m_blackboard = GetBlackboardSystem().Get( m_bbDefinition );
		m_UIBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_EquipmentData );
		m_hackingBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_Hacking );
		m_weaponBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_ActiveWeaponData );
		inkCompoundRef.SetVisible( m_smartLinkFirmwareOffline, false );
		inkCompoundRef.SetVisible( m_smartLinkFirmwareOnline, false );
	}

	protected event OnUninitialize()
	{
		m_InventoryManager.UnInitialize();
		m_blackboard = NULL;
		m_UIBlackboard = NULL;
	}

	protected event OnPlayerAttach( playerPuppet : GameObject )
	{
		m_Player = ( ( PlayerPuppet )( playerPuppet ) );
		m_PlayerMuppet = ( ( Muppet )( playerPuppet ) );
		m_InventoryManager = new InventoryDataManagerV2;
		m_InventoryManager.Initialize( m_Player );
		if( IsPlayingMultiplayer() )
		{
			m_genderName = 'Female';
		}
		else
		{
			m_genderName = m_Player.GetResolvedGenderName();
		}
		m_WeaponAreas = InventoryDataManagerV2.GetInventoryWeaponTypes();
		RegisterBB();
	}

	protected event OnPlayerDetach( playerPuppet : GameObject )
	{
		UnregisterBB();
		m_Player = NULL;
		m_PlayerMuppet = NULL;
	}

	private function RegisterBB()
	{
		var playerSMBB : IBlackboard;
		m_dataListenerId = m_blackboard.RegisterDelayedListenerVariant( m_bbDefinition.LootData, this, 'OnUpdateData' );
		m_BBWeaponList = m_UIBlackboard.RegisterListenerVariant( GetAllBlackboardDefs().UI_EquipmentData.EquipmentData, this, 'OnWeaponDataChanged' );
		m_BBAmmoLooted = m_UIBlackboard.RegisterListenerBool( GetAllBlackboardDefs().UI_EquipmentData.ammoLooted, this, 'OnAmmoLooted' );
		m_UIBlackboard.SignalVariant( GetAllBlackboardDefs().UI_EquipmentData.EquipmentData );
		m_UIBlackboard.SignalBool( GetAllBlackboardDefs().UI_EquipmentData.ammoLooted );
		m_onMagazineAmmoCount = m_blackboard.RegisterListenerUint( GetAllBlackboardDefs().Weapon.MagazineAmmoCount, this, 'OnMagazineAmmoCount' );
		m_weaponParamsListenerId = m_weaponBlackboard.RegisterDelayedListenerVariant( GetAllBlackboardDefs().UI_ActiveWeaponData.SmartGunParams, this, 'OnSmartGunParams' );
		m_ammoHackedListenerId = m_hackingBlackboard.RegisterDelayedListenerBool( GetAllBlackboardDefs().UI_Hacking.ammoIndicator, this, 'OnAmmoIndicatorHacked' );
		if( IsPlayingMultiplayer() )
		{
			if( m_PlayerMuppet )
			{
				playerSMBB = GetPSMBlackboard( m_PlayerMuppet );
				m_VisionStateBlackboardId = playerSMBB.RegisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Vision, this, 'OnPSMVisionStateChanged' );
				m_LocomotionStateBlackboardId = playerSMBB.RegisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Locomotion, this, 'OnPSMLocomotionStateChanged' );
				OnPSMVisionStateChanged( playerSMBB.GetInt( GetAllBlackboardDefs().PlayerStateMachine.Vision ) );
				OnPSMLocomotionStateChanged( playerSMBB.GetInt( GetAllBlackboardDefs().PlayerStateMachine.Locomotion ) );
			}
		}
		else
		{
			if( m_Player && m_Player.IsControlledByLocalPeer() )
			{
				playerSMBB = GetPSMBlackboard( m_Player );
				m_VisionStateBlackboardId = playerSMBB.RegisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Vision, this, 'OnPSMVisionStateChanged' );
				m_LocomotionStateBlackboardId = playerSMBB.RegisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Locomotion, this, 'OnPSMLocomotionStateChanged' );
				OnPSMVisionStateChanged( playerSMBB.GetInt( GetAllBlackboardDefs().PlayerStateMachine.Vision ) );
				OnPSMLocomotionStateChanged( playerSMBB.GetInt( GetAllBlackboardDefs().PlayerStateMachine.Locomotion ) );
			}
		}
	}

	private function UnregisterBB()
	{
		var playerSMBB : IBlackboard;
		if( IsPlayingMultiplayer() )
		{
			if( m_PlayerMuppet )
			{
				playerSMBB = GetPSMBlackboard( m_PlayerMuppet );
				playerSMBB.UnregisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Vision, m_VisionStateBlackboardId );
				playerSMBB.UnregisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Locomotion, m_LocomotionStateBlackboardId );
			}
		}
		else
		{
			if( m_Player )
			{
				playerSMBB = GetPSMBlackboard( m_Player );
				playerSMBB.UnregisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Vision, m_VisionStateBlackboardId );
				playerSMBB.UnregisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Locomotion, m_LocomotionStateBlackboardId );
			}
		}
		m_hackingBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_Hacking.ammoIndicator, m_ammoHackedListenerId );
		m_UIBlackboard.UnregisterListenerVariant( GetAllBlackboardDefs().UI_EquipmentData.EquipmentData, m_BBWeaponList );
		m_UIBlackboard.UnregisterListenerBool( GetAllBlackboardDefs().UI_EquipmentData.ammoLooted, m_BBAmmoLooted );
		m_blackboard.UnregisterDelayedListener( m_bbDefinition.LootData, m_dataListenerId );
		m_weaponBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_ActiveWeaponData.SmartGunParams, m_weaponParamsListenerId );
	}

	protected event OnUpdateData( value : Variant )
	{
		if( m_UIBlackboard )
		{
			m_UIBlackboard.SignalVariant( GetAllBlackboardDefs().UI_EquipmentData.EquipmentData );
		}
	}

	protected event OnAmmoIndicatorHacked( value : Bool )
	{
		inkWidgetRef.Get( m_container ).SetEffectEnabled( inkEffectType.Glitch, 'hacking', value );
	}

	protected event OnPSMVisionStateChanged( value : Int32 )
	{
		var newState : gamePSMVision;
		newState = ( ( gamePSMVision )( value ) );
		switch( newState )
		{
			case gamePSMVision.Default:
				if( ItemID.IsValid( m_ActiveWeapon.weaponID ) )
				{
					PlayUnfold();
				}
			break;
			case gamePSMVision.Focus:
				PlayFold();
			break;
		}
	}

	protected event OnPSMLocomotionStateChanged( value : Int32 )
	{
		if( ( ( gamePSMLocomotionStates )( value ) ) == gamePSMLocomotionStates.Crouch )
		{
			if( m_genderName == 'Female' )
			{
				inkImageRef.SetTexturePart( m_crouchIcon, 'crouch_female' );
			}
			else
			{
				inkImageRef.SetTexturePart( m_crouchIcon, 'crouch' );
			}
		}
		else
		{
			if( m_genderName == 'Female' )
			{
				inkImageRef.SetTexturePart( m_crouchIcon, 'stand_female' );
			}
			else
			{
				inkImageRef.SetTexturePart( m_crouchIcon, 'stand' );
			}
		}
	}

	protected event OnAmmoLooted( value : Bool )
	{
		var allAmmoCount : Int32;
		allAmmoCount = RPGManager.GetAmmoCountValue( m_Player, m_ActiveWeapon.weaponID ) - m_ActiveWeapon.ammoCurrent;
		inkTextRef.SetText( m_AllAmmoRef, GetAmmoText( allAmmoCount, 4 ) );
	}

	protected event OnSmartGunParams( argParams : Variant )
	{
		var smartData : smartGunUIParameters;
		smartData = ( ( smartGunUIParameters )argParams );
		if( RPGManager.GetWeaponEvolution( InventoryItemData.GetID( m_weaponItemData ) ) == gamedataWeaponEvolution.Smart )
		{
			inkCompoundRef.SetVisible( m_smartLinkFirmwareOffline, !( smartData.hasRequiredCyberware ) );
			inkCompoundRef.SetVisible( m_smartLinkFirmwareOnline, smartData.hasRequiredCyberware );
		}
		else
		{
			inkCompoundRef.SetVisible( m_smartLinkFirmwareOffline, false );
			inkCompoundRef.SetVisible( m_smartLinkFirmwareOnline, false );
		}
	}

	protected event OnWeaponDataChanged( value : Variant )
	{
		var currentData : SlotWeaponData;
		var item : gameItemData;
		var weaponItemType : gamedataItemType;
		m_BufferedRosterData = ( ( SlotDataHolder )value );
		currentData = m_BufferedRosterData.weapon;
		if( ItemID.IsValid( currentData.weaponID ) )
		{
			if( m_ActiveWeapon.weaponID != currentData.weaponID )
			{
				item = m_InventoryManager.GetPlayerItemData( currentData.weaponID );
				m_weaponItemData = m_InventoryManager.GetInventoryItemData( item );
			}
			m_ActiveWeapon = currentData;
			weaponItemType = InventoryItemData.GetItemType( m_weaponItemData );
			SetRosterSlotData( ( ( ( ( ( ( ( ( ( ( weaponItemType == gamedataItemType.Wea_Melee || weaponItemType == gamedataItemType.Wea_Fists ) || weaponItemType == gamedataItemType.Wea_Hammer ) || weaponItemType == gamedataItemType.Wea_Katana ) || weaponItemType == gamedataItemType.Wea_Knife ) || weaponItemType == gamedataItemType.Wea_OneHandedClub ) || weaponItemType == gamedataItemType.Wea_ShortBlade ) || weaponItemType == gamedataItemType.Wea_TwoHandedClub ) || weaponItemType == gamedataItemType.Wea_LongBlade ) || weaponItemType == gamedataItemType.Wea_Axe ) || weaponItemType == gamedataItemType.Wea_Machete ) || weaponItemType == gamedataItemType.Wea_Chainsword );
			PlayUnfold();
			if( RPGManager.GetWeaponEvolution( InventoryItemData.GetID( m_weaponItemData ) ) != gamedataWeaponEvolution.Smart )
			{
				inkCompoundRef.SetVisible( m_smartLinkFirmwareOffline, false );
				inkCompoundRef.SetVisible( m_smartLinkFirmwareOnline, false );
			}
		}
		else
		{
			PlayFold();
		}
	}

	private function PlayFold()
	{
		if( m_folded )
		{
			return;
		}
		m_folded = true;
		if( m_transitionAnimProxy )
		{
			m_transitionAnimProxy.Stop();
			m_transitionAnimProxy = NULL;
		}
		m_transitionAnimProxy = PlayLibraryAnimation( 'fold' );
	}

	private function PlayUnfold()
	{
		if( !( m_folded ) )
		{
			return;
		}
		m_folded = false;
		if( m_transitionAnimProxy )
		{
			m_transitionAnimProxy.Stop();
			m_transitionAnimProxy = NULL;
		}
		m_transitionAnimProxy = PlayLibraryAnimation( 'unfold' );
	}

	private function SetRosterSlotData( isMelee : Bool )
	{
		var iconName : CName;
		var allAmmoCount : Int32;
		var showAmmoCounter : Bool;
		var options : inkAnimOptions;
		options.loopType = inkanimLoopType.Cycle;
		options.loopInfinite = true;
		allAmmoCount = RPGManager.GetAmmoCountValue( m_Player, m_ActiveWeapon.weaponID ) - m_ActiveWeapon.ammoCurrent;
		inkTextRef.SetText( m_CurrentAmmoRef, GetAmmoText( m_ActiveWeapon.ammoCurrent, 3 ) );
		inkTextRef.SetText( m_AllAmmoRef, GetAmmoText( allAmmoCount, 4 ) );
		showAmmoCounter = GameInstance.GetQuestsSystem( m_Player.GetGame() ).GetFact( 'q001_hide_ammo_counter' ) == 0;
		inkTextRef.SetVisible( m_CurrentAmmoRef, showAmmoCounter );
		inkTextRef.SetVisible( m_AllAmmoRef, showAmmoCounter && !( m_Player.IsReplacer() ) );
		if( m_outOfAmmoAnim && m_outOfAmmoAnim.IsPlaying() )
		{
			m_outOfAmmoAnim.Stop();
			inkWidgetRef.SetVisible( m_warningMessageWraper, false );
		}
		iconName = GetItemTypeIcon();
		LoadWeaponIcon();
		if( isMelee )
		{
			inkTextRef.SetVisible( m_CurrentAmmoRef, false );
			inkTextRef.SetVisible( m_AllAmmoRef, false );
		}
		else
		{
			if( ( ( m_ActiveWeapon.ammoCurrent == 0 ) && ( allAmmoCount == 0 ) ) && iconName != '' )
			{
				m_outOfAmmoAnim = PlayLibraryAnimation( 'out_of_ammo', options );
				inkWidgetRef.SetVisible( m_warningMessageWraper, true );
			}
			else
			{
				if( m_outOfAmmoAnim )
				{
					m_outOfAmmoAnim.Stop();
				}
				inkWidgetRef.SetVisible( m_warningMessageWraper, false );
			}
			if( ( ( m_ActiveWeapon.ammoCurrent == 0 ) && ( allAmmoCount == 0 ) ) && iconName == '' )
			{
				inkTextRef.SetVisible( m_CurrentAmmoRef, false );
				inkTextRef.SetVisible( m_AllAmmoRef, false );
			}
		}
		if( m_damageTypeIndicator )
		{
			m_damageTypeIndicator.Setup( InventoryItemData.GetDamageType( m_weaponItemData ) );
		}
		inkTextRef.SetText( m_weaponName, InventoryItemData.GetName( m_weaponItemData ) );
		SetTriggerModeIcons();
	}

	private function LoadWeaponIcon()
	{
		var record : WeaponItem_Record;
		if( ItemID.IsValid( m_ActiveWeapon.weaponID ) )
		{
			record = TweakDBInterface.GetWeaponItemRecord( ItemID.GetTDBID( m_ActiveWeapon.weaponID ) );
			if( record != NULL )
			{
				InkImageUtils.RequestSetImage( this, m_weaponIcon, record.HudIcon().GetID() );
			}
		}
	}

	private function SetTriggerModeIcons()
	{
		var i : Int32;
		if( m_ActiveWeapon.triggerModeList.Size() > 0 )
		{
			inkWidgetRef.SetVisible( m_modHolder, true );
		}
		else
		{
			inkWidgetRef.SetVisible( m_modHolder, false );
		}
		for( i = 0; i < m_ActiveWeapon.triggerModeList.Size(); i += 1 )
		{
			if( m_ActiveWeapon.triggerModeList[ i ] == m_ActiveWeapon.triggerModeCurrent )
			{
				inkImageRef.SetTexturePart( m_FireModes[ i ], HelperFireModeIcon( m_ActiveWeapon.triggerModeList[ i ] ) );
				inkImageRef.SetOpacity( m_FireModes[ i ], 1.0 );
			}
			else
			{
				inkImageRef.SetTexturePart( m_FireModes[ i ], HelperFireModeIcon( m_ActiveWeapon.triggerModeList[ i ] ) );
				inkImageRef.SetOpacity( m_FireModes[ i ], 0.30000001 );
			}
		}
	}

	private function GetItemTypeIcon() : CName
	{
		var iconPath : CName;
		switch( InventoryItemData.GetItemType( m_weaponItemData ) )
		{
			case gamedataItemType.Wea_AssaultRifle:
				iconPath = 'tech_rifle';
			break;
			case gamedataItemType.Wea_Handgun:
				iconPath = 'pistol';
			break;
			case gamedataItemType.Wea_Katana:
				iconPath = 'katana';
			break;
			case gamedataItemType.Wea_Knife:
				iconPath = 'katana';
			break;
			case gamedataItemType.Wea_LightMachineGun:
				iconPath = 'smart_gun';
			break;
			case gamedataItemType.Wea_LongBlade:
				iconPath = 'katana';
			break;
			case gamedataItemType.Wea_Axe:
				iconPath = 'katana';
			break;
			case gamedataItemType.Wea_Chainsword:
				iconPath = 'katana';
			break;
			case gamedataItemType.Wea_Machete:
				iconPath = 'katana';
			break;
			case gamedataItemType.Wea_Melee:
				iconPath = 'tech_rifle';
			break;
			case gamedataItemType.Wea_OneHandedClub:
				iconPath = 'tech_rifle';
			break;
			case gamedataItemType.Wea_PrecisionRifle:
				iconPath = 'tech_rifle';
			break;
			case gamedataItemType.Wea_Revolver:
				iconPath = 'pistol';
			break;
			case gamedataItemType.Wea_Rifle:
				iconPath = 'tech_rifle';
			break;
			case gamedataItemType.Wea_ShortBlade:
				iconPath = 'katana';
			break;
			case gamedataItemType.Wea_Shotgun:
				iconPath = 'shotgun';
			break;
			case gamedataItemType.Wea_ShotgunDual:
				iconPath = 'shotgun';
			break;
			case gamedataItemType.Wea_SniperRifle:
				iconPath = 'tech_rifle';
			break;
			case gamedataItemType.Wea_SubmachineGun:
				iconPath = 'smart_gun';
			break;
			case gamedataItemType.Wea_TwoHandedClub:
				iconPath = 'katana';
			break;
			case gamedataItemType.Wea_Fists:
				iconPath = 'katana';
			break;
			default:
				iconPath = '';
			break;
		}
		return iconPath;
	}

	private function HelperFireModeIcon( type : gamedataTriggerMode ) : CName
	{
		var iconPath : CName;
		switch( type )
		{
			case gamedataTriggerMode.SemiAuto:
				iconPath = 'semi_auto_icon';
			break;
			case gamedataTriggerMode.Burst:
				iconPath = 'burst_icon';
			break;
			case gamedataTriggerMode.FullAuto:
				iconPath = 'auto_icon';
			break;
			case gamedataTriggerMode.Charge:
				iconPath = 'charge_icon';
			break;
		}
		return iconPath;
	}

	private function GetUnreservedAmmoQuantityByType( ammoID : ItemID ) : Int32
	{
		var i : Int32;
		var ammoData : AmmoData;
		for( i = 0; i < m_BufferedRosterData.ammoData.Size(); i += 1 )
		{
			ammoData = m_BufferedRosterData.ammoData[ i ];
			if( ammoData.id == ammoID )
			{
				return ammoData.available - ammoData.equipped;
			}
		}
		return 0;
	}

	private function GetAmmoText( ammoCount : Int32, textLength : Int32 ) : String
	{
		return SpaceFill( IntToString( Max( ammoCount, 0 ) ), textLength, ESpaceFillMode.JustifyRight, "0" );
	}

}

