class CrosshairGameController_Smart_Rifl extends gameuiCrosshairBaseGameController
{
	private editable var m_txtAccuracy : inkTextRef;
	private editable var m_txtTargetsCount : inkTextRef;
	private editable var m_txtFluffStatus : inkTextRef;
	private editable var m_leftPart : inkImageRef;
	private editable var m_rightPart : inkImageRef;
	private editable var m_leftPartExtra : inkImageRef;
	private editable var m_rightPartExtra : inkImageRef;
	private var offsetLeftRight : Float;
	default offsetLeftRight = .8;
	private var offsetLeftRightExtra : Float;
	default offsetLeftRightExtra = 1.2;
	private var latchVertical : Float;
	default latchVertical = 40.0;
	private editable var m_topPart : inkImageRef;
	private editable var m_bottomPart : inkImageRef;
	private editable var m_horiPart : inkWidgetRef;
	private editable var m_vertPart : inkWidgetRef;
	private editable var m_targetWidgetLibraryName : CName;
	default m_targetWidgetLibraryName = 'bucket';
	private editable var m_targetsPullSize : Int32;
	default m_targetsPullSize = 10;
	private editable var m_targetColorChange : inkWidgetRef;
	private editable var m_targetingFrame : inkWidgetRef;
	private editable var m_reticleFrame : inkWidgetRef;
	private editable var m_bufferFrame : inkWidgetRef;
	private editable var m_targetHolder : inkCompoundRef;
	private editable var m_lockHolder : inkCompoundRef;
	private editable var m_reloadIndicator : inkCompoundRef;
	private editable var m_reloadIndicatorInv : inkCompoundRef;
	private editable var m_smartLinkDot : inkCompoundRef;
	private editable var m_smartLinkFrame : inkCompoundRef;
	private editable var m_smartLinkFluff : inkCompoundRef;
	private editable var m_smartLinkFirmwareOnline : inkCompoundRef;
	private editable var m_smartLinkFirmwareOffline : inkCompoundRef;
	private var m_weaponBlackboard : weak< IBlackboard >;
	private var m_weaponParamsListenerId : CallbackHandle;
	private var m_targets : array< weak< inkWidget > >;
	private var m_targetsData : array< smartGunUITargetParameters >;
	private var m_isBlocked : Bool;
	private var m_isAimDownSights : Bool;
	private var m_bufferedSpread : Vector2;
	private var m_reloadAnimationProxy : inkAnimProxy;
	var m_prevTargetedEntityIDs : array< EntityID >;

	protected event OnInitialize()
	{
		super.OnInitialize();
		SetupLayout();
	}

	protected event OnPreIntro()
	{
		m_weaponBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_ActiveWeaponData );
		m_weaponParamsListenerId = m_weaponBlackboard.RegisterDelayedListenerVariant( GetAllBlackboardDefs().UI_ActiveWeaponData.SmartGunParams, this, 'OnSmartGunParams' );
		super.OnPreIntro();
	}

	protected event OnPreOutro()
	{
		m_weaponBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_ActiveWeaponData.SmartGunParams, m_weaponParamsListenerId );
		super.OnPreOutro();
	}

	private function SetupLayout()
	{
		var newTarget : weak< inkWidget >;
		var i : Int32;
		for( i = 0; i < m_targetsPullSize; i += 1 )
		{
			newTarget = SpawnFromLocal( inkCompoundRef.Get( m_targetHolder ), m_targetWidgetLibraryName );
			newTarget.SetVisible( false );
			m_targets.PushBack( newTarget );
		}
		inkCompoundRef.SetVisible( m_reloadIndicator, false );
		inkCompoundRef.SetVisible( m_reloadIndicatorInv, true );
	}

	protected event OnSmartGunParams( argParams : Variant )
	{
		var currWidget : weak< inkWidget >;
		var currController : weak< Crosshair_Smart_Rifl_Bucket >;
		var targetList : array< smartGunUITargetParameters >;
		var smartData : smartGunUIParameters;
		var currTargetData : smartGunUITargetParameters;
		var i, count : Int32;
		var numTargets : Int32;
		var numLockedTargets : Int32;
		var targetedEntityIDs : array< EntityID >;
		var bufferValue : Vector2;
		smartData = ( ( smartGunUIParameters )argParams );
		inkWidgetRef.SetSize( m_targetingFrame, smartData.sight.targetableRegionSize );
		inkWidgetRef.SetSize( m_reticleFrame, smartData.sight.reticleSize );
		bufferValue.Y = ( smartData.sight.targetableRegionSize.Y - smartData.sight.reticleSize.Y ) / 2.0;
		inkWidgetRef.SetSize( m_bufferFrame, 100.0, bufferValue.Y );
		inkCompoundRef.SetVisible( m_smartLinkDot, false );
		inkCompoundRef.SetVisible( m_smartLinkFrame, true );
		inkCompoundRef.SetVisible( m_smartLinkFluff, true );
		inkCompoundRef.SetVisible( m_smartLinkFirmwareOffline, ( ( smartData.hasRequiredCyberware ) ? ( false ) : ( true ) ) );
		inkCompoundRef.SetVisible( m_smartLinkFirmwareOnline, ( ( smartData.hasRequiredCyberware ) ? ( true ) : ( false ) ) );
		targetList = smartData.targets;
		numTargets = targetList.Size();
		count = m_targets.Size();
		for( i = 0; i < count; i += 1 )
		{
			currWidget = ( ( inkWidget )( m_targets[ i ] ) );
			if( i >= numTargets )
			{
				currWidget.SetVisible( false );
			}
			else
			{
				currTargetData = targetList[ i ];
				currWidget.SetVisible( true );
				currWidget.SetMargin( inkMargin( currTargetData.pos.X * 0.5, currTargetData.pos.Y * 0.5, 0.0, 0.0 ) );
				if( currTargetData.state == gamesmartGunTargetState.Locked || currTargetData.state == gamesmartGunTargetState.Unlocking )
				{
					currWidget.Reparent( ( ( inkCompoundWidget )( inkCompoundRef.Get( m_lockHolder ) ) ) );
				}
				else
				{
					currWidget.Reparent( ( ( inkCompoundWidget )( inkCompoundRef.Get( m_targetHolder ) ) ) );
				}
				currController = ( ( Crosshair_Smart_Rifl_Bucket )( currWidget.GetController() ) );
				currController.SetData( currTargetData );
				if( currTargetData.state == gamesmartGunTargetState.Locked && !( targetedEntityIDs.Contains( currTargetData.entityID ) ) )
				{
					targetedEntityIDs.PushBack( currTargetData.entityID );
					if( !( m_prevTargetedEntityIDs.Contains( currTargetData.entityID ) ) )
					{
						numLockedTargets = numLockedTargets + 1;
					}
				}
			}
		}
		if( numLockedTargets > 0 )
		{
			if( m_isAimDownSights )
			{
				this.PlaySound( 'SmartGunRifle', 'OnTagFromAim' );
			}
			else
			{
				this.PlaySound( 'SmartGunRifle', 'OnTagFromHip' );
			}
		}
		m_prevTargetedEntityIDs = targetedEntityIDs;
	}

	protected override function ApplyCrosshairGUIState( state : CName, aimedAtEntity : Entity )
	{
		inkWidgetRef.SetState( m_targetColorChange, state );
	}

	public export override function GetIntroAnimation( firstEquip : Bool ) : inkAnimDef
	{
		var anim : inkAnimDef;
		var alphaInterpolator : inkAnimTransparency;
		anim = new inkAnimDef;
		alphaInterpolator = new inkAnimTransparency;
		alphaInterpolator.SetStartTransparency( 0.0 );
		alphaInterpolator.SetEndTransparency( 1.0 );
		alphaInterpolator.SetDuration( 0.25 );
		alphaInterpolator.SetType( inkanimInterpolationType.Linear );
		alphaInterpolator.SetMode( inkanimInterpolationMode.EasyIn );
		anim.AddInterpolator( alphaInterpolator );
		return anim;
	}

	public export override function GetOutroAnimation() : inkAnimDef
	{
		var anim : inkAnimDef;
		var alphaInterpolator : inkAnimTransparency;
		anim = new inkAnimDef;
		alphaInterpolator = new inkAnimTransparency;
		alphaInterpolator.SetStartTransparency( 1.0 );
		alphaInterpolator.SetEndTransparency( 0.0 );
		alphaInterpolator.SetDuration( 0.25 );
		alphaInterpolator.SetType( inkanimInterpolationType.Linear );
		alphaInterpolator.SetMode( inkanimInterpolationMode.EasyIn );
		anim.AddInterpolator( alphaInterpolator );
		return anim;
	}

	protected override function OnCrosshairStateChange( oldState : gamePSMCrosshairStates, newState : gamePSMCrosshairStates )
	{
		var playbackOptions : inkAnimOptions;
		super.OnCrosshairStateChange( oldState, newState );
		if( newState == gamePSMCrosshairStates.Reload )
		{
			playbackOptions.loopInfinite = true;
			playbackOptions.loopType = inkanimLoopType.Cycle;
			m_reloadAnimationProxy = PlayLibraryAnimation( 'reloading', playbackOptions );
			inkCompoundRef.SetVisible( m_reloadIndicator, true );
			inkCompoundRef.SetVisible( m_reloadIndicatorInv, false );
		}
		else if( m_reloadAnimationProxy )
		{
			inkCompoundRef.SetVisible( m_reloadIndicator, false );
			inkCompoundRef.SetVisible( m_reloadIndicatorInv, true );
			m_reloadAnimationProxy.Stop();
			m_reloadAnimationProxy = NULL;
		}
	}

	protected event OnBulletSpreadChanged( spread : Vector2 )
	{
		m_bufferedSpread = spread;
		inkImageRef.SetMargin( m_leftPart, inkMargin( -( spread.X ) * offsetLeftRight, 0.0, 0.0, 0.0 ) );
		inkImageRef.SetMargin( m_rightPart, inkMargin( spread.X * offsetLeftRight, 0.0, 0.0, 0.0 ) );
		inkImageRef.SetMargin( m_leftPartExtra, inkMargin( -( spread.X ) / 2.0, 0.0, 0.0, 0.0 ) );
		inkImageRef.SetMargin( m_rightPartExtra, inkMargin( spread.X / 2.0, 0.0, 0.0, 0.0 ) );
		inkWidgetRef.SetSize( m_vertPart, 3.0, ( spread.Y * 2.0 ) + latchVertical );
		inkWidgetRef.SetSize( m_horiPart, spread.X, 3.0 );
		inkImageRef.SetMargin( m_topPart, inkMargin( 0.0, -( spread.Y ), 0.0, 0.0 ) );
		inkImageRef.SetMargin( m_bottomPart, inkMargin( 0.0, spread.Y, 0.0, 0.0 ) );
	}

	protected override function OnState_HipFire()
	{
		super.OnState_HipFire();
		m_isAimDownSights = false;
		m_isBlocked = false;
	}

	protected override function OnState_Aim()
	{
		m_isAimDownSights = true;
		m_isBlocked = false;
	}

	protected override function OnState_Reload()
	{
		super.OnState_Reload();
		m_isBlocked = true;
	}

	protected override function OnState_Sprint()
	{
		super.OnState_Sprint();
		m_isBlocked = true;
	}

	protected override function OnState_GrenadeCharging()
	{
		super.OnState_GrenadeCharging();
		m_isBlocked = true;
	}

	protected override function OnState_Scanning()
	{
		super.OnState_Scanning();
		m_isBlocked = true;
	}

	protected override function OnState_Safe()
	{
		super.OnState_Safe();
		m_isBlocked = true;
	}

}

class Crosshair_Smart_Rifl_Bucket extends inkLogicController
{
	private editable var m_progressBar : inkWidgetRef;
	private editable var m_progressBarValue : inkWidgetRef;
	private editable var m_targetIndicator : inkWidgetRef;
	private editable var m_lockedIndicator : inkWidgetRef;
	private editable var m_lockingIndicator : inkWidgetRef;
	private var m_data : smartGunUITargetParameters;
	private var m_lockingAnimationProxy : inkAnimProxy;

	protected event OnInitialize()
	{
		inkWidgetRef.SetVisible( m_progressBar, false );
		inkWidgetRef.SetVisible( m_targetIndicator, false );
		inkWidgetRef.SetVisible( m_lockedIndicator, false );
		inkWidgetRef.SetVisible( m_lockingIndicator, false );
	}

	public function SetData( data : smartGunUITargetParameters )
	{
		m_data = data;
		if( m_lockingAnimationProxy )
		{
			m_lockingAnimationProxy.Stop();
			m_lockingAnimationProxy = NULL;
		}
		switch( m_data.state )
		{
			case gamesmartGunTargetState.Visible:
			case gamesmartGunTargetState.Targetable:
				inkWidgetRef.SetVisible( m_targetIndicator, true );
			inkWidgetRef.SetVisible( m_lockingIndicator, false );
			inkWidgetRef.SetVisible( m_lockedIndicator, false );
			break;
			case gamesmartGunTargetState.Locking:
				inkWidgetRef.SetVisible( m_targetIndicator, false );
			inkWidgetRef.SetVisible( m_lockingIndicator, true );
			inkWidgetRef.SetVisible( m_lockedIndicator, false );
			break;
			case gamesmartGunTargetState.Locked:
			case gamesmartGunTargetState.Unlocking:
				inkWidgetRef.SetVisible( m_targetIndicator, false );
			inkWidgetRef.SetVisible( m_lockingIndicator, false );
			inkWidgetRef.SetVisible( m_lockedIndicator, true );
			break;
		}
	}

}

