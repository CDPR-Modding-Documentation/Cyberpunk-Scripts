class CrosshairGameController_Simple extends gameuiCrosshairBaseGameController
{
	private editable var m_leftPart : inkImageRef;
	private editable var m_rightPart : inkImageRef;
	private editable var m_leftPartExtra : inkImageRef;
	private editable var m_rightPartExtra : inkImageRef;
	private var offsetLeftRight : Float;
	default offsetLeftRight = .8;
	private var offsetLeftRightExtra : Float;
	default offsetLeftRightExtra = 1.2;
	private var latchVertical : Float;
	default latchVertical = 40.0;
	private editable var m_topPart : inkImageRef;
	private editable var m_bottomPart : inkImageRef;
	private editable var m_horiPart : inkWidgetRef;
	private editable var m_vertPart : inkWidgetRef;
	private editable var m_targetColorChange : inkWidgetRef;
	private editable var m_middlePart : inkWidgetRef;
	private editable var m_overheatShake : inkWidgetRef;
	private editable var m_overheatTL : inkWidgetRef;
	private editable var m_overheatBL : inkWidgetRef;
	private editable var m_overheatTR : inkWidgetRef;
	private editable var m_overheatBR : inkWidgetRef;
	private var m_weaponLocalBB : weak< IBlackboard >;
	private var m_onChargeChangeBBID : CallbackHandle;
	private var m_shakeAnimation : inkAnimProxy;
	private var m_isInForcedCool : Bool;

	protected event OnInitialize()
	{
		m_rootWidget = GetRootWidget();
		m_rootWidget.SetOpacity( 0.0 );
		super.OnInitialize();
	}

	protected event OnUninitialize()
	{
		super.OnUninitialize();
	}

	protected event OnPreIntro()
	{
		m_weaponLocalBB = GetWeaponLocalBlackboard();
		if( m_weaponLocalBB )
		{
			m_onChargeChangeBBID = m_weaponLocalBB.RegisterListenerFloat( GetAllBlackboardDefs().Weapon.Charge, this, 'OnChargeChanged' );
		}
		super.OnPreIntro();
	}

	protected event OnPreOutro()
	{
		if( m_weaponLocalBB )
		{
			m_weaponLocalBB.UnregisterListenerFloat( GetAllBlackboardDefs().Weapon.Charge, m_onChargeChangeBBID );
		}
		super.OnPreOutro();
	}

	public export override function GetIntroAnimation( firstEquip : Bool ) : inkAnimDef
	{
		var anim : inkAnimDef;
		var alphaInterpolator : inkAnimTransparency;
		anim = new inkAnimDef;
		alphaInterpolator = new inkAnimTransparency;
		alphaInterpolator.SetStartTransparency( 0.0 );
		alphaInterpolator.SetEndTransparency( 1.0 );
		alphaInterpolator.SetDuration( 0.25 );
		alphaInterpolator.SetType( inkanimInterpolationType.Linear );
		alphaInterpolator.SetMode( inkanimInterpolationMode.EasyIn );
		anim.AddInterpolator( alphaInterpolator );
		return anim;
	}

	public export override function GetOutroAnimation() : inkAnimDef
	{
		var anim : inkAnimDef;
		var alphaInterpolator : inkAnimTransparency;
		anim = new inkAnimDef;
		alphaInterpolator = new inkAnimTransparency;
		alphaInterpolator.SetStartTransparency( 1.0 );
		alphaInterpolator.SetEndTransparency( 0.0 );
		alphaInterpolator.SetDuration( 0.25 );
		alphaInterpolator.SetType( inkanimInterpolationType.Linear );
		alphaInterpolator.SetMode( inkanimInterpolationMode.EasyIn );
		anim.AddInterpolator( alphaInterpolator );
		return anim;
	}

	protected event OnBulletSpreadChanged( spread : Vector2 )
	{
		inkImageRef.SetMargin( m_leftPart, inkMargin( -( spread.X ) * offsetLeftRight, 0.0, 0.0, 0.0 ) );
		inkImageRef.SetMargin( m_rightPart, inkMargin( spread.X * offsetLeftRight, 0.0, 0.0, 0.0 ) );
		inkImageRef.SetMargin( m_leftPartExtra, inkMargin( -( spread.X ) / 2.0, 0.0, 0.0, 0.0 ) );
		inkImageRef.SetMargin( m_rightPartExtra, inkMargin( spread.X / 2.0, 0.0, 0.0, 0.0 ) );
		inkWidgetRef.SetSize( m_vertPart, 3.0, ( spread.Y * 2.0 ) + latchVertical );
		inkWidgetRef.SetSize( m_horiPart, spread.X * 2.0, 3.0 );
		inkImageRef.SetMargin( m_topPart, inkMargin( 0.0, -( spread.Y ), 0.0, 0.0 ) );
		inkImageRef.SetMargin( m_bottomPart, inkMargin( 0.0, spread.Y, 0.0, 0.0 ) );
	}

	protected event OnChargeChanged( argCharge : Float ) {}

	protected override function ApplyCrosshairGUIState( state : CName, aimedAtEntity : Entity )
	{
		inkWidgetRef.SetState( m_targetColorChange, state );
	}

	protected override function OnState_HipFire()
	{
		m_rootWidget.SetVisible( true );
	}

	protected override function OnState_Aim()
	{
		m_rootWidget.SetVisible( false );
	}

}

