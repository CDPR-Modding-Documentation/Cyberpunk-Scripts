class CyberdeckTooltip extends AGenericTooltipController
{
	protected editable var m_itemNameText : inkTextRef;
	protected editable var m_itemRarityText : inkTextRef;
	protected editable var m_rarityBars : inkWidgetRef;
	protected editable var m_categoriesWrapper : inkCompoundRef;
	protected editable var m_topContainer : inkCompoundRef;
	protected editable var m_headerContainer : inkCompoundRef;
	protected editable var m_statsContainer : inkCompoundRef;
	protected editable var m_descriptionContainer : inkCompoundRef;
	protected editable var m_bottomContainer : inkCompoundRef;
	protected editable var m_statsList : inkCompoundRef;
	protected editable var m_priceContainer : inkCompoundRef;
	protected editable var m_descriptionText : inkTextRef;
	protected editable var m_priceText : inkTextRef;
	protected editable var m_equipedWrapper : inkWidgetRef;
	protected editable var m_itemTypeText : inkTextRef;
	protected editable var m_itemWeightWrapper : inkWidgetRef;
	protected editable var m_itemWeightText : inkTextRef;
	protected editable var m_cybderdeckBaseMemoryValue : inkTextRef;
	protected editable var m_cybderdeckBufferValue : inkTextRef;
	protected editable var m_cybderdeckSlotsValue : inkTextRef;
	protected editable var m_deviceHacksGrid : inkCompoundRef;
	protected editable var m_itemIconImage : inkImageRef;
	protected editable var m_itemAttributeRequirements : inkWidgetRef;
	protected editable var m_itemAttributeRequirementsText : inkTextRef;
	protected editable var m_iconicLines : inkImageRef;
	protected var m_rarityBarsController : weak< LevelBarsController >;
	protected var m_data : InventoryTooltipData;
	protected var m_animProxy : inkAnimProxy;

	protected event OnInitialize()
	{
		super.OnInitialize();
		m_rarityBarsController = ( ( LevelBarsController )( inkWidgetRef.GetController( m_rarityBars ) ) );
	}

	public function SetData( data : ItemViewData )
	{
		SetData( InventoryTooltipData.FromItemViewData( data ) );
	}

	public override function SetData( tooltipData : ATooltipData )
	{
		m_data = ( ( InventoryTooltipData )( tooltipData ) );
		UpdateLayout();
	}

	public override function Show()
	{
		super.Show();
		if( m_animProxy )
		{
			m_animProxy.Stop();
			m_animProxy = NULL;
		}
		m_animProxy = PlayLibraryAnimationOnAutoSelectedTargets( 'show_item_tooltip', GetRootWidget() );
		m_animProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnShowAnimationFinished' );
	}

	protected function UpdateLayout()
	{
		UpdateName();
		UpdateRarity();
		UpdateCyberdeckStats();
		UpdateAbilities();
		SetupDeviceHacks();
		UpdateDescription();
		UpdatePrice();
		UpdateWeight();
		UpdateIcon();
		UpdateRequirements();
		inkWidgetRef.SetVisible( m_equipedWrapper, m_data.isEquipped );
		FixLines();
	}

	protected function GetAbilities() : array< InventoryItemAbility >
	{
		var i, limit : Int32;
		var itemRecord : weak< Item_Record >;
		var GLPAbilities : array< weak< GameplayLogicPackage_Record > >;
		var ability : InventoryItemAbility;
		var uiData : weak< GameplayLogicPackageUIData_Record >;
		var abilities : array< InventoryItemAbility >;
		itemRecord = TDB.GetItemRecord( ItemID.GetTDBID( InventoryItemData.GetID( m_data.inventoryItemData ) ) );
		itemRecord.OnAttach( GLPAbilities );
		for( i = 0, limit = GLPAbilities.Size(); i < limit; i += 1 )
		{
			if( GLPAbilities[ i ] )
			{
				uiData = GLPAbilities[ i ].UIData();
				if( uiData )
				{
					ability = InventoryItemAbility( uiData.IconPath(), uiData.LocalizedName(), uiData.LocalizedDescription(), UILocalizationDataPackage.FromLogicUIDataPackage( uiData, InventoryItemData.GetGameItemData( m_data.inventoryItemData ) ) );
					abilities.PushBack( ability );
				}
			}
		}
		GLPAbilities.Clear();
		itemRecord.OnEquip( GLPAbilities );
		for( i = 0, limit = GLPAbilities.Size(); i < limit; i += 1 )
		{
			if( GLPAbilities[ i ] )
			{
				uiData = GLPAbilities[ i ].UIData();
				if( uiData )
				{
					ability = InventoryItemAbility( uiData.IconPath(), uiData.LocalizedName(), uiData.LocalizedDescription(), UILocalizationDataPackage.FromLogicUIDataPackage( uiData, InventoryItemData.GetGameItemData( m_data.inventoryItemData ) ) );
					abilities.PushBack( ability );
				}
			}
		}
		return abilities;
	}

	protected function UpdateAbilities()
	{
		var abilities : array< InventoryItemAbility >;
		var abilitiesSize, i : Int32;
		var controller : CyberdeckStatController;
		abilities = GetAbilities();
		abilitiesSize = abilities.Size();
		if( abilitiesSize > 0 )
		{
			while( inkCompoundRef.GetNumChildren( m_statsList ) > abilitiesSize )
			{
				inkCompoundRef.RemoveChildByIndex( m_statsList, 0 );
			}
			while( inkCompoundRef.GetNumChildren( m_statsList ) < abilitiesSize )
			{
				SpawnFromLocal( inkCompoundRef.Get( m_statsList ), 'cyberdeckStat' );
			}
			for( i = 0; i < abilitiesSize; i += 1 )
			{
				controller = ( ( CyberdeckStatController )( inkCompoundRef.GetWidgetByIndex( m_statsList, i ).GetController() ) );
				controller.Setup( abilities[ i ] );
			}
			inkCompoundRef.SetVisible( m_statsContainer, abilitiesSize > 0 );
		}
		else
		{
			inkCompoundRef.SetVisible( m_statsContainer, false );
		}
	}

	protected function UpdateCyberdeckStats()
	{
		var memoryValue, bufferValue : Float;
		var tweakRecord : weak< Item_Record >;
		var onEquipList : array< weak< GameplayLogicPackage_Record > >;
		var statsList : array< weak< StatModifier_Record > >;
		var i, j, slots : Int32;
		var statType : weak< Stat_Record >;
		var stat : weak< ConstantStatModifier_Record >;
		tweakRecord = TDB.GetItemRecord( ItemID.GetTDBID( InventoryItemData.GetID( m_data.inventoryItemData ) ) );
		tweakRecord.OnEquip( onEquipList );
		for( i = 0; i < onEquipList.Size(); i += 1 )
		{
			onEquipList[ i ].Stats( statsList );
			for( j = 0; j < statsList.Size(); j += 1 )
			{
				statType = statsList[ j ].StatType();
				stat = ( ( weak< weak< ConstantStatModifier_Record > > )( statsList[ j ] ) );
				if( stat )
				{
					if( statType.StatType() == gamedataStatType.Memory )
					{
						memoryValue = stat.Value();
					}
					else if( statType.StatType() == gamedataStatType.BufferSize )
					{
						bufferValue = stat.Value();
					}
				}
			}
		}
		slots = InventoryItemData.GetAttachmentsSize( m_data.inventoryItemData );
		inkTextRef.SetText( m_cybderdeckBaseMemoryValue, FloatToStringPrec( memoryValue, 0 ) );
		inkTextRef.SetText( m_cybderdeckBufferValue, FloatToStringPrec( bufferValue, 0 ) );
		inkTextRef.SetText( m_cybderdeckSlotsValue, IntToString( slots ) );
	}

	protected function SetupDeviceHacks()
	{
		var hacks : array< CyberdeckDeviceQuickhackData >;
		var i : Int32;
		var widget : weak< inkWidget >;
		var controller : CyberdeckDeviceHackIcon;
		hacks = GetCyberdeckDeviceQuickhacks();
		inkCompoundRef.RemoveAllChildren( m_deviceHacksGrid );
		for( i = 0; i < hacks.Size(); i += 1 )
		{
			widget = SpawnFromLocal( inkCompoundRef.Get( m_deviceHacksGrid ), 'deviceHackIcon' );
			controller = ( ( CyberdeckDeviceHackIcon )( widget.GetController() ) );
			controller.Setup( hacks[ i ] );
		}
	}

	protected function GetCyberdeckDeviceQuickhacks() : array< CyberdeckDeviceQuickhackData >
	{
		var i : Int32;
		var tweakRecord : weak< Item_Record >;
		var objectActions : array< weak< ObjectAction_Record > >;
		var objectActionType : ObjectActionType_Record;
		var deviceHacks : array< weak< ObjectAction_Record > >;
		var uiAction : weak< InteractionBase_Record >;
		var data : CyberdeckDeviceQuickhackData;
		var result : array< CyberdeckDeviceQuickhackData >;
		tweakRecord = TDB.GetItemRecord( ItemID.GetTDBID( InventoryItemData.GetID( m_data.inventoryItemData ) ) );
		tweakRecord.ObjectActions( objectActions );
		for( i = 0; i < objectActions.Size(); i += 1 )
		{
			objectActionType = objectActions[ i ].ObjectActionType();
			if( objectActionType )
			{
				if( objectActionType.Type() == gamedataObjectActionType.DeviceQuickHack )
				{
					deviceHacks.PushBack( objectActions[ i ] );
				}
			}
		}
		for( i = 0; i < deviceHacks.Size(); i += 1 )
		{
			uiAction = deviceHacks[ i ].ObjectActionUI();
			data.UIIcon = uiAction.CaptionIcon().TexturePartID();
			data.ObjectActionRecord = deviceHacks[ i ];
			result.PushBack( data );
		}
		return result;
	}

	protected function UpdateName()
	{
		var finalItemName : String;
		var quantity : Int32;
		quantity = InventoryItemData.GetQuantity( m_data.inventoryItemData );
		finalItemName = UIItemsHelper.GetTooltipItemName( m_data );
		if( quantity > 1 )
		{
			finalItemName += ( ( " [" + IntToString( quantity ) ) + "]" );
		}
		inkTextRef.SetText( m_itemNameText, finalItemName );
	}

	protected function UpdateRarity()
	{
		var quality : gamedataQuality;
		var rarityLabel, iconicLabel : String;
		var isIconic : Bool;
		if( m_data.overrideRarity )
		{
			quality = UIItemsHelper.QualityNameToEnum( StringToName( m_data.quality ) );
		}
		else
		{
			quality = RPGManager.GetItemDataQuality( InventoryItemData.GetGameItemData( m_data.inventoryItemData ) );
		}
		iconicLabel = GetLocalizedText( UIItemsHelper.QualityToLocalizationKey( gamedataQuality.Iconic ) );
		rarityLabel = GetLocalizedText( UIItemsHelper.QualityToLocalizationKey( quality ) );
		isIconic = RPGManager.IsItemIconic( InventoryItemData.GetGameItemData( m_data.inventoryItemData ) );
		inkTextRef.SetState( m_itemNameText, UIItemsHelper.QualityEnumToName( quality ) );
		inkTextRef.SetState( m_itemRarityText, UIItemsHelper.QualityEnumToName( quality ) );
		inkTextRef.SetText( m_itemRarityText, ( ( isIconic ) ? ( ( rarityLabel + " / " ) + iconicLabel ) : ( rarityLabel ) ) );
		m_rarityBarsController.Update( UIItemsHelper.QualityToInt( quality ) );
		inkImageRef.SetVisible( m_iconicLines, isIconic );
	}

	protected function UpdateDescription()
	{
		if( m_data.description != "" )
		{
			inkTextRef.SetText( m_descriptionText, m_data.description );
			inkCompoundRef.SetVisible( m_descriptionContainer, true );
		}
		else
		{
			inkCompoundRef.SetVisible( m_descriptionContainer, false );
		}
	}

	protected function UpdateWeight()
	{
		var weight : Float;
		weight = InventoryItemData.GetGameItemData( m_data.inventoryItemData ).GetStatValueByType( gamedataStatType.Weight );
		inkTextRef.SetText( m_itemWeightText, FloatToStringPrec( weight, 2 ) );
	}

	protected virtual function UpdateIcon()
	{
		var iconName : String;
		var emptyIcon : CName;
		var iconsNameResolver : IconsNameResolver;
		iconsNameResolver = IconsNameResolver.GetIconsNameResolver();
		if( m_data )
		{
			if( IsStringValid( InventoryItemData.GetIconPath( m_data.inventoryItemData ) ) )
			{
				iconName = InventoryItemData.GetIconPath( m_data.inventoryItemData );
			}
			else
			{
				iconName = NameToString( iconsNameResolver.TranslateItemToIconName( ItemID.GetTDBID( InventoryItemData.GetID( m_data.inventoryItemData ) ), InventoryItemData.GetIconGender( m_data.inventoryItemData ) == ItemIconGender.Male ) );
			}
			if( iconName != "None" && iconName != "" )
			{
				inkImageRef.SetScale( m_itemIconImage, ( ( InventoryItemData.GetEquipmentArea( m_data.inventoryItemData ) == gamedataEquipmentArea.Outfit ) ? ( Vector2( 0.5, 0.5 ) ) : ( Vector2( 1.0, 1.0 ) ) ) );
				InkImageUtils.RequestSetImage( this, m_itemIconImage, "UIIcon." + iconName, 'OnIconCallback' );
			}
			else
			{
				emptyIcon = UIItemsHelper.GetSlotShadowIcon( TDBID.None(), InventoryItemData.GetItemType( m_data.inventoryItemData ), InventoryItemData.GetEquipmentArea( m_data.inventoryItemData ) );
				InkImageUtils.RequestSetImage( this, m_itemIconImage, emptyIcon );
			}
		}
	}

	protected function UpdatePrice()
	{
		if( m_data.isVendorItem )
		{
			inkTextRef.SetText( m_priceText, FloatToStringPrec( m_data.buyPrice, 0 ) );
		}
		else
		{
			inkTextRef.SetText( m_priceText, FloatToStringPrec( m_data.price, 0 ) );
		}
		inkCompoundRef.SetVisible( m_priceContainer, true );
	}

	protected function UpdateRequirements()
	{
		var textParams : inkTextParams;
		var statRecord : Stat_Record;
		var requirement : SItemStackRequirementData;
		inkWidgetRef.SetVisible( m_itemAttributeRequirements, false );
		if( !( InventoryItemData.IsEmpty( m_data.inventoryItemData ) ) )
		{
			requirement = InventoryItemData.GetRequirement( m_data.inventoryItemData );
			if( requirement.statType != gamedataStatType.Invalid && !( InventoryItemData.IsRequirementMet( m_data.inventoryItemData ) ) )
			{
				inkWidgetRef.SetVisible( m_itemAttributeRequirements, true );
				textParams = new inkTextParams;
				textParams.AddNumber( "value", RoundF( requirement.requiredValue ) );
				statRecord = RPGManager.GetStatRecord( requirement.statType );
				textParams.AddString( "statName", GetLocalizedText( UILocalizationHelper.GetStatNameLockey( statRecord ) ) );
				textParams.AddString( "statColor", "StatTypeColor." + EnumValueToString( "gamedataStatType", ( ( Int32 )( requirement.statType ) ) ) );
				inkTextRef.SetLocalizedTextScript( m_itemAttributeRequirementsText, "LocKey#49215", textParams );
			}
			if( !( InventoryItemData.IsEquippable( m_data.inventoryItemData ) ) )
			{
				inkWidgetRef.SetVisible( m_itemAttributeRequirements, true );
				requirement = InventoryItemData.GetEquipRequirement( m_data.inventoryItemData );
				textParams = new inkTextParams;
				textParams.AddNumber( "value", RoundF( requirement.requiredValue ) );
				statRecord = RPGManager.GetStatRecord( requirement.statType );
				textParams.AddString( "statName", GetLocalizedText( UILocalizationHelper.GetStatNameLockey( statRecord ) ) );
				textParams.AddString( "statColor", "StatTypeColor." + EnumValueToString( "gamedataStatType", ( ( Int32 )( requirement.statType ) ) ) );
				inkTextRef.SetLocalizedTextScript( m_itemAttributeRequirementsText, "LocKey#77652", textParams );
			}
		}
	}

	protected function FixLines()
	{
		var i : Int32;
		var container : weak< inkCompoundWidget >;
		var lineWidget : weak< inkWidget >;
		var firstHidden : Bool;
		firstHidden = false;
		for( i = 0; i < inkCompoundRef.GetNumChildren( m_categoriesWrapper ); i += 1 )
		{
			container = ( ( inkCompoundWidget )( inkCompoundRef.GetWidgetByIndex( m_categoriesWrapper, i ) ) );
			if( container )
			{
				if( container.IsVisible() )
				{
					lineWidget = container.GetWidgetByPath( inkWidgetPath.Build( 'line' ) );
					if( lineWidget )
					{
						lineWidget.SetVisible( firstHidden );
						firstHidden = true;
					}
				}
			}
		}
	}

}

class CyberdeckDeviceHackIcon extends inkLogicController
{
	protected editable var m_image : inkImageRef;

	public function Setup( data : CyberdeckDeviceQuickhackData )
	{
		inkImageRef.SetAtlasResource( m_image, data.UIIcon.AtlasResourcePath() );
		inkImageRef.SetTexturePart( m_image, data.UIIcon.AtlasPartName() );
	}

}

struct CyberdeckDeviceQuickhackData
{
	var UIIcon : weak< UIIcon_Record >;
	var ObjectActionRecord : weak< ObjectAction_Record >;
}

class CyberdeckStatController extends inkLogicController
{
	protected editable var m_label : inkTextRef;

	public function Setup( ability : InventoryItemAbility )
	{
		if( ability.Description != "" )
		{
			inkTextRef.SetText( m_label, ability.Description );
			if( ability.LocalizationDataPackage.GetParamsCount() > 0 )
			{
				inkTextRef.SetTextParameters( m_label, ability.LocalizationDataPackage.GetTextParams() );
			}
		}
		else
		{
			inkTextRef.SetText( m_label, GetLocalizedText( "UI-Labels-EmptySlot" ) );
		}
	}

}

