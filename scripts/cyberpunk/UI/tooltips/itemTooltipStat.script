class ItemTooltipStatController extends inkLogicController
{
	protected editable var m_statName : inkTextRef;
	protected editable var m_statValue : inkTextRef;
	protected editable var m_statComparedContainer : inkWidgetRef;
	protected editable var m_statComparedValue : inkTextRef;
	protected editable var m_arrow : inkImageRef;
	private var m_measurementUnit : EMeasurementUnit;

	public function SetData( data : InventoryTooltipData_StatData )
	{
		var decimalPart : Float;
		var statText, statFinalValue : String;
		var statsTweakID : TweakDBID;
		var isPercentage, roundValue, displayPlus, inMeters, inSeconds, inSpeed : Bool;
		var currentValue, damageMin, damageMax : Float;
		statsTweakID = TDBID.Create( "BaseStats." + EnumValueToString( "gamedataStatType", ( ( Int32 )( data.statType ) ) ) );
		isPercentage = TweakDBInterface.GetBool( statsTweakID + T".isPercentage", false );
		roundValue = TweakDBInterface.GetBool( statsTweakID + T".roundValue", false );
		displayPlus = TweakDBInterface.GetBool( statsTweakID + T".displayPlus", false );
		inMeters = TweakDBInterface.GetBool( statsTweakID + T".inMeters", false );
		inSeconds = TweakDBInterface.GetBool( statsTweakID + T".inSeconds", false );
		inSpeed = TweakDBInterface.GetBool( statsTweakID + T".inSpeed", false );
		currentValue = data.currentValueF;
		m_measurementUnit = UILocalizationHelper.GetSystemBaseUnit();
		if( RPGManager.IsPercentageStat( data.statType ) )
		{
			currentValue = currentValue * 100.0;
		}
		decimalPart = data.currentValueF - ( ( Float )( FloorF( currentValue ) ) );
		if( AbsF( currentValue ) > 0.01 )
		{
			if( ( AbsF( decimalPart ) > 0.01 ) && !( roundValue ) )
			{
				statText += FloatToStringPrec( currentValue, 2 );
			}
			else
			{
				statText += IntToString( RoundF( currentValue ) );
			}
		}
		if( RPGManager.IsDamageStat( data.statType ) )
		{
			damageMin = currentValue * 0.89999998;
			damageMax = currentValue * 1.10000002;
			statText = ( FloatToStringPrec( damageMin, 0 ) + "-" ) + FloatToStringPrec( damageMax, 0 );
		}
		inkTextRef.SetText( m_statName, data.statName );
		if( displayPlus )
		{
			statFinalValue += "+";
		}
		statFinalValue += statText;
		if( isPercentage )
		{
			statFinalValue += "%";
		}
		if( inMeters )
		{
			currentValue = MeasurementUtils.ValueUnitToUnit( currentValue, EMeasurementUnit.Meter, m_measurementUnit );
			statFinalValue += GetLocalizedText( NameToString( MeasurementUtils.GetUnitLocalizationKey( m_measurementUnit ) ) );
		}
		if( inSeconds )
		{
			statFinalValue += GetLocalizedText( "UI-Quickhacks-Seconds" );
		}
		if( inSpeed )
		{
			currentValue = MeasurementUtils.ValueUnitToUnit( currentValue, EMeasurementUnit.Meter, m_measurementUnit );
			statFinalValue += ( ( ( " " + GetLocalizedText( NameToString( MeasurementUtils.GetUnitLocalizationKey( m_measurementUnit ) ) ) ) + "/" ) + GetLocalizedText( "UI-Quickhacks-Seconds" ) );
		}
		if( data.statType == gamedataStatType.MaxDuration )
		{
			statFinalValue += ( " " + GetLocalizedText( "UI-Quickhacks-Seconds" ) );
		}
		inkTextRef.SetText( m_statValue, statFinalValue );
		UpdateComparedValue( data.diffValue, isPercentage, displayPlus, inMeters, inSeconds, inSpeed );
	}

	public function SetData( data : MinimalItemTooltipStatData )
	{
		var decimalPart : Float;
		var statText, statFinalValue : String;
		var currentValue, damageMin, damageMax : Float;
		currentValue = data.value;
		m_measurementUnit = UILocalizationHelper.GetSystemBaseUnit();
		if( RPGManager.IsPercentageStat( data.type ) )
		{
			currentValue = currentValue * 100.0;
		}
		decimalPart = data.value - ( ( Float )( FloorF( data.value ) ) );
		if( AbsF( currentValue ) >= 0.01 )
		{
			if( ( AbsF( decimalPart ) >= 0.01 ) && !( data.roundValue ) )
			{
				statText += FloatToStringPrec( currentValue, 2 );
			}
			else
			{
				statText += IntToString( RoundF( currentValue ) );
			}
		}
		if( RPGManager.IsDamageStat( data.type ) )
		{
			damageMin = currentValue * 0.89999998;
			damageMax = currentValue * 1.10000002;
			statText = ( FloatToStringPrec( damageMin, 0 ) + "-" ) + FloatToStringPrec( damageMax, 0 );
		}
		inkTextRef.SetText( m_statName, data.statName );
		if( data.displayPlus )
		{
			statFinalValue += "+";
		}
		statFinalValue += statText;
		if( data.isPercentage )
		{
			statFinalValue += "%";
		}
		if( data.inMeters )
		{
			currentValue = MeasurementUtils.ValueUnitToUnit( currentValue, EMeasurementUnit.Meter, m_measurementUnit );
			statFinalValue += GetLocalizedText( NameToString( MeasurementUtils.GetUnitLocalizationKey( m_measurementUnit ) ) );
		}
		if( data.inSeconds )
		{
			statFinalValue += GetLocalizedText( "UI-Quickhacks-Seconds" );
		}
		if( data.inSpeed )
		{
			currentValue = MeasurementUtils.ValueUnitToUnit( currentValue, EMeasurementUnit.Meter, m_measurementUnit );
			statFinalValue += ( ( ( " " + GetLocalizedText( NameToString( MeasurementUtils.GetUnitLocalizationKey( m_measurementUnit ) ) ) ) + "/" ) + GetLocalizedText( "UI-Quickhacks-Seconds" ) );
		}
		if( data.type == gamedataStatType.MaxDuration )
		{
			statFinalValue += GetLocalizedText( "UI-Quickhacks-Seconds" );
		}
		inkTextRef.SetText( m_statValue, statFinalValue );
		UpdateComparedValue( ( ( Int32 )( data.diff ) ), data.isPercentage, data.displayPlus, data.inMeters, data.inSeconds, data.inSpeed );
	}

	public function SetData( data : weak< UIInventoryItemStat >, comparisonData : weak< UIInventoryItemStatComparison > )
	{
		var decimalPart : Float;
		var statText, statFinalValue : String;
		var currentValue, damageMin, damageMax : Float;
		currentValue = data.Value;
		m_measurementUnit = UILocalizationHelper.GetSystemBaseUnit();
		if( RPGManager.IsPercentageStat( data.Type ) )
		{
			currentValue = currentValue * 100.0;
		}
		decimalPart = data.Value - ( ( Float )( FloorF( data.Value ) ) );
		if( AbsF( currentValue ) >= 0.01 )
		{
			if( ( AbsF( decimalPart ) >= 0.01 ) && !( data.Properties.RoundValue() ) )
			{
				statText += FloatToStringPrec( currentValue, 2 );
			}
			else
			{
				statText += IntToString( RoundF( currentValue ) );
			}
		}
		if( RPGManager.IsDamageStat( data.Type ) )
		{
			damageMin = currentValue * 0.89999998;
			damageMax = currentValue * 1.10000002;
			statText = ( FloatToStringPrec( damageMin, 0 ) + "-" ) + FloatToStringPrec( damageMax, 0 );
		}
		inkTextRef.SetText( m_statName, data.Properties.GetName() );
		if( data.Properties.DisplayPlus() )
		{
			statFinalValue += "+";
		}
		statFinalValue += statText;
		if( data.Properties.IsPercentage() )
		{
			statFinalValue += "%";
		}
		if( data.Properties.InMeters() )
		{
			currentValue = MeasurementUtils.ValueUnitToUnit( currentValue, EMeasurementUnit.Meter, m_measurementUnit );
			statFinalValue += GetLocalizedText( NameToString( MeasurementUtils.GetUnitLocalizationKey( m_measurementUnit ) ) );
		}
		if( data.Properties.InSeconds() )
		{
			statFinalValue += GetLocalizedText( "UI-Quickhacks-Seconds" );
		}
		if( data.Type == gamedataStatType.MaxDuration )
		{
			statFinalValue += GetLocalizedText( "UI-Quickhacks-Seconds" );
		}
		inkTextRef.SetText( m_statValue, statFinalValue );
		UpdateComparedValue( RoundF( comparisonData.Value ), data.Properties.IsPercentage(), data.Properties.DisplayPlus(), data.Properties.InMeters(), data.Properties.InSeconds(), data.Properties.InSpeed() );
	}

	private function UpdateComparedValue( diff : Int32, isPercentage : Bool, displayPlus : Bool, inMeters : Bool, inSeconds : Bool, inSpeed : Bool )
	{
		var isVisible : Bool;
		var comaredStatText : String;
		var statToSet : CName;
		m_measurementUnit = UILocalizationHelper.GetSystemBaseUnit();
		isVisible = diff != 0;
		statToSet = ( ( diff > 0 ) ? ( 'Better' ) : ( 'Worse' ) );
		if( displayPlus )
		{
			comaredStatText += ( ( ( diff > 0 ) ) ? ( "+" ) : ( "-" ) );
		}
		comaredStatText += IntToString( Abs( diff ) );
		if( isPercentage )
		{
			comaredStatText += "%";
		}
		if( inMeters )
		{
			diff = FloorF( MeasurementUtils.ValueUnitToUnit( ( ( Float )( diff ) ), EMeasurementUnit.Meter, m_measurementUnit ) );
			comaredStatText += GetLocalizedText( NameToString( MeasurementUtils.GetUnitLocalizationKey( m_measurementUnit ) ) );
		}
		if( inSeconds )
		{
			comaredStatText += GetLocalizedText( "UI-Quickhacks-Seconds" );
		}
		if( inSpeed )
		{
			diff = FloorF( MeasurementUtils.ValueUnitToUnit( ( ( Float )( diff ) ), EMeasurementUnit.Meter, m_measurementUnit ) );
			comaredStatText += ( ( ( " " + GetLocalizedText( NameToString( MeasurementUtils.GetUnitLocalizationKey( m_measurementUnit ) ) ) ) + "/" ) + GetLocalizedText( "UI-Quickhacks-Seconds" ) );
		}
		inkTextRef.SetText( m_statComparedValue, comaredStatText );
		inkImageRef.SetVisible( m_arrow, isVisible );
		inkTextRef.SetVisible( m_statComparedValue, isVisible );
		inkImageRef.SetState( m_arrow, statToSet );
		inkTextRef.SetState( m_statComparedValue, statToSet );
		inkImageRef.SetBrushMirrorType( m_arrow, ( ( diff > 0 ) ? ( inkBrushMirrorType.NoMirror ) : ( inkBrushMirrorType.Vertical ) ) );
	}

}

