class ItemTooltipModController extends inkLogicController
{
	protected editable var m_dotIndicator : inkWidgetRef;
	protected editable var m_rarityContainer : inkWidgetRef;
	protected editable var m_rarityWidget : inkImageRef;
	protected editable var m_modAbilitiesContainer : inkCompoundRef;
	protected var m_partIndicatorController : weak< InventoryItemPartDisplay >;

	public constexpr static function StaticDefaultColorState() : CName
	{
		return 'Default';
	}

	public constexpr function DefaultColorState() : CName
	{
		return ItemTooltipModController.StaticDefaultColorState();
	}

	protected virtual function EntryWidgetToSpawn() : CName
	{
		return 'itemTooltipModEntry';
	}

	public function SetData( record : weak< GameplayLogicPackageUIData_Record > )
	{
		inkCompoundRef.RemoveAllChildren( m_modAbilitiesContainer );
		SpawnController().Setup( record );
	}

	public function SetData( record : weak< GameplayLogicPackageUIData_Record >, itemData : weak< gameItemData > )
	{
		inkCompoundRef.RemoveAllChildren( m_modAbilitiesContainer );
		SpawnController().Setup( record, itemData );
	}

	public function SetData( record : weak< GameplayLogicPackageUIData_Record >, innerItemData : InnerItemData )
	{
		inkCompoundRef.RemoveAllChildren( m_modAbilitiesContainer );
		SpawnController().Setup( record, innerItemData );
	}

	public function SetData( const ability : ref< InventoryItemAbility > )
	{
		inkCompoundRef.RemoveAllChildren( m_modAbilitiesContainer );
		SpawnController().Setup( ability );
	}

	public function SetData( attachment : InventoryItemAttachments )
	{
		var i : Int32;
		var abilitiesSize : Int32;
		var slotName : String;
		var quality : CName;
		inkCompoundRef.RemoveAllChildren( m_modAbilitiesContainer );
		quality = InventoryItemData.GetQuality( attachment.ItemData );
		inkWidgetRef.SetVisible( m_dotIndicator, true );
		inkWidgetRef.SetState( m_dotIndicator, ( ( IsNameValid( quality ) ) ? ( quality ) : ( 'Empty' ) ) );
		if( InventoryItemData.IsEmpty( attachment.ItemData ) )
		{
			slotName = GetLocalizedText( UIItemsHelper.GetEmptySlotName( attachment.SlotID ) );
			if( !( IsStringValid( slotName ) ) )
			{
				slotName = UIItemsHelper.GetEmptySlotName( attachment.SlotID );
			}
			SpawnController().Setup( slotName );
			return;
		}
		abilitiesSize = InventoryItemData.GetAbilitiesSize( attachment.ItemData );
		if( abilitiesSize == 0 )
		{
			SpawnController().Setup( InventoryItemData.GetName( attachment.ItemData ) );
			return;
		}
		for( i = 0; i < abilitiesSize; i += 1 )
		{
			SpawnController().Setup( InventoryItemData.GetAbility( attachment.ItemData, i ) );
		}
	}

	public function SetData( data : MinimalItemTooltipModData )
	{
		if( ( ( MinimalItemTooltipModRecordData )( data ) ) )
		{
			SetData( ( ( MinimalItemTooltipModRecordData )( data ) ) );
		}
		else
		{
			SetData( ( ( MinimalItemTooltipModAttachmentData )( data ) ) );
		}
	}

	public function SetData( data : MinimalItemTooltipModRecordData )
	{
		inkCompoundRef.RemoveAllChildren( m_modAbilitiesContainer );
		SpawnController().Setup( data );
		HideDotIndicator();
	}

	public function SetData( data : MinimalItemTooltipModAttachmentData )
	{
		var i : Int32;
		inkCompoundRef.RemoveAllChildren( m_modAbilitiesContainer );
		inkWidgetRef.SetVisible( m_dotIndicator, true );
		inkImageRef.SetState( m_rarityWidget, data.qualityName );
		if( data.isEmpty || ( data.abilitiesSize == 0 ) )
		{
			inkWidgetRef.SetState( m_rarityContainer, 'Common' );
			SpawnController().Setup( data.slotName );
		}
		else
		{
			for( i = 0; i < data.abilitiesSize; i += 1 )
			{
				inkWidgetRef.SetState( m_rarityContainer, data.qualityName );
				SpawnController().Setup( data.abilities[ i ] );
			}
		}
	}

	public function SetData( data : UIInventoryItemMod )
	{
		if( ( ( UIInventoryItemModDataPackage )( data ) ) )
		{
			SetData( ( ( UIInventoryItemModDataPackage )( data ) ) );
		}
		else
		{
			SetData( ( ( UIInventoryItemModAttachment )( data ) ) );
		}
	}

	public function SetData( data : UIInventoryItemModDataPackage )
	{
		inkCompoundRef.RemoveAllChildren( m_modAbilitiesContainer );
		SpawnController().Setup( data );
		HideDotIndicator();
	}

	public function SetData( data : UIInventoryItemModAttachment )
	{
		var i : Int32;
		inkCompoundRef.RemoveAllChildren( m_modAbilitiesContainer );
		inkWidgetRef.SetVisible( m_dotIndicator, true );
		inkImageRef.SetState( m_rarityWidget, UIItemsHelper.QualityEnumToName( data.Quality ) );
		inkWidgetRef.SetState( m_rarityContainer, UIItemsHelper.QualityEnumToName( data.Quality ) );
		if( data.IsEmpty || ( data.AbilitiesSize == 0 ) )
		{
			SpawnController().Setup( data.SlotName );
		}
		else
		{
			for( i = 0; i < data.AbilitiesSize; i += 1 )
			{
				SpawnController().Setup( data.Abilities[ i ] );
			}
		}
	}

	private function SpawnController() : weak< ItemTooltipModEntryController >
	{
		var widget : weak< inkWidget >;
		widget = SpawnFromLocal( inkCompoundRef.Get( m_modAbilitiesContainer ), EntryWidgetToSpawn() );
		widget.SetVAlign( inkEVerticalAlign.Top );
		widget.SetHAlign( inkEHorizontalAlign.Left );
		return ( ( ItemTooltipModEntryController )( widget.GetController() ) );
	}

	public function HideDotIndicator()
	{
		inkWidgetRef.SetVisible( m_dotIndicator, false );
	}

}

class ItemTooltipModEntryController extends inkLogicController
{
	protected editable var m_modName : inkTextRef;
	protected editable var m_attunementContainer : inkWidgetRef;
	protected editable var m_attunementText : inkTextRef;
	protected editable var m_attunementIcon : inkImageRef;

	protected event OnInitialize()
	{
		inkWidgetRef.SetVisible( m_attunementContainer, false );
	}

	public function Setup( const text : ref< String > )
	{
		inkTextRef.SetText( m_modName, text );
	}

	public function Setup( data : MinimalItemTooltipModRecordData )
	{
		inkTextRef.SetText( m_modName, data.description );
		if( data.dataPackage.GetParamsCount() )
		{
			inkTextRef.SetTextParameters( m_modName, data.dataPackage.GetTextParams() );
		}
		if( data.attunementData != NULL )
		{
			inkTextRef.SetText( m_attunementText, data.attunementData.name );
			InkImageUtils.RequestSetImage( this, m_attunementIcon, data.attunementData.icon );
			inkWidgetRef.SetVisible( m_attunementContainer, true );
		}
		else
		{
			inkWidgetRef.SetVisible( m_attunementContainer, false );
		}
	}

	public function Setup( data : UIInventoryItemModDataPackage )
	{
		inkTextRef.SetText( m_modName, data.Description );
		if( data.DataPackage.GetParamsCount() )
		{
			inkTextRef.SetTextParameters( m_modName, data.DataPackage.GetTextParams() );
		}
		if( data.AttunementData != NULL )
		{
			inkTextRef.SetText( m_attunementText, data.AttunementData.Name );
			InkImageUtils.RequestSetImage( this, m_attunementIcon, data.AttunementData.Icon );
			inkWidgetRef.SetVisible( m_attunementContainer, true );
		}
		else
		{
			inkWidgetRef.SetVisible( m_attunementContainer, false );
		}
	}

	public function Setup( record : weak< GameplayLogicPackageUIData_Record > )
	{
		var dataPackage : UILocalizationDataPackage;
		inkTextRef.SetText( m_modName, record.LocalizedDescription() );
		dataPackage = UILocalizationDataPackage.FromLogicUIDataPackage( record );
		if( dataPackage.GetParamsCount() )
		{
			inkTextRef.SetTextParameters( m_modName, dataPackage.GetTextParams() );
		}
	}

	public function Setup( record : weak< GameplayLogicPackageUIData_Record >, itemData : weak< gameItemData > )
	{
		var dataPackage : UILocalizationDataPackage;
		inkTextRef.SetText( m_modName, record.LocalizedDescription() );
		dataPackage = UILocalizationDataPackage.FromLogicUIDataPackage( record, itemData );
		if( dataPackage.GetParamsCount() )
		{
			inkTextRef.SetTextParameters( m_modName, dataPackage.GetTextParams() );
		}
	}

	public function Setup( record : weak< GameplayLogicPackageUIData_Record >, partItemData : InnerItemData )
	{
		var dataPackage : UILocalizationDataPackage;
		inkTextRef.SetText( m_modName, record.LocalizedDescription() );
		dataPackage = UILocalizationDataPackage.FromLogicUIDataPackage( record, , partItemData );
		if( dataPackage.GetParamsCount() )
		{
			inkTextRef.SetTextParameters( m_modName, dataPackage.GetTextParams() );
		}
	}

	public function Setup( const ability : ref< InventoryItemAbility > )
	{
		if( ability.Description != "" )
		{
			inkTextRef.SetText( m_modName, ability.Description );
			if( ability.LocalizationDataPackage.GetParamsCount() > 0 )
			{
				inkTextRef.SetTextParameters( m_modName, ability.LocalizationDataPackage.GetTextParams() );
			}
		}
		else
		{
			inkTextRef.SetText( m_modName, GetLocalizedText( "UI-Labels-EmptySlot" ) );
		}
	}

}

