class QuadRacerGameController extends MinigameController
{
	private editable var m_gameMenu : inkWidgetRef;
	private editable var m_scoreboardMenu : inkWidgetRef;

	protected event OnInitialize()
	{
		OpenMenu();
	}

	private function OpenScoreboard( playerScore : Int32 )
	{
		var scoreboardLogic : ScoreboardLogicController;
		scoreboardLogic = ( ( ScoreboardLogicController )( inkWidgetRef.GetController( m_scoreboardMenu ) ) );
		scoreboardLogic.CleanGrid();
		SetEnableComponent( m_scoreboardMenu, true );
		SetEnableComponent( m_gameMenu, false );
		SetEnableComponent( gameplayCanvas, false );
		RegisterToCallback( 'OnRelease', this, 'OnOpenMenuClick' );
		scoreboardLogic.FillGrid( playerScore );
	}

	private function OpenMenu()
	{
		SetEnableComponent( m_gameMenu, true );
		SetEnableComponent( m_scoreboardMenu, false );
		SetEnableComponent( gameplayCanvas, false );
		UnregisterFromCallback( 'OnRelease', this, 'OnOpenMenuClick' );
		RegisterToCallback( 'OnRelease', this, 'OnStartGameClick' );
	}

	public function OnStartGameClick( e : inkPointerEvent )
	{
		if( e.IsAction( 'click' ) )
		{
			GameStart();
		}
	}

	protected override function OnGameFinishLogic( gameFinishEvent : GameFinishEvent )
	{
		var gameState : MinigameState;
		var scoreSystem : SideScrollerMiniGameScoreSystem;
		var scoreRequest : SendScoreRequest;
		var lastMaxRecord : Int32;
		gameState = gameFinishEvent.gameState;
		scoreSystem = ( ( SideScrollerMiniGameScoreSystem )( GameInstance.GetScriptableSystemsContainer( GetPlayerControlledObject().GetGame() ).Get( 'SideScrollerMiniGameScoreSystem' ) ) );
		scoreRequest = new SendScoreRequest;
		scoreRequest.m_score = gameState.currentScore;
		scoreRequest.m_gameName = "QuadRacer";
		scoreSystem.QueueRequest( scoreRequest );
		lastMaxRecord = scoreSystem.GetMaxScore( "QuadRacer" );
		OpenScoreboard( ( ( lastMaxRecord > gameState.currentScore ) ? ( lastMaxRecord ) : ( gameState.currentScore ) ) );
	}

	private function SetEnableComponent( component : inkWidgetRef, isEnabled : Bool )
	{
		inkWidgetRef.SetVisible( component, isEnabled );
		inkWidgetRef.SetInteractive( component, isEnabled );
	}

	private function OpenGameplay()
	{
		SetEnableComponent( gameplayCanvas, true );
		SetEnableComponent( m_gameMenu, false );
		SetEnableComponent( m_scoreboardMenu, false );
		UnregisterFromCallback( 'OnRelease', this, 'OnStartGameClick' );
	}

	public function OnOpenMenuClick( e : inkPointerEvent )
	{
		if( e.IsAction( 'click' ) )
		{
			OpenMenu();
		}
	}

	public function GameStart()
	{
		OpenGameplay();
		StartGame();
	}

}

