import struct InputHintGroupData
{
	import editable var iconReference : TweakDBID;
	import editable var localizedTitle : String;
	import editable var localizedDescription : String;
	import editable var sortingPriority : Int32;
}

import struct InputHintData
{
	import editable var action : CName;
	import editable var source : CName;
	import editable var groupId : CName;
	import editable var localizedLabel : String;
	import editable var queuePriority : Int32;
	import editable var sortingPriority : Int32;
	import editable var tutorialAction : CName;
	import editable var tutorialActionCount : Int32;
	import editable var holdIndicationType : inkInputHintHoldIndicationType;
	import editable var enableHoldAnimation : Bool;
}

import class InputHintInitializedEvent extends Event
{
	import editable var targetHintContainer : CName;
}

import class UpdateInputHintEvent extends Event
{
	import editable var data : InputHintData;
	import editable var show : Bool;
	import editable var targetHintContainer : CName;
}

import class UpdateInputHintMultipleEvent extends Event
{
	import editable var targetHintContainer : CName;

	public import function AddInputHint( data : InputHintData, show : Bool );
}

import class LogTutorialHintActionEvent extends Event
{
	import editable var actionName : CName;
}

import class AddInputGroupEvent extends Event
{
	import editable var data : InputHintGroupData;
	import editable var groupId : CName;
	import editable var targetHintContainer : CName;
}

import class DeleteInputGroupEvent extends Event
{
	import editable var groupId : CName;
	import editable var targetHintContainer : CName;
}

import class DeleteInputHintBySourceEvent extends Event
{
	import editable var source : CName;
	import editable var targetHintContainer : CName;
}

import class InputHintManagerGameController extends inkGameController
{
	import editable var hintContainerId : CName;
}

function SendInputHintData( context : GameInstance, show : Bool, data : InputHintData, optional targetHintContainer : CName )
{
	var evt : UpdateInputHintEvent;
	evt = new UpdateInputHintEvent;
	evt.data = data;
	evt.show = show;
	if( IsNameValid( targetHintContainer ) )
	{
		evt.targetHintContainer = targetHintContainer;
	}
	evt.targetHintContainer = 'GameplayInputHelper';
	GameInstance.GetUISystem( context ).QueueEvent( evt );
}

exec function test_inputhint( gameInstance : GameInstance )
{
	var evt : UpdateInputHintEvent;
	var data : InputHintData;
	data.action = 'UI_Apply';
	data.source = 'DebugDefault';
	data.localizedLabel = "Debug 1";
	data.queuePriority = 0;
	data.sortingPriority = 0;
	evt = new UpdateInputHintEvent;
	evt.data = data;
	evt.show = true;
	evt.targetHintContainer = 'GameplayInputHelper';
	GameInstance.GetUISystem( gameInstance ).QueueEvent( evt );
}

exec function test_inputhint1( gameInstance : GameInstance )
{
	var evt : UpdateInputHintEvent;
	var data : InputHintData;
	data.action = 'UI_Cancel';
	data.source = 'Debug';
	data.localizedLabel = "Debug 2";
	data.queuePriority = 0;
	data.sortingPriority = 0;
	evt = new UpdateInputHintEvent;
	evt.data = data;
	evt.show = true;
	evt.targetHintContainer = 'GameplayInputHelper';
	GameInstance.GetUISystem( gameInstance ).QueueEvent( evt );
}

exec function test_group( gameInstance : GameInstance )
{
	var evt : AddInputGroupEvent;
	var data : InputHintGroupData;
	data.localizedTitle = "Test title";
	data.localizedDescription = "Test description";
	data.sortingPriority = 0;
	evt = new AddInputGroupEvent;
	evt.data = data;
	evt.groupId = 'test1';
	evt.targetHintContainer = 'GameplayInputHelper';
	GameInstance.GetUISystem( gameInstance ).QueueEvent( evt );
}

exec function test_inputhint_clear( gameInstance : GameInstance )
{
	var evt : DeleteInputHintBySourceEvent;
	evt = new DeleteInputHintBySourceEvent;
	evt.source = 'Debug';
	evt.targetHintContainer = 'GameplayInputHelper';
	GameInstance.GetUISystem( gameInstance ).QueueEvent( evt );
}

