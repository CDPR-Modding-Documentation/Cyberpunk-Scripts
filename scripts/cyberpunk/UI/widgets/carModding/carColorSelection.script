class VehicleColorSelectionInitFinishedEvent extends Event
{
}

class VehicleColorSelectionSliderHoldEvent extends Event
{
	var direction : Int32;
}

class VehicleColorSelectionUpdateEvent extends Event
{
}

struct vehicleColorSelectorPointerDef
{
	editable var m_pointerRoot : inkWidgetRef;
	editable var m_pointerCircleRadius : Float;
	editable var m_selectionMargin : Float;
	editable var m_paintOnSelection : Bool;
	editable var m_partToPaint : inkWidgetRef;
}

enum vehicleColorSelectorActiveMode
{
	None = 0,
	Primary = 1,
	Secondary = 2,
	Lights = 3,
}

enum vehicleColorSelectorMenuCloseReason
{
	Apply = 0,
	Reset = 1,
	Cancel = 2,
}

enum vehicleColorSelectorActiveTab
{
	None = 0,
	Both = 1,
	Main = 2,
	Twintone = 3,
}

enum vehicleColorSelectorActiveInputMode
{
	None = 0,
	Gamepad = 1,
	KBM = 2,
}

enum vehicleColorSelectorSBBar
{
	None = 0,
	Saturation = 1,
	Brightness = 2,
}

class vehicleColorSelectorGameController extends inkGameController
{
	private editable var m_CursorRootContainerRef : inkWidgetRef;
	private editable var m_CursorRootOffsetPoint : inkWidgetRef;
	private editable var m_colorPaletteRef : inkWidgetRef;
	private editable var m_stickerPaletteRef : inkWidgetRef;
	private editable var m_currentTemplateParentRef : inkWidgetRef;
	private editable var m_windowTitle : inkTextRef;
	editable var m_colorWheelColorA : inkWidgetRef;
	editable var m_colorWheelColorB : inkWidgetRef;
	editable var m_colorWheelColorLights : inkWidgetRef;
	private editable var m_colorPickerA : vehicleColorSelectorPointerDef;
	private editable var m_selectedColorPointerA : vehicleColorSelectorPointerDef;
	private editable var m_colorPickerB : vehicleColorSelectorPointerDef;
	private editable var m_selectedColorPointerB : vehicleColorSelectorPointerDef;
	private editable var m_colorPickerLights : vehicleColorSelectorPointerDef;
	private editable var m_selectedColorPointerLights : vehicleColorSelectorPointerDef;
	private editable var m_swapColorHint : inkWidgetRef;
	private editable var m_changeSliderHint : inkWidgetRef;
	private editable var m_twintoneApplyHintText : inkTextRef;
	private editable var m_changeTabRightHint : inkWidgetRef;
	private editable var m_changeTabLeftHint : inkWidgetRef;
	private editable var m_mouseHitColor1Ref : inkWidgetRef;
	private editable var m_mouseHitColor2Ref : inkWidgetRef;
	private editable var m_mouseHitLightsRef : inkWidgetRef;
	private editable var m_vehiclePreviewColorA : inkImageRef;
	private editable var m_vehiclePreviewColorB : inkImageRef;
	private editable var m_vehiclePreviewLightsCar : inkImageRef;
	private editable var m_vehiclePreviewLightsBike : inkImageRef;
	private editable var m_vehiclePreviewBackground : inkImageRef;
	private editable var m_vehiclePreviewForeground : inkImageRef;
	private editable var m_vehiclePreviewScalingCanvas : inkWidgetRef;
	private editable var m_lightsPreviewBeamA : inkImageRef;
	private editable var m_lightsPreviewBeamB : inkImageRef;
	protected var m_timeDilationProfile : String;
	default m_timeDilationProfile = "radialMenu";
	private var m_introAnimation : CName;
	default m_introAnimation = 'Intro';
	private var m_cancelAnimation : CName;
	default m_cancelAnimation = 'Cancel';
	private var m_applyAnimation : CName;
	default m_applyAnimation = 'Apply';
	private editable var m_titleTextMain : inkTextRef;
	private editable var m_titleTextNumber : inkTextRef;
	private editable var m_mouseHitSaturationBar : inkWidgetRef;
	private editable var m_saturationBarFill : inkWidgetRef;
	private editable var m_saturationPointer : inkWidgetRef;
	private editable var m_saturationBarHighlight : inkImageRef;
	private editable var m_saturationBarHint : inkWidgetRef;
	private editable var m_brightnessBarHighlight : inkImageRef;
	private editable var m_brightnessBarHint : inkWidgetRef;
	private editable var m_mouseHitBrightnessBar : inkWidgetRef;
	private editable var m_brightnessPointer : inkWidgetRef;
	private editable var m_modeChangeBack : inkWidgetRef;
	private editable var m_modeChangeNext : inkWidgetRef;
	private editable var m_applyContainerWidget : inkWidgetRef;
	private editable var m_resetContainerWidget : inkWidgetRef;
	private editable var m_vehicleUnknownPane : inkWidgetRef;
	private editable var m_vehicleBrandIcon : inkImageRef;
	private editable var m_crackedCarGlitchMinimumInterval : Float;
	private editable var m_crackedCarGlitchMaximumInterval : Float;
	private editable var m_vehicleNameText : inkTextRef;
	private editable var m_templatePreviewLibraryRef : inkWidgetLibraryReference;
	private editable var m_genericPatternsGrid : inkVirtualCompoundRef;
	private editable var m_uniquePatternsGrid : inkVirtualCompoundRef;
	private editable var m_saveProfileHint : inkWidgetRef;
	private editable var m_deleteProfileHint : inkWidgetRef;
	protected var m_popupData : inkGameNotificationData;
	private var m_systemRequestsHandler : weak< inkISystemRequestsHandler >;
	private var m_player : weak< PlayerPuppet >;
	private var m_gameInstance : GameInstance;
	private var m_timeSystem : TimeSystem;
	private var m_vehicle : weak< VehicleObject >;
	private var m_animProxy : inkAnimProxy;
	private var m_fakeUpdateProxy : inkAnimProxy;
	private var m_sbBarsProxy : inkAnimProxy;
	private var m_LightsFocusProxy : inkAnimProxy;
	private var m_stickersPage : weak< inkWidget >;
	private var m_isInMenuCallbackID : CallbackHandle;
	private var m_activeMode : vehicleColorSelectorActiveMode;
	default m_activeMode = vehicleColorSelectorActiveMode.None;
	private var m_previousMode : vehicleColorSelectorActiveMode;
	default m_previousMode = vehicleColorSelectorActiveMode.None;
	private var m_activeInputMode : vehicleColorSelectorActiveInputMode;
	default m_activeInputMode = vehicleColorSelectorActiveInputMode.None;
	private var m_currentAngle : Float;
	private var m_colorADefined : Bool;
	private var m_colorBDefined : Bool;
	private var m_lightsDefined : Bool;
	private var m_targetColorAngleA : Float;
	private var m_targetColorAngleB : Float;
	private var m_targetColorAngleLights : Float;
	private var m_targetColorASaturation : Float;
	private var m_targetColorBSaturation : Float;
	private var m_targetColorABrightness : Float;
	private var m_targetColorBBrightness : Float;
	private var m_axisInputCache : Vector2;
	private var m_inputEnabled : Bool;
	default m_inputEnabled = false;
	private var m_sbBarsShown : Bool;
	private var m_sbBarsLength : Float;
	default m_sbBarsLength = 756.0f;
	private var m_axisInputThreshold : Float;
	default m_axisInputThreshold = 0.1;
	private var m_saturationPointerPosition : Float;
	private var m_brightnessPointerPosition : Float;
	private var m_mouseInputEnabled : Bool;
	private var m_saturationSliderHolded : Bool;
	private var m_brightnessSliderHolded : Bool;
	private var m_ChromaSliderStepPad : Float;
	default m_ChromaSliderStepPad = 4.5f;
	private var m_ChromaSliderStepMouse : Float;
	default m_ChromaSliderStepMouse = 18.0f;
	private var m_sliderHoldGamepad : Bool;
	private var m_sliderHoldGamepadDamp : Int32;
	private var m_sliderPadHoldAccelerationTreshhold : Int32;
	default m_sliderPadHoldAccelerationTreshhold = 50;
	private var m_storedSelectedColorID : Int32;
	private var m_cachedNewColorA : Color;
	private var m_cachedNewColorB : Color;
	private var m_cachedNewColorLights : Color;
	private var m_CloseReason : vehicleColorSelectorMenuCloseReason;
	private var m_unsupportedVehicle : Bool;
	private var m_previewDataMissing : Bool;
	private var m_virtualGenericTemplateGridController : weak< TwintoneTemplateGridController >;
	private var m_virtualUniqueTemplateGridController : weak< TwintoneTemplateGridController >;
	private var m_genericGridInitialized : Bool;
	private var m_uniqueGridInitialized : Bool;
	private var m_currentTemplate : VehicleVisualCustomizationTemplate;
	private var m_toggledTemplate : VehicleVisualCustomizationTemplate;
	private var m_currentTemplatePreview : weak< ColorTemplatePreviewDisplayController >;
	private var m_activePanel : vehicleColorSelectorActiveTab;
	default m_activePanel = vehicleColorSelectorActiveTab.None;
	private var m_activeSBBar : vehicleColorSelectorSBBar;
	default m_activeSBBar = vehicleColorSelectorSBBar.None;
	private var m_mainPanelAnimProxy : inkAnimProxy;
	private var m_twintonePanelAnimProxy : inkAnimProxy;
	private var m_carGlitchProxy : inkAnimProxy;

	protected event OnInitialize()
	{
		var initEvent : VehicleColorSelectionInitFinishedEvent;
		var lightsEvent : VehicleLightQuestToggleEvent;
		var deadzoneConfig : ConfigVarFloat;
		var uiSystemBB : IBlackboard;
		m_popupData = ( ( inkGameNotificationData )( GetRootWidget().GetUserData( 'inkGameNotificationData' ) ) );
		m_player = ( ( PlayerPuppet )( GetPlayerControlledObject() ) );
		m_player.RegisterInputListener( this, '__DEVICE_CHANGED__' );
		m_gameInstance = m_player.GetGame();
		m_vehicle = m_player.GetMountedVehicle();
		uiSystemBB = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_System );
		m_isInMenuCallbackID = uiSystemBB.RegisterDelayedListenerBool( GetAllBlackboardDefs().UI_System.IsInMenu, this, 'OnIsInMenuChanged' );
		deadzoneConfig = ( ( ConfigVarFloat )( GameInstance.GetSettingsSystem( m_player.GetGame() ).GetVar( '/controls', 'Axis_DeadzoneInner' ) ) );
		m_axisInputThreshold = deadzoneConfig.GetValue();
		RegisterToGlobalInputCallback( 'OnPostOnRelease', this, 'OnGlobalInputReleased' );
		RegisterToGlobalInputCallback( 'OnPostOnHold', this, 'OnGlobalInputHold' );
		RegisterToGlobalInputCallback( 'OnPostOnPress', this, 'OnGlobalPressInput' );
		RegisterToGlobalInputCallback( 'OnPostOnRelative', this, 'OnMouseInput' );
		RegisterToGlobalInputCallback( 'OnPostOnAxis', this, 'OnGlobalAxisInput' );
		inkWidgetRef.RegisterToCallback( m_mouseHitColor1Ref, 'OnHoverOver', this, 'OnHoverOverColorWheel1' );
		inkWidgetRef.RegisterToCallback( m_mouseHitColor2Ref, 'OnHoverOver', this, 'OnHoverOverColorWheel2' );
		inkWidgetRef.RegisterToCallback( m_mouseHitLightsRef, 'OnHoverOver', this, 'OnHoverOverColorWheelLights' );
		inkWidgetRef.RegisterToCallback( m_mouseHitColor1Ref, 'OnHoverOut', this, 'OnHoverOutColorWheel1' );
		inkWidgetRef.RegisterToCallback( m_mouseHitColor2Ref, 'OnHoverOut', this, 'OnHoverOutColorWheel2' );
		inkWidgetRef.RegisterToCallback( m_mouseHitLightsRef, 'OnHoverOut', this, 'OnHoverOutColorWheelLights' );
		inkWidgetRef.RegisterToCallback( m_mouseHitSaturationBar, 'OnHoverOver', this, 'OnHoverOverSaturationBar' );
		inkWidgetRef.RegisterToCallback( m_mouseHitBrightnessBar, 'OnHoverOver', this, 'OnHoverOverBrightnessBar' );
		inkWidgetRef.RegisterToCallback( m_mouseHitSaturationBar, 'OnPress', this, 'OnSaturationBarPressed' );
		inkWidgetRef.RegisterToCallback( m_mouseHitBrightnessBar, 'OnPress', this, 'OnBrightnessBarPressed' );
		m_currentTemplatePreview = ( ( ColorTemplatePreviewDisplayController )( SpawnFromExternal( inkWidgetRef.Get( m_currentTemplateParentRef ), inkWidgetLibraryResource.GetPath( m_templatePreviewLibraryRef.widgetLibrary ), m_templatePreviewLibraryRef.widgetItem ).GetController() ) );
		m_currentTemplatePreview.SetSelected( false );
		m_currentTemplatePreview.SetCanAdd( false );
		m_currentTemplatePreview.SetToggleable( false );
		if( m_player.PlayerLastUsedKBM() )
		{
			inkWidgetRef.SetVisible( m_changeTabRightHint, false );
			inkWidgetRef.SetVisible( m_changeTabLeftHint, false );
		}
		else
		{
			inkWidgetRef.SetVisible( m_changeTabRightHint, true );
			inkWidgetRef.SetVisible( m_changeTabLeftHint, true );
		}
		inkWidgetRef.SetVisible( m_saturationBarHint, false );
		inkWidgetRef.SetVisible( m_brightnessBarHint, false );
		SetTimeDilatation( true );
		UpdateVehiclePreview();
		UpdateVehicleManufacturer();
		UpdateTwintonePanel();
		ProcessPreviousCustomizationState();
		ProccessSwapColorHintVisibility();
		PlayAnimation( m_introAnimation );
		m_animProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnIntroFinished' );
		GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_open' );
		initEvent = new VehicleColorSelectionInitFinishedEvent;
		lightsEvent = new VehicleLightQuestToggleEvent;
		lightsEvent.toggle = true;
		m_vehicle.QueueEvent( lightsEvent );
		ProcessFakeUpdate( true );
		QueueEvent( initEvent );
	}

	protected event OnVehicleColorSelectionInitFinishedEvent( e : VehicleColorSelectionInitFinishedEvent )
	{
		UpdateNavigationState();
	}

	protected event OnIntroFinished( proxy : inkAnimProxy )
	{
		m_inputEnabled = true;
		UpdateControlsState();
		SetNavigationEnabledInGrids( m_player.PlayerLastUsedKBM() );
		if( VerifyVehicleValidity() )
		{
			SwitchActiveMode( 0, vehicleColorSelectorActiveMode.Primary );
		}
	}

	protected event OnUninitialize()
	{
		UnregisterFromGlobalInputCallback( 'OnPostOnRelease', this, 'OnGlobalInputReleased' );
		UnregisterFromGlobalInputCallback( 'OnPostOnHold', this, 'OnGlobalInputHold' );
		UnregisterFromGlobalInputCallback( 'OnPostOnPress', this, 'OnGlobalPress' );
		UnregisterFromGlobalInputCallback( 'OnPostOnRelative', this, 'OnMouseInput' );
		UnregisterFromGlobalInputCallback( 'OnPostOnAxis', this, 'OnGlobalAxisInput' );
		ProcessFakeUpdate( false );
		SetTimeDilatation( false );
	}

	protected event OnHoverOverColorWheel1( evt : inkPointerEvent )
	{
		if( !( m_inputEnabled ) || ( m_activePanel != vehicleColorSelectorActiveTab.Main && m_activePanel != vehicleColorSelectorActiveTab.Both ) )
		{
			return false;
		}
		m_mouseInputEnabled = true;
		GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_hover' );
	}

	protected event OnHoverOverColorWheel2( evt : inkPointerEvent )
	{
		if( !( m_inputEnabled ) || ( m_activePanel != vehicleColorSelectorActiveTab.Main && m_activePanel != vehicleColorSelectorActiveTab.Both ) )
		{
			return false;
		}
		m_mouseInputEnabled = true;
		GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_hover' );
	}

	protected event OnHoverOverColorWheelLights( evt : inkPointerEvent )
	{
		if( !( m_inputEnabled ) || ( m_activePanel != vehicleColorSelectorActiveTab.Main && m_activePanel != vehicleColorSelectorActiveTab.Both ) )
		{
			return false;
		}
		m_mouseInputEnabled = true;
		GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_hover' );
	}

	protected event OnHoverOutColorWheel1( evt : inkPointerEvent )
	{
		if( !( m_inputEnabled ) || ( m_activePanel != vehicleColorSelectorActiveTab.Main && m_activePanel != vehicleColorSelectorActiveTab.Both ) )
		{
			return false;
		}
		if( m_activeMode == vehicleColorSelectorActiveMode.Primary )
		{
			m_mouseInputEnabled = false;
		}
	}

	protected event OnHoverOutColorWheel2( evt : inkPointerEvent )
	{
		if( !( m_inputEnabled ) || ( m_activePanel != vehicleColorSelectorActiveTab.Main && m_activePanel != vehicleColorSelectorActiveTab.Both ) )
		{
			return false;
		}
		if( m_activeMode == vehicleColorSelectorActiveMode.Secondary )
		{
			m_mouseInputEnabled = false;
		}
	}

	protected event OnHoverOutColorWheelLights( evt : inkPointerEvent )
	{
		if( !( m_inputEnabled ) || ( m_activePanel != vehicleColorSelectorActiveTab.Main && m_activePanel != vehicleColorSelectorActiveTab.Both ) )
		{
			return false;
		}
		if( m_activeMode == vehicleColorSelectorActiveMode.Lights )
		{
			m_mouseInputEnabled = false;
		}
	}

	protected event OnMouseInput( e : inkPointerEvent )
	{
		if( !( m_inputEnabled ) )
		{
			return false;
		}
		m_sliderHoldGamepad = false;
		if( e.IsAction( 'mouse_x' ) || e.IsAction( 'mouse_y' ) )
		{
			ProcessMouseInput( e.GetScreenSpacePosition() );
			if( m_saturationSliderHolded )
			{
				UpdateSliderFromScreenPosition( vehicleColorSelectorSBBar.Saturation, e.GetScreenSpacePosition() );
			}
			else if( m_brightnessSliderHolded )
			{
				UpdateSliderFromScreenPosition( vehicleColorSelectorSBBar.Brightness, e.GetScreenSpacePosition() );
			}
		}
	}

	private function SignalUICallBack()
	{
		m_popupData.token.TriggerCallback( m_popupData );
	}

	protected event OnFakeUpdate( proxy : inkAnimProxy )
	{
		Update();
	}

	protected event OnIsInMenuChanged( param : Bool )
	{
		if( param )
		{
			Cancel();
		}
	}

	protected event OnAction( action : ListenerAction, consumer : ListenerActionConsumer )
	{
		if( ListenerAction.IsAction( action, '__DEVICE_CHANGED__' ) )
		{
			UpdateNavigationState();
		}
	}

	private function UpdateNavigationState()
	{
		if( GetActiveInputMode() == m_activeInputMode )
		{
			return;
		}
		m_activeInputMode = GetActiveInputMode();
		if( m_player.PlayerLastUsedKBM() )
		{
			SetCursorVisibility( true );
			SelectActivePanel( vehicleColorSelectorActiveTab.Both );
			m_virtualGenericTemplateGridController.UnSelectCurrentItem();
			m_virtualUniqueTemplateGridController.UnSelectCurrentItem();
		}
		else
		{
			SetCursorVisibility( false );
			SelectActivePanel( vehicleColorSelectorActiveTab.Main );
			m_virtualGenericTemplateGridController.UnSelectCurrentItem();
			m_virtualUniqueTemplateGridController.UnSelectCurrentItem();
		}
		inkWidgetRef.SetVisible( m_changeSliderHint, m_sbBarsShown && !( m_player.PlayerLastUsedKBM() ) );
	}

	private function GetActiveInputMode() : vehicleColorSelectorActiveInputMode
	{
		if( !( m_player ) )
		{
			return vehicleColorSelectorActiveInputMode.None;
		}
		else if( m_player.PlayerLastUsedKBM() )
		{
			return vehicleColorSelectorActiveInputMode.KBM;
		}
		else
		{
			return vehicleColorSelectorActiveInputMode.Gamepad;
		}
	}

	protected event OnHoverOverSaturationBar( evt : inkPointerEvent )
	{
		if( !( m_inputEnabled ) || ( m_activePanel != vehicleColorSelectorActiveTab.Main && m_activePanel != vehicleColorSelectorActiveTab.Both ) )
		{
			return false;
		}
		if( m_sbBarsShown && !( m_brightnessSliderHolded ) )
		{
			SelectSBBar( vehicleColorSelectorSBBar.Saturation );
		}
	}

	protected event OnHoverOverBrightnessBar( evt : inkPointerEvent )
	{
		if( !( m_inputEnabled ) || ( m_activePanel != vehicleColorSelectorActiveTab.Main && m_activePanel != vehicleColorSelectorActiveTab.Both ) )
		{
			return false;
		}
		if( m_sbBarsShown && !( m_saturationSliderHolded ) )
		{
			SelectSBBar( vehicleColorSelectorSBBar.Brightness );
		}
	}

	protected event OnSaturationBarPressed( evt : inkPointerEvent )
	{
		if( m_inputEnabled && evt.IsAction( 'click' ) )
		{
			m_saturationSliderHolded = true;
		}
	}

	protected event OnBrightnessBarPressed( evt : inkPointerEvent )
	{
		if( m_inputEnabled && evt.IsAction( 'click' ) )
		{
			m_brightnessSliderHolded = true;
		}
	}

	private function UpdateSliderFromScreenPosition( slider : vehicleColorSelectorSBBar, position : Vector2 )
	{
		var mouseHit : inkWidgetRef;
		var localPosition : Vector2;
		mouseHit = ( ( slider == vehicleColorSelectorSBBar.Saturation ) ? ( m_mouseHitSaturationBar ) : ( m_mouseHitBrightnessBar ) );
		localPosition = WidgetUtils.GlobalToLocal( inkWidgetRef.Get( mouseHit ), position );
		SetSliderPosition( slider, ClampF( m_sbBarsLength - localPosition.X, 0.0, m_sbBarsLength ) );
		ReadSBBarsValues();
	}

	protected event OnGlobalAxisInput( e : inkPointerEvent )
	{
		var value : Float;
		value = e.GetAxisData();
		if( e.IsAction( 'popup_axisX' ) )
		{
			m_axisInputCache.X = value;
		}
		else if( e.IsAction( 'popup_axisY' ) )
		{
			m_axisInputCache.Y = value;
		}
	}

	protected event OnGlobalPressInput( e : inkPointerEvent )
	{
		var holdEvent : VehicleColorSelectionSliderHoldEvent;
		if( e.IsHandled() || !( m_inputEnabled ) )
		{
			return false;
		}
		if( e.IsAction( 'UI_vehicle_customization_slider_up' ) )
		{
			if( m_activePanel == vehicleColorSelectorActiveTab.Main || m_activePanel == vehicleColorSelectorActiveTab.Both )
			{
				e.Handle();
				ProcessCurrentSliderChange( 1 );
				holdEvent = new VehicleColorSelectionSliderHoldEvent;
				holdEvent.direction = 1;
				m_sliderHoldGamepad = true;
				QueueEvent( holdEvent );
			}
		}
		else if( e.IsAction( 'UI_vehicle_customization_slider_down' ) )
		{
			if( m_activePanel == vehicleColorSelectorActiveTab.Main || m_activePanel == vehicleColorSelectorActiveTab.Both )
			{
				e.Handle();
				ProcessCurrentSliderChange( -1 );
				holdEvent = new VehicleColorSelectionSliderHoldEvent;
				holdEvent.direction = -1;
				m_sliderHoldGamepad = true;
				QueueEvent( holdEvent );
			}
		}
		else if( e.IsAction( 'UI_vehicle_customization_slider_change_left' ) )
		{
			if( m_activePanel == vehicleColorSelectorActiveTab.Main || m_activePanel == vehicleColorSelectorActiveTab.Both )
			{
				e.Handle();
				SelectSBBar( vehicleColorSelectorSBBar.Saturation );
			}
		}
		else if( e.IsAction( 'UI_vehicle_customization_slider_change_right' ) )
		{
			if( m_activePanel == vehicleColorSelectorActiveTab.Main || m_activePanel == vehicleColorSelectorActiveTab.Both )
			{
				e.Handle();
				SelectSBBar( vehicleColorSelectorSBBar.Brightness );
			}
		}
	}

	protected event OnVehicleColorSelectionSliderHoldEvent( evt : VehicleColorSelectionSliderHoldEvent )
	{
		if( m_sliderHoldGamepad && ( m_activePanel == vehicleColorSelectorActiveTab.Main || m_activePanel == vehicleColorSelectorActiveTab.Both ) )
		{
			if( evt.direction > 0 )
			{
				ProcessCurrentSliderChange( 1 );
			}
			else
			{
				ProcessCurrentSliderChange( -1 );
			}
			QueueEvent( evt );
		}
	}

	protected event OnGlobalInputReleased( e : inkPointerEvent )
	{
		if( e.IsHandled() || !( m_inputEnabled ) )
		{
			return false;
		}
		ResetSliderControls();
		if( e.IsAction( 'UI_vehicle_customization_select' ) )
		{
			e.Handle();
			ProcessPointerClick( e );
			GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_onpress' );
			PlayRumble( RumbleStrength.SuperLight, RumbleType.Pulse, RumblePosition.Both );
		}
		else if( e.IsAction( 'UI_vehicle_customization_confirm' ) )
		{
			if( m_activePanel == vehicleColorSelectorActiveTab.Main || m_activePanel == vehicleColorSelectorActiveTab.Both )
			{
				if( Apply() )
				{
					e.Consume();
					GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_close' );
					PlayRumble( RumbleStrength.Light, RumbleType.Pulse, RumblePosition.Both );
				}
				else
				{
					PlayFailSound();
				}
			}
			else
			{
				PlayFailSound();
			}
		}
		else if( e.IsAction( 'UI_vehicle_customization_swap' ) )
		{
			if( m_activePanel == vehicleColorSelectorActiveTab.Main || m_activePanel == vehicleColorSelectorActiveTab.Both )
			{
				if( SwapColors() )
				{
					e.Consume();
					GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_onpress' );
				}
				else
				{
					PlayFailSound();
				}
			}
			else
			{
				PlayFailSound();
			}
		}
		else if( e.IsAction( 'UI_vehicle_customization_cancel' ) )
		{
			e.Consume();
			Cancel();
			GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_close' );
		}
		else if( e.IsAction( 'UI_vehicle_customization_mode_next' ) )
		{
			if( !( m_unsupportedVehicle ) && ( m_activePanel == vehicleColorSelectorActiveTab.Main || m_activePanel == vehicleColorSelectorActiveTab.Both ) )
			{
				e.Consume();
				SwitchActiveMode( 1 );
				GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_onpress' );
			}
		}
		else if( e.IsAction( 'UI_vehicle_customization_mode_prev' ) )
		{
			if( !( m_unsupportedVehicle ) && ( m_activePanel == vehicleColorSelectorActiveTab.Main || m_activePanel == vehicleColorSelectorActiveTab.Both ) )
			{
				e.Consume();
				SwitchActiveMode( -1 );
				GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_onpress' );
			}
		}
		else if( e.IsAction( 'UI_vehicle_customization_reset' ) )
		{
			if( m_activePanel == vehicleColorSelectorActiveTab.Main || m_activePanel == vehicleColorSelectorActiveTab.Both )
			{
				if( Reset() )
				{
					e.Consume();
					GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_close' );
				}
				else
				{
					PlayFailSound();
				}
			}
			else
			{
				PlayFailSound();
			}
		}
		else if( e.IsAction( 'UI_vehicle_customization_tab_right' ) )
		{
			if( m_activePanel == vehicleColorSelectorActiveTab.Main )
			{
				e.Consume();
				SelectActivePanel( vehicleColorSelectorActiveTab.Twintone );
				GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_gui_tab_change' );
			}
		}
		else if( e.IsAction( 'UI_vehicle_customization_tab_left' ) )
		{
			if( m_activePanel == vehicleColorSelectorActiveTab.Twintone )
			{
				e.Consume();
				SelectActivePanel( vehicleColorSelectorActiveTab.Main );
				GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_gui_tab_change' );
			}
		}
		else if( e.IsAction( 'UI_vehicle_customization_save' ) )
		{
			if( m_activePanel == vehicleColorSelectorActiveTab.Twintone || m_activePanel == vehicleColorSelectorActiveTab.Both )
			{
				if( SaveProfile() )
				{
					e.Consume();
					GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_onpress' );
				}
				else
				{
					PlayFailSound();
				}
			}
			else
			{
				PlayFailSound();
			}
		}
		if( e.IsAction( 'click' ) )
		{
			if( m_saturationSliderHolded )
			{
				UpdateSliderFromScreenPosition( vehicleColorSelectorSBBar.Saturation, e.GetScreenSpacePosition() );
			}
			else if( m_brightnessSliderHolded )
			{
				UpdateSliderFromScreenPosition( vehicleColorSelectorSBBar.Brightness, e.GetScreenSpacePosition() );
			}
			m_brightnessSliderHolded = false;
			m_saturationSliderHolded = false;
			HandleClickReleased( e );
		}
		HandleNavigation( e );
	}

	private function HandleClickReleased( e : inkPointerEvent )
	{
		var previousNavigationState : Bool;
		if( m_sbBarsShown && ( e.GetTarget() == inkWidgetRef.Get( m_mouseHitSaturationBar ) ) )
		{
			SelectSBBar( vehicleColorSelectorSBBar.Saturation );
		}
		else if( m_sbBarsShown && ( e.GetTarget() == inkWidgetRef.Get( m_mouseHitBrightnessBar ) ) )
		{
			SelectSBBar( vehicleColorSelectorSBBar.Brightness );
		}
		if( m_activePanel == vehicleColorSelectorActiveTab.Twintone )
		{
			if( m_virtualGenericTemplateGridController.GetSelectedController() )
			{
				e.Handle();
				previousNavigationState = GetNavigationEnabledInGrids();
				SetNavigationEnabledInGrids( true );
				m_virtualGenericTemplateGridController.ToggleItem( m_virtualGenericTemplateGridController.GetSelectedController().GetCurrentData().m_indexInList );
				SetNavigationEnabledInGrids( previousNavigationState );
				GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_onpress' );
			}
			else if( m_virtualUniqueTemplateGridController.GetSelectedController() )
			{
				e.Handle();
				previousNavigationState = GetNavigationEnabledInGrids();
				SetNavigationEnabledInGrids( true );
				m_virtualUniqueTemplateGridController.ToggleItem( m_virtualUniqueTemplateGridController.GetSelectedController().GetCurrentData().m_indexInList );
				SetNavigationEnabledInGrids( previousNavigationState );
				GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_onpress' );
			}
		}
	}

	private function HandleNavigation( e : inkPointerEvent )
	{
		if( e.IsHandled() || m_activePanel != vehicleColorSelectorActiveTab.Twintone )
		{
			return;
		}
		if( e.IsAction( 'navigate_down' ) || e.IsAction( 'popup_navigate_down' ) )
		{
			e.Handle();
			MoveNavigation( inkDiscreteNavigationDirection.Down );
		}
		else if( e.IsAction( 'navigate_up' ) || e.IsAction( 'popup_navigate_up' ) )
		{
			e.Handle();
			MoveNavigation( inkDiscreteNavigationDirection.Up );
		}
		else if( e.IsAction( 'navigate_left' ) || e.IsAction( 'popup_navigate_left' ) )
		{
			e.Handle();
			MoveNavigation( inkDiscreteNavigationDirection.Left );
		}
		else if( e.IsAction( 'navigate_right' ) || e.IsAction( 'popup_navigate_right' ) )
		{
			e.Handle();
			MoveNavigation( inkDiscreteNavigationDirection.Right );
		}
	}

	private function MoveNavigation( direction : inkDiscreteNavigationDirection )
	{
		var previousNavigationState : Bool;
		previousNavigationState = GetNavigationEnabledInGrids();
		SetNavigationEnabledInGrids( true );
		if( !( m_virtualGenericTemplateGridController.GetSelectedController() ) && !( m_virtualUniqueTemplateGridController.GetSelectedController() ) )
		{
			SelectDefaultTemplateInGrids();
		}
		if( m_virtualGenericTemplateGridController.GetSelectedController() )
		{
			m_virtualGenericTemplateGridController.MoveDiscreteNavigation( direction );
		}
		else
		{
			m_virtualUniqueTemplateGridController.MoveDiscreteNavigation( direction );
		}
		SetNavigationEnabledInGrids( previousNavigationState );
	}

	protected event OnGlobalInputHold( evt : inkPointerEvent )
	{
		if( evt.IsHandled() )
		{
			return false;
		}
		if( ( evt.GetHoldProgress() >= 1.0 ) && evt.IsAction( 'UI_vehicle_customization_delete' ) )
		{
			if( m_activePanel == vehicleColorSelectorActiveTab.Both || m_activePanel == vehicleColorSelectorActiveTab.Twintone )
			{
				if( DeleteProfile() )
				{
					evt.Handle();
					GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_item_disassemble' );
				}
				else
				{
					PlayFailSound();
				}
			}
			else
			{
				PlayFailSound();
			}
		}
	}

	private function SetNavigationEnabledInGrids( enabled : Bool )
	{
		if( m_virtualGenericTemplateGridController && m_virtualUniqueTemplateGridController )
		{
			m_virtualGenericTemplateGridController.SetCanNavigateInGrid( enabled );
			m_virtualUniqueTemplateGridController.SetCanNavigateInGrid( enabled );
		}
	}

	private function GetNavigationEnabledInGrids() : Bool
	{
		if( m_virtualGenericTemplateGridController && m_virtualUniqueTemplateGridController )
		{
			return m_virtualGenericTemplateGridController.GetCanNavigateInGrid() && m_virtualUniqueTemplateGridController.GetCanNavigateInGrid();
		}
		return false;
	}

	private function Apply() : Bool
	{
		if( !( m_inputEnabled ) || !( m_vehicle.GetVehicleComponent().CanApplyTemplateOnVehicle( m_currentTemplate, true ) ) )
		{
			return false;
		}
		m_inputEnabled = false;
		m_CloseReason = vehicleColorSelectorMenuCloseReason.Apply;
		if( m_activeMode == vehicleColorSelectorActiveMode.Lights )
		{
			PlayLightsFocusAnimation( false );
		}
		PlayAnimation( m_applyAnimation );
		m_animProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnFinalAnimationFinished' );
		return true;
	}

	private function SwapColors() : Bool
	{
		var swapTargetAngle, swapTargetSaturation, swapTargetBrightness : Float;
		var swapCachedColor : Color;
		if( !( m_colorADefined ) || !( m_colorBDefined ) )
		{
			return false;
		}
		swapTargetAngle = m_targetColorAngleA;
		swapTargetSaturation = m_targetColorASaturation;
		swapTargetBrightness = m_targetColorABrightness;
		swapCachedColor = m_cachedNewColorA;
		m_targetColorAngleA = m_targetColorAngleB;
		m_targetColorASaturation = m_targetColorBSaturation;
		m_targetColorABrightness = m_targetColorBBrightness;
		m_cachedNewColorA = m_cachedNewColorB;
		m_targetColorAngleB = swapTargetAngle;
		m_targetColorBSaturation = swapTargetSaturation;
		m_targetColorBBrightness = swapTargetBrightness;
		m_cachedNewColorB = swapCachedColor;
		UpdateControlsState();
		UpdateSBBarsForActiveColor();
		UpdateTintedPartsForMode( vehicleColorSelectorActiveMode.Primary );
		UpdateTintedPartsForMode( vehicleColorSelectorActiveMode.Secondary );
		UpdateCurrentTemplate( PackCurrentConfigurationToTemplate() );
		return true;
	}

	private function Cancel()
	{
		if( !( m_inputEnabled ) )
		{
			return;
		}
		m_inputEnabled = false;
		m_CloseReason = vehicleColorSelectorMenuCloseReason.Cancel;
		PlayAnimation( m_cancelAnimation );
		m_animProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnFinalAnimationFinished' );
		StatusEffectHelper.ApplyStatusEffect( m_player, T"BaseStatusEffect.VehicleVisualModCooldownInstant" );
	}

	private function Reset() : Bool
	{
		if( !( m_inputEnabled ) )
		{
			return false;
		}
		if( !( VehicleVisualCustomizationTemplate.IsValid( m_vehicle.GetVehiclePS().GetVehicleVisualCustomizationTemplate() ) ) )
		{
			return false;
		}
		m_inputEnabled = false;
		UpdateLightsPreviewWidgets( true );
		m_CloseReason = vehicleColorSelectorMenuCloseReason.Reset;
		PlayAnimation( m_applyAnimation );
		PlayLibraryAnimation( 'Reset' );
		if( m_activeMode == vehicleColorSelectorActiveMode.Lights )
		{
			PlayLightsFocusAnimation( false );
		}
		m_animProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnFinalAnimationFinished' );
		return true;
	}

	private function Update()
	{
		var angle : Float;
		var angleReadout : weak< inkText >;
		var sektorReadout : weak< inkText >;
		var root : weak< inkCompoundWidget >;
		ProcessSaveProfileHintVisibility();
		ProcessDeleteProfileHintVisibility();
		if( !( m_inputEnabled ) || ( m_activePanel != vehicleColorSelectorActiveTab.Main && m_activePanel != vehicleColorSelectorActiveTab.Both ) )
		{
			return;
		}
		if( ( AbsF( m_axisInputCache.Y ) > m_axisInputThreshold ) || ( AbsF( m_axisInputCache.X ) > m_axisInputThreshold ) )
		{
			angle = AtanF( m_axisInputCache.X, m_axisInputCache.Y ) - ( Pi() / 2.0 );
			ProcessPointerMovement( angle, GetColorPickerForActiveColor() );
			root = ( ( inkCompoundWidget )( GetRootWidget() ) );
			angleReadout = ( ( inkText )( root.GetWidgetByPath( inkWidgetPath.Build( 'AngleTest' ) ) ) );
			sektorReadout = ( ( inkText )( root.GetWidgetByPath( inkWidgetPath.Build( 'SectionTest' ) ) ) );
			m_currentAngle = CalculateNewColorAngle( angle );
			sektorReadout.SetText( FloatToString( m_axisInputCache.X ) );
			angleReadout.SetText( FloatToString( m_axisInputCache.Y ) );
			m_axisInputCache.X = 0.0;
			m_axisInputCache.Y = 0.0;
		}
	}

	protected event OnFinalAnimationFinished( proxy : inkAnimProxy )
	{
		switch( m_CloseReason )
		{
			case vehicleColorSelectorMenuCloseReason.Apply:
			{
				SendCustomizationToVehicle();
			}
			break;
			case vehicleColorSelectorMenuCloseReason.Reset:
			{
				ResetCustomizationToVehicle();
			}
			break;
		}
		UnitializeTwintone();
		SignalUICallBack();
		if( m_carGlitchProxy )
		{
			m_carGlitchProxy.GotoEndAndStop( true );
			m_carGlitchProxy.UnregisterFromAllCallbacks( inkanimEventType.OnFinish );
			m_carGlitchProxy = NULL;
		}
	}

	private function ProcessMouseInput( mousePos : Vector2 )
	{
		var mouseLocationRelativeToColorPicker : Vector2;
		var angle : Float;
		var activeColorPicker : vehicleColorSelectorPointerDef;
		activeColorPicker = GetColorPickerForActiveColor();
		if( m_inputEnabled && ( m_activePanel == vehicleColorSelectorActiveTab.Main || m_activePanel == vehicleColorSelectorActiveTab.Both ) )
		{
			if( !( ShouldProcessMouseInputForActiveColorPicker( mousePos ) ) )
			{
				return;
			}
			mouseLocationRelativeToColorPicker = GetMouseLocationRelativeToActiveColorPicker( mousePos );
			angle = AtanF( mouseLocationRelativeToColorPicker.Y, mouseLocationRelativeToColorPicker.X );
			ProcessPointerMovement( angle, activeColorPicker );
		}
	}

	private function ProcessPointerMovement( angle : Float, pointer : vehicleColorSelectorPointerDef )
	{
		var selectedColorID : Int32;
		m_currentAngle = CalculateNewColorAngle( angle );
		selectedColorID = FloorF( m_currentAngle ) + 1;
		if( selectedColorID != m_storedSelectedColorID )
		{
			m_storedSelectedColorID = selectedColorID;
			PlayRumble( RumbleStrength.SuperLight, RumbleType.Pulse, RumblePosition.Left );
		}
		UpdatePointerPosition( m_currentAngle, pointer, true );
	}

	private function ProcessPointerClick( e : inkPointerEvent )
	{
		if( m_player.PlayerLastUsedKBM() )
		{
			switch( e.GetTarget() )
			{
				case inkWidgetRef.Get( m_mouseHitColor1Ref ):
				{
					SwitchActiveMode( 0, vehicleColorSelectorActiveMode.Primary );
					m_mouseInputEnabled = true;
					ProcessMouseInput( e.GetScreenSpacePosition() );
				}
				break;
				case inkWidgetRef.Get( m_mouseHitColor2Ref ):
				{
					SwitchActiveMode( 0, vehicleColorSelectorActiveMode.Secondary );
					m_mouseInputEnabled = true;
					ProcessMouseInput( e.GetScreenSpacePosition() );
				}
				break;
				case inkWidgetRef.Get( m_mouseHitLightsRef ):
				{
					SwitchActiveMode( 0, vehicleColorSelectorActiveMode.Lights );
					m_mouseInputEnabled = true;
					ProcessMouseInput( e.GetScreenSpacePosition() );
				}
				break;
			}
		}
		if( !( m_inputEnabled ) || ( m_activePanel != vehicleColorSelectorActiveTab.Main && m_activePanel != vehicleColorSelectorActiveTab.Both ) )
		{
			return;
		}
		if( m_player.PlayerLastUsedKBM() && !( ShouldProcessMouseInputForActiveColorPicker( e.GetScreenSpacePosition() ) ) )
		{
			return;
		}
		if( VehicleVisualCustomizationTemplate.GetType( m_currentTemplate ) == VehicleVisualCustomizationType.Unique )
		{
			m_targetColorAngleA = 0.0;
			m_targetColorASaturation = 1.0;
			m_targetColorABrightness = 1.0;
			m_targetColorAngleB = 0.0;
			m_targetColorBSaturation = 1.0;
			m_targetColorBBrightness = 1.0;
			UpdateCurrentTemplate( PackCurrentConfigurationToTemplate() );
		}
		switch( m_activeMode )
		{
			case vehicleColorSelectorActiveMode.Primary:
			{
				m_colorADefined = true;
				m_targetColorAngleA = CalculateNewColorAngle( m_currentAngle );
				UpdateSBBarsForActiveColor();
				UpdateColor( m_targetColorAngleA, m_activeMode );
				UpdatePointerPosition( m_targetColorAngleA, m_selectedColorPointerA, false );
				ProcessApplyHintVisiblity();
				ProccessSwapColorHintVisibility();
			}
			break;
			case vehicleColorSelectorActiveMode.Secondary:
			{
				m_colorBDefined = true;
				m_targetColorAngleB = CalculateNewColorAngle( m_currentAngle );
				UpdateSBBarsForActiveColor();
				UpdateColor( m_targetColorAngleB, m_activeMode );
				UpdatePointerPosition( m_targetColorAngleB, m_selectedColorPointerB, false );
				if( !( m_colorADefined ) )
				{
					m_colorADefined = true;
					m_targetColorAngleA = CalculateNewColorAngle( m_currentAngle );
					UpdateColor( m_targetColorAngleA, vehicleColorSelectorActiveMode.Primary );
				}
				ProcessApplyHintVisiblity();
				ProccessSwapColorHintVisibility();
			}
			break;
			case vehicleColorSelectorActiveMode.Lights:
			{
				m_lightsDefined = true;
				m_targetColorAngleLights = CalculateNewColorAngle( m_currentAngle );
				UpdateColor( m_targetColorAngleLights, m_activeMode );
				UpdatePointerPosition( m_targetColorAngleLights, m_selectedColorPointerLights, false );
				ProcessApplyHintVisiblity();
				ProccessSwapColorHintVisibility();
				UpdateLightsPreviewWidgets();
			}
			break;
		}
		UpdateCurrentTemplate( PackCurrentConfigurationToTemplate() );
	}

	private function ShouldProcessMouseInputForActiveColorPicker( mousePos : Vector2 ) : Bool
	{
		var mouseLocationRelativeToColorPicker : Vector2;
		var activeColorPicker : vehicleColorSelectorPointerDef;
		mouseLocationRelativeToColorPicker = GetMouseLocationRelativeToActiveColorPicker( mousePos );
		activeColorPicker = GetColorPickerForActiveColor();
		return ( ( mouseLocationRelativeToColorPicker.X * mouseLocationRelativeToColorPicker.X ) + ( mouseLocationRelativeToColorPicker.Y * mouseLocationRelativeToColorPicker.Y ) ) <= ( ( activeColorPicker.m_pointerCircleRadius + activeColorPicker.m_selectionMargin ) * ( activeColorPicker.m_pointerCircleRadius + activeColorPicker.m_selectionMargin ) );
	}

	private function GetMouseLocationRelativeToActiveColorPicker( mousePos : Vector2 ) : Vector2
	{
		var rootSize : Vector2;
		var localPos : Vector2;
		var offsetMargins : inkMargin;
		var offsetX, offsetY : Float;
		offsetMargins = inkWidgetRef.GetMargin( m_CursorRootOffsetPoint );
		if( m_activeMode == vehicleColorSelectorActiveMode.Lights )
		{
			offsetX = ( offsetMargins.left - ( rootSize.X / 2.0 ) ) * -1.0;
			offsetY = ( offsetMargins.top - ( rootSize.Y / 2.0 ) ) * -1.0;
		}
		localPos = WidgetUtils.GlobalToLocal( inkWidgetRef.Get( m_CursorRootContainerRef ), mousePos );
		rootSize = GetRootWidget().GetSize();
		return Vector2( ( localPos.X + offsetX ) - ( rootSize.X / 2.0 ), ( localPos.Y + offsetY ) - ( rootSize.Y / 2.0 ) );
	}

	private function SetCursorVisibility( visible : Bool )
	{
		var evt : inkGameNotificationLayer_SetCursorVisibility;
		evt = new inkGameNotificationLayer_SetCursorVisibility;
		evt.Init( visible );
		QueueEvent( evt );
	}

	private function ShowSBBars( val : Bool )
	{
		var animOptions : inkAnimOptions;
		if( m_sbBarsShown == val )
		{
			return;
		}
		if( !( m_sbBarsShown ) && !( val ) )
		{
			return;
		}
		m_sbBarsShown = val;
		if( !( val ) )
		{
			animOptions.playReversed = true;
		}
		UpdateSlidersPosition();
		m_sbBarsProxy = PlayLibraryAnimation( 'ShowSBBars', animOptions );
		m_sbBarsProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnShowSBBarsAnimFinished' );
	}

	protected event OnShowSBBarsAnimFinished( proxy : inkAnimProxy )
	{
		if( m_activeSBBar == vehicleColorSelectorSBBar.None )
		{
			SelectSBBar( vehicleColorSelectorSBBar.Saturation );
		}
		m_sbBarsProxy.UnregisterFromAllCallbacks( inkanimEventType.OnFinish );
		inkWidgetRef.SetVisible( m_changeSliderHint, m_sbBarsShown && !( m_player.PlayerLastUsedKBM() ) );
	}

	private function ProcessCurrentSliderChange( change : Int32 )
	{
		if( !( m_inputEnabled ) || ( m_activePanel != vehicleColorSelectorActiveTab.Main && m_activePanel != vehicleColorSelectorActiveTab.Both ) )
		{
			return;
		}
		if( m_sliderHoldGamepadDamp < 0 )
		{
			m_sliderHoldGamepadDamp = 0;
		}
		if( ( m_sliderHoldGamepadDamp >= m_sliderPadHoldAccelerationTreshhold ) || ( m_sliderHoldGamepadDamp == 0 ) )
		{
			switch( m_activeMode )
			{
				case vehicleColorSelectorActiveMode.Primary:
				{
					if( !( m_colorADefined ) )
					{
						return;
					}
					MoveCurrentSlider( change );
					ReadSBBarsValues();
					UpdateColor( m_targetColorAngleA, m_activeMode );
				}
				break;
				case vehicleColorSelectorActiveMode.Secondary:
				{
					if( !( m_colorBDefined ) )
					{
						return;
					}
					MoveCurrentSlider( change );
					ReadSBBarsValues();
					UpdateColor( m_targetColorAngleB, m_activeMode );
				}
				break;
				case vehicleColorSelectorActiveMode.Lights:
				{
					return;
				}
				break;
			}
			if( m_sliderHoldGamepadDamp > m_sliderPadHoldAccelerationTreshhold )
			{
				m_sliderHoldGamepadDamp -= 5;
				if( m_sliderPadHoldAccelerationTreshhold > 0 )
				{
					m_sliderPadHoldAccelerationTreshhold -= 1;
				}
			}
		}
		UpdateCurrentTemplate( PackCurrentConfigurationToTemplate() );
	}

	private function ResetSliderControls()
	{
		m_sliderHoldGamepad = false;
		m_sliderHoldGamepadDamp = 0;
		m_sliderPadHoldAccelerationTreshhold = 50;
	}

	private function MoveCurrentSlider( direction : Int32 )
	{
		var activeBarCurrentPosition : Float;
		activeBarCurrentPosition = ( ( m_activeSBBar == vehicleColorSelectorSBBar.Saturation ) ? ( m_saturationPointerPosition ) : ( m_brightnessPointerPosition ) );
		SetSliderPosition( m_activeSBBar, ClampF( activeBarCurrentPosition + ( GetSliderStepForControlDevice() * ( ( Float )( direction ) ) ), 0.0, m_sbBarsLength ) );
	}

	private function UpdateSlidersPosition()
	{
		SetSliderPosition( vehicleColorSelectorSBBar.Saturation, m_saturationPointerPosition );
		SetSliderPosition( vehicleColorSelectorSBBar.Brightness, m_brightnessPointerPosition );
	}

	private function SetSliderPosition( bar : vehicleColorSelectorSBBar, newPosition : Float )
	{
		switch( bar )
		{
			case vehicleColorSelectorSBBar.Saturation:
			{
				m_saturationPointerPosition = newPosition;
				inkWidgetRef.SetMargin( m_saturationPointer, 0.0, 0.0, m_saturationPointerPosition, 0.0 );
			}
			break;
			case vehicleColorSelectorSBBar.Brightness:
			{
				m_brightnessPointerPosition = newPosition;
				inkWidgetRef.SetMargin( m_brightnessPointer, 0.0, 0.0, m_brightnessPointerPosition, 0.0 );
			}
			break;
		}
	}

	private function SelectSBBar( bar : vehicleColorSelectorSBBar )
	{
		m_activeSBBar = bar;
		UpdateActiveSBBar();
	}

	private function UpdateActiveSBBar()
	{
		if( m_activeSBBar == vehicleColorSelectorSBBar.Saturation || m_activeSBBar == vehicleColorSelectorSBBar.Brightness )
		{
			inkWidgetRef.SetVisible( m_saturationPointer, true );
			inkWidgetRef.SetVisible( m_brightnessPointer, true );
		}
		else
		{
			inkWidgetRef.SetVisible( m_saturationPointer, false );
			inkWidgetRef.SetVisible( m_brightnessPointer, false );
		}
		inkImageRef.SetVisible( m_saturationBarHighlight, m_activeSBBar == vehicleColorSelectorSBBar.Saturation );
		inkWidgetRef.SetVisible( m_saturationBarHint, m_activeSBBar == vehicleColorSelectorSBBar.Saturation );
		inkImageRef.SetVisible( m_brightnessBarHighlight, m_activeSBBar == vehicleColorSelectorSBBar.Brightness );
		inkWidgetRef.SetVisible( m_brightnessBarHint, m_activeSBBar == vehicleColorSelectorSBBar.Brightness );
	}

	private function ReadSBBarsValues()
	{
		var saturation : Float;
		var brightness : Float;
		saturation = m_saturationPointerPosition / m_sbBarsLength;
		brightness = m_brightnessPointerPosition / m_sbBarsLength;
		switch( m_activeMode )
		{
			case vehicleColorSelectorActiveMode.Primary:
			{
				m_targetColorASaturation = saturation;
				m_targetColorABrightness = brightness;
				UpdateColor( m_targetColorAngleA, m_activeMode );
			}
			break;
			case vehicleColorSelectorActiveMode.Secondary:
			{
				m_targetColorBSaturation = saturation;
				m_targetColorBBrightness = brightness;
				UpdateColor( m_targetColorAngleB, m_activeMode );
			}
			break;
		}
	}

	private function GetSliderStepForControlDevice() : Float
	{
		if( m_player.PlayerLastUsedKBM() )
		{
			return m_ChromaSliderStepMouse;
		}
		else
		{
			return m_ChromaSliderStepPad;
		}
	}

	private function UpdateSBBarsForActiveColor()
	{
		if( ( m_activeMode == vehicleColorSelectorActiveMode.Primary && m_colorADefined ) || ( m_activeMode == vehicleColorSelectorActiveMode.Secondary && m_colorBDefined ) )
		{
			ShowSBBars( true );
		}
		else
		{
			ShowSBBars( false );
			return;
		}
		switch( m_activeMode )
		{
			case vehicleColorSelectorActiveMode.Primary:
			{
				inkWidgetRef.SetTintColor( m_saturationBarFill, Color.ToSRGB( Color.HSBToColor( Rad2Deg( m_targetColorAngleA ), true ) ) );
				m_saturationPointerPosition = m_targetColorASaturation * m_sbBarsLength;
				m_brightnessPointerPosition = m_targetColorABrightness * m_sbBarsLength;
			}
			break;
			case vehicleColorSelectorActiveMode.Secondary:
			{
				inkWidgetRef.SetTintColor( m_saturationBarFill, Color.ToSRGB( Color.HSBToColor( Rad2Deg( m_targetColorAngleB ), true ) ) );
				m_saturationPointerPosition = m_targetColorBSaturation * m_sbBarsLength;
				m_brightnessPointerPosition = m_targetColorBBrightness * m_sbBarsLength;
			}
			break;
		}
		UpdateSlidersPosition();
	}

	private function UpdatePointerPosition( colorAngle : Float, pointer : vehicleColorSelectorPointerDef, rotate : Bool )
	{
		var dx, dy : Float;
		if( pointer.m_pointerCircleRadius == 0.0 )
		{
			return;
		}
		dx = CosF( colorAngle ) * pointer.m_pointerCircleRadius;
		dy = SinF( colorAngle ) * pointer.m_pointerCircleRadius;
		inkWidgetRef.SetMargin( pointer.m_pointerRoot, dx, dy, 0.0, 0.0 );
		if( rotate )
		{
			inkWidgetRef.SetRotation( pointer.m_pointerRoot, NormalizeAngle( colorAngle ) * 60.0 );
		}
		UpdatePointerVisiblity( pointer, true );
	}

	private function UpdatePointerVisiblity( pointer : vehicleColorSelectorPointerDef, set : Bool )
	{
		var widget : weak< inkWidget >;
		widget = inkWidgetRef.Get( pointer.m_pointerRoot );
		widget.SetVisible( set );
	}

	private function GetColorPickerForActiveColor() : vehicleColorSelectorPointerDef
	{
		switch( m_activeMode )
		{
			case vehicleColorSelectorActiveMode.Primary:
			{
				return m_colorPickerA;
			}
			break;
			case vehicleColorSelectorActiveMode.Secondary:
			{
				return m_colorPickerB;
			}
			break;
			case vehicleColorSelectorActiveMode.Lights:
			{
				return m_colorPickerLights;
			}
			break;
		}
		return m_colorPickerA;
	}

	private function SwitchActiveMode( optional direction : Int32, optional switchTo : vehicleColorSelectorActiveMode )
	{
		if( m_unsupportedVehicle || !( m_inputEnabled ) )
		{
			return;
		}
		m_previousMode = m_activeMode;
		switch( switchTo )
		{
			case vehicleColorSelectorActiveMode.Primary:
			{
				m_activeMode = vehicleColorSelectorActiveMode.Primary;
			}
			break;
			case vehicleColorSelectorActiveMode.Secondary:
			{
				m_activeMode = vehicleColorSelectorActiveMode.Secondary;
			}
			break;
			case vehicleColorSelectorActiveMode.Lights:
			{
				m_activeMode = vehicleColorSelectorActiveMode.Lights;
			}
			break;
			default:
			{
				m_activeMode = GetNextValidMode( m_activeMode, direction );
			}
		}
		if( m_previousMode == m_activeMode )
		{
			return;
		}
		if( !( m_player.PlayerLastUsedKBM() ) )
		{
			switch( m_activeMode )
			{
				case vehicleColorSelectorActiveMode.Primary:
				{
					m_currentAngle = CalculateNewColorAngle( m_targetColorAngleA );
				}
				break;
				case vehicleColorSelectorActiveMode.Secondary:
				{
					m_currentAngle = CalculateNewColorAngle( m_targetColorAngleB );
				}
				break;
				case vehicleColorSelectorActiveMode.Lights:
				{
					m_currentAngle = CalculateNewColorAngle( m_targetColorAngleLights );
				}
				break;
			}
		}
		m_stickersPage.SetVisible( false );
		inkWidgetRef.SetVisible( m_colorPaletteRef, true );
		if( m_activeMode == vehicleColorSelectorActiveMode.Lights )
		{
			inkTextRef.SetOpacity( m_titleTextMain, 1.0 );
			inkTextRef.SetText( m_titleTextMain, GetLocalizedText( "LocKey#96054" ) );
			inkTextRef.SetOpacity( m_titleTextNumber, 0.0 );
		}
		else
		{
			inkTextRef.SetOpacity( m_titleTextMain, 1.0 );
			inkTextRef.SetText( m_titleTextMain, GetLocalizedText( "LocKey#95816" ) );
			inkTextRef.SetText( m_titleTextNumber, IntToString( ( ( Int32 )( m_activeMode ) ) ) );
			inkTextRef.SetOpacity( m_titleTextNumber, 1.0 );
		}
		UpdateSBBarsForActiveColor();
		UpdateWidgetsForNewMode( m_activeMode, m_previousMode );
	}

	private function GetNextValidMode( currentMode : vehicleColorSelectorActiveMode, optional direction : Int32 ) : vehicleColorSelectorActiveMode
	{
		var i : Int32;
		var enumMax : Int32;
		var newEnumValue : vehicleColorSelectorActiveMode;
		enumMax = ( ( Int32 )( EnumGetMax( 'vehicleColorSelectorActiveMode' ) ) );
		i = ( ( Int32 )( currentMode ) );
		i += direction;
		if( i <= 0 )
		{
			i = enumMax;
		}
		if( i > enumMax )
		{
			i = 1;
		}
		newEnumValue = ( ( vehicleColorSelectorActiveMode )( i ) );
		return newEnumValue;
	}

	private function UpdateWidgetsForNewMode( currentMode : vehicleColorSelectorActiveMode, previousMode : vehicleColorSelectorActiveMode )
	{
		PlayAnimation( 'Opened' );
		switch( currentMode )
		{
			case vehicleColorSelectorActiveMode.Primary:
			{
				inkWidgetRef.SetOpacity( m_colorWheelColorA, 0.80000001 );
				inkWidgetRef.SetOpacity( m_colorWheelColorB, 0.30000001 );
				inkWidgetRef.SetOpacity( m_colorWheelColorLights, 0.30000001 );
				UpdatePointerPosition( m_targetColorAngleA, m_colorPickerA, true );
				UpdatePointerVisiblity( m_colorPickerB, false );
				UpdatePointerVisiblity( m_colorPickerLights, false );
				if( previousMode == vehicleColorSelectorActiveMode.Lights )
				{
					PlayLightsFocusAnimation( false );
				}
			}
			break;
			case vehicleColorSelectorActiveMode.Secondary:
			{
				inkWidgetRef.SetOpacity( m_colorWheelColorA, 0.30000001 );
				inkWidgetRef.SetOpacity( m_colorWheelColorB, 0.80000001 );
				inkWidgetRef.SetOpacity( m_colorWheelColorLights, 0.30000001 );
				UpdatePointerPosition( m_targetColorAngleB, m_colorPickerB, true );
				UpdatePointerVisiblity( m_colorPickerA, false );
				UpdatePointerVisiblity( m_colorPickerLights, false );
				if( previousMode == vehicleColorSelectorActiveMode.Lights )
				{
					PlayLightsFocusAnimation( false );
				}
			}
			break;
			case vehicleColorSelectorActiveMode.Lights:
			{
				inkWidgetRef.SetOpacity( m_colorWheelColorA, 0.15000001 );
				inkWidgetRef.SetOpacity( m_colorWheelColorB, 0.15000001 );
				inkWidgetRef.SetOpacity( m_colorWheelColorLights, 0.80000001 );
				UpdatePointerPosition( m_targetColorAngleLights, m_colorPickerLights, true );
				UpdatePointerVisiblity( m_colorPickerA, false );
				UpdatePointerVisiblity( m_colorPickerB, false );
				if( previousMode != vehicleColorSelectorActiveMode.Lights )
				{
					PlayLightsFocusAnimation( true );
				}
			}
			break;
		}
	}

	private function CalculateNewColorAngle( angle : Float ) : Float
	{
		var value : Float;
		value = ( angle + ( 2.0 * Pi() ) ) % ( 2.0 * Pi() );
		return value;
	}

	private function UpdateColor( colorAngle : Float, selectedMode : vehicleColorSelectorActiveMode )
	{
		switch( selectedMode )
		{
			case vehicleColorSelectorActiveMode.Primary:
			{
				if( m_colorADefined )
				{
					m_cachedNewColorA = Color.HSBToColor( Rad2Deg( colorAngle ), false, m_targetColorASaturation, m_targetColorABrightness );
				}
				else
				{
					m_cachedNewColorA = Color( 255, 255, 255, 255 );
				}
			}
			break;
			case vehicleColorSelectorActiveMode.Secondary:
			{
				if( m_colorBDefined )
				{
					m_cachedNewColorB = Color.HSBToColor( Rad2Deg( colorAngle ), false, m_targetColorBSaturation, m_targetColorBBrightness );
				}
				else if( m_colorADefined )
				{
					m_cachedNewColorB = Color.HSBToColor( Rad2Deg( colorAngle ), false, m_targetColorASaturation, m_targetColorABrightness );
				}
				else
				{
					m_cachedNewColorB = Color( 255, 255, 255, 255 );
				}
			}
			break;
			case vehicleColorSelectorActiveMode.Lights:
			{
				if( m_lightsDefined )
				{
					m_cachedNewColorLights = Color.HSBToColor( Rad2Deg( colorAngle ), true );
				}
				else
				{
					m_cachedNewColorLights = Color( 255, 255, 255, 255 );
				}
			}
			break;
		}
		UpdateTintedPartsForMode( selectedMode );
		UpdateSBBarsForActiveColor();
		UpdateCurrentTemplate( PackCurrentConfigurationToTemplate() );
	}

	private function NormalizeAngle( angle : Float ) : Float
	{
		return ( angle / ( 2.0 * Pi() ) ) * 6.0;
	}

	private function UpdateTintedPartsForMode( mode : vehicleColorSelectorActiveMode )
	{
		switch( mode )
		{
			case vehicleColorSelectorActiveMode.Primary:
			{
				inkImageRef.SetTintColor( m_vehiclePreviewColorA, Color.ToSRGB( m_cachedNewColorA ) );
				inkImageRef.SetVisible( m_vehiclePreviewColorA, true );
				inkWidgetRef.SetTintColor( m_selectedColorPointerA.m_partToPaint, Color.ToSRGB( m_cachedNewColorA ) );
				if( !( m_colorBDefined ) )
				{
					inkImageRef.SetTintColor( m_vehiclePreviewColorB, Color.ToSRGB( m_cachedNewColorA ) );
					inkImageRef.SetVisible( m_vehiclePreviewColorB, true );
				}
			}
			break;
			case vehicleColorSelectorActiveMode.Secondary:
			{
				inkImageRef.SetTintColor( m_vehiclePreviewColorB, Color.ToSRGB( m_cachedNewColorB ) );
				inkImageRef.SetVisible( m_vehiclePreviewColorB, true );
				inkWidgetRef.SetTintColor( m_selectedColorPointerB.m_partToPaint, Color.ToSRGB( m_cachedNewColorB ) );
			}
			break;
			case vehicleColorSelectorActiveMode.Lights:
			{
				inkWidgetRef.SetTintColor( m_selectedColorPointerLights.m_partToPaint, Color.ToSRGB( m_cachedNewColorLights ) );
			}
			break;
		}
	}

	private function UpdateCurrentTemplate( newTemplate : VehicleVisualCustomizationTemplate )
	{
		var previousNavigationState : Bool;
		previousNavigationState = GetNavigationEnabledInGrids();
		m_currentTemplate = newTemplate;
		m_currentTemplatePreview.SetTemplate( m_currentTemplate );
		if( VehicleVisualCustomizationTemplate.GetType( m_currentTemplate ) == VehicleVisualCustomizationType.Unique )
		{
			return;
		}
		SetNavigationEnabledInGrids( true );
		if( !( VehicleVisualCustomizationTemplate.Equals( m_toggledTemplate, m_currentTemplate ) ) )
		{
			m_virtualGenericTemplateGridController.UnToggleCurrentItem();
			m_virtualUniqueTemplateGridController.UnToggleCurrentItem();
		}
		m_virtualGenericTemplateGridController.ToggleTemplateInGrid( m_currentTemplate, !( m_player.PlayerLastUsedKBM() ) );
		SetNavigationEnabledInGrids( previousNavigationState );
	}

	private function SendCustomizationToVehicle()
	{
		var evt : NewVehicleVisualCustomizationEvent;
		evt = new NewVehicleVisualCustomizationEvent;
		evt.template = m_currentTemplate;
		m_vehicle.QueueEvent( evt );
	}

	private function PackCurrentConfigurationToTemplate() : VehicleVisualCustomizationTemplate
	{
		var template : VehicleVisualCustomizationTemplate;
		if( m_colorADefined == true )
		{
			template.genericData.primaryColorDefined = true;
			GenericTemplatePersistentData.SetPrimaryColor( template.genericData, Color.HSBToColor( Rad2Deg( m_targetColorAngleA ), false, m_targetColorASaturation, m_targetColorABrightness ) );
		}
		else
		{
			template.genericData.primaryColorDefined = false;
			GenericTemplatePersistentData.SetPrimaryColor( template.genericData, Color( 255, 255, 255, 255 ) );
		}
		if( m_colorBDefined == true )
		{
			template.genericData.secondaryColorDefined = true;
			GenericTemplatePersistentData.SetSecondaryColor( template.genericData, Color.HSBToColor( Rad2Deg( m_targetColorAngleB ), false, m_targetColorBSaturation, m_targetColorBBrightness ) );
		}
		else if( template.genericData.primaryColorDefined )
		{
			template.genericData.secondaryColorDefined = false;
			GenericTemplatePersistentData.SetSecondaryColor( template.genericData, GenericTemplatePersistentData.GetPrimaryColor( template.genericData ) );
		}
		if( m_lightsDefined == true )
		{
			template.genericData.lightsColorDefined = true;
			template.genericData.lightsColorHue = Rad2Deg( m_targetColorAngleLights );
		}
		return template;
	}

	private function ResetCustomizationToVehicle()
	{
		var evt : NewVehicleVisualCustomizationEvent;
		var template : VehicleVisualCustomizationTemplate;
		evt = new NewVehicleVisualCustomizationEvent;
		evt.template = template;
		evt.reset = true;
		m_vehicle.QueueEvent( evt );
	}

	private function ProcessPreviousCustomizationState()
	{
		var template : VehicleVisualCustomizationTemplate;
		template = m_vehicle.GetVehiclePS().GetVehicleVisualCustomizationTemplate();
		if( m_vehicle.GetVehicleComponent().GetIsVehicleVisualCustomizationEnabled() )
		{
			if( !( VehicleVisualCustomizationTemplate.IsValid( template ) ) )
			{
				template = m_player.GetVehicleVisualCustomizationComponent().RetrieveVisualCustomizationForVehicle( m_vehicle.GetRecordID() );
			}
			if( VehicleVisualCustomizationTemplate.IsValid( template ) )
			{
				LoadTemplateData( template );
			}
			else
			{
				m_targetColorAngleA = 0.0;
				m_targetColorASaturation = 1.0;
				m_targetColorABrightness = 1.0;
				m_targetColorAngleB = 0.0;
				m_targetColorBSaturation = 1.0;
				m_targetColorBBrightness = 1.0;
			}
		}
	}

	private function LoadTemplateData( template : VehicleVisualCustomizationTemplate )
	{
		var hsbColor : HSBColor;
		UpdateCurrentTemplate( template );
		if( VehicleVisualCustomizationTemplate.GetType( template ) == VehicleVisualCustomizationType.Unique )
		{
			m_virtualUniqueTemplateGridController.ToggleTemplateInGrid( template, !( m_player.PlayerLastUsedKBM() ) );
			return;
		}
		m_colorADefined = template.genericData.primaryColorDefined;
		m_colorBDefined = template.genericData.secondaryColorDefined;
		m_lightsDefined = template.genericData.lightsColorDefined;
		UpdatePointerVisiblity( m_selectedColorPointerA, m_colorADefined );
		UpdatePointerVisiblity( m_selectedColorPointerB, m_colorBDefined );
		UpdatePointerVisiblity( m_selectedColorPointerLights, m_lightsDefined );
		if( m_colorADefined )
		{
			hsbColor = Color.ColorToHSB( GenericTemplatePersistentData.GetPrimaryColor( template.genericData ) );
			m_targetColorAngleA = Deg2Rad( hsbColor.Hue );
			m_targetColorASaturation = hsbColor.Saturation;
			m_targetColorABrightness = hsbColor.Brightness;
		}
		else
		{
			m_targetColorAngleA = 0.0;
			m_targetColorASaturation = 1.0;
			m_targetColorABrightness = 1.0;
		}
		UpdateControlsState();
		UpdateColor( m_targetColorAngleA, vehicleColorSelectorActiveMode.Primary );
		if( m_colorBDefined )
		{
			hsbColor = Color.ColorToHSB( GenericTemplatePersistentData.GetSecondaryColor( template.genericData ) );
			m_targetColorAngleB = Deg2Rad( hsbColor.Hue );
			m_targetColorBSaturation = hsbColor.Saturation;
			m_targetColorBBrightness = hsbColor.Brightness;
		}
		else if( m_colorADefined )
		{
			hsbColor = Color.ColorToHSB( GenericTemplatePersistentData.GetSecondaryColor( template.genericData ) );
			m_targetColorAngleB = Deg2Rad( hsbColor.Hue );
			m_targetColorBSaturation = hsbColor.Saturation;
			m_targetColorBBrightness = hsbColor.Brightness;
		}
		else
		{
			m_targetColorAngleB = 0.0;
			m_targetColorBSaturation = 1.0;
			m_targetColorBBrightness = 1.0;
		}
		UpdateControlsState();
		UpdateColor( m_targetColorAngleB, vehicleColorSelectorActiveMode.Secondary );
		if( m_lightsDefined )
		{
			m_targetColorAngleLights = Deg2Rad( template.genericData.lightsColorHue );
		}
		else
		{
			m_targetColorAngleLights = 0.0;
		}
		UpdateControlsState();
		UpdateColor( m_targetColorAngleLights, vehicleColorSelectorActiveMode.Lights );
		UpdateLightsPreviewWidgets();
		m_virtualGenericTemplateGridController.ToggleTemplateInGrid( template, !( m_player.PlayerLastUsedKBM() ) );
		SwitchActiveMode( 0, vehicleColorSelectorActiveMode.Primary );
		if( m_activePanel == vehicleColorSelectorActiveTab.Twintone )
		{
			SelectActivePanel( vehicleColorSelectorActiveTab.Main );
		}
	}

	private function UpdateControlsState()
	{
		if( m_colorADefined )
		{
			UpdatePointerPosition( m_targetColorAngleA, m_selectedColorPointerA, false );
		}
		if( m_colorBDefined )
		{
			UpdatePointerPosition( m_targetColorAngleB, m_selectedColorPointerB, false );
		}
		if( m_lightsDefined )
		{
			UpdatePointerPosition( m_targetColorAngleLights, m_selectedColorPointerLights, false );
		}
		UpdateSBBarsForActiveColor();
		ProcessApplyHintVisiblity();
		ProccessSwapColorHintVisibility();
		ProcessResetHintVisiblity();
	}

	private function UpdateLightsPreviewWidgets( optional reset : Bool )
	{
		var color : Color;
		if( reset )
		{
			color = Color( 255, 255, 255, 255 );
		}
		else
		{
			color = m_cachedNewColorLights;
		}
		inkImageRef.SetTintColor( m_lightsPreviewBeamA, Color.ToSRGB( color ) );
		inkImageRef.SetTintColor( m_lightsPreviewBeamB, Color.ToSRGB( color ) );
		if( m_vehicle == ( ( BikeObject )( m_vehicle ) ) )
		{
			inkImageRef.SetTintColor( m_vehiclePreviewLightsBike, Color.ToSRGB( color ) );
		}
		else
		{
			inkImageRef.SetTintColor( m_vehiclePreviewLightsCar, Color.ToSRGB( color ) );
		}
	}

	private function PlayLightsFocusAnimation( val : Bool )
	{
		var animOptions : inkAnimOptions;
		if( val )
		{
			if( m_vehicle == ( ( BikeObject )( m_vehicle ) ) )
			{
				m_LightsFocusProxy = PlayLibraryAnimation( 'ZoomOnLights_Bikes' );
			}
			else
			{
				m_LightsFocusProxy = PlayLibraryAnimation( 'ZoomOnLights' );
			}
		}
		else
		{
			animOptions.playReversed = true;
			if( m_vehicle == ( ( BikeObject )( m_vehicle ) ) )
			{
				m_LightsFocusProxy = PlayLibraryAnimation( 'ZoomOnLights_Bikes', animOptions );
			}
			else
			{
				m_LightsFocusProxy = PlayLibraryAnimation( 'ZoomOnLights', animOptions );
			}
		}
	}

	private function VerifyVehicleValidity() : Bool
	{
		if( !( m_vehicle.GetVehicleComponent().GetIsVehicleVisualCustomizationEnabled() ) )
		{
			SwitchActiveMode( 0, vehicleColorSelectorActiveMode.Lights );
			inkWidgetRef.SetVisible( m_mouseHitColor1Ref, false );
			inkWidgetRef.SetVisible( m_mouseHitColor2Ref, false );
			inkWidgetRef.SetVisible( m_modeChangeNext, false );
			inkWidgetRef.SetVisible( m_modeChangeBack, false );
			inkWidgetRef.SetOpacity( m_colorWheelColorA, 0.0 );
			inkWidgetRef.SetOpacity( m_colorWheelColorB, 0.0 );
			m_unsupportedVehicle = true;
			inkWidgetRef.SetOpacity( m_vehicleUnknownPane, 1.0 );
			return false;
		}
		return true;
	}

	private function UpdateVehicleManufacturer()
	{
		var vehicleManufacturer : VehicleManufacturer_Record;
		var recordID : TweakDBID;
		var record : Vehicle_Record;
		recordID = m_vehicle.GetRecordID();
		record = TweakDBInterface.GetVehicleRecord( recordID );
		vehicleManufacturer = record.Manufacturer();
		if( vehicleManufacturer )
		{
			if( vehicleManufacturer.Type() != gamedataVehicleManufacturer.Rayfield )
			{
				inkImageRef.SetOpacity( m_vehicleBrandIcon, 0.80000001 );
				InkImageUtils.RequestSetImage( this, m_vehicleBrandIcon, "UIIcon." + vehicleManufacturer.EnumName() );
				inkImageRef.SetScale( m_vehicleBrandIcon, Vector2( 1.0, 1.0 ) );
				inkImageRef.SetMargin( m_vehicleBrandIcon, 0.0, 20.0, 0.0, 0.0 );
			}
		}
		else
		{
			inkImageRef.SetOpacity( m_vehicleBrandIcon, 0.0 );
		}
	}

	private function UpdateVehiclePreview()
	{
		var previewRecord : VehicleVisualCustomizationPreviewSetup_Record;
		var recordID : TweakDBID;
		var record : Vehicle_Record;
		var menuType : CName;
		recordID = m_vehicle.GetRecordID();
		record = TweakDBInterface.GetVehicleRecord( recordID );
		previewRecord = record.CustomizationPreview();
		menuType = record.CustomizationMenuType();
		switch( menuType )
		{
			case 'Rayfield':
			{
				inkTextRef.SetLocalizedTextScript( m_windowTitle, "LocKey#96050" );
			}
			break;
			case 'Partner':
			{
				inkTextRef.SetLocalizedTextScript( m_windowTitle, "LocKey#96138" );
			}
			break;
			default:
			{
				inkTextRef.SetLocalizedTextScript( m_windowTitle, "LocKey#96050" );
				PlayLibraryAnimation( 'MenuStyleCracked' );
				PlayCarGlitchEffect();
			}
		}
		if( previewRecord )
		{
			if( m_vehicle == ( ( BikeObject )( m_vehicle ) ) )
			{
				inkWidgetRef.SetScale( m_vehiclePreviewScalingCanvas, Vector2( 1.20000005, 1.20000005 ) );
				InkImageUtils.RequestSetImage( this, m_vehiclePreviewLightsBike, previewRecord.LightsImage().GetID() );
				inkImageRef.SetVisible( m_vehiclePreviewLightsCar, false );
				inkImageRef.SetVisible( m_vehiclePreviewLightsBike, true );
				inkImageRef.SetVisible( m_lightsPreviewBeamA, false );
				inkImageRef.SetVisible( m_lightsPreviewBeamB, false );
			}
			else
			{
				inkWidgetRef.SetScale( m_vehiclePreviewScalingCanvas, Vector2( 0.85000002, 0.85000002 ) );
				InkImageUtils.RequestSetImage( this, m_vehiclePreviewLightsCar, previewRecord.LightsImage().GetID() );
				inkImageRef.SetVisible( m_vehiclePreviewLightsCar, true );
				inkImageRef.SetVisible( m_vehiclePreviewLightsBike, false );
				if( previewRecord.PreviewLeftLight() )
				{
					inkImageRef.SetVisible( m_lightsPreviewBeamA, true );
					inkImageRef.SetMargin( m_lightsPreviewBeamA, 0.0, previewRecord.LeftLightMarginTop(), previewRecord.LeftLightMarginRight(), 0.0 );
				}
				else
				{
					inkImageRef.SetVisible( m_lightsPreviewBeamA, false );
				}
				if( previewRecord.PreviewRightLight() )
				{
					inkImageRef.SetVisible( m_lightsPreviewBeamB, true );
					inkImageRef.SetMargin( m_lightsPreviewBeamB, 0.0, previewRecord.RightLightMarginTop(), previewRecord.RightLightMarginRight(), 0.0 );
				}
				else
				{
					inkImageRef.SetVisible( m_lightsPreviewBeamB, false );
				}
			}
			if( previewRecord.PrimaryImage() )
			{
				InkImageUtils.RequestSetImage( this, m_vehiclePreviewColorA, previewRecord.PrimaryImage().GetID() );
				inkImageRef.SetVisible( m_vehiclePreviewColorA, true );
			}
			else
			{
				inkImageRef.SetVisible( m_vehiclePreviewColorA, false );
			}
			if( previewRecord.SecondaryImage() )
			{
				InkImageUtils.RequestSetImage( this, m_vehiclePreviewColorB, previewRecord.SecondaryImage().GetID() );
				inkImageRef.SetVisible( m_vehiclePreviewColorB, true );
			}
			else
			{
				inkImageRef.SetVisible( m_vehiclePreviewColorB, false );
			}
			if( previewRecord.BackgroundImage() )
			{
				InkImageUtils.RequestSetImage( this, m_vehiclePreviewBackground, previewRecord.BackgroundImage().GetID() );
				inkImageRef.SetVisible( m_vehiclePreviewBackground, true );
			}
			else
			{
				inkImageRef.SetVisible( m_vehiclePreviewBackground, false );
			}
		}
		else
		{
			inkImageRef.SetOpacity( m_vehiclePreviewColorA, 0.0 );
			inkImageRef.SetOpacity( m_vehiclePreviewColorB, 0.0 );
			inkImageRef.SetOpacity( m_vehiclePreviewLightsCar, 0.0 );
			inkImageRef.SetOpacity( m_vehiclePreviewLightsBike, 0.0 );
			inkImageRef.SetOpacity( m_vehiclePreviewBackground, 0.0 );
			inkImageRef.SetOpacity( m_vehiclePreviewForeground, 0.0 );
			inkImageRef.SetVisible( m_lightsPreviewBeamA, false );
			inkImageRef.SetVisible( m_lightsPreviewBeamB, false );
			m_previewDataMissing = true;
		}
	}

	private function PlayCarGlitchEffect()
	{
		var animOptions : inkAnimOptions;
		animOptions.loopType = inkanimLoopType.None;
		animOptions.executionDelay = RandRangeF( m_crackedCarGlitchMinimumInterval, m_crackedCarGlitchMaximumInterval );
		m_carGlitchProxy = PlayLibraryAnimation( 'CarGlitch', animOptions );
		m_carGlitchProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnCarGlitchFinish' );
	}

	protected event OnCarGlitchFinish( proxy : inkAnimProxy )
	{
		proxy.UnregisterFromAllCallbacks( inkanimEventType.OnFinish );
		PlayCarGlitchEffect();
	}

	private function UpdateTwintonePanel()
	{
		var vehicleCustomizationComponent : vehicleVisualCustomizationComponent;
		vehicleCustomizationComponent = m_player.GetVehicleVisualCustomizationComponent();
		inkTextRef.SetLocalizedText( m_vehicleNameText, m_vehicle.GetRecord().DisplayName() );
		m_virtualUniqueTemplateGridController = ( ( TwintoneTemplateGridController )( inkVirtualCompoundRef.GetControllerByType( m_uniquePatternsGrid, 'TwintoneTemplateGridController' ) ) );
		m_virtualGenericTemplateGridController = ( ( TwintoneTemplateGridController )( inkVirtualCompoundRef.GetControllerByType( m_genericPatternsGrid, 'TwintoneTemplateGridController' ) ) );
		m_genericGridInitialized = false;
		m_uniqueGridInitialized = false;
		m_virtualGenericTemplateGridController.SetupTemplatesGrid( VehicleVisualCustomizationType.Generic, vehicleCustomizationComponent );
		m_virtualGenericTemplateGridController.RegisterToCallback( 'OnTemplateToggled', this, 'OnGenericTemplateToggled' );
		m_virtualGenericTemplateGridController.RegisterToCallback( 'OnControllerSelected', this, 'OnGenericControllerSelected' );
		m_virtualGenericTemplateGridController.RegisterToCallback( 'OnAllElementsSpawned', this, 'OnAllGenericElementsSpawned' );
		m_virtualUniqueTemplateGridController.SetupTemplatesGrid( VehicleVisualCustomizationType.Unique, vehicleCustomizationComponent, m_vehicle.GetRecord().TwintoneModelName() );
		m_virtualUniqueTemplateGridController.RegisterToCallback( 'OnTemplateToggled', this, 'OnUniqueTemplateToggled' );
		m_virtualUniqueTemplateGridController.RegisterToCallback( 'OnControllerSelected', this, 'OnUniqueControllerSelected' );
		m_virtualUniqueTemplateGridController.RegisterToCallback( 'OnAllElementsSpawned', this, 'OnAllUniqueElementsSpawned' );
	}

	protected event OnAllGenericElementsSpawned()
	{
		m_genericGridInitialized = true;
		OnBothGridInitialized();
	}

	protected event OnAllUniqueElementsSpawned()
	{
		m_uniqueGridInitialized = true;
		OnBothGridInitialized();
	}

	private function OnBothGridInitialized()
	{
		if( m_genericGridInitialized && m_uniqueGridInitialized )
		{
			m_virtualUniqueTemplateGridController.UnregisterFromCallback( 'OnAllElementsSpawned', this, 'OnAllUniqueElementsSpawned' );
			m_virtualGenericTemplateGridController.UnregisterFromCallback( 'OnAllElementsSpawned', this, 'OnAllGenericElementsSpawned' );
			SetNavigationEnabledInGrids( true );
			if( VehicleVisualCustomizationTemplate.IsValid( m_currentTemplate ) )
			{
				if( VehicleVisualCustomizationTemplate.GetType( m_currentTemplate ) == VehicleVisualCustomizationType.Unique )
				{
					m_virtualUniqueTemplateGridController.ToggleTemplateInGrid( m_currentTemplate, !( m_player.PlayerLastUsedKBM() ) );
				}
				else
				{
					m_virtualGenericTemplateGridController.ToggleTemplateInGrid( m_currentTemplate, !( m_player.PlayerLastUsedKBM() ) );
				}
			}
			SetNavigationEnabledInGrids( m_player.PlayerLastUsedKBM() && m_inputEnabled );
			UpdateNavigationOverride();
		}
	}

	private function UpdateNavigationOverride()
	{
		if( m_virtualUniqueTemplateGridController.GetFirstEmptyIndex() != 0 )
		{
			m_virtualGenericTemplateGridController.OverrideNavigation( inkDiscreteNavigationDirection.Up, inkVirtualCompoundRef.Get( m_uniquePatternsGrid ) );
		}
		else
		{
			m_virtualGenericTemplateGridController.OverrideNavigation( inkDiscreteNavigationDirection.Up, NULL );
		}
		if( m_virtualGenericTemplateGridController.GetFirstEmptyIndex() != 0 )
		{
			m_virtualUniqueTemplateGridController.OverrideNavigation( inkDiscreteNavigationDirection.Down, inkVirtualCompoundRef.Get( m_genericPatternsGrid ) );
		}
		else
		{
			m_virtualUniqueTemplateGridController.OverrideNavigation( inkDiscreteNavigationDirection.Down, NULL );
		}
	}

	private function UnitializeTwintone()
	{
		m_virtualGenericTemplateGridController.UnregisterFromCallback( 'OnTemplateToggled', this, 'OnGenericTemplateToggled' );
		m_virtualUniqueTemplateGridController.UnregisterFromCallback( 'OnTemplateToggled', this, 'OnUniqueTemplateToggled' );
		m_virtualGenericTemplateGridController.ResetTemplatesGrid();
		m_virtualUniqueTemplateGridController.ResetTemplatesGrid();
	}

	private function SelectActivePanel( nextPanel : vehicleColorSelectorActiveTab )
	{
		if( nextPanel == m_activePanel )
		{
			return;
		}
		if( m_mainPanelAnimProxy.IsPlaying() )
		{
			m_mainPanelAnimProxy.GotoEndAndStop();
		}
		if( m_twintonePanelAnimProxy.IsPlaying() )
		{
			m_twintonePanelAnimProxy.GotoEndAndStop();
		}
		if( nextPanel == vehicleColorSelectorActiveTab.Main )
		{
			if( m_activePanel != vehicleColorSelectorActiveTab.Both )
			{
				m_mainPanelAnimProxy = PlayLibraryAnimation( 'MainPanelOpen' );
			}
			SetNavigationEnabledInGrids( false );
			inkWidgetRef.SetVisible( m_changeTabRightHint, true );
			inkWidgetRef.SetVisible( m_changeTabLeftHint, true );
			m_twintonePanelAnimProxy = PlayLibraryAnimation( 'TwintonePanelClose' );
		}
		else if( nextPanel == vehicleColorSelectorActiveTab.Twintone )
		{
			if( m_activePanel != vehicleColorSelectorActiveTab.Both )
			{
				m_twintonePanelAnimProxy = PlayLibraryAnimation( 'TwintonePanelOpen' );
			}
			m_mainPanelAnimProxy = PlayLibraryAnimation( 'MainPanelClose' );
			inkWidgetRef.SetVisible( m_changeTabRightHint, true );
			inkWidgetRef.SetVisible( m_changeTabLeftHint, true );
			SetNavigationEnabledInGrids( true );
			SelectDefaultTemplateInGrids();
			SetNavigationEnabledInGrids( false );
		}
		else if( nextPanel == vehicleColorSelectorActiveTab.Both )
		{
			if( m_activePanel != vehicleColorSelectorActiveTab.Main )
			{
				m_mainPanelAnimProxy = PlayLibraryAnimation( 'MainPanelOpen' );
			}
			if( m_activePanel != vehicleColorSelectorActiveTab.Twintone )
			{
				m_twintonePanelAnimProxy = PlayLibraryAnimation( 'TwintonePanelOpen' );
			}
			inkWidgetRef.SetVisible( m_changeTabRightHint, false );
			inkWidgetRef.SetVisible( m_changeTabLeftHint, false );
			SetNavigationEnabledInGrids( true );
		}
		m_activePanel = nextPanel;
	}

	private function SelectDefaultTemplateInGrids()
	{
		if( !( m_virtualUniqueTemplateGridController.TryToFocusElement( true ) ) )
		{
			if( !( m_virtualGenericTemplateGridController.TryToFocusElement( true ) ) )
			{
				if( !( m_virtualUniqueTemplateGridController.TryToFocusElement( false ) ) )
				{
					m_virtualGenericTemplateGridController.TryToFocusElement( false );
				}
			}
		}
	}

	protected event OnGenericTemplateToggled( widget : weak< inkWidget > )
	{
		var template : VehicleVisualCustomizationTemplate;
		if( !( m_virtualGenericTemplateGridController.GetToggledController() ) )
		{
			return false;
		}
		template = m_virtualGenericTemplateGridController.GetToggledController().GetCurrentData().m_template;
		if( VehicleVisualCustomizationTemplate.IsValid( template ) )
		{
			m_virtualUniqueTemplateGridController.UnToggleCurrentItem();
			m_toggledTemplate = template;
			LoadTemplateData( template );
		}
	}

	protected event OnUniqueTemplateToggled( widget : weak< inkWidget > )
	{
		var template : VehicleVisualCustomizationTemplate;
		if( !( m_virtualUniqueTemplateGridController.GetToggledController() ) )
		{
			return false;
		}
		template = m_virtualUniqueTemplateGridController.GetToggledController().GetCurrentData().m_template;
		if( VehicleVisualCustomizationTemplate.IsValid( template ) )
		{
			m_virtualGenericTemplateGridController.UnToggleCurrentItem();
			m_toggledTemplate = template;
			LoadTemplateData( template );
			Apply();
		}
	}

	protected event OnGenericControllerSelected( widget : weak< inkWidget > )
	{
		if( m_virtualGenericTemplateGridController.GetSelectedController() )
		{
			m_virtualUniqueTemplateGridController.UnSelectCurrentItem();
			inkTextRef.SetLocalizedTextScript( m_twintoneApplyHintText, "LocKey#6890" );
		}
	}

	protected event OnUniqueControllerSelected( widget : weak< inkWidget > )
	{
		if( m_virtualUniqueTemplateGridController.GetSelectedController() )
		{
			m_virtualGenericTemplateGridController.UnSelectCurrentItem();
			inkTextRef.SetLocalizedTextScript( m_twintoneApplyHintText, "LocKey#96133" );
		}
	}

	private function SaveProfile() : Bool
	{
		var templateToSave : VehicleVisualCustomizationTemplate;
		var wrappedTemplate : WrappedTemplateData;
		var vehicleCustomizationComponent : vehicleVisualCustomizationComponent;
		var saveIndex : Uint32;
		var previousNavigationState : Bool;
		templateToSave = PackCurrentConfigurationToTemplate();
		if( !( VehicleVisualCustomizationTemplate.IsValid( templateToSave ) ) )
		{
			return false;
		}
		vehicleCustomizationComponent = m_player.GetVehicleVisualCustomizationComponent();
		if( !( vehicleCustomizationComponent ) || !( m_vehicle ) )
		{
			return false;
		}
		if( !( vehicleCustomizationComponent.CanStoreVisualCustomizationTemplateType( VehicleVisualCustomizationType.Generic ) ) || vehicleCustomizationComponent.HasVisualCustomizationTemplateStored( templateToSave ) )
		{
			return false;
		}
		vehicleCustomizationComponent.StoreVisualCustomizationTemplate( templateToSave, m_vehicle.GetRecord().TwintoneModelName() );
		saveIndex = m_virtualGenericTemplateGridController.GetFirstEmptyIndex();
		wrappedTemplate = new WrappedTemplateData;
		wrappedTemplate.m_parentGridController = m_virtualGenericTemplateGridController;
		wrappedTemplate.m_indexInList = saveIndex;
		wrappedTemplate.m_canAcceptSave = true;
		wrappedTemplate.m_template = templateToSave;
		m_virtualGenericTemplateGridController.UpdateTemplateInGrid( wrappedTemplate );
		previousNavigationState = GetNavigationEnabledInGrids();
		SetNavigationEnabledInGrids( true );
		m_virtualGenericTemplateGridController.ToggleTemplateInGrid( templateToSave, !( m_player.PlayerLastUsedKBM() ) );
		SetNavigationEnabledInGrids( previousNavigationState );
		UpdateNavigationOverride();
		return true;
	}

	private function DeleteProfile() : Bool
	{
		var vehicleCustomizationComponent : vehicleVisualCustomizationComponent;
		var deletedTemplate : VehicleVisualCustomizationTemplate;
		vehicleCustomizationComponent = m_player.GetVehicleVisualCustomizationComponent();
		if( !( vehicleCustomizationComponent ) || !( m_vehicle ) )
		{
			return false;
		}
		if( m_virtualUniqueTemplateGridController.GetSelectedController() )
		{
			deletedTemplate = m_virtualUniqueTemplateGridController.DeleteSelectedTemplateInGrid( !( m_player.PlayerLastUsedKBM() ) );
			vehicleCustomizationComponent.DeleteVisualCustomizationTemplate( deletedTemplate, m_vehicle.GetRecord().TwintoneModelName() );
			return true;
		}
		else if( m_virtualGenericTemplateGridController.GetSelectedController() )
		{
			deletedTemplate = m_virtualGenericTemplateGridController.DeleteSelectedTemplateInGrid( !( m_player.PlayerLastUsedKBM() ) );
			vehicleCustomizationComponent.DeleteVisualCustomizationTemplate( deletedTemplate );
			return true;
		}
		return false;
	}

	private function CanDeleteProfile() : Bool
	{
		var canDeleteProfile : Bool;
		canDeleteProfile = false;
		if( m_virtualUniqueTemplateGridController.GetSelectedController() )
		{
			if( VehicleVisualCustomizationTemplate.IsValid( m_virtualUniqueTemplateGridController.GetSelectedController().GetCurrentData().m_template ) )
			{
				canDeleteProfile = true;
			}
		}
		else if( m_virtualGenericTemplateGridController.GetSelectedController() )
		{
			if( VehicleVisualCustomizationTemplate.IsValid( m_virtualGenericTemplateGridController.GetSelectedController().GetCurrentData().m_template ) )
			{
				canDeleteProfile = true;
			}
		}
		return canDeleteProfile;
	}

	private function PlayAnimation( animationName : CName, optional playbackOptions : inkAnimOptions )
	{
		if( m_animProxy && m_animProxy.IsPlaying() )
		{
			m_animProxy.Stop( true );
		}
		m_animProxy = PlayLibraryAnimation( animationName, playbackOptions );
	}

	private function PlayFailSound()
	{
		GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_menu_item_crafting_fail' );
	}

	protected function SetTimeDilatation( enable : Bool )
	{
		var uiSystem : UISystem;
		uiSystem = GameInstance.GetUISystem( m_player.GetGame() );
		if( enable )
		{
			TimeDilationHelper.SetTimeDilationWithProfile( GetPlayerControlledObject(), m_timeDilationProfile, true, true );
			uiSystem.PushGameContext( UIGameContext.ModalPopup );
			uiSystem.RequestNewVisualState( 'inkModalPopupState' );
			PopupStateUtils.SetBackgroundBlur( this, true );
		}
		else
		{
			TimeDilationHelper.SetTimeDilationWithProfile( GetPlayerControlledObject(), m_timeDilationProfile, false, false );
			uiSystem.PopGameContext( UIGameContext.ModalPopup );
			uiSystem.RestorePreviousVisualState( 'inkModalPopupState' );
			PopupStateUtils.SetBackgroundBlur( this, false );
		}
	}

	private function ProcessFakeUpdate( on : Bool )
	{
		var anim : inkAnimDef;
		var alphaInterpolator : inkAnimTransparency;
		var animOptions : inkAnimOptions;
		if( on )
		{
			anim = new inkAnimDef;
			alphaInterpolator = new inkAnimTransparency;
			alphaInterpolator.SetDuration( 0.0001 );
			alphaInterpolator.SetStartTransparency( 1.0 );
			alphaInterpolator.SetEndTransparency( 1.0 );
			alphaInterpolator.SetType( inkanimInterpolationType.Linear );
			alphaInterpolator.SetMode( inkanimInterpolationMode.EasyIn );
			anim.AddInterpolator( alphaInterpolator );
			animOptions.playReversed = false;
			animOptions.executionDelay = 0.0;
			animOptions.loopType = inkanimLoopType.Cycle;
			animOptions.loopInfinite = true;
			m_fakeUpdateProxy = inkWidgetRef.PlayAnimationWithOptions( m_CursorRootContainerRef, anim, animOptions );
			m_fakeUpdateProxy.RegisterToCallback( inkanimEventType.OnEndLoop, this, 'OnFakeUpdate' );
		}
		else
		{
			if( m_fakeUpdateProxy.IsPlaying() )
			{
				m_fakeUpdateProxy.Stop();
				m_fakeUpdateProxy.UnregisterFromCallback( inkanimEventType.OnEndLoop, this, 'OnFakeUpdate' );
			}
		}
	}

	private function ProcessApplyHintVisiblity()
	{
		inkWidgetRef.SetOpacity( m_applyContainerWidget, ( ( m_vehicle.GetVehicleComponent().CanApplyTemplateOnVehicle( m_currentTemplate, true ) ) ? ( 1.0 ) : ( 0.25 ) ) );
	}

	private function ProcessResetHintVisiblity()
	{
		inkWidgetRef.SetOpacity( m_resetContainerWidget, ( ( VehicleVisualCustomizationTemplate.IsValid( m_vehicle.GetVehiclePS().GetVehicleVisualCustomizationTemplate() ) ) ? ( 1.0 ) : ( 0.25 ) ) );
	}

	private function ProccessSwapColorHintVisibility()
	{
		inkWidgetRef.SetOpacity( m_swapColorHint, ( ( m_colorADefined && m_colorBDefined ) ? ( 1.0 ) : ( 0.25 ) ) );
	}

	private function ProcessSaveProfileHintVisibility()
	{
		var vehicleCustomizationComponent : vehicleVisualCustomizationComponent;
		var templateToSave : VehicleVisualCustomizationTemplate;
		var canSaveProfile : Bool;
		vehicleCustomizationComponent = m_player.GetVehicleVisualCustomizationComponent();
		templateToSave = PackCurrentConfigurationToTemplate();
		if( !( vehicleCustomizationComponent ) )
		{
			canSaveProfile = false;
		}
		else
		{
			canSaveProfile = ( VehicleVisualCustomizationTemplate.IsValid( templateToSave ) && vehicleCustomizationComponent.CanStoreVisualCustomizationTemplateType( VehicleVisualCustomizationType.Generic ) ) && !( vehicleCustomizationComponent.HasVisualCustomizationTemplateStored( templateToSave ) );
		}
		inkWidgetRef.SetOpacity( m_saveProfileHint, ( ( canSaveProfile ) ? ( 1.0 ) : ( 0.25 ) ) );
	}

	private function ProcessDeleteProfileHintVisibility()
	{
		inkWidgetRef.SetOpacity( m_deleteProfileHint, ( ( CanDeleteProfile() ) ? ( 1.0 ) : ( 0.25 ) ) );
	}

}

