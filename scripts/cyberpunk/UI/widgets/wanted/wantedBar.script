class WantedBarGameController extends inkHUDGameController
{
	private const editable var starsWidget : array< inkWidgetRef >;
	private var m_wantedBlackboard : weak< IBlackboard >;
	private var m_wantedBlackboardDef : UI_WantedBarDef;
	private var m_wantedCallbackID : CallbackHandle;
	private var m_animProxy : inkAnimProxy;
	private var m_attentionAnimProxy : inkAnimProxy;
	private var m_bountyStarAnimProxy : array< inkAnimProxy >;
	private var m_bountyAnimProxy : inkAnimProxy;
	private var m_animOptionsLoop : inkAnimOptions;
	private var m_numOfStar : Int32;
	private var m_wantedLevel : Int32;
	private var m_rootWidget : weak< inkWidget >;
	private const var WANTED_TIER_1 : Float;
	default WANTED_TIER_1 = 1.0f;
	private const var WANTED_MIN : Float;
	default WANTED_MIN = 0.1f;

	protected event OnInitialize()
	{
		m_rootWidget = GetRootWidget();
		m_wantedBlackboardDef = GetAllBlackboardDefs().UI_WantedBar;
		m_wantedBlackboard = GetBlackboardSystem().Get( m_wantedBlackboardDef );
		m_wantedCallbackID = m_wantedBlackboard.RegisterListenerInt( m_wantedBlackboardDef.CurrentWantedLevel, this, 'OnWantedDataChange', true );
		m_numOfStar = starsWidget.Size();
		m_bountyStarAnimProxy.Resize( m_numOfStar );
	}

	protected event OnUninitialize()
	{
		m_wantedBlackboard.UnregisterDelayedListener( m_wantedBlackboardDef.CurrentWantedLevel, m_wantedCallbackID );
	}

	protected event OnWantedDataChange( value : Int32 )
	{
		if( !( m_rootWidget.IsVisible() ) )
		{
			m_animProxy = PlayLibraryAnimation( 'stars_intro' );
			m_attentionAnimProxy = PlayLibraryAnimation( 'crime_reported' );
		}
		if( m_rootWidget.IsVisible() )
		{
			m_attentionAnimProxy = PlayLibraryAnimation( 'crime_reported' );
		}
		UpdateWantedData( value );
	}

	public function UpdateWantedData( newWantedLevel : Int32 )
	{
		var i : Int32;
		for( i; i < m_numOfStar; i += 1 )
		{
			if( i < newWantedLevel )
			{
				( ( StarController )( inkWidgetRef.GetController( starsWidget[ i ] ) ) ).SetBounty( true );
			}
			else if( i > newWantedLevel )
			{
				( ( StarController )( inkWidgetRef.GetController( starsWidget[ i ] ) ) ).SetBounty( false );
			}
			if( ( i > m_wantedLevel ) && ( i <= newWantedLevel ) )
			{
				m_bountyAnimProxy.GotoEndAndStop();
				m_bountyStarAnimProxy[ i ].GotoEndAndStop();
				m_bountyStarAnimProxy[ i ] = PlayLibraryAnimation( 'bounty_intro' + StringToName( ( ( String )( i ) ) ) );
			}
		}
		m_wantedLevel = newWantedLevel;
		m_rootWidget.SetVisible( m_wantedLevel > 0 );
	}

	private function StopBountyAnims()
	{
		var i : Int32;
		m_bountyAnimProxy.GotoEndAndStop();
		for( i; i < m_numOfStar; i += 1 )
		{
			m_bountyStarAnimProxy[ i ].GotoEndAndStop();
		}
	}

	public function FlashAndHide()
	{
		StopBountyAnims();
		if( m_rootWidget.IsVisible() )
		{
			m_bountyAnimProxy = PlayLibraryAnimation( 'flash_and_hide' );
			m_bountyAnimProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnWantedBarHidden' );
		}
	}

	public function StartFlash()
	{
		StopBountyAnims();
		m_animOptionsLoop.loopInfinite = true;
		m_animOptionsLoop.loopType = inkanimLoopType.Cycle;
		m_bountyAnimProxy = PlayLibraryAnimation( 'flash', m_animOptionsLoop );
	}

	public function EndFlash()
	{
		StopBountyAnims();
		m_animOptionsLoop.loopInfinite = false;
		m_animOptionsLoop.loopType = inkanimLoopType.Cycle;
		m_bountyAnimProxy = PlayLibraryAnimation( 'flash', m_animOptionsLoop );
		m_bountyAnimProxy.Stop();
	}

	public function FlashAndShow()
	{
		StopBountyAnims();
		m_bountyAnimProxy = PlayLibraryAnimation( 'stars_intro' );
	}

	protected event OnWantedBarHidden( animationProxy : inkAnimProxy )
	{
		StopBountyAnims();
		m_rootWidget.SetVisible( false );
	}

	protected event OnWantedBarStartFlashEvent( evt : WantedBarStartFlashEvent )
	{
		StartFlash();
	}

	protected event OnWantedBarEndFlashEventEvent( evt : WantedBarEndFlashEvent )
	{
		EndFlash();
	}

	protected event OnWantedBarFlashAndHideEventEvent( evt : WantedBarFlashAndHideEvent )
	{
		FlashAndHide();
	}

	protected event OnWantedBarFlashAndShowEvent( evt : WantedBarFlashAndShowEvent )
	{
		FlashAndShow();
	}

	public static function FlashWantedBar( context : GameInstance )
	{
		var evt : WantedBarStartFlashEvent;
		if( GameInstance.IsValid( context ) )
		{
			evt = new WantedBarStartFlashEvent;
			GameInstance.GetPlayerSystem( context ).GetLocalPlayerControlledGameObject().QueueEvent( evt );
		}
	}

	public static function EndFlashWantedBar( context : GameInstance )
	{
		var evt : WantedBarEndFlashEvent;
		if( GameInstance.IsValid( context ) )
		{
			evt = new WantedBarEndFlashEvent;
			GameInstance.GetPlayerSystem( context ).GetLocalPlayerControlledGameObject().QueueEvent( evt );
		}
	}

	public static function FlashAndHideWantedBar( context : GameInstance )
	{
		var evt : WantedBarFlashAndHideEvent;
		if( GameInstance.IsValid( context ) )
		{
			evt = new WantedBarFlashAndHideEvent;
			GameInstance.GetPlayerSystem( context ).GetLocalPlayerControlledGameObject().QueueEvent( evt );
		}
	}

	public static function FlashAndShowWantedBar( context : GameInstance )
	{
		var evt : WantedBarFlashAndShowEvent;
		if( GameInstance.IsValid( context ) )
		{
			evt = new WantedBarFlashAndShowEvent;
			GameInstance.GetPlayerSystem( context ).GetLocalPlayerControlledGameObject().QueueEvent( evt );
		}
	}

}

class StarController extends inkLogicController
{
	private editable var bountyBadgeWidget : inkWidgetRef;

	public function SetBounty( arg : Bool )
	{
		inkWidgetRef.SetVisible( bountyBadgeWidget, arg );
	}

}

class WantedBarStartFlashEvent extends Event
{
}

class WantedBarEndFlashEvent extends Event
{
}

class WantedBarFlashAndHideEvent extends Event
{
}

class WantedBarFlashAndShowEvent extends Event
{
}

