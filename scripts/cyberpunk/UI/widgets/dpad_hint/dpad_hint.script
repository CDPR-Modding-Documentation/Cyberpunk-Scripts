class DPADActionPerformed extends Event
{
	var ownerID : EntityID;
	var state : EUIActionState;
	var stateInt : Int32;
	var action : EHotkey;
	var successful : Bool;
}

class HotkeysWidgetController extends inkHUDGameController
{
	private editable var m_hotkeysList : inkHorizontalPanelRef;
	private editable var m_utilsList : inkHorizontalPanelRef;
	private editable var m_phone : weak< inkWidget >;
	private editable var m_car : weak< inkWidget >;
	private editable var m_consumables : weak< inkWidget >;
	private editable var m_gadgets : weak< inkWidget >;
	private var m_player : weak< PlayerPuppet >;
	private var m_root : weak< inkCompoundWidget >;
	private var m_gameInstance : GameInstance;
	private var m_fact1ListenerId : Uint32;
	private var m_fact2ListenerId : Uint32;

	protected event OnInitialize()
	{
		m_player = ( ( PlayerPuppet )( GetOwnerEntity() ) );
		m_root = ( ( inkCompoundWidget )( GetRootWidget() ) );
		if( !( m_player ) )
		{
			return false;
		}
		m_phone = SpawnFromLocal( inkHorizontalPanelRef.Get( m_utilsList ), 'DPAD_DOWN' );
		m_car = SpawnFromLocal( inkHorizontalPanelRef.Get( m_utilsList ), 'DPAD_RIGHT' );
		m_consumables = SpawnFromLocal( inkHorizontalPanelRef.Get( m_hotkeysList ), 'DPAD_UP' );
		m_gadgets = SpawnFromLocal( inkHorizontalPanelRef.Get( m_hotkeysList ), 'RB' );
		m_fact1ListenerId = GameInstance.GetQuestsSystem( m_player.GetGame() ).RegisterListener( 'dpad_hints_visibility_enabled', this, 'OnConsumableTutorial' );
		m_fact2ListenerId = GameInstance.GetQuestsSystem( m_player.GetGame() ).RegisterListener( 'q000_started', this, 'OnGameStarted' );
		ResolveVisibility();
		m_gameInstance = GetPlayerControlledObject().GetGame();
	}

	protected event OnUninitialize()
	{
		GameInstance.GetQuestsSystem( m_gameInstance ).UnregisterListener( 'dpad_hints_visibility_enabled', m_fact1ListenerId );
		GameInstance.GetQuestsSystem( m_gameInstance ).UnregisterListener( 'q000_started', m_fact2ListenerId );
	}

	protected event OnPlayerAttach( playerPuppet : GameObject )
	{
		var controlledPuppetRecordID : TweakDBID;
		var controlledPuppet : weak< gamePuppetBase >;
		controlledPuppet = ( ( gamePuppetBase )( GetPlayer( m_gameInstance ) ) );
		if( controlledPuppet != NULL )
		{
			controlledPuppetRecordID = controlledPuppet.GetRecordID();
			if( controlledPuppetRecordID == T"Character.johnny_replacer" )
			{
				inkHorizontalPanelRef.SetMargin( m_hotkeysList, inkMargin( 84.0, 0.0, 0.0, 0.0 ) );
			}
			else
			{
				inkHorizontalPanelRef.SetMargin( m_hotkeysList, inkMargin( 331.0, 0.0, 0.0, 0.0 ) );
			}
		}
		else
		{
			inkHorizontalPanelRef.SetMargin( m_hotkeysList, inkMargin( 331.0, 0.0, 0.0, 0.0 ) );
		}
	}

	public function OnConsumableTutorial( val : Int32 )
	{
		ResolveVisibility();
	}

	public export function OnGameStarted( val : Int32 )
	{
		ResolveVisibility();
	}

	private function ResolveVisibility()
	{
		if( GameStarted() && !( TutorialActivated() ) )
		{
			GetRootWidget().SetVisible( false );
			return;
		}
		if( GameStarted() && TutorialActivated() )
		{
			GetRootWidget().SetVisible( true );
			return;
		}
		if( !( GameStarted() ) )
		{
			if( !( TutorialActivated() ) )
			{
				GetRootWidget().SetVisible( true );
			}
		}
	}

	private function GameStarted() : Bool
	{
		var qs : QuestsSystem;
		qs = GameInstance.GetQuestsSystem( m_player.GetGame() );
		if( qs )
		{
			return qs.GetFact( 'q000_started' );
		}
		return false;
	}

	private function TutorialActivated() : Bool
	{
		var qs : QuestsSystem;
		qs = GameInstance.GetQuestsSystem( m_player.GetGame() );
		if( qs )
		{
			return qs.GetFact( 'dpad_hints_visibility_enabled' );
		}
		return false;
	}

}

enum EUIActionState
{
	Invalid = 0,
	DEFAULT = 1,
	STARTED = 2,
	COMPLETED = 3,
	ABORTED = 4,
}

