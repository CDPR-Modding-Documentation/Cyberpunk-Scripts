enum EUIActionState
{
	Invalid = 0,
	DEFAULT = 1,
	STARTED = 2,
	COMPLETED = 3,
	ABORTED = 4,
}

class DPADActionPerformed extends Event
{
	var ownerID : EntityID;
	var state : EUIActionState;
	var stateInt : Int32;
	var action : EHotkey;
	var successful : Bool;
}

class HotkeyRadioStatusListener extends ScriptStatusEffectListener
{
	var m_radioWidgetController : weak< HotkeyRadioWidgetController >;

	public function Init( radioWidgetController : weak< HotkeyRadioWidgetController > )
	{
		m_radioWidgetController = radioWidgetController;
	}

	public export virtual function OnStatusEffectApplied( statusEffect : weak< StatusEffect_Record > )
	{
		m_radioWidgetController.RefreshStatusEffect();
	}

	public export virtual function OnStatusEffectRemoved( statusEffect : weak< StatusEffect_Record > )
	{
		m_radioWidgetController.RefreshStatusEffect();
	}

}

class HotkeyRadioWidgetController extends gameuiNewPhoneRelatedHUDGameController
{
	private editable var m_container : inkCompoundRef;
	private editable var m_DpadHintLibraryPath : inkWidgetLibraryReference;
	private var m_IsInDriverCombat : Bool;
	private var m_statusListener : HotkeyRadioStatusListener;

	protected event OnInitialize()
	{
		SpawnFromExternal( inkCompoundRef.Get( m_container ), inkWidgetLibraryResource.GetPath( m_DpadHintLibraryPath.widgetLibrary ), 'radio' );
	}

	protected event OnPlayerAttach( player : GameObject )
	{
		super.OnPlayerAttach( player );
		RegisterFactVisibilityListeners();
		RegisterStatusEffectListeners();
		RefreshStatusEffect();
	}

	private function RegisterStatusEffectListeners()
	{
		m_statusListener = new HotkeyRadioStatusListener;
		m_statusListener.Init( this );
		GameInstance.GetStatusEffectSystem( m_player.GetGame() ).RegisterListener( m_player.GetEntityID(), m_statusListener );
	}

	protected event OnPlayerDetach( player : GameObject )
	{
		UnregisterFactVisibilityListeners();
		m_statusListener = NULL;
	}

	public function RefreshStatusEffect()
	{
		m_IsInDriverCombat = StatusEffectSystem.ObjectHasStatusEffect( m_player, T"BaseStatusEffect.DriverCombat" );
		UpdateVisibility();
		ResolveState();
	}

	protected override function IsDerivedHUDVisible() : Bool
	{
		return !( m_IsInDriverCombat );
	}

	protected function ResolveState()
	{
		if( !( m_IsInDriverCombat ) )
		{
			GetRootWidget().SetState( 'Default' );
		}
		else
		{
			GetRootWidget().SetState( 'Unavailable' );
		}
	}

}

class HotkeyConsumableWidgetController extends gameuiNewPhoneRelatedHUDGameController
{
	private editable var m_container : inkCompoundRef;
	private editable var m_DpadHintLibraryPath : inkWidgetLibraryReference;

	protected event OnInitialize()
	{
		SpawnFromExternal( inkCompoundRef.Get( m_container ), inkWidgetLibraryResource.GetPath( m_DpadHintLibraryPath.widgetLibrary ), 'consumable' );
		SpawnFromExternal( inkCompoundRef.Get( m_container ), inkWidgetLibraryResource.GetPath( m_DpadHintLibraryPath.widgetLibrary ), 'gadgetVehicle' );
		SpawnFromExternal( inkCompoundRef.Get( m_container ), inkWidgetLibraryResource.GetPath( m_DpadHintLibraryPath.widgetLibrary ), 'cyberware' );
	}

	protected event OnPlayerAttach( player : GameObject )
	{
		super.OnPlayerAttach( player );
		RegisterFactVisibilityListeners();
		UpdateVisibility();
	}

	protected event OnPlayerDetach( player : GameObject )
	{
		UnregisterFactVisibilityListeners();
	}

}

class HotkeysWidgetController extends gameuiNewPhoneRelatedHUDGameController
{
	private editable var m_phoneSlot : inkCompoundRef;
	private editable var m_carSlot : inkCompoundRef;
	private editable var m_dpadHintsPanel : inkCompoundRef;
	private editable var m_phone : weak< inkWidget >;
	private editable var m_car : weak< inkWidget >;
	private editable var m_consumables : weak< inkWidget >;
	private editable var m_gadgets : weak< inkWidget >;
	private editable var m_cyberware : weak< inkWidget >;
	private editable var m_leeroy : weak< inkWidget >;
	private editable var m_timeBank : weak< inkWidget >;
	private var m_remoteControlledVehicleDataCallback : CallbackHandle;
	private var m_berserkEnabledBBId : CallbackHandle;
	private var m_isRemoteControllingVehicle : Bool;

	protected event OnInitialize()
	{
		if( isNewPhoneEnabled )
		{
			m_car = SpawnFromLocal( inkCompoundRef.Get( m_carSlot ), 'vehicle' );
			m_consumables = SpawnFromLocal( inkCompoundRef.Get( m_dpadHintsPanel ), 'consumable' );
			m_gadgets = SpawnFromLocal( inkCompoundRef.Get( m_dpadHintsPanel ), 'gadget' );
		}
		else
		{
			m_phone = SpawnFromLocal( inkCompoundRef.Get( m_phoneSlot ), 'DPAD_DOWN' );
			m_car = SpawnFromLocal( inkCompoundRef.Get( m_carSlot ), 'DPAD_RIGHT' );
			m_consumables = SpawnFromLocal( inkCompoundRef.Get( m_dpadHintsPanel ), 'DPAD_UP' );
			m_gadgets = SpawnFromLocal( inkCompoundRef.Get( m_dpadHintsPanel ), 'RB' );
		}
		m_cyberware = SpawnFromLocal( inkCompoundRef.Get( m_dpadHintsPanel ), 'cyberware' );
		m_leeroy = SpawnFromLocal( inkCompoundRef.Get( m_dpadHintsPanel ), 'leeroy' );
		m_timeBank = SpawnFromLocal( inkCompoundRef.Get( m_dpadHintsPanel ), 'timeBank' );
		m_consumables.SetName( 'consumable' );
		m_gadgets.SetName( 'gadget' );
		m_cyberware.SetName( 'cyberware' );
		m_leeroy.SetName( 'leeroy' );
		m_timeBank.SetName( 'timeBank' );
	}

	protected event OnPlayerAttach( player : GameObject )
	{
		super.OnPlayerAttach( player );
		RegisterFactVisibilityListeners();
		RegisterBlackboardListeners();
		UpdateVisibility();
		HandleBerserkActive( StatusEffectSystem.ObjectHasStatusEffectWithTag( m_player, 'BerserkBuff' ) );
	}

	protected event OnPlayerDetach( player : GameObject )
	{
		UnregisterFactVisibilityListeners();
		UnregisterBlackboardListeners();
	}

	private function RegisterBlackboardListeners()
	{
		var blackboardSystem : BlackboardSystem;
		var uiGameBlackboard : weak< IBlackboard >;
		var uiActiveVehicleBlackboard : weak< IBlackboard >;
		blackboardSystem = GetBlackboardSystem();
		uiGameBlackboard = blackboardSystem.Get( GetAllBlackboardDefs().UIGameData );
		uiActiveVehicleBlackboard = blackboardSystem.Get( GetAllBlackboardDefs().UI_ActiveVehicleData );
		m_berserkEnabledBBId = uiGameBlackboard.RegisterDelayedListenerBool( GetAllBlackboardDefs().UIGameData.BerserkActive, this, 'OnBerserkActive' );
		m_remoteControlledVehicleDataCallback = uiActiveVehicleBlackboard.RegisterListenerVariant( GetAllBlackboardDefs().UI_ActiveVehicleData.RemoteControlledVehicleData, this, 'OnRemoteControlledVehicleChanged', true );
	}

	private function UnregisterBlackboardListeners()
	{
		var blackboardSystem : BlackboardSystem;
		var uiGameBlackboard : weak< IBlackboard >;
		var uiActiveVehicleBlackboard : weak< IBlackboard >;
		blackboardSystem = GetBlackboardSystem();
		uiGameBlackboard = blackboardSystem.Get( GetAllBlackboardDefs().UIGameData );
		uiActiveVehicleBlackboard = blackboardSystem.Get( GetAllBlackboardDefs().UI_ActiveVehicleData );
		if( m_berserkEnabledBBId )
		{
			uiGameBlackboard.UnregisterListenerBool( GetAllBlackboardDefs().UIGameData.BerserkActive, m_berserkEnabledBBId );
		}
		if( m_remoteControlledVehicleDataCallback )
		{
			uiActiveVehicleBlackboard.UnregisterListenerVariant( GetAllBlackboardDefs().UI_ActiveVehicleData.RemoteControlledVehicleData, m_remoteControlledVehicleDataCallback );
		}
	}

	protected override function IsDerivedHUDVisible() : Bool
	{
		return !( m_isRemoteControllingVehicle );
	}

	protected event OnRemoteControlledVehicleChanged( value : Variant )
	{
		var data : RemoteControlDrivingUIData;
		data = ( ( RemoteControlDrivingUIData )value );
		m_isRemoteControllingVehicle = data.remoteControlledVehicle != NULL;
		UpdateVisibility();
	}

	protected event OnBerserkActive( value : Bool )
	{
		HandleBerserkActive( value );
	}

	private function HandleBerserkActive( isBerserkActive : Bool )
	{
		if( isBerserkActive )
		{
			m_car.SetVisible( false );
			m_consumables.SetVisible( false );
			m_gadgets.SetVisible( false );
		}
		else
		{
			m_car.SetVisible( true );
			SendBlackboardHotkeyUpdates();
		}
	}

	private function SendBlackboardHotkeyUpdates()
	{
		var uiHotkeyBlackboard : weak< IBlackboard >;
		uiHotkeyBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_Hotkeys );
		if( uiHotkeyBlackboard )
		{
			uiHotkeyBlackboard.SetVariant( GetAllBlackboardDefs().UI_Hotkeys.ModifiedHotkey, EHotkey.DPAD_UP, true );
			uiHotkeyBlackboard.SetVariant( GetAllBlackboardDefs().UI_Hotkeys.ModifiedHotkey, EHotkey.RB, true );
		}
	}

}

