class HotkeyWidgetStatsListener extends ScriptStatusEffectListener
{
	private var m_controller : weak< GenericHotkeyController >;

	public function Init( controller : GenericHotkeyController )
	{
		m_controller = controller;
	}

	public export virtual function OnStatusEffectApplied( statusEffect : weak< StatusEffect_Record > )
	{
		m_controller.OnRestrictionUpdate( statusEffect );
	}

	public export virtual function OnStatusEffectRemoved( statusEffect : weak< StatusEffect_Record > )
	{
		m_controller.OnRestrictionUpdate( statusEffect );
	}

}

abstract class GenericHotkeyController extends inkHUDGameController
{
	protected editable var m_hotkeyBackground : inkImageRef;
	protected editable var m_buttonHint : inkWidgetRef;
	protected editable var m_hotkey : EHotkey;
	protected var m_pressStarted : Bool;
	private var m_buttonHintController : weak< inkInputDisplayController >;
	private var m_questActivatingFact : CName;
	protected var m_restrictions : array< CName >;
	protected var m_statusEffectsListener : HotkeyWidgetStatsListener;
	private var debugCommands : array< Uint32 >;
	private var m_factListenerId : Uint32;

	protected event OnInitialize()
	{
		Initialize();
	}

	protected event OnUninitialize()
	{
		Uninitialize();
	}

	protected virtual function Initialize() : Bool
	{
		var mainPlayer : weak< GameObject >;
		if( m_hotkey == EHotkey.INVALID )
		{
			return false;
		}
		switch( m_hotkey )
		{
			case EHotkey.DPAD_UP:
				m_questActivatingFact = 'dpad_hints_visibility_enabled';
			break;
			case EHotkey.DPAD_DOWN:
				m_questActivatingFact = 'unlock_phone_hud_dpad';
			break;
			case EHotkey.DPAD_RIGHT:
				m_questActivatingFact = 'unlock_car_hud_dpad';
			break;
			case EHotkey.RB:
				m_questActivatingFact = 'initial_gadget_picked';
			break;
		}
		m_factListenerId = GameInstance.GetQuestsSystem( GetPlayer().GetGame() ).RegisterListener( m_questActivatingFact, this, 'OnActivation' );
		PlayerGameplayRestrictions.AcquireHotkeyRestrictionTags( m_hotkey, m_restrictions );
		m_statusEffectsListener = new HotkeyWidgetStatsListener;
		m_statusEffectsListener.Init( this );
		mainPlayer = GameInstance.GetPlayerSystem( GetPlayer().GetGame() ).GetLocalPlayerMainGameObject();
		GameInstance.GetStatusEffectSystem( GetPlayer().GetGame() ).RegisterListener( mainPlayer.GetEntityID(), m_statusEffectsListener );
		m_buttonHintController = ( ( inkInputDisplayController )( inkWidgetRef.Get( m_buttonHint ).GetController() ) );
		InitializeButtonHint();
		ResolveState();
		return true;
	}

	protected virtual function Uninitialize()
	{
		GameInstance.GetQuestsSystem( GetPlayer().GetGame() ).UnregisterListener( m_questActivatingFact, m_factListenerId );
		m_statusEffectsListener = NULL;
	}

	private function InitializeButtonHint()
	{
		if( m_hotkey == EHotkey.RB )
		{
			m_buttonHintController.SetInputAction( 'UseCombatGadget' );
			m_buttonHintController.SetHoldIndicatorType( inkInputHintHoldIndicationType.FromInputConfig );
		}
		else if( m_hotkey == EHotkey.DPAD_UP )
		{
			m_buttonHintController.SetInputAction( 'UseConsumable' );
			m_buttonHintController.SetHoldIndicatorType( inkInputHintHoldIndicationType.Press );
		}
		else if( m_hotkey == EHotkey.DPAD_DOWN )
		{
			m_buttonHintController.SetInputAction( 'PhoneInteract' );
			m_buttonHintController.SetHoldIndicatorType( inkInputHintHoldIndicationType.FromInputConfig );
		}
		else if( m_hotkey == EHotkey.DPAD_RIGHT )
		{
			m_buttonHintController.SetInputAction( 'CallVehicle' );
			m_buttonHintController.SetHoldIndicatorType( inkInputHintHoldIndicationType.FromInputConfig );
		}
	}

	protected function GetPlayer() : weak< PlayerPuppet >
	{
		return ( ( PlayerPuppet )( GetPlayerControlledObject() ) );
	}

	protected function ResolveState()
	{
		if( IsInDefaultState() )
		{
			GetRootWidget().SetState( 'Default' );
		}
		else
		{
			GetRootWidget().SetState( 'Unavailable' );
		}
	}

	protected function IsInDefaultState() : Bool
	{
		return IsActivatedByQuest() && IsAllowedByGameplay();
	}

	protected function IsActivatedByQuest() : Bool
	{
		var qs : QuestsSystem;
		var val : Int32;
		qs = GameInstance.GetQuestsSystem( GetPlayerControlledObject().GetGame() );
		if( qs )
		{
			val = qs.GetFact( m_questActivatingFact );
			return ( ( val >= 1 ) ? ( true ) : ( false ) );
		}
		return false;
	}

	protected virtual function IsAllowedByGameplay() : Bool
	{
		return !( StatusEffectSystem.ObjectHasStatusEffectWithTags( GetPlayer(), m_restrictions ) );
	}

	public function OnRestrictionUpdate( statusEffect : weak< StatusEffect_Record > )
	{
		ResolveState();
	}

	protected event OnDpadActionPerformed( evt : DPADActionPerformed )
	{
		var animName : CName;
		if( m_hotkey == evt.action )
		{
			if( evt.successful && IsInDefaultState() )
			{
				animName = StringToName( "onUse_" + EnumValueToString( "EHotkey", ( ( Int64 )( evt.action ) ) ) );
				PlayLibraryAnimation( animName );
			}
			else
			{
				animName = StringToName( "onFailUse_" + EnumValueToString( "EHotkey", ( ( Int64 )( evt.action ) ) ) );
				PlayLibraryAnimation( animName );
			}
		}
	}

	protected function DBGPlayAnim( animName : CName )
	{
		if( animName == 'onStarted_DPAD_RIGHT' )
		{
			1 + 1;
		}
		PlayLibraryAnimation( animName );
		debugCommands.PushBack( GameInstance.GetDebugVisualizerSystem( GetPlayer().GetGame() ).DrawText( Vector4( 600.0, 900.0 - ( 20.0 * ( ( Float )( debugCommands.Size() ) ) ), 0.0, 0.0 ), NameToString( animName ) ) );
	}

	public export function OnActivation( value : Int32 )
	{
		ResolveState();
	}

}

class PhoneHotkeyController extends GenericHotkeyController
{
	private editable var mainIcon : inkImageRef;
	private editable var messagePrompt : inkTextRef;
	private editable var messageCounter : inkTextRef;
	private var journalManager : weak< JournalManager >;
	private var phoneIconAtlas : String;
	default phoneIconAtlas = "base\gameplay\gui\common\icons\atlas_common.inkatlas";
	private var phoneIconName : CName;
	default phoneIconName = 'ico_phone';

	protected override function Initialize() : Bool
	{
		super.Initialize();
		journalManager = GameInstance.GetJournalManager( GetPlayer().GetGame() );
		if( !( journalManager ) )
		{
			return false;
		}
		journalManager.RegisterScriptCallback( this, 'OnJournalUpdate', gameJournalListenerType.State );
		journalManager.RegisterScriptCallback( this, 'OnJournalUpdateVisited', gameJournalListenerType.Visited );
		UpdateData();
		return true;
	}

	protected override function Uninitialize()
	{
		super.Uninitialize();
		if( journalManager )
		{
			journalManager.UnregisterScriptCallback( this, 'OnJournalUpdate' );
			journalManager.UnregisterScriptCallback( this, 'OnJournalUpdateVisited' );
			journalManager = NULL;
		}
	}

	private function UpdateData()
	{
		var contacts : array< weak< JournalEntry > >;
		var context : JournalRequestContext;
		var messages : array< weak< JournalEntry > >;
		var dump : array< weak< JournalEntry > >;
		var i, j, unreadMessages : Int32;
		if( !( journalManager ) )
		{
			return;
		}
		unreadMessages = 0;
		context.stateFilter.active = true;
		journalManager.GetContacts( context, contacts );
		for( i = 0; i < contacts.Size(); i += 1 )
		{
			if( contacts[ i ] )
			{
				journalManager.GetFlattenedMessagesAndChoices( contacts[ i ], messages, dump );
				for( j = 0; j < messages.Size(); j += 1 )
				{
					if( messages[ j ] && !( journalManager.IsEntryVisited( messages[ j ] ) ) )
					{
						unreadMessages += 1;
					}
				}
			}
		}
		if( unreadMessages == 0 )
		{
			inkTextRef.SetVisible( messageCounter, false );
		}
		else
		{
			inkTextRef.SetVisible( messageCounter, true );
			inkTextRef.SetText( messageCounter, IntToString( unreadMessages ) );
		}
	}

	protected event OnJournalUpdate( entryHash : Uint32, className : CName, notifyOption : JournalNotifyOption, changeType : JournalChangeType )
	{
		if( className == 'gameJournalPhoneMessage' )
		{
			NewMassagePrompt();
			UpdateData();
		}
	}

	protected event OnJournalUpdateVisited( entryHash : Uint32, className : CName, notifyOption : JournalNotifyOption, changeType : JournalChangeType )
	{
		if( className == 'gameJournalPhoneMessage' )
		{
			UpdateData();
		}
	}

	protected event OnMessagePromptFinished( proxy : inkAnimProxy )
	{
		RestoreDefaultIcon();
	}

	protected override function IsAllowedByGameplay() : Bool
	{
		return super.IsAllowedByGameplay();
	}

	private function NewMassagePrompt()
	{
		var animProxy : inkAnimProxy;
		inkImageRef.SetVisible( mainIcon, false );
		inkTextRef.SetVisible( messagePrompt, true );
		animProxy = PlayLibraryAnimation( 'message_prompt' );
		animProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnMessagePromptFinished' );
	}

	private function RestoreDefaultIcon()
	{
		inkTextRef.SetVisible( messagePrompt, false );
		inkImageRef.SetVisible( mainIcon, true );
	}

	protected event OnDpadActionPerformed( evt : DPADActionPerformed )
	{
		var animName : CName;
		if( m_hotkey == evt.action )
		{
			if( !( IsInDefaultState() ) )
			{
				animName = StringToName( "aborted_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
				animName = StringToName( "onFailUse_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
				return false;
			}
			if( evt.state == EUIActionState.STARTED )
			{
				m_pressStarted = true;
				animName = StringToName( "started_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
			}
			else if( evt.state == EUIActionState.ABORTED && m_pressStarted )
			{
				animName = StringToName( "aborted_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
			}
			else if( evt.state == EUIActionState.COMPLETED && evt.successful )
			{
				animName = StringToName( "onUse_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
			}
			else if( !( evt.successful ) )
			{
				animName = StringToName( "aborted_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
				animName = StringToName( "onFailUse_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
			}
		}
	}

}

class CarHotkeyController extends GenericHotkeyController
{
	private editable var carIconSlot : inkImageRef;
	private var vehicleSystem : weak< VehicleSystem >;
	private var psmBB : weak< IBlackboard >;
	private var bbListener : CallbackHandle;

	protected override function Initialize() : Bool
	{
		super.Initialize();
		vehicleSystem = GameInstance.GetVehicleSystem( GetPlayer().GetGame() );
		psmBB = GameInstance.GetBlackboardSystem( GetPlayer().GetGame() ).Get( GetAllBlackboardDefs().PlayerStateMachine );
		if( !( vehicleSystem ) || !( psmBB ) )
		{
			return false;
		}
		bbListener = psmBB.RegisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Vehicle, this, 'OnPlayerEnteredVehicle', true );
		return true;
	}

	protected override function Uninitialize()
	{
		super.Uninitialize();
		if( bbListener )
		{
			psmBB.UnregisterListenerInt( GetAllBlackboardDefs().PlayerStateMachine.Vehicle, bbListener );
		}
	}

	protected event OnDpadActionPerformed( evt : DPADActionPerformed )
	{
		var animName : CName;
		if( m_hotkey == evt.action )
		{
			if( !( IsInDefaultState() ) )
			{
				animName = StringToName( "aborted_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
				animName = StringToName( "onFailUse_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
				return false;
			}
			if( evt.state == EUIActionState.STARTED )
			{
				animName = StringToName( "started_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
			}
			else if( evt.state == EUIActionState.ABORTED )
			{
				animName = StringToName( "aborted_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
			}
			else if( evt.state == EUIActionState.COMPLETED && evt.successful )
			{
				animName = StringToName( "onUse_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
			}
			else if( !( evt.successful ) )
			{
				animName = StringToName( "aborted_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
				animName = StringToName( "onFailUse_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
			}
		}
	}

	protected event OnPlayerEnteredVehicle( value : Int32 )
	{
		ResolveState();
	}

	protected override function IsAllowedByGameplay() : Bool
	{
		if( !( VehicleSystem.IsSummoningVehiclesRestricted( GetPlayer().GetGame() ) ) )
		{
			return true;
		}
		return false;
	}

}

class HotkeyItemController extends GenericHotkeyController
{
	protected editable var m_hotkeyItemSlot : inkWidgetRef;
	private var m_hotkeyItemController : weak< InventoryItemDisplayController >;
	private var m_currentItem : InventoryItemData;
	private var m_hotkeyBlackboard : weak< IBlackboard >;
	private var m_hotkeyCallbackID : CallbackHandle;
	private var m_equipmentSystem : weak< EquipmentSystem >;
	private var m_inventoryManager : InventoryDataManagerV2;

	protected override function Initialize() : Bool
	{
		var initSuccessful : Bool;
		var qs : QuestsSystem;
		initSuccessful = super.Initialize();
		if( !( initSuccessful ) )
		{
			return false;
		}
		m_hotkeyItemController = ( ( InventoryItemDisplayController )( SpawnFromLocal( inkWidgetRef.Get( m_hotkeyItemSlot ), 'HotkeyItem' ).GetController() ) );
		m_equipmentSystem = GetEquipmentSystem();
		qs = GameInstance.GetQuestsSystem( GetPlayerControlledObject().GetGame() );
		if( ( !( m_hotkeyItemController ) || !( m_equipmentSystem ) ) || !( qs ) )
		{
			return false;
		}
		m_inventoryManager = new InventoryDataManagerV2;
		m_inventoryManager.Initialize( GetPlayer(), this );
		m_hotkeyBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_Hotkeys );
		if( m_hotkeyBlackboard )
		{
			m_hotkeyCallbackID = m_hotkeyBlackboard.RegisterDelayedListenerVariant( GetAllBlackboardDefs().UI_Hotkeys.ModifiedHotkey, this, 'OnHotkeyRefreshed' );
		}
		InitializeHotkeyItem();
		return true;
	}

	protected event OnPlayerAttach( playerPuppet : GameObject )
	{
		InitializeHotkeyItem();
	}

	private function InitializeHotkeyItem()
	{
		m_hotkeyItemController.Setup( m_inventoryManager.GetHotkeyItemData( m_hotkey ), ItemDisplayContext.DPAD_RADIAL );
	}

	protected override function Uninitialize()
	{
		super.Uninitialize();
		m_inventoryManager.UnInitialize();
		if( m_hotkeyBlackboard )
		{
			m_hotkeyBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_Hotkeys.ModifiedHotkey, m_hotkeyCallbackID );
			m_hotkeyBlackboard = NULL;
		}
	}

	protected override function IsAllowedByGameplay() : Bool
	{
		return super.IsAllowedByGameplay();
	}

	protected event OnDpadActionPerformed( evt : DPADActionPerformed )
	{
		var animName : CName;
		if( m_hotkey == evt.action )
		{
			if( !( IsInDefaultState() ) )
			{
				animName = StringToName( "aborted_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
				animName = StringToName( "onFailUse_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
				return false;
			}
			if( evt.state == EUIActionState.STARTED )
			{
				animName = StringToName( "started_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
			}
			else if( evt.state == EUIActionState.ABORTED )
			{
				animName = StringToName( "aborted_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
			}
			else if( evt.state == EUIActionState.COMPLETED && evt.successful )
			{
				animName = StringToName( "onUse_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
			}
			else if( !( evt.successful ) )
			{
				animName = StringToName( "aborted_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
				animName = StringToName( "onFailUse_" + EnumValueToString( "EHotkey", ( ( Int64 )( m_hotkey ) ) ) );
				PlayLibraryAnimation( animName );
			}
		}
	}

	protected event OnHotkeyRefreshed( value : Variant )
	{
		var hotkey : EHotkey;
		hotkey = ( ( EHotkey )value );
		if( hotkey != m_hotkey )
		{
			return false;
		}
		m_currentItem = m_inventoryManager.GetHotkeyItemData( m_hotkey );
		m_hotkeyItemController.Setup( m_currentItem, ItemDisplayContext.DPAD_RADIAL );
	}

	public function OnQuestActivate( value : Int32 )
	{
		if( value > 0 )
		{
			GetRootWidget().SetState( 'Default' );
		}
		else
		{
			GetRootWidget().SetState( 'Unavailable' );
		}
	}

	private function GetEquipmentSystem() : weak< EquipmentSystem >
	{
		if( !( m_equipmentSystem ) )
		{
			m_equipmentSystem = ( ( EquipmentSystem )( GameInstance.GetScriptableSystemsContainer( GetPlayerControlledObject().GetGame() ).Get( 'EquipmentSystem' ) ) );
		}
		return m_equipmentSystem;
	}

}

