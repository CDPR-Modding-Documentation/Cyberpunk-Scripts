class HUDSignalProgressBarController extends inkHUDGameController
{
	private editable var m_bar : inkWidgetRef;
	private editable var m_completed : inkWidgetRef;
	private editable var m_signalLost : inkWidgetRef;
	private editable var m_percent : inkTextRef;
	private const editable var m_signalBars : array< inkWidgetRef >;
	private var m_rootWidget : weak< inkWidget >;
	private var m_progressBarBB : weak< IBlackboard >;
	private var m_progressBarDef : UI_HUDSignalProgressBarDef;
	private var m_stateBBID : CallbackHandle;
	private var m_progressBBID : CallbackHandle;
	private var m_signalStrengthBBID : CallbackHandle;
	private var m_data : HUDProgressBarData;
	private var m_OutroAnimation : inkAnimProxy;
	private var m_SignalLostAnimation : inkAnimProxy;
	private var m_IntroAnimation : inkAnimProxy;
	private var m_alpha_fadein : inkAnimDef;
	private var m_AnimProxy : inkAnimProxy;
	private var m_AnimOptions : inkAnimOptions;
	private var alphaInterpolator : inkAnimTransparency;
	private var tick : Float;

	protected event OnInitialize()
	{
		m_rootWidget = GetRootWidget();
		m_rootWidget.SetVisible( false );
		SetupBB();
	}

	protected event OnUnInitialize()
	{
		UnregisterFromBB();
	}

	private function SetupBB()
	{
		m_progressBarDef = GetAllBlackboardDefs().UI_HUDSignalProgressBar;
		m_progressBarBB = GetBlackboardSystem().Get( m_progressBarDef );
		if( m_progressBarBB )
		{
			m_stateBBID = m_progressBarBB.RegisterDelayedListenerUint( m_progressBarDef.State, this, 'OnStateChanged' );
			m_progressBBID = m_progressBarBB.RegisterDelayedListenerFloat( m_progressBarDef.Progress, this, 'OnProgressChanged' );
			m_signalStrengthBBID = m_progressBarBB.RegisterDelayedListenerFloat( m_progressBarDef.SignalStrength, this, 'OnSignalStrengthChanged' );
		}
	}

	private function UnregisterFromBB()
	{
		m_progressBarBB.UnregisterDelayedListener( m_progressBarDef.State, m_stateBBID );
		m_progressBarBB.UnregisterDelayedListener( m_progressBarDef.Progress, m_progressBBID );
		m_progressBarBB.UnregisterDelayedListener( m_progressBarDef.SignalStrength, m_signalStrengthBBID );
	}

	protected event OnStateChanged( state : Uint32 )
	{
		var enumState : ProximityProgressBarState;
		enumState = ( ( ProximityProgressBarState )( state ) );
		if( enumState == ProximityProgressBarState.Active )
		{
			Show();
		}
		else if( enumState == ProximityProgressBarState.Complete )
		{
		}
		else if( enumState == ProximityProgressBarState.Inactive )
		{
			Hide();
		}
	}

	protected event OnProgressChanged( progress : Float )
	{
		UpdateTimerProgress( progress );
	}

	protected event OnSignalStrengthChanged( signalStrength : Float )
	{
		UpdateSignalProgress( signalStrength );
	}

	public function UpdateTimerProgress( value : Float )
	{
		inkWidgetRef.SetSize( m_bar, Vector2( value * 800.0, 25.0 ) );
		inkTextRef.SetText( m_percent, FloatToStringPrec( value * 100.0, 0 ) + "%" );
	}

	public function UpdateSignalProgress( value : Float )
	{
		var signal : Float;
		signal = 50.0 * ( ( Float )( value ) );
		inkWidgetRef.SetSize( m_signalBars[ 0 ], Vector2( 10.0, MinF( signal * 0.1, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 1 ], Vector2( 10.0, MinF( signal * 0.15000001, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 2 ], Vector2( 10.0, MinF( signal * 0.2, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 3 ], Vector2( 10.0, MinF( signal * 0.25, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 4 ], Vector2( 10.0, MinF( signal * 0.30000001, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 5 ], Vector2( 10.0, MinF( signal * 0.34999999, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 6 ], Vector2( 10.0, MinF( signal * 0.40000001, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 7 ], Vector2( 10.0, MinF( signal * 0.44999999, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 8 ], Vector2( 10.0, MinF( signal * 0.5, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 9 ], Vector2( 10.0, MinF( signal * 0.60000002, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 10 ], Vector2( 10.0, MinF( signal * 0.69999999, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 11 ], Vector2( 10.0, MinF( signal * 0.80000001, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 12 ], Vector2( 10.0, MinF( signal * 0.89999998, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 13 ], Vector2( 10.0, MinF( signal, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 14 ], Vector2( 10.0, MinF( signal * 0.89999998, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 15 ], Vector2( 10.0, MinF( signal * 0.80000001, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 16 ], Vector2( 10.0, MinF( signal * 0.69999999, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 17 ], Vector2( 10.0, MinF( signal * 0.60000002, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 18 ], Vector2( 10.0, MinF( signal * 0.5, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 19 ], Vector2( 10.0, MinF( signal * 0.44999999, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 20 ], Vector2( 10.0, MinF( signal * 0.40000001, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 21 ], Vector2( 10.0, MinF( signal * 0.34999999, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 22 ], Vector2( 10.0, MinF( signal * 0.30000001, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 23 ], Vector2( 10.0, MinF( signal * 0.25, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 24 ], Vector2( 10.0, MinF( signal * 0.2, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 25 ], Vector2( 10.0, MinF( signal * 0.15000001, 50.0 ) ) );
		inkWidgetRef.SetSize( m_signalBars[ 26 ], Vector2( 10.0, MinF( signal * 0.1, 50.0 ) ) );
	}

	private function SignalLost( val : Bool )
	{
		if( val )
		{
			if( !( m_SignalLostAnimation.IsPlaying() ) )
			{
				m_SignalLostAnimation = PlayLibraryAnimation( 'warning' );
			}
		}
		else
		{
			if( m_SignalLostAnimation.IsPlaying() )
			{
				m_SignalLostAnimation.Stop();
			}
		}
	}

	private function Show()
	{
		m_rootWidget.SetVisible( true );
		m_IntroAnimation.Stop();
		m_OutroAnimation.Stop();
		if( !( m_IntroAnimation.IsPlaying() ) )
		{
			m_IntroAnimation = PlayLibraryAnimation( 'intro' );
		}
	}

	private function Completed()
	{
		m_rootWidget.SetVisible( true );
		m_IntroAnimation.Stop();
		m_OutroAnimation = PlayLibraryAnimation( 'outro' );
		m_OutroAnimation.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnHide' );
	}

	protected event OnHide( proxy : inkAnimProxy )
	{
		m_rootWidget.SetVisible( false );
		m_OutroAnimation.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnHide' );
	}

	private function Hide()
	{
		m_rootWidget.SetVisible( false );
	}

}

import enum ProximityProgressBarOrientation
{
	Undefined,
	InRange,
	OutOfRange,
}

import enum ProximityProgressBarState
{
	None,
	Active,
	Inactive,
	Complete,
}

