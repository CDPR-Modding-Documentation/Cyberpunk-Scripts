class HUDProgressBarController extends inkHUDGameController
{
	private editable var m_bar : inkWidgetRef;
	private editable var m_header : inkTextRef;
	private editable var m_percent : inkTextRef;
	private editable var m_completed : inkTextRef;
	private editable var m_failed : inkTextRef;
	private var m_rootWidget : weak< inkWidget >;
	private var m_progressBarBB : weak< IBlackboard >;
	private var m_progressBarDef : UI_HUDProgressBarDef;
	private var m_activeBBID : CallbackHandle;
	private var m_headerBBID : CallbackHandle;
	private var m_progressBBID : CallbackHandle;
	private var m_OutroAnimation : inkAnimProxy;
	private var m_LoopAnimation : inkAnimProxy;
	private var m_IntroAnimation : inkAnimProxy;
	private var m_IntroWasPlayed : Bool;
	private var valueSaved : Float;

	protected event OnInitialize()
	{
		m_rootWidget = GetRootWidget();
		m_rootWidget.SetVisible( false );
		SetupBB();
	}

	protected event OnUnInitialize()
	{
		UnregisterFromBB();
	}

	private function SetupBB()
	{
		m_progressBarDef = GetAllBlackboardDefs().UI_HUDProgressBar;
		m_progressBarBB = GetBlackboardSystem().Get( m_progressBarDef );
		if( m_progressBarBB )
		{
			m_activeBBID = m_progressBarBB.RegisterDelayedListenerBool( m_progressBarDef.Active, this, 'OnActivated' );
			m_headerBBID = m_progressBarBB.RegisterDelayedListenerString( m_progressBarDef.Header, this, 'OnHeaderChanged' );
			m_progressBBID = m_progressBarBB.RegisterDelayedListenerFloat( m_progressBarDef.Progress, this, 'OnProgressChanged' );
		}
		if( m_progressBarBB.GetBool( m_progressBarDef.Active ) )
		{
			Intro();
			m_IntroAnimation.GotoEndAndStop();
		}
	}

	private function UnregisterFromBB()
	{
		if( m_activeBBID )
		{
			m_progressBarBB.UnregisterDelayedListener( m_progressBarDef.Active, m_activeBBID );
			m_progressBarBB.UnregisterDelayedListener( m_progressBarDef.Header, m_headerBBID );
			m_progressBarBB.UnregisterDelayedListener( m_progressBarDef.Progress, m_progressBBID );
		}
	}

	protected event OnActivated( activated : Bool )
	{
		UpdateProgressBarActive( activated );
	}

	protected event OnHeaderChanged( header : String )
	{
		UpdateTimerHeader( header );
	}

	protected event OnProgressChanged( progress : Float )
	{
		UpdateTimerProgress( progress );
	}

	public function UpdateProgressBarActive( active : Bool )
	{
		if( active )
		{
			Intro();
		}
		else
		{
			Outro();
		}
	}

	public function UpdateTimerProgress( value : Float )
	{
		inkWidgetRef.SetSize( m_bar, Vector2( value * 600.0, 6.0 ) );
		inkTextRef.SetText( m_percent, FloatToStringPrec( value * 100.0, 0 ) );
		valueSaved = value;
		m_rootWidget.SetVisible( true );
		GameInstance.GetAudioSystem( GetPlayerControlledObject().GetGame() ).Parameter( 'ui_loading_bar', value );
	}

	public function UpdateTimerHeader( label : String )
	{
		inkTextRef.SetText( m_header, label );
	}

	private function Intro()
	{
		m_OutroAnimation.Stop();
		m_IntroAnimation.Stop();
		m_rootWidget.SetVisible( true );
		if( !( m_IntroAnimation.IsPlaying() ) && !( m_IntroWasPlayed ) )
		{
			m_IntroAnimation = PlayLibraryAnimation( 'Quickhack_Intro' );
			m_IntroAnimation.RegisterToCallback( inkanimEventType.OnFinish, this, 'IntroEnded' );
			GameInstance.GetAudioSystem( GetPlayerControlledObject().GetGame() ).Play( 'ui_loading_bar_start' );
		}
	}

	private function Outro()
	{
		m_OutroAnimation.Stop();
		m_IntroAnimation.Stop();
		if( valueSaved < 0.95999998 )
		{
			m_OutroAnimation = PlayLibraryAnimation( 'Quickhack_Outro_Failed' );
		}
		else
		{
			m_OutroAnimation = PlayLibraryAnimation( 'Quickhack_Outro' );
		}
		m_OutroAnimation.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnHide' );
		GameInstance.GetAudioSystem( GetPlayerControlledObject().GetGame() ).Play( 'ui_loading_bar_stop' );
	}

	public function IntroEnded()
	{
		m_IntroWasPlayed = true;
		m_OutroAnimation.Stop();
		m_IntroAnimation.Stop();
		m_IntroAnimation.Stop();
		m_LoopAnimation = PlayLibraryAnimation( 'Quickhack_Loop' );
	}

	protected event OnHide( proxy : inkAnimProxy )
	{
		m_OutroAnimation.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnHide' );
		m_rootWidget.SetVisible( false );
	}

	public function Hide()
	{
		m_OutroAnimation.Stop();
		m_IntroAnimation.Stop();
		m_LoopAnimation.Stop();
		m_rootWidget.SetVisible( false );
		m_IntroWasPlayed = false;
	}

}

struct HUDProgressBarData
{
	var header : String;
	var active : Bool;
	var progress : Float;
}

