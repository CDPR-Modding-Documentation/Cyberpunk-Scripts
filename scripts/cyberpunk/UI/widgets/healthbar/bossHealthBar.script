class BossHealthBarGameController extends inkHUDGameController
{
	private editable var m_healthControllerRef : inkWidgetRef;
	private editable var m_healthPersentage : inkTextRef;
	private editable var m_bossName : inkTextRef;
	private var m_statListener : BossHealthStatListener;
	private var m_boss : weak< NPCPuppet >;
	private var m_healthController : weak< NameplateBarLogicController >;
	private var m_root : weak< inkWidget >;
	private var m_foldAnimation : inkAnimProxy;
	private var m_bossPuppets : array< weak< NPCPuppet > >;

	protected event OnInitialize()
	{
		m_healthController = ( ( NameplateBarLogicController )( inkWidgetRef.GetController( m_healthControllerRef ) ) );
		m_statListener = new BossHealthStatListener;
		m_statListener.BindHealthbar( this );
		m_root = GetRootWidget();
		m_root.SetVisible( false );
		IBlackboard.Create( GetAllBlackboardDefs().PuppetState );
		m_boss = NULL;
		m_bossPuppets.Clear();
		ReevaluatePlayerInBossCombat();
	}

	public function UpdateHealthValue( newValue : Float )
	{
		m_healthController.SetNameplateBarProgress( newValue / 100.0, false );
		inkTextRef.SetText( m_healthPersentage, IntToString( ( ( Int32 )( newValue ) ) ) );
	}

	protected event OnBossCombatNotifier( evt : BossCombatNotifier )
	{
		if( evt.combatEnded )
		{
			ReevaluateBossArray();
		}
		else
		{
			AddBoss( ( ( NPCPuppet )( evt.bossEntity ) ) );
		}
	}

	protected event OnThreatDefeated( evt : ThreatDefeated )
	{
		if( evt.threat )
		{
			RemoveBoss( ( ( NPCPuppet )( evt.threat ) ) );
		}
		else
		{
			ReevaluateBossArray();
		}
	}

	protected event OnThreatUnconscious( evt : ThreatUnconscious )
	{
		if( evt.threat )
		{
			RemoveBoss( ( ( NPCPuppet )( evt.threat ) ) );
		}
		else
		{
			ReevaluateBossArray();
		}
	}

	protected event OnThreatKilled( evt : ThreatDeath )
	{
		if( evt.threat )
		{
			RemoveBoss( ( ( NPCPuppet )( evt.threat ) ) );
		}
		else
		{
			ReevaluateBossArray();
		}
	}

	protected event OnThreatRemoved( evt : ThreatRemoved )
	{
		if( evt.threat )
		{
			RemoveBoss( ( ( NPCPuppet )( evt.threat ) ) );
		}
		else
		{
			ReevaluateBossArray();
		}
	}

	protected event OnThreatInvalid( evt : ThreatInvalid )
	{
		if( evt.threat )
		{
			RemoveBoss( ( ( NPCPuppet )( evt.threat ) ) );
		}
		else
		{
			ReevaluateBossArray();
		}
	}

	protected event OnAnimationEnd( e : inkAnimProxy )
	{
		m_root.SetVisible( false );
	}

	protected event OnDamageDealt( evt : gameTargetDamageEvent )
	{
		var puppet : NPCPuppet;
		puppet = ( ( NPCPuppet )( evt.target ) );
		if( m_root.IsVisible() && !( puppet.m_wasJustKilledOrDefeated ) )
		{
			AddBoss( puppet, true );
		}
	}

	private function AddBoss( boss : NPCPuppet, optional priorityTarget : Bool )
	{
		if( !( boss ) || !( boss.IsBoss() ) )
		{
			return;
		}
		if( m_bossPuppets.Contains( boss ) )
		{
			if( priorityTarget && ( boss != m_boss ) )
			{
				ShowBossHealthBar( boss );
			}
			return;
		}
		m_bossPuppets.PushBack( boss );
		if( !( m_boss ) || priorityTarget )
		{
			ShowBossHealthBar( boss );
		}
	}

	private function RemoveBoss( boss : NPCPuppet )
	{
		if( !( boss ) || !( m_bossPuppets.Contains( boss ) ) )
		{
			return;
		}
		m_bossPuppets.Remove( boss );
		if( ( m_bossPuppets.Size() > 0 ) && m_bossPuppets[ 0 ] )
		{
			ShowBossHealthBar( m_bossPuppets[ 0 ] );
		}
		else
		{
			HideBossHealthBar();
		}
	}

	private function ReevaluateBossArray()
	{
		var i : Int32;
		for( i = m_bossPuppets.Size() - 1; i >= 0; i -= 1 )
		{
			if( ( !( m_bossPuppets[ i ] ) || !( ScriptedPuppet.IsActive( m_bossPuppets[ i ] ) ) ) || GameObject.IsFriendlyTowardsPlayer( m_bossPuppets[ i ] ) )
			{
				m_bossPuppets.Erase( i );
			}
		}
		if( ( m_bossPuppets.Size() == 0 ) && m_root.IsVisible() )
		{
			HideBossHealthBar();
		}
	}

	private function ShowBossHealthBar( puppet : NPCPuppet )
	{
		var playUnfoldAnim : Bool;
		if( !( puppet ) || !( puppet.IsBoss() ) )
		{
			return;
		}
		playUnfoldAnim = !( m_boss );
		UnregisterPreviousBoss();
		RegisterToNewBoss( puppet );
		m_root.SetVisible( true );
		if( playUnfoldAnim )
		{
			if( m_foldAnimation )
			{
				m_foldAnimation.Stop();
			}
			m_foldAnimation = PlayLibraryAnimation( 'unfold' );
		}
	}

	private function HideBossHealthBar()
	{
		UnregisterPreviousBoss();
		m_foldAnimation = PlayLibraryAnimation( 'fold' );
		m_foldAnimation.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnAnimationEnd' );
	}

	private function RegisterToNewBoss( boss : NPCPuppet )
	{
		var NPCName : String;
		var characterRecord : Character_Record;
		m_boss = boss;
		UpdateHealthValue( GameInstance.GetStatPoolsSystem( m_boss.GetGame() ).GetStatPoolValue( m_boss.GetEntityID(), gamedataStatPoolType.Health ) );
		GameInstance.GetStatPoolsSystem( m_boss.GetGame() ).RequestRegisteringListener( m_boss.GetEntityID(), gamedataStatPoolType.Health, m_statListener );
		characterRecord = TweakDBInterface.GetCharacterRecord( m_boss.GetRecordID() );
		if( IsNameValid( characterRecord.FullDisplayName() ) )
		{
			NPCName = LocKeyToString( characterRecord.FullDisplayName() );
		}
		else
		{
			NPCName = m_boss.GetDisplayName();
		}
		inkTextRef.SetText( m_bossName, NPCName );
	}

	private function UnregisterPreviousBoss()
	{
		if( !( m_boss ) )
		{
			return;
		}
		GameInstance.GetStatPoolsSystem( m_boss.GetGame() ).RequestUnregisteringListener( m_boss.GetEntityID(), gamedataStatPoolType.Health, m_statListener );
		m_boss = NULL;
	}

	public static function ReevaluateBossHealthBar( puppet : weak< NPCPuppet >, target : weak< GameObject >, optional combatEnded : Bool )
	{
		var bossCombatEvent : BossCombatNotifier;
		if( ( ( !( puppet ) || !( puppet.IsBoss() ) ) || !( target ) ) || !( target.IsPlayer() ) )
		{
			return;
		}
		bossCombatEvent = new BossCombatNotifier;
		bossCombatEvent.bossEntity = puppet;
		bossCombatEvent.combatEnded = combatEnded;
		target.QueueEvent( bossCombatEvent );
	}

	public static function ReevaluateBossHealthBar( puppet : weak< NPCPuppet >, targetTracker : weak< TargetTrackingExtension >, optional combatEnded : Bool )
	{
		var hostileThreats : array< TrackedLocation >;
		var bossCombatEvent : BossCombatNotifier;
		var target : weak< GameObject >;
		if( ( !( puppet ) || !( puppet.IsBoss() ) ) || !( targetTracker ) )
		{
			return;
		}
		hostileThreats = targetTracker.GetHostileThreats( false );
		if( ( hostileThreats.Size() > 0 ) && TargetTrackingExtension.GetPlayerFromThreats( hostileThreats, target ) )
		{
			bossCombatEvent = new BossCombatNotifier;
			bossCombatEvent.bossEntity = puppet;
			bossCombatEvent.combatEnded = combatEnded;
			target.QueueEvent( bossCombatEvent );
		}
	}

	private function ReevaluatePlayerInBossCombat()
	{
		var player : weak< PlayerPuppet >;
		var threatPuppet : weak< NPCPuppet >;
		var threatsArray : array< TrackedLocation >;
		var i : Int32;
		player = ( ( PlayerPuppet )( GetOwnerEntity() ) );
		if( player )
		{
			threatsArray = player.GetTargetTrackerComponent().GetThreats( false );
			for( i = 0; i < threatsArray.Size(); i += 1 )
			{
				threatPuppet = ( ( NPCPuppet )( threatsArray[ i ].entity ) );
				if( threatPuppet && threatPuppet.IsBoss() )
				{
					BossHealthBarGameController.ReevaluateBossHealthBar( threatPuppet, player );
				}
			}
		}
	}

}

class BossHealthStatListener extends ScriptStatPoolsListener
{
	private var m_healthbar : weak< BossHealthBarGameController >;

	public function BindHealthbar( bar : weak< BossHealthBarGameController > )
	{
		m_healthbar = bar;
	}

	public override function OnStatPoolValueChanged( oldValue : Float, newValue : Float, percToPoints : Float )
	{
		m_healthbar.UpdateHealthValue( newValue );
	}

}

class BossCombatNotifier extends Event
{
	var bossEntity : weak< Entity >;
	var combatEnded : Bool;
}

