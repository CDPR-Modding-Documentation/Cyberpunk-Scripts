class NameplateVisualsLogicController extends inkLogicController
{
	private var m_rootWidget : weak< inkCompoundWidget >;
	private editable var m_bigIconMain : inkWidgetRef;
	private editable var m_bigLevelText : inkTextRef;
	private editable var m_nameTextMain : inkTextRef;
	private editable var m_bigIconArt : inkImageRef;
	private editable var m_preventionIcon : inkWidgetRef;
	private editable var m_levelContainer : inkImageRef;
	private editable var m_nameFrame : inkWidgetRef;
	private editable var m_healthbarWidget : inkWidgetRef;
	private editable var m_healthBarFull : inkWidgetRef;
	private editable var m_healthBarFrame : inkWidgetRef;
	private editable var m_taggedIcon : inkWidgetRef;
	private editable var m_iconBG : inkWidgetRef;
	private editable var m_civilianIcon : inkWidgetRef;
	private editable var m_stealthMappinSlot : inkCompoundRef;
	private editable var m_iconTextWrapper : inkCompoundRef;
	private editable var m_container : inkWidgetRef;
	private editable var m_LevelcontainerAndText : inkCompoundRef;
	private editable var m_rareStars : inkCompoundRef;
	private editable var m_eliteStars : inkCompoundRef;
	private editable var m_hardEnemy : inkImageRef;
	private editable var m_hardEnemyWrapper : inkWidgetRef;
	private editable var m_damagePreviewWrapper : inkWidgetRef;
	private editable var m_damagePreviewWidget : inkWidgetRef;
	private editable var m_damagePreviewArrow : inkWidgetRef;
	private editable var m_buffsList : inkHorizontalPanelRef;
	private var m_buffWidgets : array< weak< inkWidget > >;
	private var m_cachedPuppet : weak< GameObject >;
	private var m_cachedIncomingData : NPCNextToTheCrosshair;
	private var m_isOfficer : Bool;
	private var m_isBoss : Bool;
	private var m_isElite : Bool;
	private var m_isRare : Bool;
	private var m_isPrevention : Bool;
	private var m_canCallReinforcements : Bool;
	private var m_isCivilian : Bool;
	private var m_isBurning : Bool;
	private var m_isPoisoned : Bool;
	private var m_bossColor : Color;
	private var m_npcDefeated : Bool;
	private var m_isStealthMappinVisible : Bool;
	private var m_playerZone : gamePSMZones;
	private var m_npcNamesEnabled : Bool;
	private var m_healthController : weak< NameplateBarLogicController >;
	private var m_hasCenterIcon : Bool;
	private var m_animatingObject : inkWidgetRef;
	private var m_isAnimating : Bool;
	private var m_animProxy : inkAnimProxy;
	private var m_alpha_fadein : inkAnimDef;
	private var m_preventionAnimProxy : inkAnimProxy;
	private var m_damagePreviewAnimProxy : inkAnimProxy;
	private var m_isQuestTarget : Bool;
	default m_isQuestTarget = false;
	private var m_forceHide : Bool;
	default m_forceHide = false;
	private var m_isHardEnemy : Bool;
	private var m_npcIsAggressive : Bool;
	private var m_playerAimingDownSights : Bool;
	private var m_playerInCombat : Bool;
	private var m_playerInStealth : Bool;
	private var m_healthNotFull : Bool;
	private var m_healthbarVisible : Bool;
	private var m_levelContainerShouldBeVisible : Bool;
	private var m_currentHealth : Int32;
	private var m_maximumHealth : Int32;
	private var m_currentDamagePreviewValue : Int32;

	protected event OnInitialize()
	{
		m_rootWidget = ( ( inkCompoundWidget )( GetRootWidget() ) );
		m_healthController = ( ( NameplateBarLogicController )( inkWidgetRef.GetController( m_healthbarWidget ) ) );
		m_npcDefeated = false;
		m_playerAimingDownSights = false;
		m_playerInCombat = false;
		m_playerInStealth = false;
		m_healthNotFull = false;
		m_healthbarVisible = false;
		inkHorizontalPanelRef.SetVisible( m_buffsList, false );
		inkWidgetRef.SetVisible( m_healthbarWidget, false );
	}

	public function SetVisualData( puppet : GameObject, incomingData : NPCNextToTheCrosshair, optional isNewNpc : Bool )
	{
		var npc : NPCPuppet;
		m_cachedPuppet = puppet;
		m_cachedIncomingData = incomingData;
		npc = ( ( NPCPuppet )( incomingData.npc ) );
		if( npc )
		{
			if( incomingData.attitude == EAIAttitude.AIA_Hostile )
			{
				m_npcIsAggressive = true;
			}
			else if( npc.IsAggressive() && incomingData.attitude != EAIAttitude.AIA_Friendly )
			{
				m_npcIsAggressive = true;
			}
			else
			{
				m_npcIsAggressive = false;
			}
		}
		else if( incomingData.npc && incomingData.npc.IsTurret() )
		{
			if( incomingData.attitude != EAIAttitude.AIA_Friendly )
			{
				m_npcIsAggressive = true;
			}
			else
			{
				m_npcIsAggressive = false;
			}
		}
		else
		{
			m_npcIsAggressive = false;
		}
		m_currentHealth = incomingData.currentHealth;
		m_maximumHealth = incomingData.maximumHealth;
		m_healthNotFull = incomingData.currentHealth < incomingData.maximumHealth;
		m_npcDefeated = !( ScriptedPuppet.IsActive( incomingData.npc ) );
		if( npc && !( m_npcDefeated ) )
		{
			m_npcDefeated = npc.IsAboutToBeDefeated() || npc.IsAboutToDie();
		}
		SetNPCType( ( ( ScriptedPuppet )( puppet ) ) );
		SetAttitudeColors( ( ( ScriptedPuppet )( puppet ) ), incomingData );
		SetElementVisibility( incomingData );
		if( !( incomingData.npc ) || ( ( incomingData.level == 0 ) && !( incomingData.npc.IsTurret() ) ) )
		{
			m_levelContainerShouldBeVisible = false;
		}
		UpdateHealthbarVisibility();
		if( incomingData.maximumHealth == 0 )
		{
			m_healthController.SetNameplateBarProgress( 0.0, isNewNpc );
		}
		else
		{
			m_healthController.SetNameplateBarProgress( ( ( Float )( incomingData.currentHealth ) ) / ( ( Float )( incomingData.maximumHealth ) ), isNewNpc );
		}
		if( m_currentDamagePreviewValue > 0 )
		{
			PreviewDamage( m_currentDamagePreviewValue );
		}
	}

	public function PreviewDamage( value : Int32 )
	{
		var animOptions : inkAnimOptions;
		var damagePercentage, currentHealthPercentage, offset, renderTransformXPivot : Float;
		m_currentDamagePreviewValue = value;
		if( value <= 0 )
		{
			if( m_damagePreviewAnimProxy && m_damagePreviewAnimProxy.IsPlaying() )
			{
				m_damagePreviewAnimProxy.Stop();
			}
			inkWidgetRef.SetVisible( m_damagePreviewWrapper, false );
		}
		else if( m_maximumHealth > 0 )
		{
			currentHealthPercentage = ( ( Float )( m_currentHealth ) ) / ( ( Float )( m_maximumHealth ) );
			damagePercentage = ( ( Float )( value ) ) / ( ( Float )( m_maximumHealth ) );
			damagePercentage = MinF( damagePercentage, currentHealthPercentage );
			renderTransformXPivot = ( ( damagePercentage < 1.0 ) ? ( ( currentHealthPercentage - damagePercentage ) / ( 1.0 - damagePercentage ) ) : ( 1.0 ) );
			offset = ( 100.0 + ( 150.0 * damagePercentage ) ) - ( 150.0 * currentHealthPercentage );
			inkWidgetRef.SetRenderTransformPivot( m_damagePreviewWidget, Vector2( renderTransformXPivot, 1.0 ) );
			inkWidgetRef.SetScale( m_damagePreviewWidget, Vector2( damagePercentage, 1.0 ) );
			inkWidgetRef.SetMargin( m_damagePreviewArrow, 0.0, -22.0, offset, 0.0 );
			if( !( m_damagePreviewAnimProxy ) || !( m_damagePreviewAnimProxy.IsPlaying() ) )
			{
				animOptions.loopType = inkanimLoopType.Cycle;
				animOptions.loopInfinite = true;
				m_damagePreviewAnimProxy = PlayLibraryAnimation( 'damage_preview_looping', animOptions );
			}
			inkWidgetRef.SetVisible( m_damagePreviewWrapper, true );
		}
	}

	public function GetHeightOffser() : Float
	{
		var size : Vector2;
		size = inkWidgetRef.GetDesiredSize( m_container );
		return size.Y;
	}

	public function UpdateBecauseOfMapPin()
	{
		SetVisualData( m_cachedPuppet, m_cachedIncomingData );
	}

	public function UpdatePlayerZone( zone : gamePSMZones, optional onlySetValue : Bool )
	{
		m_playerZone = zone;
		if( m_cachedPuppet && !( onlySetValue ) )
		{
			SetVisualData( m_cachedPuppet, m_cachedIncomingData );
		}
	}

	public function UpdatePlayerAimStatus( state : gamePSMUpperBodyStates, optional onlySetValue : Bool )
	{
		m_playerAimingDownSights = state == gamePSMUpperBodyStates.Aim;
		if( m_cachedPuppet && !( onlySetValue ) )
		{
			UpdateHealthbarVisibility();
		}
	}

	public function UpdatePlayerCombat( state : gamePSMCombat, optional onlySetValue : Bool )
	{
		m_playerInCombat = state == gamePSMCombat.InCombat;
		m_playerInStealth = state == gamePSMCombat.Stealth;
		if( m_cachedPuppet && !( onlySetValue ) )
		{
			UpdateHealthbarVisibility();
		}
	}

	public function UpdateNPCNamesEnabled( value : Bool, optional onlySetValue : Bool )
	{
		m_npcNamesEnabled = value;
		if( m_cachedPuppet && !( onlySetValue ) )
		{
			SetVisualData( m_cachedPuppet, m_cachedIncomingData );
		}
	}

	public function UpdateHealthbarColor( isHostile : Bool )
	{
		if( isHostile )
		{
			inkWidgetRef.SetState( m_healthbarWidget, 'Hostile' );
			inkWidgetRef.SetState( m_healthBarFull, 'Hostile' );
		}
		else
		{
			inkWidgetRef.SetState( m_healthbarWidget, 'Neutral_Enemy' );
			inkWidgetRef.SetState( m_healthBarFull, 'Neutral_Enemy' );
		}
	}

	private function UpdateHealthbarVisibility()
	{
		var hpVisible : Bool;
		hpVisible = ( m_npcIsAggressive && !( m_isBoss ) ) && ( ( ( m_healthNotFull || m_playerAimingDownSights ) || m_playerInCombat ) || m_playerInStealth );
		if( m_healthbarVisible != hpVisible )
		{
			m_healthbarVisible = hpVisible;
			inkWidgetRef.SetVisible( m_healthbarWidget, m_healthbarVisible );
		}
	}

	private function SetNPCType( puppet : weak< ScriptedPuppet > )
	{
		var puppetRarity : gamedataNPCRarity;
		m_isOfficer = false;
		m_isBoss = false;
		m_isCivilian = false;
		m_canCallReinforcements = false;
		m_isElite = false;
		m_isRare = false;
		m_isPrevention = false;
		if( puppet )
		{
			m_isPrevention = puppet.IsPrevention();
			puppetRarity = puppet.GetPuppetRarity().Type();
			switch( puppetRarity )
			{
				case gamedataNPCRarity.Officer:
					m_isOfficer = true;
				break;
				case gamedataNPCRarity.Boss:
					m_isBoss = true;
				break;
				case gamedataNPCRarity.Elite:
					m_isElite = true;
				break;
				case gamedataNPCRarity.Rare:
					m_isRare = true;
				break;
			}
			m_canCallReinforcements = GameInstance.GetStatsSystem( puppet.GetGame() ).GetStatBoolValue( puppet.GetEntityID(), gamedataStatType.CanCallReinforcements );
		}
	}

	private function UpdateCenterIcon( texture : CName )
	{
		if( texture == '' )
		{
			inkImageRef.SetVisible( m_bigIconArt, false );
		}
		else
		{
			inkImageRef.SetVisible( m_bigIconArt, true );
			inkImageRef.SetTexturePart( m_bigIconArt, texture );
		}
	}

	private function SetAttitudeColors( puppet : weak< gamePuppetBase >, incomingData : NPCNextToTheCrosshair )
	{
		var attitudeColor : CName;
		inkTextRef.SetLetterCase( m_nameTextMain, textLetterCase.UpperCase );
		inkTextRef.SetText( m_nameTextMain, incomingData.name );
		inkTextRef.SetText( m_bigLevelText, "" );
		switch( incomingData.attitude )
		{
			case EAIAttitude.AIA_Hostile:
				attitudeColor = 'Hostile';
			break;
			case EAIAttitude.AIA_Friendly:
				attitudeColor = 'Friendly';
			break;
			case EAIAttitude.AIA_Neutral:
				attitudeColor = 'Neutral';
			break;
			default:
				attitudeColor = 'Civilian';
			break;
		}
		if( m_npcIsAggressive )
		{
			inkTextRef.SetState( m_bigLevelText, attitudeColor );
			inkImageRef.SetState( m_bigIconArt, ( ( m_isQuestTarget ) ? ( 'Quest' ) : ( 'Hostile' ) ) );
			inkWidgetRef.SetState( m_civilianIcon, ( ( m_isQuestTarget ) ? ( 'Quest' ) : ( 'Hostile' ) ) );
			inkCompoundRef.SetState( m_rareStars, 'Hostile' );
			inkCompoundRef.SetState( m_eliteStars, 'Hostile' );
			inkTextRef.SetState( m_nameTextMain, ( ( m_isQuestTarget ) ? ( 'Quest' ) : ( 'Hostile' ) ) );
		}
		else
		{
			inkTextRef.SetState( m_bigLevelText, attitudeColor );
			inkImageRef.SetState( m_bigIconArt, ( ( m_isQuestTarget ) ? ( 'Quest' ) : ( attitudeColor ) ) );
			inkWidgetRef.SetState( m_civilianIcon, ( ( m_isQuestTarget ) ? ( 'Quest' ) : ( attitudeColor ) ) );
			inkCompoundRef.SetState( m_rareStars, attitudeColor );
			inkCompoundRef.SetState( m_eliteStars, attitudeColor );
			inkTextRef.SetState( m_nameTextMain, ( ( m_isQuestTarget ) ? ( 'Quest' ) : ( attitudeColor ) ) );
			inkImageRef.SetState( m_hardEnemy, attitudeColor );
		}
		if( m_isBoss )
		{
			attitudeColor = 'Boss';
		}
		if( ( puppet != NULL ) && puppet.IsPlayer() )
		{
			inkTextRef.SetState( m_nameTextMain, 'CPO_Player' );
		}
		if( m_isPrevention )
		{
			PlayPreventionAnim();
		}
		else
		{
			StopPreventionAnim();
		}
	}

	private function SetElementVisibility( incomingData : NPCNextToTheCrosshair )
	{
		var npc : NPCPuppet;
		var enemyDifficulty : EPowerDifferential;
		var isTurret : Bool;
		inkImageRef.SetVisible( m_bigIconArt, false );
		inkTextRef.SetVisible( m_nameTextMain, false );
		inkCompoundRef.SetVisible( m_eliteStars, false );
		inkCompoundRef.SetVisible( m_rareStars, false );
		inkWidgetRef.SetVisible( m_civilianIcon, false );
		inkWidgetRef.SetVisible( m_hardEnemyWrapper, false );
		inkWidgetRef.SetVisible( m_preventionIcon, false );
		m_levelContainerShouldBeVisible = false;
		m_isHardEnemy = false;
		isTurret = incomingData.npc && incomingData.npc.IsTurret();
		npc = ( ( NPCPuppet )( incomingData.npc ) );
		if( npc || isTurret )
		{
			m_rootWidget.SetVisible( !( m_forceHide ) && ( incomingData.npc.IsPlayer() || !( m_npcDefeated ) ) );
		}
		if( m_npcIsAggressive )
		{
			if( isTurret )
			{
				enemyDifficulty = EPowerDifferential.NORMAL;
			}
			else
			{
				enemyDifficulty = RPGManager.CalculatePowerDifferential( npc );
			}
			if( !( isTurret ) && ( enemyDifficulty == EPowerDifferential.IMPOSSIBLE || NPCManager.HasVisualTag( ( ( ScriptedPuppet )( npc ) ), 'Sumo' ) ) )
			{
				m_isHardEnemy = true;
				inkWidgetRef.SetVisible( m_hardEnemyWrapper, true );
			}
			else
			{
				m_isHardEnemy = false;
				m_isAnimating = false;
				if( m_animProxy )
				{
					m_animProxy.Stop();
					m_animProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnFadeInComplete' );
					m_animProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnFadeOutComplete' );
					m_animProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnScreenDelayComplete' );
				}
			}
			m_levelContainerShouldBeVisible = true;
			inkTextRef.SetVisible( m_bigLevelText, true );
			if( m_isPrevention )
			{
				UpdateCenterIcon( '' );
				inkWidgetRef.SetVisible( m_preventionIcon, true );
				inkWidgetRef.SetVisible( m_hardEnemyWrapper, false );
			}
			else if( m_isElite )
			{
				inkWidgetRef.SetVisible( m_hardEnemyWrapper, true );
			}
			else if( m_isBoss )
			{
				inkWidgetRef.SetVisible( m_hardEnemyWrapper, true );
			}
		}
		if( npc && npc.IsVendor() )
		{
			inkTextRef.SetVisible( m_nameTextMain, m_npcNamesEnabled );
			m_levelContainerShouldBeVisible = false;
		}
		if( incomingData.attitude == EAIAttitude.AIA_Friendly && !( isTurret ) )
		{
			inkTextRef.SetVisible( m_nameTextMain, m_npcNamesEnabled );
			m_levelContainerShouldBeVisible = false;
		}
		if( inkTextRef.IsVisible( m_nameTextMain ) && inkWidgetRef.IsVisible( m_nameFrame ) )
		{
			inkWidgetRef.SetVisible( m_civilianIcon, false );
		}
	}

	public function IsAnyElementVisible() : Bool
	{
		return inkTextRef.IsVisible( m_nameTextMain ) || m_levelContainerShouldBeVisible;
	}

	private function SetCycleAnimation( isNewNPC : Bool, incomingData : NPCNextToTheCrosshair )
	{
		if( isNewNPC )
		{
			m_animProxy.Stop();
			m_animProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnFadeInComplete' );
			m_animProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnFadeOutComplete' );
			m_animProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnScreenDelayComplete' );
			m_isAnimating = false;
			inkCompoundRef.SetOpacity( m_LevelcontainerAndText, 1.0 );
		}
		if( !( m_isAnimating ) )
		{
			m_animatingObject = m_hardEnemyWrapper;
			inkCompoundRef.SetOpacity( m_LevelcontainerAndText, 0.0 );
			OnScreenDelay();
			m_isAnimating = true;
		}
	}

	private function PlayPreventionAnim()
	{
		var initialState : CName;
		StopPreventionAnim();
		m_preventionAnimProxy = MappinUIUtils.PlayPreventionBlinkAnimation( GetRootWidget(), initialState );
		if( m_preventionAnimProxy )
		{
			inkWidgetRef.SetState( m_preventionIcon, initialState );
			m_preventionAnimProxy.RegisterToCallback( inkanimEventType.OnEndLoop, this, 'OnPreventionAnimLoop' );
		}
	}

	private function StopPreventionAnim()
	{
		if( m_preventionAnimProxy )
		{
			m_preventionAnimProxy.Stop();
			m_preventionAnimProxy = NULL;
		}
	}

	public export function OnPreventionAnimLoop( anim : inkAnimProxy )
	{
		var preventionState : CName;
		preventionState = inkWidgetRef.GetState( m_preventionIcon );
		MappinUIUtils.CyclePreventionState( preventionState );
		inkWidgetRef.SetState( m_preventionIcon, preventionState );
	}

	public function UpdateBuffDebuffList( argData : Variant, argIsBuffList : Bool )
	{
		var data : StatusEffect_Record;
		var buffList : array< BuffInfo >;
		var onScreenBuffsCount : Int32;
		var incomingBuffsCount : Int32;
		var i : Int32;
		var currBuffWidget : weak< inkWidget >;
		var currBuffLoc : weak< buffListItemLogicController >;
		var buffTimeRemaining : Float;
		var iconPath : String;
		if( argData.IsValid() )
		{
			buffList = ( ( array< BuffInfo > )argData );
		}
		incomingBuffsCount = buffList.Size();
		onScreenBuffsCount = inkHorizontalPanelRef.GetNumChildren( m_buffsList );
		inkHorizontalPanelRef.SetVisible( m_buffsList, incomingBuffsCount > 0 );
		if( incomingBuffsCount != 0 )
		{
			if( onScreenBuffsCount > incomingBuffsCount )
			{
				for( i = incomingBuffsCount - 1; i < onScreenBuffsCount; i = i + 1 )
				{
					currBuffWidget = m_buffWidgets[ i ];
					currBuffWidget.SetVisible( false );
				}
			}
			else if( onScreenBuffsCount < incomingBuffsCount )
			{
				while( onScreenBuffsCount < incomingBuffsCount )
				{
					currBuffWidget = SpawnFromLocal( inkHorizontalPanelRef.Get( m_buffsList ), 'Buff' );
					currBuffWidget.SetVisible( false );
					m_buffWidgets.PushBack( currBuffWidget );
					onScreenBuffsCount = onScreenBuffsCount + 1;
				}
			}
		}
		else
		{
			for( i = 0; i < onScreenBuffsCount; i += 1 )
			{
				currBuffWidget = m_buffWidgets[ i ];
				currBuffWidget.SetVisible( false );
			}
		}
		for( i = 0; i < incomingBuffsCount; i = i + 1 )
		{
			data = TDB.GetStatusEffectRecord( buffList[ i ].buffID );
			buffTimeRemaining = buffList[ i ].timeRemaining;
			iconPath = data.UiData().IconPath();
			if( iconPath == "" )
			{
				continue;
			}
			currBuffWidget = m_buffWidgets[ i ];
			currBuffWidget.SetVisible( true );
			currBuffLoc = ( ( buffListItemLogicController )( currBuffWidget.GetController() ) );
			currBuffLoc.SetData( StringToName( iconPath ), buffTimeRemaining );
		}
		SetVisualData( m_cachedPuppet, m_cachedIncomingData );
	}

	public function CheckStealthMappinVisibility()
	{
		var stealthMappinRef : inkWidget;
		if( inkCompoundRef.GetNumChildren( m_stealthMappinSlot ) > 0 )
		{
			stealthMappinRef = inkCompoundRef.GetWidgetByIndex( m_stealthMappinSlot, 0 );
			m_isStealthMappinVisible = stealthMappinRef.IsVisible();
			if( m_hasCenterIcon || inkTextRef.IsVisible( m_bigLevelText ) )
			{
				inkCompoundRef.SetVisible( m_iconTextWrapper, true );
			}
		}
	}

	public function IsQuestTarget() : Bool
	{
		return m_isQuestTarget;
	}

	public function SetQuestTarget( value : Bool )
	{
		m_isQuestTarget = value;
	}

	public function SetForceHide( value : Bool )
	{
		m_forceHide = value;
	}

	private function OnFadeIn()
	{
		var alphaInterpolator : inkAnimTransparency;
		m_alpha_fadein = new inkAnimDef;
		alphaInterpolator = new inkAnimTransparency;
		alphaInterpolator.SetDuration( 0.25 );
		alphaInterpolator.SetStartTransparency( 0.0 );
		alphaInterpolator.SetEndTransparency( 1.0 );
		alphaInterpolator.SetType( inkanimInterpolationType.Linear );
		alphaInterpolator.SetMode( inkanimInterpolationMode.EasyIn );
		m_alpha_fadein.AddInterpolator( alphaInterpolator );
		m_animProxy = inkWidgetRef.PlayAnimation( m_animatingObject, m_alpha_fadein );
		m_animProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnFadeInComplete' );
	}

	protected event OnFadeInComplete( anim : inkAnimProxy )
	{
		m_animProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnFadeInComplete' );
		OnScreenDelay();
	}

	private function OnScreenDelay()
	{
		var alphaInterpolator : inkAnimTransparency;
		m_alpha_fadein = new inkAnimDef;
		alphaInterpolator = new inkAnimTransparency;
		alphaInterpolator.SetDuration( 2.0 );
		alphaInterpolator.SetStartTransparency( 1.0 );
		alphaInterpolator.SetEndTransparency( 1.0 );
		alphaInterpolator.SetType( inkanimInterpolationType.Linear );
		alphaInterpolator.SetMode( inkanimInterpolationMode.EasyIn );
		m_alpha_fadein.AddInterpolator( alphaInterpolator );
		m_animProxy = inkWidgetRef.PlayAnimation( m_animatingObject, m_alpha_fadein );
		m_animProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnScreenDelayComplete' );
	}

	protected event OnScreenDelayComplete( anim : inkAnimProxy )
	{
		m_animProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnScreenDelayComplete' );
		OnFadeOut();
	}

	private function OnFadeOut()
	{
		var alphaInterpolator : inkAnimTransparency;
		m_alpha_fadein = new inkAnimDef;
		alphaInterpolator = new inkAnimTransparency;
		alphaInterpolator.SetDuration( 0.25 );
		alphaInterpolator.SetStartTransparency( 1.0 );
		alphaInterpolator.SetEndTransparency( 0.0 );
		alphaInterpolator.SetType( inkanimInterpolationType.Linear );
		alphaInterpolator.SetMode( inkanimInterpolationMode.EasyIn );
		m_alpha_fadein.AddInterpolator( alphaInterpolator );
		m_animProxy = inkWidgetRef.PlayAnimation( m_animatingObject, m_alpha_fadein );
		m_animProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnFadeOutComplete' );
	}

	protected event OnFadeOutComplete( anim : inkAnimProxy )
	{
		m_animProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnFadeOutComplete' );
		if( m_animatingObject == m_LevelcontainerAndText )
		{
			m_animatingObject = m_hardEnemyWrapper;
		}
		else if( m_animatingObject == m_hardEnemyWrapper )
		{
			m_animatingObject = m_LevelcontainerAndText;
		}
		OnFadeIn();
	}

}

