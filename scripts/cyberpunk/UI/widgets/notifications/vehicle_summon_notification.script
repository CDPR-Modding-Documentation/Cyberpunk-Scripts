class VehicleSummonWidgetGameController extends inkHUDGameController
{
	private editable var m_vehicleNameLabel : inkTextRef;
	private editable var m_vehicleTypeIcon : inkImageRef;
	private editable var m_vehicleManufactorHolder : inkWidgetRef;
	private editable var m_vehicleManufactorIcon : inkImageRef;
	private editable var m_distanceLabel : inkTextRef;
	private editable var m_unit : EMeasurementUnit;
	private editable var m_subText : inkTextRef;
	private editable var m_radioStationName : inkTextRef;
	private var m_rootWidget : weak< inkWidget >;
	private var m_animationProxy : inkAnimProxy;
	private var m_animationCounterProxy : inkAnimProxy;
	private var m_optionIntro : inkAnimOptions;
	private var m_optionCounter : inkAnimOptions;
	private var m_vehicleSummonDataDef : VehicleSummonDataDef;
	private var m_vehicleSummonDataBB : weak< IBlackboard >;
	private var m_vehicleSummonStateCallback : CallbackHandle;
	private var m_vehicleSummonState : Uint32;
	private var m_vehiclePurchaseDataDef : VehiclePurchaseDataDef;
	private var m_vehiclePurchaseDataBB : weak< IBlackboard >;
	private var m_vehiclePurchaseStateCallback : CallbackHandle;
	private var m_purchasedVehicleID : TweakDBID;
	private var m_stateChangesCallback : CallbackHandle;
	private var m_songNameChangeCallback : CallbackHandle;
	private var m_activeVehicleBlackboard : weak< IBlackboard >;
	private var m_mountCallback : CallbackHandle;
	private var m_vehiclePos : Vector4;
	private var m_playerPos : Vector4;
	private var m_distanceVector : Vector4;
	private var m_gameInstance : GameInstance;
	private var m_distance : Int32;
	private var m_vehicleID : EntityID;
	private var m_vehicleEntity : weak< Entity >;
	private var m_vehicle : weak< VehicleObject >;
	private var m_vehicleRecord : Vehicle_Record;
	private var m_textParams : inkTextParams;
	private var m_iconRecord : UIIcon_Record;
	private var m_playerVehicle : weak< VehicleObject >;
	private var m_player : weak< PlayerPuppet >;

	protected event OnInitialize()
	{
		m_rootWidget = GetRootWidget();
		m_rootWidget.SetVisible( false );
		inkTextRef.SetVisible( m_subText, false );
		inkTextRef.SetVisible( m_radioStationName, false );
		m_vehicleSummonDataDef = GetAllBlackboardDefs().VehicleSummonData;
		m_vehicleSummonDataBB = GetBlackboardSystem().Get( m_vehicleSummonDataDef );
		m_vehicleSummonStateCallback = m_vehicleSummonDataBB.RegisterListenerUint( m_vehicleSummonDataDef.SummonState, this, 'OnVehicleSummonStateChanged' );
		m_vehiclePurchaseDataDef = GetAllBlackboardDefs().VehiclePurchaseData;
		m_vehiclePurchaseDataBB = GetBlackboardSystem().Get( m_vehiclePurchaseDataDef );
		m_vehiclePurchaseStateCallback = m_vehiclePurchaseDataBB.RegisterListenerVariant( m_vehiclePurchaseDataDef.PurchasedVehicleRecordID, this, 'OnVehiclePurchased' );
		m_activeVehicleBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_ActiveVehicleData );
		m_mountCallback = m_activeVehicleBlackboard.RegisterListenerBool( GetAllBlackboardDefs().UI_ActiveVehicleData.IsPlayerMounted, this, 'OnVehicleMount' );
	}

	protected event OnUninitialize()
	{
		m_rootWidget.SetVisible( false );
		inkTextRef.SetVisible( m_subText, false );
		inkTextRef.SetVisible( m_radioStationName, false );
		m_vehicleSummonDataBB.UnregisterListenerUint( m_vehicleSummonDataDef.SummonState, m_vehicleSummonStateCallback );
		m_vehiclePurchaseDataBB.UnregisterListenerVariant( m_vehiclePurchaseDataDef.PurchasedVehicleRecordID, m_vehiclePurchaseStateCallback );
		m_activeVehicleBlackboard.UnregisterListenerBool( GetAllBlackboardDefs().UI_ActiveVehicleData.IsPlayerMounted, m_mountCallback );
	}

	protected event OnPlayerAttach( playerPuppet : GameObject )
	{
		m_playerPos = GetPlayerControlledObject().GetWorldPosition();
		m_gameInstance = playerPuppet.GetGame();
		m_player = ( ( PlayerPuppet )( playerPuppet ) );
	}

	protected event OnVehicleSummonStateChanged( value : Uint32 )
	{
		m_vehicleSummonState = value;
		if( m_vehicleSummonState == ( ( Uint32 )( vehicleSummonState.EnRoute ) ) )
		{
			ShowSummonNotification();
		}
		else if( m_vehicleSummonState == ( ( Uint32 )( vehicleSummonState.Arrived ) ) )
		{
			HideNotification();
		}
		else if( m_vehicleSummonState == ( ( Uint32 )( vehicleSummonState.AlreadySummoned ) ) )
		{
			inkTextRef.SetVisible( m_subText, true );
			PlayLibraryAnimation( 'waiting' );
			inkTextRef.SetText( m_subText, GetLocalizedText( "LocKey#78044" ) );
		}
		else
		{
			m_rootWidget.SetVisible( false );
		}
	}

	protected event OnVehiclePurchased( value : Variant )
	{
		var vehicleRecordID : TweakDBID;
		m_rootWidget.SetVisible( true );
		inkTextRef.SetVisible( m_subText, true );
		PlayAnim( 'OnVehiclePurchase', 'OnTimeOut' );
		vehicleRecordID = ( ( TweakDBID )value );
		m_vehicleRecord = TweakDBInterface.GetVehicleRecord( vehicleRecordID );
		inkTextRef.SetLocalizedTextScript( m_vehicleNameLabel, m_vehicleRecord.DisplayName() );
		inkTextRef.SetText( m_subText, "LocKey#43690" );
		SetVehicleIcon( m_vehicleRecord.Type().Type() );
		SetVehicleIconManufactorIcon( m_vehicleRecord.Manufacturer().EnumName() );
	}

	protected event OnVehicleRadioEvent( evt : UIVehicleRadioEvent )
	{
		PlayAnim( 'OnSongChanged', 'OnTimeOut' );
		if( m_playerVehicle )
		{
			m_rootWidget.SetVisible( true );
			inkTextRef.SetVisible( m_subText, true );
			inkTextRef.SetVisible( m_radioStationName, true );
			inkTextRef.SetText( m_radioStationName, GetLocalizedTextByKey( m_playerVehicle.GetRadioReceiverStationName() ) );
			inkTextRef.SetText( m_subText, GetLocalizedTextByKey( m_playerVehicle.GetRadioReceiverTrackName() ) );
		}
	}

	protected event OnVehicleMount( value : Bool )
	{
		var radioOn : Bool;
		m_rootWidget.SetVisible( value );
		if( value )
		{
			VehicleComponent.GetVehicle( m_gameInstance, m_player, m_playerVehicle );
			m_vehicleRecord = TweakDBInterface.GetVehicleRecord( m_playerVehicle.GetRecordID() );
			if( m_playerVehicle )
			{
				inkTextRef.SetLocalizedTextScript( m_vehicleNameLabel, m_vehicleRecord.DisplayName() );
				SetVehicleIcon( m_vehicleRecord.Type().Type() );
				SetVehicleIconManufactorIcon( m_vehicleRecord.Manufacturer().EnumName() );
				radioOn = m_playerVehicle.IsRadioReceiverActive();
				if( radioOn )
				{
					PlayAnim( 'OnVehicleEnter', 'OnVehicleEnterDone' );
					inkTextRef.SetText( m_radioStationName, GetLocalizedTextByKey( m_playerVehicle.GetRadioReceiverStationName() ) );
					inkTextRef.SetText( m_subText, GetLocalizedTextByKey( m_playerVehicle.GetRadioReceiverTrackName() ) );
				}
				else
				{
					PlayAnim( 'OnVehicleEnter', 'OnTimeOut' );
				}
			}
		}
	}

	protected event OnVehicleEnterDone( anim : inkAnimProxy )
	{
		inkTextRef.SetVisible( m_subText, true );
		inkTextRef.SetVisible( m_radioStationName, true );
		PlayAnim( 'OnSongChanged', 'OnTimeOut' );
	}

	public function ShowSummonNotification()
	{
		m_vehicleID = ( ( EntityID )( m_vehicleSummonDataBB.GetEntityID( m_vehicleSummonDataDef.SummonedVehicleEntityID ) ) );
		if( EntityID.IsDefined( m_vehicleID ) )
		{
			m_rootWidget.SetVisible( true );
			m_vehicleEntity = GameInstance.FindEntityByID( m_gameInstance, m_vehicleID );
			m_vehicle = ( ( VehicleObject )( m_vehicleEntity ) );
			m_vehicleRecord = TweakDBInterface.GetVehicleRecord( m_vehicle.GetRecordID() );
			m_distance = RoundF( Vector4.Distance( m_vehicleEntity.GetWorldPosition(), GetPlayerControlledObject().GetWorldPosition() ) );
			m_textParams = new inkTextParams;
			m_textParams.AddMeasurement( "distance", ( ( Float )( m_distance ) ), EMeasurementUnit.Meter );
			m_textParams.AddString( "unit", GetLocalizedText( NameToString( MeasurementUtils.GetUnitLocalizationKey( UILocalizationHelper.GetSystemBaseUnit() ) ) ) );
			inkTextRef.SetText( m_distanceLabel, "{distance}{unit}", m_textParams );
			PlayAnim( 'intro', 'OnIntroFinished' );
			m_optionCounter.loopType = inkanimLoopType.Cycle;
			m_optionCounter.loopCounter = 35;
			m_animationCounterProxy = PlayLibraryAnimation( 'counter', m_optionCounter );
			m_animationCounterProxy.RegisterToCallback( inkanimEventType.OnEndLoop, this, 'OnEndLoop' );
			GameInstance.GetAudioSystem( m_gameInstance ).Play( 'ui_jingle_car_call' );
			inkTextRef.SetLocalizedTextScript( m_vehicleNameLabel, m_vehicleRecord.DisplayName() );
			SetVehicleIconManufactorIcon( m_vehicleRecord.Manufacturer().EnumName() );
			SetVehicleIcon( m_vehicleRecord.Type().Type() );
		}
	}

	public function SetVehicleIcon( vehicleType : gamedataVehicleType )
	{
		if( vehicleType == gamedataVehicleType.Bike )
		{
			inkImageRef.SetTexturePart( m_vehicleTypeIcon, 'motorcycle' );
		}
		else
		{
			inkImageRef.SetTexturePart( m_vehicleTypeIcon, 'car' );
		}
	}

	public function SetVehicleIconManufactorIcon( manufacturerName : String )
	{
		m_iconRecord = TweakDBInterface.GetUIIconRecord( TDBID.Create( "UIIcon." + manufacturerName ) );
		inkImageRef.SetTexturePart( m_vehicleManufactorIcon, m_iconRecord.AtlasPartName() );
	}

	public function HideNotification()
	{
		if( m_animationProxy && m_animationProxy.IsPlaying() )
		{
			m_animationProxy.Stop();
		}
		if( m_animationCounterProxy && m_animationCounterProxy.IsPlaying() )
		{
			m_animationCounterProxy.Stop();
		}
		m_optionIntro.loopCounter = 0;
		m_optionIntro.loopType = inkanimLoopType.None;
		m_optionIntro.loopInfinite = false;
		m_animationProxy = PlayLibraryAnimation( 'arrived', m_optionIntro );
		m_rootWidget.SetVisible( false );
		inkTextRef.SetVisible( m_subText, false );
		inkTextRef.SetVisible( m_radioStationName, false );
	}

	protected event OnIntroFinished( anim : inkAnimProxy )
	{
		if( anim && anim.IsPlaying() )
		{
			anim.Stop();
		}
		m_optionIntro.loopType = inkanimLoopType.PingPong;
		m_optionIntro.loopCounter = 35;
		anim = PlayLibraryAnimation( 'loop', m_optionIntro );
		anim.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnTimeOut' );
	}

	protected event OnEndLoop( anim : inkAnimProxy )
	{
		m_vehicleID = ( ( EntityID )( m_vehicleSummonDataBB.GetEntityID( m_vehicleSummonDataDef.SummonedVehicleEntityID ) ) );
		if( EntityID.IsDefined( m_vehicleID ) )
		{
			m_vehicleEntity = GameInstance.FindEntityByID( m_gameInstance, m_vehicleID );
			m_vehicle = ( ( VehicleObject )( m_vehicleEntity ) );
			m_distance = RoundF( Vector4.Distance( m_vehicleEntity.GetWorldPosition(), GetPlayerControlledObject().GetWorldPosition() ) );
			m_textParams = new inkTextParams;
			m_textParams.AddMeasurement( "distance", ( ( Float )( m_distance ) ), EMeasurementUnit.Meter );
			m_textParams.AddString( "unit", GetLocalizedText( NameToString( MeasurementUtils.GetUnitLocalizationKey( UILocalizationHelper.GetSystemBaseUnit() ) ) ) );
			inkTextRef.SetText( m_distanceLabel, "{distance}{unit}", m_textParams );
		}
	}

	protected event OnTimeOut( anim : inkAnimProxy )
	{
		HideNotification();
	}

	public function PlayAnim( animName : CName, optional callBack : CName )
	{
		if( m_animationProxy && m_animationProxy.IsPlaying() )
		{
			m_animationProxy.GotoStartAndStop();
		}
		m_animationProxy = PlayLibraryAnimation( animName );
		if( callBack != '' )
		{
			m_animationProxy.RegisterToCallback( inkanimEventType.OnFinish, this, callBack );
		}
	}

}

class UIVehicleRadioEvent extends Event
{
}

