class VirutalNestedListData
{
	var m_collapsable : Bool;
	var m_isHeader : Bool;
	var m_level : Int32;
	var m_forceToTopWithinLevel : Bool;
	var m_widgetType : Uint32;
	var m_data : IScriptable;
}

class VirutalNestedListClassifier extends inkVirtualItemTemplateClassifier
{

	public export virtual function ClassifyItem( data : Variant ) : Uint32
	{
		var listData : VirutalNestedListData;
		listData = ( ( VirutalNestedListData )( ( ( IScriptable )data ) ) );
		if( !( listData ) )
		{
			return 0;
		}
		return listData.m_widgetType;
	}

}

class VirtualNestedListDataView extends ScriptableDataView
{
	var m_compareBuilder : CompareBuilder;
	var m_defaultCollapsed : Bool;
	var m_toggledLevels : array< Int32 >;

	public function Setup()
	{
		m_compareBuilder = CompareBuilder.Make();
	}

	public function SetToggledLevels( const toggledLevels : ref< array< Int32 > >, defaultCollapsed : Bool )
	{
		m_toggledLevels = toggledLevels;
		m_defaultCollapsed = defaultCollapsed;
		Filter();
		EnableSorting();
		Sort();
		DisableSorting();
	}

	private export override function FilterItem( data : IScriptable ) : Bool
	{
		var itemData : VirutalNestedListData;
		itemData = ( ( VirutalNestedListData )( data ) );
		return ( itemData.m_isHeader || m_toggledLevels.Contains( itemData.m_level ) == m_defaultCollapsed ) && FilterItems( itemData );
	}

	protected virtual function FilterItems( data : VirutalNestedListData ) : Bool
	{
		return true;
	}

	private export override function SortItem( left : IScriptable, right : IScriptable ) : Bool
	{
		var leftData, rightData : VirutalNestedListData;
		leftData = ( ( VirutalNestedListData )( left ) );
		rightData = ( ( VirutalNestedListData )( right ) );
		m_compareBuilder.Reset();
		PreSortItems( m_compareBuilder, leftData, rightData );
		m_compareBuilder.IntAsc( leftData.m_level, rightData.m_level );
		m_compareBuilder.BoolTrue( leftData.m_isHeader, rightData.m_isHeader );
		m_compareBuilder.BoolTrue( leftData.m_forceToTopWithinLevel, rightData.m_forceToTopWithinLevel );
		SortItems( m_compareBuilder, leftData, rightData );
		return m_compareBuilder.GetBool();
	}

	protected virtual function PreSortItems( compareBuilder : CompareBuilder, left : VirutalNestedListData, right : VirutalNestedListData ) {}

	protected virtual function SortItems( compareBuilder : CompareBuilder, left : VirutalNestedListData, right : VirutalNestedListData ) {}
}

class VirtualNestedListController extends inkVirtualListController
{
	protected var m_dataView : VirtualNestedListDataView;
	protected var m_dataSource : ScriptableDataSource;
	protected var m_classifier : VirutalNestedListClassifier;
	protected var m_defaultCollapsed : Bool;
	protected var m_toggledLevels : array< Int32 >;

	protected event OnInitialize()
	{
		m_dataView = GetDataView();
		m_dataSource = new ScriptableDataSource;
		m_classifier = new VirutalNestedListClassifier;
		m_dataView.Setup();
		m_dataView.EnableSorting();
		m_dataView.SetSource( m_dataSource );
		SetClassifier( m_classifier );
		SetSource( m_dataView );
		m_defaultCollapsed = true;
	}

	protected event OnUninitialize()
	{
		m_dataView.SetSource( NULL );
		SetSource( NULL );
		SetClassifier( NULL );
		m_classifier = NULL;
		m_dataSource = NULL;
	}

	protected virtual function GetDataView() : VirtualNestedListDataView
	{
		var result : VirtualNestedListDataView;
		result = new VirtualNestedListDataView;
		return result;
	}

	public virtual function SetData( const data : ref< array< VirutalNestedListData > >, optional keepToggledLevels : Bool, optional sortOnce : Bool )
	{
		var i : Int32;
		var castedData : array< IScriptable >;
		for( i = 0; i < data.Size(); i += 1 )
		{
			castedData.PushBack( ( ( IScriptable )( data[ i ] ) ) );
		}
		if( !( keepToggledLevels ) )
		{
			m_toggledLevels.Clear();
		}
		m_dataSource.Reset( castedData );
		m_dataView.SetToggledLevels( m_toggledLevels, m_defaultCollapsed );
		EnableSorting();
		if( sortOnce )
		{
			DisableSorting();
		}
	}

	public virtual function ToggleLevel( targetLevel : Int32 )
	{
		if( m_toggledLevels.Contains( targetLevel ) )
		{
			m_toggledLevels.Remove( targetLevel );
		}
		else
		{
			m_toggledLevels.PushBack( targetLevel );
		}
		m_dataView.SetToggledLevels( m_toggledLevels, m_defaultCollapsed );
	}

	public virtual function IsLevelToggled( targetLevel : Int32 ) : Bool
	{
		return m_toggledLevels.Contains( targetLevel );
	}

	public function GetToggledLevels() : array< Int32 >
	{
		return m_toggledLevels;
	}

	public virtual function GetItem( index : Uint32 ) : Variant
	{
		var item : VirutalNestedListData;
		item = ( ( VirutalNestedListData )( m_dataView.GetItem( index ) ) );
		return item.m_data;
	}

	public virtual function GetDataSize() : Int32
	{
		return ( ( Int32 )( m_dataView.Size() ) );
	}

	public virtual function EnableSorting()
	{
		m_dataView.EnableSorting();
	}

	public virtual function DisableSorting()
	{
		m_dataView.DisableSorting();
	}

	public virtual function IsSortingEnabled() : Bool
	{
		return m_dataView.IsSortingEnabled();
	}

}

