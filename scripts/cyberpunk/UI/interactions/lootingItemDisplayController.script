class MinimalLootingListItemData
{
	var gameItemData : weak< gameItemData >;
	var itemName : String;
	var itemType : gamedataItemType;
	var equipmentArea : gamedataEquipmentArea;
	var quality : gamedataQuality;
	var isIconic : Bool;
	var quantity : Int32;
	var lootItemType : LootItemType;
	var tweakDBID : TweakDBID;
	var dpsDiff : Float;
	var armorDiff : Float;
}

class LootingListItemController extends inkLogicController
{
	protected editable var m_widgetWrapper : inkWidgetRef;
	protected editable var m_itemName : inkTextRef;
	protected editable var m_itemRarity : inkWidgetRef;
	protected editable var m_iconicLines : inkWidgetRef;
	protected editable var m_itemQuantity : inkTextRef;
	protected editable var m_defaultIcon : inkWidgetRef;
	protected editable var m_specialIcon : inkImageRef;
	protected editable var m_comparisionArrow : inkImageRef;
	protected editable var m_itemTypeIconWrapper : inkWidgetRef;
	protected editable var m_itemTypeIcon : inkImageRef;
	protected const editable var m_highlightFrames : array< inkWidgetRef >;
	protected var m_tooltipData : InventoryTooltipData;
	protected var m_lootingData : MinimalLootingListItemData;

	protected event OnInitialize() {}

	public function SetData( tooltipData : ATooltipData )
	{
		Setup( ( ( InventoryTooltipData )( tooltipData ) ), true );
	}

	public function SetData( tooltipData : ATooltipData, isSelected : Bool )
	{
		Setup( ( ( InventoryTooltipData )( tooltipData ) ) );
		SetHighlighted( isSelected );
	}

	protected virtual function GetDPSDiff( tooltipData : InventoryTooltipData ) : Float
	{
		var i : Int32;
		for( i = 0; i < tooltipData.primaryStats.Size(); i += 1 )
		{
			if( tooltipData.primaryStats[ i ].statType == gamedataStatType.EffectiveDPS )
			{
				return tooltipData.primaryStats[ i ].diffValueF;
			}
		}
		return 0.0;
	}

	protected virtual function GetArmorDiff( tooltipData : InventoryTooltipData ) : Float
	{
		var i : Int32;
		for( i = 0; i < tooltipData.primaryStats.Size(); i += 1 )
		{
			if( tooltipData.primaryStats[ i ].statType == gamedataStatType.Armor )
			{
				return tooltipData.primaryStats[ i ].diffValueF;
			}
		}
		return 0.0;
	}

	public virtual function Setup( tooltipData : InventoryTooltipData, optional force : Bool )
	{
		var itemData : InventoryItemData;
		if( ( m_tooltipData != tooltipData ) || force )
		{
			itemData = tooltipData.inventoryItemData;
			m_tooltipData = tooltipData;
			m_lootingData = new MinimalLootingListItemData;
			m_lootingData.gameItemData = InventoryItemData.GetGameItemData( itemData );
			if( ItemID.IsValid( m_tooltipData.itemID ) )
			{
				m_lootingData.itemName = m_tooltipData.itemName;
			}
			else
			{
				m_lootingData.itemName = InventoryItemData.GetName( itemData );
			}
			m_lootingData.itemType = InventoryItemData.GetItemType( itemData );
			m_lootingData.equipmentArea = InventoryItemData.GetEquipmentArea( itemData );
			m_lootingData.quality = RPGManager.GetItemDataQuality( m_lootingData.gameItemData );
			m_lootingData.isIconic = RPGManager.IsItemIconic( m_lootingData.gameItemData );
			m_lootingData.quantity = InventoryItemData.GetQuantity( itemData );
			m_lootingData.lootItemType = InventoryItemData.GetLootItemType( itemData );
			m_lootingData.dpsDiff = GetDPSDiff( m_tooltipData );
			m_lootingData.armorDiff = GetArmorDiff( m_tooltipData );
		}
		RefreshUI();
	}

	public virtual function Setup( lootingData : MinimalLootingListItemData, optional force : Bool )
	{
		if( ( m_lootingData != lootingData ) || force )
		{
			m_lootingData = lootingData;
		}
		RefreshUI();
	}

	public function SetData( data : MinimalLootingListItemData )
	{
		Setup( data, true );
	}

	public function SetData( data : MinimalLootingListItemData, isSelected : Bool )
	{
		Setup( data );
		SetHighlighted( isSelected );
	}

	public function GetTooltipData() : InventoryTooltipData
	{
		return m_tooltipData;
	}

	protected virtual function RefreshUI()
	{
		UpdateItemName();
		UpdateRarity();
		UpdateQuantity();
		UpdateLootIcon();
		UpdateIcon();
	}

	protected virtual function UpdateIcon()
	{
		var iconName : CName;
		iconName = UIItemsHelper.GetLootingtShadowIcon( m_lootingData.tweakDBID, TDBID.None(), m_lootingData.itemType, m_lootingData.equipmentArea );
		if( IsNameValid( iconName ) && iconName != 'UIIcon.LootingShadow_Default' )
		{
			inkWidgetRef.SetVisible( m_itemTypeIconWrapper, true );
			InkImageUtils.RequestSetImage( this, m_itemTypeIcon, iconName );
		}
		else
		{
			inkWidgetRef.SetVisible( m_itemTypeIconWrapper, false );
		}
	}

	protected virtual function UpdateItemName()
	{
		if( inkTextRef.Get( m_itemName ) )
		{
			inkTextRef.SetText( m_itemName, m_lootingData.itemName );
		}
	}

	protected virtual function UpdateRarity()
	{
		var qualityName : CName;
		qualityName = UIItemsHelper.QualityEnumToName( m_lootingData.quality );
		inkWidgetRef.SetVisible( m_itemRarity, m_lootingData.quality != gamedataQuality.Invalid );
		inkWidgetRef.SetState( m_itemRarity, ( ( m_lootingData.isIconic ) ? ( 'Iconic' ) : ( qualityName ) ) );
		inkWidgetRef.SetVisible( m_iconicLines, m_lootingData.isIconic );
	}

	protected virtual function UpdateQuantity()
	{
		var displayQuantityText : Bool;
		var quantityText : String;
		displayQuantityText = false;
		if( m_lootingData )
		{
			if( ( m_lootingData.quantity > 0 ) || m_lootingData.itemType == gamedataItemType.Con_Ammo )
			{
				quantityText = ( ( m_lootingData.quantity > 9999 ) ? ( "9999+" ) : ( IntToString( m_lootingData.quantity ) ) );
				inkTextRef.SetText( m_itemQuantity, quantityText );
				displayQuantityText = true;
			}
			if( m_lootingData.equipmentArea == gamedataEquipmentArea.Weapon )
			{
				displayQuantityText = false;
			}
		}
		inkTextRef.SetVisible( m_itemQuantity, displayQuantityText );
	}

	protected virtual function UpdateLootIcon()
	{
		var diff : Float;
		if( m_lootingData.lootItemType == LootItemType.Default )
		{
			inkImageRef.SetVisible( m_comparisionArrow, false );
			inkWidgetRef.SetVisible( m_defaultIcon, false );
			inkImageRef.SetVisible( m_specialIcon, false );
			if( m_lootingData.equipmentArea == gamedataEquipmentArea.Weapon )
			{
				diff = m_lootingData.dpsDiff;
			}
			else if( ( ( ( ( ( m_lootingData.equipmentArea == gamedataEquipmentArea.Face || m_lootingData.equipmentArea == gamedataEquipmentArea.Feet ) || m_lootingData.equipmentArea == gamedataEquipmentArea.Head ) || m_lootingData.equipmentArea == gamedataEquipmentArea.InnerChest ) || m_lootingData.equipmentArea == gamedataEquipmentArea.Legs ) || m_lootingData.equipmentArea == gamedataEquipmentArea.OuterChest ) || m_lootingData.equipmentArea == gamedataEquipmentArea.Outfit )
			{
				diff = m_lootingData.armorDiff;
			}
			if( diff > 0.01 )
			{
				inkImageRef.SetVisible( m_comparisionArrow, true );
				inkImageRef.SetState( m_comparisionArrow, 'Better' );
				inkImageRef.SetRotation( m_comparisionArrow, 0.0 );
			}
			else if( diff < -0.01 )
			{
				inkImageRef.SetVisible( m_comparisionArrow, true );
				inkImageRef.SetState( m_comparisionArrow, 'Worse' );
				inkImageRef.SetRotation( m_comparisionArrow, 180.0 );
			}
		}
		else
		{
			inkWidgetRef.SetVisible( m_defaultIcon, false );
			inkImageRef.SetVisible( m_comparisionArrow, false );
			inkImageRef.SetVisible( m_specialIcon, true );
			if( m_lootingData.lootItemType == LootItemType.Quest )
			{
				inkImageRef.SetTexturePart( m_specialIcon, 'quest' );
			}
		}
	}

	public virtual function SetHighlighted( value : Bool )
	{
		var i : Int32;
		for( i = 0; i < m_highlightFrames.Size(); i += 1 )
		{
			inkWidgetRef.SetVisible( m_highlightFrames[ i ], value );
		}
	}

}

