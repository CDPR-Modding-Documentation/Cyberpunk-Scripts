class VendorHubMenuGameController extends gameuiMenuGameController
{
	private editable var m_tabRootContainer : inkWidgetRef;
	private editable var m_tabRootRef : inkWidgetRef;
	private editable var m_playerCurrency : inkTextRef;
	private editable var m_vendorShopLabel : inkTextRef;
	private editable var m_notificationRoot : inkWidgetRef;
	private editable var m_playerWeight : inkTextRef;
	private editable var m_levelValue : inkTextRef;
	private editable var m_streetCredLabel : inkTextRef;
	private editable var m_levelBarProgress : inkWidgetRef;
	private editable var m_levelBarSpacer : inkWidgetRef;
	private editable var m_streetCredBarProgress : inkWidgetRef;
	private editable var m_streetCredBarSpacer : inkWidgetRef;
	private var m_VendorDataManager : VendorDataManager;
	private var m_vendorUserData : VendorUserData;
	private var m_vendorPanelData : VendorPanelData;
	private var m_storageUserData : StorageUserData;
	private var m_PDS : PlayerDevelopmentSystem;
	private var m_root : weak< inkWidget >;
	private var m_tabRoot : weak< TabRadioGroup >;
	var m_VendorBlackboard : weak< IBlackboard >;
	var m_playerStatsBlackboard : weak< IBlackboard >;
	var m_VendorBlackboardDef : UI_VendorDef;
	var m_VendorUpdatedCallbackID : CallbackHandle;
	var m_weightListener : CallbackHandle;
	var m_characterLevelListener : CallbackHandle;
	var m_characterCurrentXPListener : CallbackHandle;
	var m_characterCredListener : CallbackHandle;
	var m_characterCredPointsListener : CallbackHandle;
	var m_characterCurrentHealthListener : CallbackHandle;
	private var m_menuEventDispatcher : weak< inkMenuEventDispatcher >;
	private var m_player : weak< PlayerPuppet >;
	private var m_menuData : array< MenuData >;
	private var m_storageDef : StorageBlackboardDef;
	private var m_storageBlackboard : weak< IBlackboard >;

	protected event OnInitialize()
	{
		SpawnFromLocal( inkWidgetRef.Get( m_notificationRoot ), 'notification_layer' );
	}

	protected event OnUninitialize()
	{
		var vendorData : VendorData;
		vendorData.isActive = false;
		m_VendorBlackboard.SetVariant( GetAllBlackboardDefs().UI_Vendor.VendorData, vendorData, true );
		RemoveBB();
		UnregisterFromGlobalInputCallback( 'OnPostOnRelease', this, 'OnButtonRelease' );
	}

	protected event OnSetUserData( userData : IScriptable )
	{
		var vendorPanelData : VendorPanelData;
		var storageUserData : StorageUserData;
		var vendorData : VendorData;
		var requestStatsEvent : RequestStatsBB;
		m_storageDef = GetAllBlackboardDefs().StorageBlackboard;
		m_storageBlackboard = GetBlackboardSystem().Get( m_storageDef );
		storageUserData = ( ( StorageUserData )( m_storageBlackboard.GetVariant( m_storageDef.StorageData ) ) );
		if( ( userData == NULL ) && ( storageUserData == NULL ) )
		{
			return false;
		}
		vendorPanelData = ( ( VendorPanelData )( userData ) );
		m_storageUserData = storageUserData;
		if( vendorPanelData )
		{
			vendorData = vendorPanelData.data;
			m_vendorUserData = new VendorUserData;
			m_vendorUserData.vendorData = vendorPanelData;
			m_player = ( ( weak< weak< PlayerPuppet > > )( GetPlayerControlledObject() ) );
			m_PDS = ( ( PlayerDevelopmentSystem )( GameInstance.GetScriptableSystemsContainer( ( ( GameObject )( m_player ) ).GetGame() ).Get( 'PlayerDevelopmentSystem' ) ) );
			m_VendorDataManager = new VendorDataManager;
			m_VendorDataManager.Initialize( GetPlayerControlledObject(), vendorData.entityID );
			requestStatsEvent = new RequestStatsBB;
			requestStatsEvent.Set( m_player );
			m_PDS.QueueRequest( requestStatsEvent );
			Init();
		}
		else if( storageUserData )
		{
			m_player = ( ( weak< weak< PlayerPuppet > > )( GetPlayerControlledObject() ) );
			m_PDS = ( ( PlayerDevelopmentSystem )( GameInstance.GetScriptableSystemsContainer( ( ( GameObject )( m_player ) ).GetGame() ).Get( 'PlayerDevelopmentSystem' ) ) );
			m_VendorDataManager = new VendorDataManager;
			m_VendorDataManager.Initialize( GetPlayerControlledObject(), vendorData.entityID );
			requestStatsEvent = new RequestStatsBB;
			requestStatsEvent.Set( m_player );
			m_PDS.QueueRequest( requestStatsEvent );
			Init();
		}
	}

	private function Init()
	{
		RegisterToGlobalInputCallback( 'OnPostOnRelease', this, 'OnButtonRelease' );
		RegisterToGlobalInputCallback( 'OnPostOnAxis', this, 'OnButtonRelease' );
		m_root = GetRootWidget();
		SetupMenuTabs();
		SetupTopBar();
		SetupBB();
		OnPlayerWeightUpdated( -1.0 );
	}

	private function SetupBB()
	{
		var vendorData : VendorData;
		vendorData.isActive = true;
		m_VendorBlackboardDef = GetAllBlackboardDefs().UI_Vendor;
		m_VendorBlackboard = GetBlackboardSystem().Get( m_VendorBlackboardDef );
		m_VendorBlackboard.SetVariant( GetAllBlackboardDefs().UI_Vendor.VendorData, vendorData, true );
		m_playerStatsBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_PlayerStats );
		m_weightListener = m_playerStatsBlackboard.RegisterDelayedListenerFloat( GetAllBlackboardDefs().UI_PlayerStats.currentInventoryWeight, this, 'OnPlayerWeightUpdated' );
		m_characterLevelListener = m_playerStatsBlackboard.RegisterDelayedListenerInt( GetAllBlackboardDefs().UI_PlayerStats.Level, this, 'OnCharacterLevelUpdated' );
		m_characterCurrentXPListener = m_playerStatsBlackboard.RegisterDelayedListenerInt( GetAllBlackboardDefs().UI_PlayerStats.CurrentXP, this, 'OnCharacterLevelCurrentXPUpdated' );
		m_playerStatsBlackboard.SignalInt( GetAllBlackboardDefs().UI_PlayerStats.CurrentXP );
		m_characterCredListener = m_playerStatsBlackboard.RegisterDelayedListenerInt( GetAllBlackboardDefs().UI_PlayerStats.StreetCredLevel, this, 'OnCharacterStreetCredLevelUpdated' );
		m_playerStatsBlackboard.SignalInt( GetAllBlackboardDefs().UI_PlayerStats.StreetCredLevel );
		m_characterCredPointsListener = m_playerStatsBlackboard.RegisterDelayedListenerInt( GetAllBlackboardDefs().UI_PlayerStats.StreetCredPoints, this, 'OnCharacterStreetCredPointsUpdated' );
		m_playerStatsBlackboard.SignalInt( GetAllBlackboardDefs().UI_PlayerStats.StreetCredPoints );
		m_playerStatsBlackboard.SignalInt( GetAllBlackboardDefs().UI_PlayerStats.weightMax );
		m_playerStatsBlackboard.SignalInt( GetAllBlackboardDefs().UI_PlayerStats.Level );
		m_characterCurrentHealthListener = m_playerStatsBlackboard.RegisterDelayedListenerInt( GetAllBlackboardDefs().UI_PlayerStats.CurrentHealth, this, 'OnCharacterCurrentHealthUpdated' );
		if( m_VendorBlackboard )
		{
			m_VendorUpdatedCallbackID = m_VendorBlackboard.RegisterDelayedListenerVariant( m_VendorBlackboardDef.VendorData, this, 'OnVendorUpdated' );
		}
	}

	private function RemoveBB()
	{
		if( m_VendorBlackboard )
		{
			m_VendorBlackboard.UnregisterDelayedListener( m_VendorBlackboardDef.VendorData, m_VendorUpdatedCallbackID );
		}
		if( m_playerStatsBlackboard )
		{
			m_playerStatsBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_PlayerStats.Level, m_characterLevelListener );
			m_playerStatsBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_PlayerStats.CurrentXP, m_characterCurrentXPListener );
			m_playerStatsBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_PlayerStats.StreetCredLevel, m_characterCredListener );
			m_playerStatsBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_PlayerStats.StreetCredPoints, m_characterCredPointsListener );
			m_playerStatsBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().UI_PlayerStats.CurrentXP, m_characterCurrentHealthListener );
		}
		m_VendorBlackboard = NULL;
	}

	private function SetupTopBar()
	{
		inkTextRef.SetText( m_playerCurrency, IntToString( m_VendorDataManager.GetLocalPlayerCurrencyAmount() ) );
		inkTextRef.SetText( m_vendorShopLabel, m_VendorDataManager.GetVendorName() );
	}

	protected event OnPlayerWeightUpdated( value : Float )
	{
		var carryCapacity : Int32;
		var gameInstance : GameInstance;
		gameInstance = ( ( weak< weak< GameObject > > )( m_player ) ).GetGame();
		carryCapacity = ( ( Int32 )( GameInstance.GetStatsSystem( gameInstance ).GetStatValue( m_player.GetEntityID(), gamedataStatType.CarryCapacity ) ) );
		inkTextRef.SetText( m_playerWeight, ( IntToString( RoundF( m_player.m_curInventoryWeight ) ) + " / " ) + carryCapacity );
	}

	protected event OnCharacterLevelUpdated( value : Int32 )
	{
		inkTextRef.SetText( m_levelValue, IntToString( value ) );
	}

	protected event OnCharacterLevelCurrentXPUpdated( value : Int32 )
	{
		var remainingXP : Int32;
		var percentageValue : Float;
		remainingXP = m_PDS.GetRemainingExpForLevelUp( m_player, gamedataProficiencyType.Level );
		percentageValue = ( ( Float )( value ) ) / ( ( Float )( ( remainingXP + value ) ) );
		inkWidgetRef.SetSizeCoefficient( m_levelBarProgress, percentageValue );
		inkWidgetRef.SetSizeCoefficient( m_levelBarSpacer, 1.0 - percentageValue );
	}

	protected event OnCharacterStreetCredLevelUpdated( value : Int32 )
	{
		inkTextRef.SetText( m_streetCredLabel, ( ( String )( value ) ) );
	}

	protected event OnCharacterStreetCredPointsUpdated( value : Int32 )
	{
		var remainingXP : Int32;
		var percentageValue : Float;
		remainingXP = m_PDS.GetRemainingExpForLevelUp( m_player, gamedataProficiencyType.StreetCred );
		percentageValue = ( ( Float )( value ) ) / ( ( Float )( ( remainingXP + value ) ) );
		inkWidgetRef.SetSizeCoefficient( m_streetCredBarProgress, percentageValue );
		inkWidgetRef.SetSizeCoefficient( m_streetCredBarSpacer, 1.0 - percentageValue );
	}

	protected event OnCharacterCurrentHealthUpdated( value : Int32 )
	{
		if( value <= 0 )
		{
			CloseVendor();
		}
	}

	private function SetupMenuTabs()
	{
		var labels : array< String >;
		var icons : array< String >;
		var isRipperdoc : Bool;
		var selectedIdentifier : Int32;
		var vendorObject : weak< NPCPuppet >;
		vendorObject = ( ( NPCPuppet )( m_VendorDataManager.GetVendorInstance() ) );
		isRipperdoc = vendorObject.IsRipperdoc();
		inkWidgetRef.SetVisible( m_tabRootContainer, false );
		if( m_vendorUserData && isRipperdoc )
		{
			m_tabRoot = ( ( TabRadioGroup )( inkWidgetRef.GetController( m_tabRootRef ) ) );
			labels.PushBack( "UI-PanelNames-TRADE" );
			labels.PushBack( "UI-PanelNames-CYBERWARE" );
			icons.PushBack( "ico_cyberware" );
			icons.PushBack( "ico_cyberware" );
			m_tabRoot.SetData( 2, NULL, labels, icons );
			inkWidgetRef.SetVisible( m_tabRootContainer, true );
			m_tabRoot.RegisterToCallback( 'OnValueChanged', this, 'OnValueChanged' );
			selectedIdentifier = ( ( isRipperdoc ) ? ( ( ( Int32 )( HubVendorMenuItems.Cyberware ) ) ) : ( ( ( Int32 )( HubVendorMenuItems.Trade ) ) ) );
			m_tabRoot.Toggle( selectedIdentifier );
			OnValueChanged( m_tabRoot, selectedIdentifier );
		}
		else
		{
			m_vendorUserData.menu = "TRADE";
			m_menuEventDispatcher.SpawnEvent( 'OnSwitchToVendor', m_vendorUserData );
		}
	}

	protected event OnValueChanged( controller : weak< inkRadioGroupController >, selectedIndex : Int32 )
	{
		switch( selectedIndex )
		{
			case 0:
				m_vendorUserData.menu = "TRADE";
			m_menuEventDispatcher.SpawnEvent( 'OnSwitchToVendor', m_vendorUserData );
			break;
			case 1:
				m_vendorUserData.menu = "CYBERWARE";
			m_menuEventDispatcher.SpawnEvent( 'OnSwitchToRipperDoc', m_vendorUserData );
			break;
		}
		NotifyActivePanel( ( ( HubVendorMenuItems )( selectedIndex ) ) );
	}

	protected event OnButtonRelease( evt : inkPointerEvent )
	{
		if( evt.IsHandled() )
		{
			return false;
		}
		if( evt.IsAction( 'prior_menu' ) && m_vendorUserData.menu != "TRADE" )
		{
			m_tabRoot.Toggle( 0 );
		}
		else if( evt.IsAction( 'next_menu' ) && m_vendorUserData.menu != "CYBERWARE" )
		{
			m_tabRoot.Toggle( 1 );
		}
		else if( evt.IsAction( 'back' ) )
		{
			if( StatusEffectSystem.ObjectHasStatusEffectWithTag( GetPlayerControlledObject(), 'LockInHubMenu' ) )
			{
				return false;
			}
			else if( m_vendorUserData.menu != "CYBERWARE" )
			{
				CloseVendor();
			}
		}
	}

	protected event OnVendorUpdated( value : Variant )
	{
		SetupTopBar();
	}

	private function NotifyActivePanel( item : HubVendorMenuItems )
	{
		var evt : VendorHubMenuChanged;
		evt = new VendorHubMenuChanged;
		evt.item = item;
		QueueEvent( evt );
	}

	protected event OnSetMenuEventDispatcher( menuEventDispatcher : weak< inkMenuEventDispatcher > )
	{
		m_menuEventDispatcher = menuEventDispatcher;
	}

	private function CloseVendor()
	{
		var menuEvent : inkMenuInstance_SpawnEvent;
		menuEvent = new inkMenuInstance_SpawnEvent;
		menuEvent.Init( 'OnVendorClose' );
		QueueEvent( menuEvent );
	}

}

class VendorHubMenuChanged extends Event
{
	var item : HubVendorMenuItems;
}

