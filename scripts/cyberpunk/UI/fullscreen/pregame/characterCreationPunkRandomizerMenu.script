class RandomizationLockListItem extends inkLogicController
{
	private editable var m_checker : inkWidgetRef;
	private editable var m_lockIcon : inkWidgetRef;
	private editable var m_hitArea : inkWidgetRef;
	private editable var m_lockName : inkTextRef;
	private var m_navigationController : weak< inkDiscreteNavigationController >;
	private var m_lockCategory : weak< CharacterRandomizationCategory_Record >;
	private var m_isHovered : Bool;
	default m_isHovered = false;
	private var m_isInteractable : Bool;
	default m_isInteractable = true;
	private var m_rootWidget : weak< inkWidget >;

	protected event OnInitialize()
	{
		if( inkWidgetRef.IsValid( m_hitArea ) )
		{
			inkWidgetRef.RegisterToCallback( m_hitArea, 'OnHoverOver', this, 'OnHoverOver' );
			inkWidgetRef.RegisterToCallback( m_hitArea, 'OnHoverOut', this, 'OnHoverOut' );
		}
		m_rootWidget = GetRootWidget();
		m_navigationController = ( ( inkDiscreteNavigationController )( inkWidgetRef.GetController( m_hitArea ) ) );
		EnableLock( false );
	}

	protected event OnUninitialize()
	{
		inkWidgetRef.UnregisterFromCallback( m_hitArea, 'OnHoverOver', this, 'OnHoverOver' );
		inkWidgetRef.UnregisterFromCallback( m_hitArea, 'OnHoverOut', this, 'OnHoverOut' );
	}

	public function SwitchLock() : Bool
	{
		EnableLock( !( inkWidgetRef.IsVisible( m_checker ) ) );
		return IsLockEnabled();
	}

	public function EnableLock( enable : Bool )
	{
		if( m_isInteractable )
		{
			inkWidgetRef.SetVisible( m_checker, enable );
			inkWidgetRef.SetVisible( m_lockIcon, enable );
			if( m_isHovered )
			{
				SetLockState( 'Hover' );
				return;
			}
			if( enable )
			{
				SetLockState( 'Disabled' );
			}
			else
			{
				SetLockState( 'Default' );
			}
		}
	}

	public function SetLockInteractable( interactable : Bool )
	{
		m_navigationController.SetInputDisabled( interactable );
		m_navigationController.SetNavigable( interactable );
		m_isInteractable = interactable;
	}

	public function IsLockEnabled() : Bool
	{
		return inkWidgetRef.IsVisible( m_checker );
	}

	public function IsLockHovered() : Bool
	{
		return m_rootWidget.GetState() == 'Hover';
	}

	public function SetLockState( state : CName )
	{
		m_rootWidget.SetState( state );
	}

	public function SetLockCategory( lockCategory : weak< CharacterRandomizationCategoryUI_Record > )
	{
		m_lockCategory = lockCategory.CategoryType();
		inkTextRef.SetLocalizedText( m_lockName, lockCategory.CategoryName() );
	}

	public function GetLockCategory() : CharacterRandomizationCategory_Record
	{
		return m_lockCategory;
	}

	protected event OnHoverOver( e : inkPointerEvent )
	{
		if( m_isInteractable )
		{
			SetLockState( 'Hover' );
		}
	}

	protected event OnHoverOut( e : inkPointerEvent )
	{
		if( m_isInteractable )
		{
			SetLockState( ( ( IsLockEnabled() ) ? ( 'Disabled' ) : ( 'Default' ) ) );
		}
	}

}

import class gameuiCharacterRandomizationParametersData extends IScriptable
{
	public import function GetRating() : Int32;
	public import function SetRating( rating : Int32 );
	public import function IsCategoryLocked( category : gamedataCharacterRandomizationCategory ) : Bool;
	public import function SetLockedCategories( categories : array< gamedataCharacterRandomizationCategory > );
}

class PunkScoreSelectorControllerInt extends inkLogicController
{
	private editable var m_sliderWidget : inkWidgetRef;
	private editable var m_labelMinWidget : inkWidgetRef;
	private editable var m_labelMaxWidget : inkWidgetRef;
	private var m_rootWidget : weak< inkWidget >;
	private var m_newValue : Int32;
	default m_newValue = 5f;
	private var m_localValue : Int32;
	private var m_inputDisabled : Bool;
	default m_inputDisabled = false;
	private var m_sliderController : weak< inkSliderController >;
	private var m_sliderButtonController : weak< inkButtonController >;
	private var m_sliderAreaWidget : inkWidgetRef;
	private var m_sliderHandleWidget : inkWidgetRef;
	protected editable var m_ValueText : inkTextRef;
	protected editable var m_LeftArrow : inkWidgetRef;
	protected editable var m_RightArrow : inkWidgetRef;
	private editable var m_HintsContainer : inkWidgetRef;

	protected event OnInitialize()
	{
		m_rootWidget = GetRootWidget();
		if( inkWidgetRef.IsValid( m_LeftArrow ) )
		{
			inkWidgetRef.RegisterToCallback( m_LeftArrow, 'OnRelease', this, 'OnLeft' );
		}
		if( inkWidgetRef.IsValid( m_RightArrow ) )
		{
			inkWidgetRef.RegisterToCallback( m_RightArrow, 'OnRelease', this, 'OnRight' );
		}
		RegisterToCallback( 'OnHoverOver', this, 'OnHoverOver' );
		RegisterToCallback( 'OnHoverOut', this, 'OnHoverOut' );
		RegisterToCallback( 'OnRelease', this, 'OnShortcutPress' );
		RegisterToCallback( 'OnRepeat', this, 'OnShortcutRepeat' );
		m_localValue = 0;
		m_sliderController = ( ( inkSliderController )( inkWidgetRef.GetControllerByType( m_sliderWidget, 'inkSliderController' ) ) );
		m_sliderController.Setup( 1.0, 10.0, ( ( Float )( m_newValue ) ), 1.0 );
		m_sliderController.RegisterToCallback( 'OnSliderValueChanged', this, 'OnSliderValueChanged' );
		m_sliderButtonController = ( ( inkButtonController )( inkWidgetRef.GetControllerByType( m_sliderWidget, 'inkButtonController' ) ) );
		m_sliderAreaWidget = m_sliderController.GetSlidingAreaRef();
		m_sliderHandleWidget = m_sliderController.GetHandleRef();
		inkWidgetRef.SetVisible( m_HintsContainer, false );
		Refresh();
		UpdateDisabledInputState();
	}

	protected event OnUninitialize()
	{
		UnregisterFromCallback( 'OnHoverOver', this, 'OnHoverOver' );
		UnregisterFromCallback( 'OnHoverOut', this, 'OnHoverOut' );
		UnregisterFromCallback( 'OnRelease', this, 'OnShortcutPress' );
		UnregisterFromCallback( 'OnRepeat', this, 'OnShortcutRepeat' );
		m_sliderController.UnregisterFromCallback( 'OnSliderValueChanged', this, 'OnSliderValueChanged' );
		inkWidgetRef.UnregisterFromCallback( m_LeftArrow, 'OnRelease', this, 'OnLeft' );
		inkWidgetRef.UnregisterFromCallback( m_RightArrow, 'OnRelease', this, 'OnRight' );
	}

	protected function UpdateValueTextLanguageResources()
	{
		var languageProvider : inkLanguageOverrideProvider;
		languageProvider = ( ( inkLanguageOverrideProvider )( inkTextRef.GetUserData( m_ValueText, 'inkLanguageOverrideProvider' ) ) );
		languageProvider.SetLanguage( scnDialogLineLanguage.Origin );
		inkTextRef.UpdateLanguageResources( m_ValueText, false );
	}

	public function SetDisabledInputState( inputDisabled : Bool )
	{
		m_inputDisabled = inputDisabled;
		UpdateDisabledInputState();
	}

	private function UpdateDisabledInputState()
	{
		inkWidgetRef.SetInteractive( m_LeftArrow, !( m_inputDisabled ) );
		inkWidgetRef.SetInteractive( m_RightArrow, !( m_inputDisabled ) );
		inkWidgetRef.SetInteractive( m_sliderWidget, !( m_inputDisabled ) );
		inkWidgetRef.SetInteractive( m_sliderAreaWidget, !( m_inputDisabled ) );
		inkWidgetRef.SetInteractive( m_sliderHandleWidget, !( m_inputDisabled ) );
		m_sliderButtonController.SetNavigable( !( m_inputDisabled ) );
		m_sliderButtonController.SetSelectable( !( m_inputDisabled ) );
		m_sliderController.SetInputDisabled( m_inputDisabled );
		m_sliderButtonController.SetInputDisabled( m_inputDisabled );
		if( m_inputDisabled )
		{
			m_sliderButtonController.SetSelected( false );
			inkWidgetRef.SetState( m_labelMinWidget, 'Default' );
			inkWidgetRef.SetState( m_labelMaxWidget, 'Default' );
			inkWidgetRef.SetVisible( m_HintsContainer, false );
		}
	}

	protected event OnLeft( e : inkPointerEvent )
	{
		if( ( !( m_inputDisabled ) && e.IsAction( 'click' ) ) && !( e.IsHandled() ) )
		{
			PlaySound( 'ButtonValueDown', 'OnPress' );
			ChangeValue( false );
			e.Handle();
		}
	}

	protected event OnRight( e : inkPointerEvent )
	{
		if( ( !( m_inputDisabled ) && e.IsAction( 'click' ) ) && !( e.IsHandled() ) )
		{
			PlaySound( 'ButtonValueDown', 'OnPress' );
			ChangeValue( true );
			e.Handle();
		}
	}

	protected event OnHoverOver( e : inkPointerEvent )
	{
		if( !( m_inputDisabled ) )
		{
			inkWidgetRef.SetState( m_labelMinWidget, 'Hover' );
			inkWidgetRef.SetState( m_labelMaxWidget, 'Hover' );
			inkWidgetRef.SetVisible( m_HintsContainer, true );
		}
	}

	protected event OnHoverOut( e : inkPointerEvent )
	{
		if( !( m_inputDisabled ) )
		{
			inkWidgetRef.SetState( m_labelMinWidget, 'Default' );
			inkWidgetRef.SetState( m_labelMaxWidget, 'Default' );
			inkWidgetRef.SetVisible( m_HintsContainer, false );
		}
	}

	protected event OnSliderValueChanged( sliderController : weak< inkSliderController >, progress, value : Float )
	{
		m_newValue = ( ( Int32 )( ClampF( value, m_sliderController.GetMinValue(), m_sliderController.GetMaxValue() ) ) );
		Refresh();
	}

	protected event OnShortcutRepeat( e : inkPointerEvent )
	{
		if( !( m_inputDisabled ) && !( e.IsHandled() ) )
		{
			if( e.IsAction( 'option_switch_prev' ) )
			{
				ChangeValue( false );
				e.Handle();
			}
			else if( e.IsAction( 'option_switch_next' ) )
			{
				ChangeValue( true );
				e.Handle();
			}
		}
	}

	protected event OnShortcutPress( e : inkPointerEvent )
	{
		if( !( m_inputDisabled ) && !( e.IsHandled() ) )
		{
			if( e.IsAction( 'option_switch_prev' ) )
			{
				PlaySound( 'ButtonValueDown', 'OnPress' );
				AcceptValue( false );
				e.Handle();
			}
			else if( e.IsAction( 'option_switch_next' ) )
			{
				PlaySound( 'ButtonValueUp', 'OnPress' );
				AcceptValue( true );
				e.Handle();
			}
		}
	}

	private function ChangeValue( forward : Bool )
	{
		var step : Int32;
		step = ( ( forward ) ? ( 1 ) : ( -1 ) );
		m_newValue = Clamp( m_newValue + step, 1, 10 );
		Refresh();
	}

	private function AcceptValue( forward : Bool )
	{
		if( m_localValue == m_newValue )
		{
			ChangeValue( forward );
		}
	}

	public function Refresh()
	{
		UpdateValueTextLanguageResources();
		inkTextRef.SetText( m_ValueText, IntToString( m_newValue ) );
		m_sliderController.ChangeValue( ( ( Float )( m_newValue ) ) );
		m_localValue = m_newValue;
		CallCustomCallback( 'OnValueUpdated' );
	}

	public function SetValue( value : Int32 )
	{
		m_newValue = value;
		Refresh();
	}

	public function GetValue() : Int32
	{
		return m_localValue;
	}

}

class gameuiCharacterRandomizationController extends inkLogicController
{
	private editable var m_punkSlider : inkWidgetRef;
	private editable var m_locksGrid : inkGridRef;
	private editable var m_editMode : gameuiCharacterCustomizationEditTag;
	default m_editMode = gameuiCharacterCustomizationEditTag.NewGame;
	private editable var m_inputDisabled : Bool;
	default m_inputDisabled = false;
	private var m_lockedCategories : array< gamedataCharacterRandomizationCategory >;
	private var m_excludedCatergoriesMirror : array< gamedataCharacterRandomizationCategory >;
	private var m_lockWidgets : array< weak< inkWidget > >;
	private var m_lockLogics : array< weak< RandomizationLockListItem > >;
	private var m_lockDatas : array< CharacterRandomizationCategoryUI_Record >;
	private var m_data : gameuiCharacterRandomizationParametersData;
	private var m_customizationSystem : weak< gameuiICharacterCustomizationSystem >;
	private var m_punkSliderController : weak< PunkScoreSelectorControllerInt >;

	protected event OnInitialize()
	{
		inkWidgetRef.RegisterToCallback( m_punkSlider, 'OnValueUpdated', this, 'OnPunkScoreUpdateValue' );
		m_punkSliderController = ( ( PunkScoreSelectorControllerInt )( inkWidgetRef.GetController( m_punkSlider ) ) );
		m_data = new gameuiCharacterRandomizationParametersData;
		InitializeExclusionArrays();
		if( inkWidgetRef.IsValid( m_punkSlider ) )
		{
			OnPunkScoreUpdateValue( inkWidgetRef.Get( m_punkSlider ) );
		}
		InitializeRandomizerLocksList();
		UpdateDisabledInputState();
	}

	protected event OnPunkScoreUpdateValue( widget : weak< inkWidget > )
	{
		var slider : weak< PunkScoreSelectorControllerInt >;
		slider = ( ( PunkScoreSelectorControllerInt )( widget.GetController() ) );
		m_data.SetRating( slider.GetValue() );
	}

	public function GetRandomizerData() : gameuiCharacterRandomizationParametersData
	{
		return m_data;
	}

	public function UpdateEditMode( editMode : gameuiCharacterCustomizationEditTag )
	{
		m_editMode = editMode;
		ApplyEditModeFilter();
	}

	public function UpdateRandomizationSettingsFromData()
	{
		var i : Int32;
		m_data = m_customizationSystem.GetRandomizationParameters();
		for( i = 0; i < m_lockLogics.Size(); i += 1 )
		{
			m_lockLogics[ i ].EnableLock( m_data.IsCategoryLocked( m_lockLogics[ i ].GetLockCategory().Type() ) );
		}
		m_punkSliderController.SetValue( m_data.GetRating() );
	}

	public function SetCustomizationSystem( customizationSystem : weak< gameuiICharacterCustomizationSystem > )
	{
		m_customizationSystem = customizationSystem;
	}

	public function SetDisabledInputState( inputDisabled : Bool )
	{
		var slider : weak< PunkScoreSelectorControllerInt >;
		slider = ( ( PunkScoreSelectorControllerInt )( inkWidgetRef.Get( m_punkSlider ).GetController() ) );
		slider.SetDisabledInputState( inputDisabled );
		inkWidgetRef.Get( m_punkSlider ).SetInteractive( !( inputDisabled ) );
		m_inputDisabled = inputDisabled;
		UpdateDisabledInputState();
	}

	private function InitializeExclusionArrays()
	{
		m_excludedCatergoriesMirror.PushBack( gamedataCharacterRandomizationCategory.Skin );
		m_excludedCatergoriesMirror.PushBack( gamedataCharacterRandomizationCategory.Face );
		m_excludedCatergoriesMirror.PushBack( gamedataCharacterRandomizationCategory.Body );
		m_excludedCatergoriesMirror.PushBack( gamedataCharacterRandomizationCategory.FacialHair );
		m_excludedCatergoriesMirror.PushBack( gamedataCharacterRandomizationCategory.Tattoos );
	}

	private function ShouldDisplayLockCategory( testedCategory : gamedataCharacterRandomizationCategory ) : Bool
	{
		var shouldDisplay : Bool;
		shouldDisplay = true;
		if( m_excludedCatergoriesMirror.Contains( testedCategory ) )
		{
			shouldDisplay = shouldDisplay && m_editMode != gameuiCharacterCustomizationEditTag.HairDresser;
		}
		if( testedCategory == gamedataCharacterRandomizationCategory.Body )
		{
			shouldDisplay = shouldDisplay && m_customizationSystem.IsNudityAllowed();
			shouldDisplay = shouldDisplay && !( m_customizationSystem.GetState().IsBodyGenderMale() );
		}
		return shouldDisplay;
	}

	private function ApplyEditModeFilter()
	{
		var i : Int32;
		for( i = 0; i < m_lockWidgets.Size(); i += 1 )
		{
			m_lockWidgets[ i ].SetVisible( ShouldDisplayLockCategory( m_lockDatas[ i ].CategoryTypeHandle().Type() ) );
		}
	}

	private function UpdateDisabledInputState()
	{
		var i : Int32;
		if( m_lockWidgets.Size() == m_lockLogics.Size() )
		{
			for( i = 0; i < m_lockWidgets.Size(); i += 1 )
			{
				m_lockWidgets[ i ].SetInteractive( !( m_inputDisabled ) );
				m_lockLogics[ i ].SetLockInteractable( !( m_inputDisabled ) );
			}
		}
	}

	private function InitializeRandomizerLocksList()
	{
		var locksList : CharacterRandomizationCategoriesList_Record;
		var count, i : Int32;
		locksList = ( ( CharacterRandomizationCategoriesList_Record )( TweakDBInterface.GetCharacterRandomizationCategoriesListRecord( T"CharacterRandomization.CharacterRandomizationCategories" ) ) );
		count = locksList.GetListCount();
		for( i = 0; i < count; i += 1 )
		{
			OnLockListItemSpawned( SpawnFromLocal( inkGridRef.Get( m_locksGrid ), 'random_lock_element' ), locksList.GetListItem( i ) );
		}
	}

	public function OnLockListItemSpawned( lockWidget : inkWidget, lockData : CharacterRandomizationCategoryUI_Record )
	{
		var lockLogic : weak< RandomizationLockListItem >;
		lockLogic = ( ( RandomizationLockListItem )( lockWidget.GetController() ) );
		lockLogic.SetLockState( 'Default' );
		lockLogic.SetLockCategory( lockData );
		lockWidget.SetVisible( ShouldDisplayLockCategory( lockData.CategoryTypeHandle().Type() ) );
		lockWidget.RegisterToCallback( 'OnRelease', this, 'OnLockSwitched' );
		lockLogic.EnableLock( m_data.IsCategoryLocked( lockData.CategoryType().Type() ) );
		m_lockWidgets.PushBack( lockWidget );
		m_lockLogics.PushBack( lockLogic );
		m_lockDatas.PushBack( lockData );
	}

	protected event OnLockSwitched( evt : inkPointerEvent )
	{
		var lockLogic : weak< RandomizationLockListItem >;
		if( !( m_inputDisabled ) )
		{
			if( evt.IsAction( 'click' ) )
			{
				lockLogic = ( ( RandomizationLockListItem )( evt.GetCurrentTarget().GetController() ) );
				UpdateLock( lockLogic.GetLockCategory(), lockLogic.SwitchLock() );
			}
		}
	}

	private function UpdateLock( lock : CharacterRandomizationCategory_Record, enable : Bool )
	{
		if( enable )
		{
			if( m_lockedCategories.Contains( lock.Type() ) == false )
			{
				m_lockedCategories.PushBack( lock.Type() );
			}
		}
		else
		{
			if( m_lockedCategories.Contains( lock.Type() ) == true )
			{
				m_lockedCategories.Remove( lock.Type() );
			}
		}
		m_data.SetLockedCategories( m_lockedCategories );
	}

}

