class BenchmarkLineData extends IScriptable
{
	var label : String;
	var value : String;
}

class BenchmarkLabelController extends inkLogicController
{
	private editable var m_labelWidget : inkTextRef;
	private editable var m_valueWidget : inkTextRef;

	public function SetLabel( label : String )
	{
		inkTextRef.SetText( m_labelWidget, label );
	}

	public function SetValue( value : String )
	{
		inkTextRef.SetText( m_valueWidget, value );
	}

}

class BenchmarkResultsGameController extends inkGameController
{
	private editable var m_button : inkWidgetRef;
	private editable var m_entriesListContainer : inkCompoundRef;
	private editable var m_lineEntryName : CName;
	private editable var m_sectionEntryName : CName;
	private var m_benchmarkSummary : worldBenchmarkSummary;
	private var m_exitRequestToken : inkGameNotificationToken;

	protected event OnInitialize()
	{
		inkCompoundRef.RemoveAllChildren( m_entriesListContainer );
		inkWidgetRef.RegisterToCallback( m_button, 'OnRelease', this, 'OnShowExitPrompt' );
		DisplayBenchmarkSummary();
	}

	protected event OnShowExitPrompt( e : inkPointerEvent )
	{
		if( e.IsAction( 'click' ) )
		{
			m_exitRequestToken = GenericMessageNotification.Show( this, GetLocalizedTextByKey( 'UI-Benchmark-ExitBenchmark' ), GetLocalizedTextByKey( 'UI-Benchmark-ExitConfirmation' ), GenericMessageNotificationType.ConfirmCancel );
			m_exitRequestToken.RegisterListener( this, 'OnCloseBenchmarkResults' );
		}
	}

	protected event OnCloseBenchmarkResults( data : inkGameNotificationData )
	{
		var menuEvent : inkMenuInstance_SpawnEvent;
		var resultData : GenericMessageNotificationCloseData;
		resultData = ( ( GenericMessageNotificationCloseData )( data ) );
		if( resultData.result == GenericMessageNotificationResult.Confirm )
		{
			menuEvent = new inkMenuInstance_SpawnEvent;
			menuEvent.Init( 'OnBenchmarkResultsClose' );
			QueueEvent( menuEvent );
		}
		m_exitRequestToken = NULL;
	}

	protected event OnSetUserData( data : IScriptable )
	{
		var callbackConnector : inkCallbackConnectorData;
		callbackConnector = ( ( inkCallbackConnectorData )( data ) );
		m_benchmarkSummary = ( ( worldBenchmarkSummary )( callbackConnector.userData ) );
	}

	private function SpawnSummaryLine( entryName : CName, label : String, value : String )
	{
		var spawnData : inkAsyncSpawnData;
		var lineData : BenchmarkLineData;
		lineData = new BenchmarkLineData;
		lineData.label = label;
		lineData.value = value;
		spawnData = new inkAsyncSpawnData;
		spawnData.libraryID = entryName;
		spawnData.parentWidget = ( ( inkCompoundWidget )( inkCompoundRef.Get( m_entriesListContainer ) ) );
		spawnData.userData = lineData;
		AsyncSpawnFromLocal( spawnData, this, 'OnLineSpawned' );
	}

	private function OnLineSpawned( widget : inkWidget, userData : IScriptable )
	{
		var labelController : BenchmarkLabelController;
		var lineData : BenchmarkLineData;
		labelController = ( ( BenchmarkLabelController )( widget.GetController() ) );
		lineData = ( ( BenchmarkLineData )( userData ) );
		labelController.SetLabel( lineData.label );
		labelController.SetValue( lineData.value );
	}

	private function DisplayBenchmarkSummary()
	{
		var locOn : String;
		var locOff : String;
		var dlssValues : array< CName >;
		locOn = GetLocalizedTextByKey( 'UI-UserActions-Yes' );
		locOff = GetLocalizedTextByKey( 'UI-UserActions-No' );
		dlssValues.PushBack( 'UI-Settings-Video-QualitySetting-Off' );
		dlssValues.PushBack( 'UI-Settings-Video-QualitySetting-Auto' );
		dlssValues.PushBack( 'UI-Settings-Video-QualitySetting-Quality' );
		dlssValues.PushBack( 'UI-Settings-Video-QualitySetting-Balanced' );
		dlssValues.PushBack( 'UI-Settings-Video-QualitySetting-Performance' );
		dlssValues.PushBack( 'UI-Settings-Video-QualitySetting-Ultra_Performance' );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-AverageFPS' ), FloatToStringPrec( m_benchmarkSummary.averageFps, 2 ) );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-MinFPS' ), FloatToStringPrec( m_benchmarkSummary.minFps, 2 ) );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-MaxFPS' ), FloatToStringPrec( m_benchmarkSummary.maxFps, 2 ) );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-Time' ), FloatToStringPrec( m_benchmarkSummary.time, 2 ) );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-FrameNumber' ), ( ( String )( m_benchmarkSummary.frameNumber ) ) );
		SpawnSummaryLine( m_sectionEntryName, GetLocalizedTextByKey( 'UI-Labels-Settings' ), "" );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-PresetName' ), GetLocalizedTextByKey( m_benchmarkSummary.presetLocalizedName ) );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-RenderWidth' ), ( ( String )( m_benchmarkSummary.renderWidth ) ) );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-RenderHeight' ), ( ( String )( m_benchmarkSummary.renderHeight ) ) );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-Windowed' ), ( ( m_benchmarkSummary.windowed ) ? ( locOn ) : ( locOff ) ) );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-VerticalSync' ), ( ( m_benchmarkSummary.verticalSync ) ? ( locOn ) : ( locOff ) ) );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-DLSSEnabled' ), ( ( m_benchmarkSummary.DLSSEnabled ) ? ( locOn ) : ( locOff ) ) );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-DLSSQuality' ), GetLocalizedTextByKey( dlssValues[ m_benchmarkSummary.DLSSQuality ] ) );
		SpawnSummaryLine( m_lineEntryName, GetLocalizedTextByKey( 'UI-Benchmark-DRSEnabled' ), ( ( m_benchmarkSummary.DRSEnabled ) ? ( locOn ) : ( locOff ) ) );
	}

}

