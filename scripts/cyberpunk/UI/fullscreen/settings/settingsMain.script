import class gameuiSettingsMenuGameController extends gameuiMenuGameController
{
	public import function RunGraphicsBenchmark();
	public import function IsBenchmarkPossible() : Bool;

	protected virtual function SetLanguagePackageInstallProgress( progress : Float ) {}

	protected virtual function SetLanguagePackageInstallProgressBar( progress : Float, completed : Bool, started : Bool ) {}
}

struct SettingsCategory
{
	var label : CName;
	var subcategories : array< SettingsCategory >;
	var options : array< ConfigVar >;
	var isEmpty : Bool;
	default isEmpty = true;
	var groupPath : CName;
}

class SettingsCategoryController extends inkLogicController
{
	protected editable var m_label : inkTextRef;

	public function Setup( label : CName )
	{
		var labelString : String;
		labelString = GetLocalizedTextByKey( label );
		if( StrLen( labelString ) == 0 )
		{
			labelString = "<Not Localized> " + ( ( String )( label ) );
		}
		inkTextRef.SetText( m_label, labelString );
	}

}

class SettingsVarListener extends ConfigVarListener
{
	private var m_ctrl : weak< SettingsMainGameController >;

	public function RegisterController( ctrl : SettingsMainGameController )
	{
		m_ctrl = ctrl;
	}

	public export override function OnVarModified( groupPath : CName, varName : CName, varType : ConfigVarType, reason : ConfigChangeReason )
	{
		Log( "SettingsVarListener::OnVarModified" );
		m_ctrl.OnVarModified( groupPath, varName, varType, reason );
	}

}

class SettingsNotificationListener extends ConfigNotificationListener
{
	private var m_ctrl : weak< SettingsMainGameController >;

	public function RegisterController( ctrl : SettingsMainGameController )
	{
		m_ctrl = ctrl;
	}

	public export override function OnNotify( status : ConfigNotificationType )
	{
		Log( "SettingsNotificationListener::OnNotify" );
		m_ctrl.OnSettingsNotify( status );
	}

}

class SettingsMenuUserData extends gameuiMenuGameController
{
	var m_isDlcSettings : Bool;
}

class SettingsMainGameController extends gameuiSettingsMenuGameController
{
	private editable var m_scrollPanel : inkWidgetRef;
	private editable var m_selectorWidget : inkWidgetRef;
	private editable var m_buttonHintsManagerRef : inkWidgetRef;
	private editable var m_settingsOptionsList : inkCompoundRef;
	private editable var m_applyButton : inkWidgetRef;
	private editable var m_resetButton : inkWidgetRef;
	private editable var m_defaultButton : inkWidgetRef;
	private editable var m_brightnessButton : inkWidgetRef;
	private editable var m_hdrButton : inkWidgetRef;
	private editable var m_controllerButton : inkWidgetRef;
	private editable var m_benchmarkButton : inkWidgetRef;
	private editable var m_descriptionText : inkTextRef;
	private editable var m_previousButtonHint : inkWidgetRef;
	private editable var m_nextButtonHint : inkWidgetRef;
	private editable var m_languageInstallProgressBarRoot : inkWidgetRef;
	private var m_languageInstallProgressBar : weak< SettingsLanguageInstallProgressBar >;
	private var m_menuEventDispatcher : weak< inkMenuEventDispatcher >;
	private var m_settingsElements : array< weak< SettingsSelectorController > >;
	private var m_buttonHintsController : weak< ButtonHints >;
	private var m_data : array< SettingsCategory >;
	private var m_menusList : array< CName >;
	private var m_eventsList : array< CName >;
	private var m_settingsListener : SettingsVarListener;
	private var m_settingsNotificationListener : SettingsNotificationListener;
	private var m_settings : UserSettings;
	private var m_isPreGame : Bool;
	private var m_benchmarkNotificationToken : inkGameNotificationToken;
	private var m_isKeybindingAlertEnabled : Bool;
	private var m_applyButtonEnabled : Bool;
	private var m_resetButtonEnabled : Bool;
	private var m_closeSettingsRequest : Bool;
	private var m_resetSettingsRequest : Bool;
	private var m_isDlcSettings : Bool;
	private var m_selectorCtrl : weak< ListController >;
	private var m_languageMenuIndex : Int32;
	default m_languageMenuIndex = 5;

	protected event OnInitialize()
	{
		m_settings = GetSystemRequestsHandler().GetUserSettings();
		m_isPreGame = GetSystemRequestsHandler().IsPreGame();
		m_settingsListener = new SettingsVarListener;
		m_settingsListener.RegisterController( this );
		m_settingsNotificationListener = new SettingsNotificationListener;
		m_settingsNotificationListener.RegisterController( this );
		m_settingsNotificationListener.Register();
		m_languageInstallProgressBar = ( ( SettingsLanguageInstallProgressBar )( inkWidgetRef.GetControllerByType( m_languageInstallProgressBarRoot, 'SettingsLanguageInstallProgressBar' ) ) );
		if( !( m_isDlcSettings ) )
		{
			RegisterToGlobalInputCallback( 'OnPostOnRelease', this, 'OnButtonRelease' );
			inkWidgetRef.GetControllerByType( m_applyButton, 'inkButtonController' ).RegisterToCallback( 'OnButtonClick', this, 'OnApplyButtonReleased' );
			inkWidgetRef.GetControllerByType( m_resetButton, 'inkButtonController' ).RegisterToCallback( 'OnButtonClick', this, 'OnResetButtonReleased' );
			inkWidgetRef.GetControllerByType( m_brightnessButton, 'inkButtonController' ).RegisterToCallback( 'OnButtonClick', this, 'OnBrightnessButtonReleased' );
			inkWidgetRef.GetControllerByType( m_hdrButton, 'inkButtonController' ).RegisterToCallback( 'OnButtonClick', this, 'OnHDRButtonReleased' );
			inkWidgetRef.GetControllerByType( m_controllerButton, 'inkButtonController' ).RegisterToCallback( 'OnButtonClick', this, 'OnControllerButtonReleased' );
			inkWidgetRef.GetControllerByType( m_benchmarkButton, 'inkButtonController' ).RegisterToCallback( 'OnButtonClick', this, 'OnBenchmarkButtonReleased' );
			inkWidgetRef.GetControllerByType( m_defaultButton, 'inkButtonController' ).RegisterToCallback( 'OnButtonClick', this, 'OnDefaultButtonReleased' );
			if( !( IsBenchmarkPossible() ) )
			{
				inkWidgetRef.SetVisible( m_benchmarkButton, false );
			}
		}
		else
		{
			inkWidgetRef.SetVisible( m_defaultButton, false );
			inkWidgetRef.SetVisible( m_controllerButton, false );
			inkWidgetRef.SetVisible( m_previousButtonHint, false );
			inkWidgetRef.SetVisible( m_nextButtonHint, false );
		}
		m_selectorCtrl = ( ( ListController )( inkWidgetRef.GetController( m_selectorWidget ) ) );
		m_selectorCtrl.RegisterToCallback( 'OnItemActivated', this, 'OnMenuChanged' );
		m_buttonHintsController = ( ( ButtonHints )( SpawnFromExternal( inkWidgetRef.Get( m_buttonHintsManagerRef ), R"base\gameplay\gui\common\buttonhints.inkwidget", 'Root' ).GetController() ) );
		PopulateHints();
		PopulateSettingsData();
		PopulateCategories( m_settings.GetMenuIndex() );
		CheckButtons();
		PlayLibraryAnimation( 'intro' );
		m_closeSettingsRequest = false;
		m_resetSettingsRequest = false;
		if( m_isPreGame )
		{
			GetSystemRequestsHandler().RequestTelemetryConsent( true );
		}
	}

	protected event OnSetUserData( userData : IScriptable )
	{
		var settingsUserData : SettingsMenuUserData;
		settingsUserData = ( ( SettingsMenuUserData )( userData ) );
		if( settingsUserData )
		{
			m_isDlcSettings = settingsUserData.m_isDlcSettings;
		}
	}

	protected event OnUninitialize()
	{
		UnregisterFromGlobalInputCallback( 'OnPostOnRelease', this, 'OnButtonRelease' );
		m_menuEventDispatcher.UnregisterFromEvent( 'OnBack', this, 'OnBack' );
		m_selectorCtrl.UnregisterFromCallback( 'OnItemActivated', this, 'OnMenuChanged' );
		inkWidgetRef.GetControllerByType( m_applyButton, 'inkButtonController' ).UnregisterFromCallback( 'OnButtonClick', this, 'OnApplyButtonReleased' );
		inkWidgetRef.GetControllerByType( m_resetButton, 'inkButtonController' ).UnregisterFromCallback( 'OnButtonClick', this, 'OnResetButtonReleased' );
		inkWidgetRef.GetControllerByType( m_brightnessButton, 'inkButtonController' ).UnregisterFromCallback( 'OnButtonClick', this, 'OnBrightnessButtonReleased' );
		inkWidgetRef.GetControllerByType( m_controllerButton, 'inkButtonController' ).UnregisterFromCallback( 'OnButtonClick', this, 'OnControllerButtonReleased' );
		inkWidgetRef.GetControllerByType( m_benchmarkButton, 'inkButtonController' ).UnregisterFromCallback( 'OnButtonClick', this, 'OnBenchmarkButtonReleased' );
		inkWidgetRef.GetControllerByType( m_defaultButton, 'inkButtonController' ).UnregisterFromCallback( 'OnButtonClick', this, 'OnDefaultButtonReleased' );
	}

	public function EnableApplyButton()
	{
		inkWidgetRef.SetVisible( m_applyButton, true );
		m_applyButtonEnabled = true;
	}

	public function DisableApplyButton()
	{
		m_applyButtonEnabled = false;
		inkWidgetRef.SetVisible( m_applyButton, false );
	}

	public function IsApplyButtonEnabled() : Bool
	{
		return m_applyButtonEnabled;
	}

	public function EnableResetButton()
	{
		m_resetButtonEnabled = true;
		inkWidgetRef.SetVisible( m_resetButton, true );
	}

	public function DisableResetButton()
	{
		m_resetButtonEnabled = false;
		inkWidgetRef.SetVisible( m_resetButton, false );
	}

	public function IsResetButtonEnabled() : Bool
	{
		return m_resetButtonEnabled;
	}

	public function CheckButtons()
	{
		if( !( m_isDlcSettings ) && ( ( m_settings.NeedsConfirmation() || m_settings.NeedsRestartToApply() ) || m_settings.NeedsLoadLastCheckpoint() ) )
		{
			EnableApplyButton();
			EnableResetButton();
		}
		else
		{
			DisableApplyButton();
			DisableResetButton();
		}
		if( m_isDlcSettings )
		{
			inkWidgetRef.SetVisible( m_benchmarkButton, false );
		}
		else if( IsBenchmarkPossible() )
		{
			inkWidgetRef.SetVisible( m_benchmarkButton, true );
		}
		CheckHDRSettingVisibility();
	}

	public function OnVarModified( groupPath : CName, varName : CName, varType : ConfigVarType, reason : ConfigChangeReason )
	{
		var i : Int32;
		var size : Int32;
		var item : SettingsSelectorController;
		Log( ( ( "[VAR] modified groupPath: " + NameToString( groupPath ) ) + " varName: " ) + NameToString( varName ) );
		size = m_settingsElements.Size();
		CheckButtons();
		for( i = 0; i < size; i += 1 )
		{
			item = m_settingsElements[ i ];
			if( item.GetGroupPath() == groupPath && item.GetVarName() == varName )
			{
				item.Refresh();
			}
		}
	}

	public function WarnAboutEmptyKeyBindingValue()
	{
		if( m_isKeybindingAlertEnabled && IsAnyActionWithoutAssignedKey() )
		{
			PushNotification( 'UI-Labels-Settings', 'UI-Settings-Video-keybindingerror' );
			m_isKeybindingAlertEnabled = false;
		}
	}

	public function OnSettingsNotify( status : ConfigNotificationType )
	{
		WarnAboutEmptyKeyBindingValue();
		switch( status )
		{
			case ConfigNotificationType.Saved:
			case ConfigNotificationType.ChangesApplied:
			case ConfigNotificationType.RestartRequiredConfirmed:
				CheckSettings();
			PopulateSettingsData();
			PopulateCategorySettingsOptions( -1 );
			RefreshInputIcons();
			break;
			case ConfigNotificationType.ChangesLoadLastCheckpointApplied:
				CheckSettings();
			PopulateSettingsData();
			PopulateCategorySettingsOptions( -1 );
			GameInstance.GetTelemetrySystem( GetPlayerControlledObject().GetGame() ).LogLastCheckpointLoaded();
			GetSystemRequestsHandler().LoadLastCheckpoint( true );
			RefreshInputIcons();
			break;
			case ConfigNotificationType.ChangesRejected:
			case ConfigNotificationType.RestartRequiredRejected:
			case ConfigNotificationType.ChangesLoadLastCheckpointRejected:
				m_closeSettingsRequest = false;
			CheckSettings();
			PopulateSettingsData();
			PopulateCategorySettingsOptions( -1 );
			RefreshInputIcons();
			break;
			case ConfigNotificationType.ErrorSaving:
				RequestClose();
			break;
			case ConfigNotificationType.Refresh:
				PopulateSettingsData();
			PopulateCategorySettingsOptions( -1 );
			RefreshInputIcons();
			break;
		}
	}

	private function CheckHDRSettingVisibility()
	{
		var option : ConfigVarListString;
		option = ( ( ConfigVarListString )( m_settings.GetVar( '/video/display', 'HDRModes' ) ) );
		if( m_isDlcSettings )
		{
			inkWidgetRef.SetVisible( m_hdrButton, false );
			inkWidgetRef.SetVisible( m_brightnessButton, false );
		}
		else if( option.GetIndex() > 0 )
		{
			inkWidgetRef.SetVisible( m_hdrButton, true );
			inkWidgetRef.SetVisible( m_brightnessButton, false );
		}
		else
		{
			inkWidgetRef.SetVisible( m_hdrButton, false );
			inkWidgetRef.SetVisible( m_brightnessButton, true );
		}
	}

	protected override function SetLanguagePackageInstallProgress( progress : Float )
	{
		m_languageInstallProgressBar.SetProgress( progress );
	}

	protected override function SetLanguagePackageInstallProgressBar( progress : Float, completed : Bool, started : Bool )
	{
		m_languageInstallProgressBar.SetProgressBarVisiblity( !( completed ) && started );
		m_languageInstallProgressBar.SetProgress( progress );
	}

	private function AddSettingsGroup( settingsGroup : ConfigGroup )
	{
		var settingsGroups : array< ConfigGroup >;
		var category : SettingsCategory;
		var currentSubcategory : SettingsCategory;
		var currentSettingsGroup : ConfigGroup;
		var i : Int32;
		category.label = settingsGroup.GetDisplayName();
		category.groupPath = settingsGroup.GetPath();
		if( settingsGroup.HasVars( m_isPreGame ) )
		{
			category.options = settingsGroup.GetVars( m_isPreGame );
			category.isEmpty = false;
		}
		settingsGroups = settingsGroup.GetGroups( m_isPreGame );
		for( i = 0; i < settingsGroups.Size(); i += 1 )
		{
			currentSettingsGroup = settingsGroups[ i ];
			if( currentSettingsGroup.IsEmpty( m_isPreGame ) )
			{
				continue;
			}
			if( currentSettingsGroup.HasVars( m_isPreGame ) )
			{
				currentSubcategory.label = currentSettingsGroup.GetDisplayName();
				currentSubcategory.options = currentSettingsGroup.GetVars( m_isPreGame );
				currentSubcategory.isEmpty = false;
				category.subcategories.PushBack( currentSubcategory );
				category.isEmpty = false;
				m_settingsListener.Register( currentSettingsGroup.GetPath() );
			}
		}
		if( category.label == 'UI-Settings-KeyBindings' && !( IsKeyboardConnected() ) )
		{
			category.isEmpty = true;
		}
		if( !( category.isEmpty ) )
		{
			m_data.PushBack( category );
			m_settingsListener.Register( settingsGroup.GetPath() );
		}
	}

	private function PopulateSettingsData()
	{
		var rootGroup : ConfigGroup;
		var allgroups : array< ConfigGroup >;
		var i : Int32;
		rootGroup = m_settings.GetRootGroup();
		allgroups = rootGroup.GetGroups( m_isPreGame );
		m_data.Clear();
		for( i = 0; i < allgroups.Size(); i += 1 )
		{
			AddSettingsGroup( allgroups[ i ] );
		}
	}

	private function PopulateCategories( idx : Int32 )
	{
		var newData : ListItemData;
		var curCategoty : SettingsCategory;
		var i : Int32;
		m_selectorCtrl.Clear();
		for( i = 0; i < m_data.Size(); i += 1 )
		{
			curCategoty = m_data[ i ];
			if( !( curCategoty.isEmpty ) )
			{
				newData = new ListItemData;
				newData.label = GetLocalizedTextByKey( curCategoty.label );
				if( StrLen( newData.label ) == 0 )
				{
					newData.label = "<Not Localized> " + ( ( String )( curCategoty.label ) );
				}
				m_selectorCtrl.PushData( newData );
			}
		}
		m_selectorCtrl.Refresh();
		if( ( idx >= 0 ) && ( idx < m_data.Size() ) )
		{
			m_selectorCtrl.SetToggledIndex( idx );
		}
		else
		{
			m_selectorCtrl.SetToggledIndex( 0 );
		}
	}

	protected event OnSetMenuEventDispatcher( menuEventDispatcher : weak< inkMenuEventDispatcher > )
	{
		m_menuEventDispatcher = menuEventDispatcher;
		m_menuEventDispatcher.RegisterToEvent( 'OnBack', this, 'OnBack' );
	}

	protected event OnBack( userData : IScriptable )
	{
		if( !( StatusEffectSystem.ObjectHasStatusEffectWithTag( GetPlayerControlledObject(), 'LockInHubMenu' ) ) )
		{
			m_closeSettingsRequest = true;
			CheckSettings();
		}
	}

	private function RequestClose()
	{
		m_menuEventDispatcher.SpawnEvent( 'OnCloseSettingsScreen' );
	}

	private function RequestRestoreDefaults()
	{
		var groupPath : CName;
		var index : Int32;
		index = m_selectorCtrl.GetToggledIndex();
		groupPath = m_data[ index ].groupPath;
		m_settings.RequestRestoreDefaultDialog( m_isPreGame, false, groupPath );
	}

	private function CheckSettings()
	{
		if( m_resetSettingsRequest )
		{
			CheckRejectSettings();
		}
		else
		{
			CheckAcceptSettings();
		}
	}

	private function CheckRejectSettings()
	{
		if( m_settings.NeedsConfirmation() )
		{
			m_settings.RejectChanges();
		}
		else if( m_settings.NeedsRestartToApply() )
		{
			m_settings.RejectRestartToApply();
		}
		else if( m_settings.NeedsLoadLastCheckpoint() )
		{
			m_settings.RejectLoadLastCheckpointChanges();
		}
		else
		{
			m_resetSettingsRequest = false;
			if( m_closeSettingsRequest )
			{
				m_closeSettingsRequest = false;
				RequestClose();
			}
		}
	}

	private function CheckAcceptSettings()
	{
		if( m_settings.WasModifiedSinceLastSave() )
		{
			if( m_settings.NeedsConfirmation() )
			{
				m_settings.RequestConfirmationDialog();
			}
			else if( m_settings.NeedsRestartToApply() )
			{
				m_settings.RequestNeedsRestartDialog();
			}
			else if( m_settings.NeedsLoadLastCheckpoint() )
			{
				m_settings.RequestLoadLastCheckpointDialog();
			}
			else
			{
				GetSystemRequestsHandler().RequestSaveUserSettings();
				GameInstance.GetTelemetrySystem( GetPlayerControlledObject().GetGame() ).OnSettingsSave();
				if( m_closeSettingsRequest )
				{
					m_closeSettingsRequest = false;
					RequestClose();
				}
			}
		}
		else if( m_closeSettingsRequest )
		{
			m_closeSettingsRequest = false;
			RequestClose();
		}
	}

	protected event OnMenuChanged( index : Int32, target : ListItemController )
	{
		PlaySound( 'Button', 'OnPress' );
		PopulateCategorySettingsOptions( index );
		( ( inkScrollController )( inkWidgetRef.GetController( m_scrollPanel ) ) ).SetScrollPosition( 0.0 );
		m_settings.SetMenuIndex( index );
		m_languageInstallProgressBar.SetEnabled( index == m_languageMenuIndex );
	}

	protected event OnApplyButtonReleased( controller : weak< inkButtonController > )
	{
		OnApplyButton();
	}

	protected event OnResetButtonReleased( controller : weak< inkButtonController > )
	{
		OnResetButton();
	}

	protected event OnBrightnessButtonReleased( controller : weak< inkButtonController > )
	{
		ShowBrightnessScreen();
	}

	protected event OnHDRButtonReleased( controller : weak< inkButtonController > )
	{
		ShowHDRScreen();
	}

	protected event OnControllerButtonReleased( controller : weak< inkButtonController > )
	{
		ShowControllerScreen();
	}

	protected event OnBenchmarkButtonReleased( controller : weak< inkButtonController > )
	{
		if( IsBenchmarkPossible() )
		{
			RunGraphicsBenchmark();
		}
	}

	protected event OnDefaultButtonReleased( controller : weak< inkButtonController > )
	{
		RequestRestoreDefaults();
	}

	protected event OnLocalizationChanged( evt : inkLocalizationChangedEvent )
	{
		var idx : Int32;
		idx = m_selectorCtrl.GetToggledIndex();
		PopulateCategories( idx );
		PopulateCategorySettingsOptions( idx );
		PopulateHints();
	}

	private function PopulateHints()
	{
		m_buttonHintsController.ClearButtonHints();
		m_buttonHintsController.AddButtonHint( 'select', "UI-UserActions-Select" );
		m_buttonHintsController.AddButtonHint( 'back', "Common-Access-Close" );
		if( !( m_isDlcSettings ) )
		{
			m_buttonHintsController.AddButtonHint( 'restore_default_settings', "UI-UserActions-RestoreDefaults" );
		}
	}

	private function OnApplyButton()
	{
		IsKeybindingAlertEnabled();
		if( !( IsApplyButtonEnabled() ) )
		{
			return;
		}
		Log( "OnApplyButton" );
		if( m_settings.NeedsConfirmation() )
		{
			m_settings.ConfirmChanges();
		}
		else
		{
			CheckSettings();
		}
	}

	private function OnResetButton()
	{
		if( !( IsResetButtonEnabled() ) )
		{
			return;
		}
		Log( "OnResetButton" );
		m_resetSettingsRequest = true;
		CheckSettings();
	}

	private function ShowBrightnessScreen()
	{
		Log( "ShowBrightnessScreen" );
		m_menuEventDispatcher.SpawnEvent( 'OnSwitchToBrightnessSettings' );
	}

	private function ShowHDRScreen()
	{
		Log( "ShowHDRScreen" );
		m_menuEventDispatcher.SpawnEvent( 'OnSwitchToHDRSettings' );
	}

	private function ShowControllerScreen()
	{
		Log( "ShowControllerScreen" );
		m_menuEventDispatcher.SpawnEvent( 'OnSwitchToControllerPanel' );
	}

	private function IsKeybindingAlertEnabled()
	{
		var currentSettingsCategory : SettingsCategory;
		currentSettingsCategory = m_data[ m_settings.GetMenuIndex() ];
		if( !( currentSettingsCategory.isEmpty ) && currentSettingsCategory.groupPath == '/key_bindings' )
		{
			m_isKeybindingAlertEnabled = true;
		}
		else
		{
			m_isKeybindingAlertEnabled = false;
		}
	}

	protected event OnButtonRelease( evt : inkPointerEvent )
	{
		var currentToggledIndex : Int32;
		var listSize : Int32;
		listSize = m_selectorCtrl.Size();
		if( evt.IsAction( 'prior_menu' ) )
		{
			currentToggledIndex = m_selectorCtrl.GetToggledIndex();
			if( currentToggledIndex < 1 )
			{
				m_selectorCtrl.SetToggledIndex( listSize - 1 );
			}
			else
			{
				m_selectorCtrl.SetToggledIndex( currentToggledIndex - 1 );
			}
		}
		else if( evt.IsAction( 'next_menu' ) )
		{
			currentToggledIndex = m_selectorCtrl.GetToggledIndex();
			if( currentToggledIndex >= ( m_selectorCtrl.Size() - 1 ) )
			{
				m_selectorCtrl.SetToggledIndex( 0 );
			}
			else
			{
				m_selectorCtrl.SetToggledIndex( currentToggledIndex + 1 );
			}
		}
		else if( evt.IsAction( 'brightness_settings' ) )
		{
			if( inkWidgetRef.IsVisible( m_hdrButton ) )
			{
				ShowHDRScreen();
			}
			else
			{
				ShowBrightnessScreen();
			}
		}
		else if( evt.IsAction( 'controller_settings' ) )
		{
			ShowControllerScreen();
		}
		else if( evt.IsAction( 'restore_default_settings' ) )
		{
			RequestRestoreDefaults();
		}
		else if( evt.IsAction( 'run_benchmark' ) && IsBenchmarkPossible() )
		{
			RunGraphicsBenchmark();
		}
		else
		{
			return false;
		}
	}

	protected event OnSettingHoverOver( evt : inkPointerEvent )
	{
		var currentItem : weak< SettingsSelectorController >;
		var updatePolicy : ConfigVarUpdatePolicy;
		var descriptionName : CName;
		var params : inkTextParams;
		currentItem = ( ( SettingsSelectorController )( evt.GetCurrentTarget().GetController() ) );
		if( currentItem )
		{
			descriptionName = currentItem.GetDescription();
			updatePolicy = currentItem.GetVarUpdatePolicy();
			if( updatePolicy == ConfigVarUpdatePolicy.ConfirmationRequired )
			{
				params = new inkTextParams;
				params.AddLocalizedName( "description", descriptionName );
				params.AddLocalizedString( "additional_text", "LocKey#76947" );
				inkTextRef.SetLocalizedTextScript( m_descriptionText, "LocKey#76949", params );
			}
			else if( updatePolicy == ConfigVarUpdatePolicy.RestartRequired )
			{
				params = new inkTextParams;
				params.AddLocalizedName( "description", descriptionName );
				params.AddLocalizedString( "additional_text", "LocKey#76948" );
				inkTextRef.SetLocalizedTextScript( m_descriptionText, "LocKey#76949", params );
			}
			else
			{
				inkTextRef.SetLocalizedTextScript( m_descriptionText, descriptionName );
			}
			inkTextRef.SetVisible( m_descriptionText, true );
		}
	}

	protected event OnSettingHoverOut( evt : inkPointerEvent )
	{
		inkTextRef.SetVisible( m_descriptionText, false );
	}

	private function PopulateOptions( options : array< ConfigVar > )
	{
		var i : Int32;
		var size : Int32;
		var currentSettingsItem : ConfigVar;
		var currentSettingsGroup : ConfigGroup;
		var currentSettingsItemType : ConfigVarType;
		var currentItem : weak< SettingsSelectorController >;
		var currentVoItem : weak< SettingsSelectorControllerLanguagesList >;
		var isVoiceOver : Bool;
		var isKeyBinding : Bool;
		size = options.Size();
		for( i = 0; i < size; i += 1 )
		{
			currentSettingsItem = options[ i ];
			if( !( currentSettingsItem ) )
			{
				continue;
			}
			if( !( currentSettingsItem.IsVisible() ) )
			{
				continue;
			}
			currentSettingsItemType = currentSettingsItem.GetType();
			currentSettingsGroup = currentSettingsItem.GetGroup();
			isVoiceOver = currentSettingsItem.GetName() == 'VoiceOver';
			isKeyBinding = currentSettingsGroup.GetParentPath() == '/key_bindings';
			switch( currentSettingsItemType )
			{
				case ConfigVarType.Bool:
					currentItem = ( ( SettingsSelectorController )( SpawnFromLocal( inkCompoundRef.Get( m_settingsOptionsList ), 'settingsSelectorBool' ).GetController() ) );
				break;
				case ConfigVarType.Int:
					currentItem = ( ( SettingsSelectorController )( SpawnFromLocal( inkCompoundRef.Get( m_settingsOptionsList ), 'settingsSelectorInt' ).GetController() ) );
				break;
				case ConfigVarType.Float:
					currentItem = ( ( SettingsSelectorController )( SpawnFromLocal( inkCompoundRef.Get( m_settingsOptionsList ), 'settingsSelectorFloat' ).GetController() ) );
				break;
				case ConfigVarType.Name:
					if( isKeyBinding )
					{
						currentItem = ( ( SettingsSelectorController )( SpawnFromLocal( inkCompoundRef.Get( m_settingsOptionsList ), 'settingsSelectorKeyBinding' ).GetController() ) );
					}
				break;
				case ConfigVarType.IntList:
					currentItem = ( ( SettingsSelectorController )( SpawnFromLocal( inkCompoundRef.Get( m_settingsOptionsList ), 'settingsSelectorIntList' ).GetController() ) );
				break;
				case ConfigVarType.FloatList:
					currentItem = ( ( SettingsSelectorController )( SpawnFromLocal( inkCompoundRef.Get( m_settingsOptionsList ), 'settingsSelectorFloatList' ).GetController() ) );
				break;
				case ConfigVarType.StringList:
					currentItem = ( ( SettingsSelectorController )( SpawnFromLocal( inkCompoundRef.Get( m_settingsOptionsList ), 'settingsSelectorStringList' ).GetController() ) );
				break;
				case ConfigVarType.NameList:
					if( !( isVoiceOver ) )
					{
						currentItem = ( ( SettingsSelectorController )( SpawnFromLocal( inkCompoundRef.Get( m_settingsOptionsList ), 'settingsSelectorNameList' ).GetController() ) );
					}
					else
					{
						currentItem = ( ( SettingsSelectorController )( SpawnFromLocal( inkCompoundRef.Get( m_settingsOptionsList ), 'settingsSelectorLanguagesList' ).GetController() ) );
					}
				break;
				default:
					LogUIWarning( "Cannot create UI settings drawer for " + NameToString( currentSettingsItem.GetDisplayName() ) );
				break;
			}
			if( currentItem )
			{
				currentItem.Setup( currentSettingsItem, m_isPreGame );
				currentItem.RegisterToCallback( 'OnHoverOver', this, 'OnSettingHoverOver' );
				currentItem.RegisterToCallback( 'OnHoverOut', this, 'OnSettingHoverOut' );
				if( isVoiceOver )
				{
					currentVoItem = ( ( SettingsSelectorControllerLanguagesList )( currentItem ) );
					currentVoItem.RegisterDownloadButtonHovers( m_descriptionText );
				}
				m_settingsElements.PushBack( currentItem );
			}
		}
	}

	private function PopulateCategorySettingsOptions( idx : Int32 )
	{
		var i : Int32;
		var settingsCategory : SettingsCategory;
		var settingsSubCategory : SettingsCategory;
		var categoryController : SettingsCategoryController;
		m_settingsElements.Clear();
		inkCompoundRef.RemoveAllChildren( m_settingsOptionsList );
		inkTextRef.SetVisible( m_descriptionText, false );
		if( idx < 0 )
		{
			idx = m_selectorCtrl.GetToggledIndex();
		}
		settingsCategory = m_data[ idx ];
		PopulateOptions( settingsCategory.options );
		for( i = 0; i < settingsCategory.subcategories.Size(); i += 1 )
		{
			settingsSubCategory = settingsCategory.subcategories[ i ];
			categoryController = ( ( SettingsCategoryController )( SpawnFromLocal( inkCompoundRef.Get( m_settingsOptionsList ), 'settingsCategory' ).GetController() ) );
			if( categoryController )
			{
				categoryController.Setup( settingsSubCategory.label );
			}
			PopulateOptions( settingsSubCategory.options );
		}
		m_selectorCtrl.SetSelectedIndex( idx );
	}

}

class SettingsLanguageInstallProgressBar extends inkLogicController
{
	private editable var progressBarRoot : inkWidgetRef;
	private editable var progressBarFill : inkWidgetRef;
	private editable var textProgress : inkTextRef;
	private var m_isEnabled : Bool;

	protected event OnInitialize()
	{
		SetProgressBarVisiblity( false, true );
	}

	public function SetEnabled( isEnabled : Bool )
	{
		m_isEnabled = isEnabled;
		if( !( m_isEnabled ) )
		{
			inkWidgetRef.SetVisible( progressBarRoot, false );
		}
	}

	public function SetProgressBarVisiblity( visible : Bool, optional force : Bool )
	{
		if( m_isEnabled || force )
		{
			inkWidgetRef.SetVisible( progressBarRoot, visible );
		}
	}

	public function SetProgress( progress : Float )
	{
		var scale : Vector2;
		var formatParams : inkTextParams;
		var valueInt : Int32;
		scale = inkWidgetRef.GetScale( progressBarFill );
		scale.X = progress;
		inkWidgetRef.SetScale( progressBarFill, scale );
		valueInt = ( ( Int32 )( progress * 100.0 ) );
		formatParams = new inkTextParams;
		formatParams.AddNumber( "VALUE", valueInt );
		inkTextRef.SetText( textProgress, "{VALUE} %", formatParams );
	}

}

enum SettingsType
{
	Slider = 0,
	Toggle = 1,
	DropdownList = 2,
}

