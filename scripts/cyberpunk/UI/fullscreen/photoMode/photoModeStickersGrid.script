class PhotoModeGridList extends inkRadioGroupController
{
	private editable var m_ScrollArea : inkScrollAreaRef;
	private editable var m_ContentRoot : inkWidgetRef;
	private editable var m_SliderWidget : inkWidgetRef;
	private editable var m_rowOffset : Int32;
	private editable var m_firstOffset : Int32;
	private editable var m_rowLibraryId : CName;
	private editable var m_buttonLibraryId : CName;
	private var parentListItem : weak< PhotoModeMenuListItem >;
	private var m_buttons : array< weak< PhotoModeGridButton > >;
	private var m_rows : array< weak< inkWidget > >;
	private var m_sliderController : weak< inkSliderController >;
	private var m_ItemsInRow : Int32;
	private var m_RowsCount : Int32;
	private var m_SelectedIndex : Int32;
	private var m_PreviousSelectedIndex : Int32;
	private var m_visibleSize : Float;
	private var m_visibleRows : Int32;
	private var m_scrollRow : Int32;
	private var m_isVisibleOnscreen : Bool;

	public function Setup( listItem : PhotoModeMenuListItem, rows : Int32, itemsInRow : Int32 ) : Float
	{
		var i : Int32;
		var j : Int32;
		var row : weak< inkWidget >;
		var size : Vector2;
		parentListItem = listItem;
		if( m_buttons.Size() == 0 )
		{
			for( i = 0; i < rows; i += 1 )
			{
				row = AddRow();
				for( j = 0; j < itemsInRow; j += 1 )
				{
					AddButton( row );
				}
			}
		}
		m_isVisibleOnscreen = false;
		m_ItemsInRow = itemsInRow;
		m_RowsCount = rows;
		m_PreviousSelectedIndex = -1;
		m_SelectedIndex = 0;
		m_visibleRows = ( ( m_RowsCount >= 5 ) ? ( 5 ) : ( m_RowsCount ) );
		m_visibleSize = ( ( Float )( m_firstOffset + ( m_rowOffset * m_visibleRows ) ) );
		m_scrollRow = 0;
		size = GetRootWidget().GetSize();
		inkWidgetRef.SetSize( m_ContentRoot, size.X, ( ( Float )( m_firstOffset + ( m_rowOffset * m_RowsCount ) ) ) );
		m_sliderController.Setup( 0.0, ( ( Float )( m_RowsCount - m_visibleRows ) ), 0.0, 1.0 );
		Toggle( 0 );
		return m_visibleSize;
	}

	protected event OnInitialize()
	{
		RegisterToCallback( 'OnValueChanged', this, 'OnValueChanged' );
		m_sliderController = ( ( inkSliderController )( inkWidgetRef.GetControllerByType( m_SliderWidget, 'inkSliderController' ) ) );
		m_sliderController.RegisterToCallback( 'OnSliderValueChanged', this, 'OnSliderValueChanged' );
	}

	protected event OnUninitialize()
	{
		UnregisterFromCallback( 'OnValueChanged', this, 'OnValueChanged' );
		m_sliderController.UnregisterFromCallback( 'OnSliderValueChanged', this, 'OnSliderValueChanged' );
	}

	protected event OnValueChanged( controller : weak< inkRadioGroupController >, selectedIndex : Int32 )
	{
		m_SelectedIndex = selectedIndex;
		OnGridButtonSelected( m_SelectedIndex );
		UpdateSelectedState();
	}

	public function OnVisbilityChanged( visible : Bool )
	{
		m_isVisibleOnscreen = visible;
		UpdateButtonsVisibility();
	}

	protected event OnSliderValueChanged( sliderController : weak< inkSliderController >, progress, value : Float )
	{
		ScrollToRow( ( ( Int32 )( value ) ) );
	}

	public function OnGridButtonAction( buttonindex : Int32 )
	{
		parentListItem.GridElementAction( buttonindex, m_buttons[ buttonindex ].GetData() );
	}

	public function OnGridButtonSelected( buttonindex : Int32 )
	{
		parentListItem.GridElementSelected( buttonindex );
	}

	public function HandleReleasedInput( e : inkPointerEvent, optional gameCtrl : weak< inkGameController > )
	{
		if( e.IsAction( 'PhotoMode_SaveSettings' ) )
		{
			OnGridButtonAction( GetCurrentIndex() );
		}
		else if( e.IsAction( 'PhotoMode_ScrollUp' ) )
		{
			m_sliderController.ChangeValue( ( ( Float )( m_scrollRow - 1 ) ) );
		}
		else if( e.IsAction( 'PhotoMode_ScrollDown' ) )
		{
			m_sliderController.ChangeValue( ( ( Float )( m_scrollRow + 1 ) ) );
		}
	}

	public function SetGridData( const gridData : ref< array< PhotoModeOptionGridButtonData > > )
	{
		var i : Int32;
		for( i = 0; i < gridData.Size(); i += 1 )
		{
			if( i >= ( ( Int32 )( m_buttons.Size() ) ) )
			{
				break;
			}
			SetGridButtonImage( ( ( Uint32 )( i ) ), gridData[ i ].atlasResource, gridData[ i ].imagePart, gridData[ i ].optionData );
		}
	}

	public function SetGridButtonImage( buttonIndex : Uint32, atlasPath : ResRef, imagePart : CName, buttonData : Int32 )
	{
		var i : Int32;
		i = ( ( Int32 )( buttonIndex ) );
		if( i < m_buttons.Size() )
		{
			m_buttons[ i ].SetImage( atlasPath, imagePart );
			m_buttons[ i ].SetData( buttonData );
		}
	}

	private function GetSelectedRow() : Int32
	{
		var selectedIndex : Int32;
		selectedIndex = GetCurrentIndex();
		return GetRow( selectedIndex );
	}

	private function GetRow( buttonIndex : Int32 ) : Int32
	{
		if( buttonIndex == -1 )
		{
			return -1;
		}
		return buttonIndex / m_ItemsInRow;
	}

	public function TrySelectLeft() : Bool
	{
		var selectedIndex : Int32;
		selectedIndex = GetCurrentIndex();
		if( ( selectedIndex % m_ItemsInRow ) > 0 )
		{
			SelectButton( selectedIndex - 1 );
			return true;
		}
		return false;
	}

	public function TrySelectRight() : Bool
	{
		var selectedIndex : Int32;
		selectedIndex = GetCurrentIndex();
		if( ( selectedIndex % m_ItemsInRow ) < ( m_ItemsInRow - 1 ) )
		{
			SelectButton( selectedIndex + 1 );
			return true;
		}
		return false;
	}

	public function TrySelectDown() : Bool
	{
		var selectedIndex : Int32;
		selectedIndex = GetCurrentIndex();
		if( GetSelectedRow() < ( m_RowsCount - 1 ) )
		{
			SelectButton( selectedIndex + m_ItemsInRow );
			return true;
		}
		return false;
	}

	public function TrySelectUp() : Bool
	{
		var selectedIndex : Int32;
		selectedIndex = GetCurrentIndex();
		if( GetSelectedRow() > 0 )
		{
			SelectButton( selectedIndex - m_ItemsInRow );
			return true;
		}
		return false;
	}

	public function SelectButton( index : Int32 )
	{
		if( ( index != GetCurrentIndex() ) || ( index != m_SelectedIndex ) )
		{
			m_SelectedIndex = index;
			Toggle( index );
			UpdateScroll();
			UpdateSelectedState();
		}
	}

	public function OnSelected()
	{
		if( m_PreviousSelectedIndex >= 0 )
		{
			SelectButton( m_PreviousSelectedIndex );
		}
		else
		{
			SelectButton( 0 );
		}
	}

	public function OnDeSelected()
	{
		m_PreviousSelectedIndex = GetCurrentIndex();
		SelectButton( -1 );
	}

	protected function AddRow() : weak< inkWidget >
	{
		var newRow : weak< inkWidget >;
		newRow = SpawnFromLocal( inkWidgetRef.Get( m_ContentRoot ), m_rowLibraryId );
		newRow.SetAnchorPoint( 0.0, 0.0 );
		newRow.SetAnchor( inkEAnchor.TopFillHorizontaly );
		newRow.SetMargin( 0.0, ( ( Float )( m_firstOffset + ( m_rows.Size() * m_rowOffset ) ) ), 0.0, 0.0 );
		m_rows.PushBack( newRow );
		return newRow;
	}

	protected function AddButton( parentWidget : weak< inkWidget > )
	{
		var newButton : weak< inkWidget >;
		var gridButtonLogic : PhotoModeGridButton;
		newButton = SpawnFromLocal( parentWidget, m_buttonLibraryId );
		newButton.SetAnchorPoint( 0.5, 0.5 );
		newButton.SetAnchor( inkEAnchor.Centered );
		newButton.SetSize( 146.0, 146.0 );
		gridButtonLogic = ( ( PhotoModeGridButton )( newButton.GetControllerByType( 'PhotoModeGridButton' ) ) );
		gridButtonLogic.Setup( this, m_buttons.Size() );
		m_buttons.PushBack( gridButtonLogic );
		AddToggle( gridButtonLogic );
	}

	public function UpdateScroll()
	{
		var selectedRow : Int32;
		var oldScroll : Int32;
		oldScroll = m_scrollRow;
		selectedRow = GetSelectedRow();
		while( selectedRow >= ( m_scrollRow + m_visibleRows ) )
		{
			m_scrollRow += 1;
		}
		while( selectedRow < m_scrollRow )
		{
			m_scrollRow -= 1;
		}
		UpdateButtonsVisibility();
		if( oldScroll != m_scrollRow )
		{
			m_sliderController.ChangeValue( ( ( Float )( m_scrollRow ) ) );
		}
	}

	private function ScrollToRow( row : Int32 )
	{
		var scrollValue : Float;
		if( ( row < 0 ) || ( row > ( m_RowsCount - m_visibleRows ) ) )
		{
			return;
		}
		m_scrollRow = row;
		UpdateButtonsVisibility();
		scrollValue = ( ( Float )( m_scrollRow ) ) / ( ( Float )( ( m_RowsCount - m_visibleRows ) ) );
		inkScrollAreaRef.ScrollVertical( m_ScrollArea, scrollValue );
	}

	private function GetRowClamped( row : Int32 ) : Int32
	{
		return ( ( row < 0 ) ? ( 0 ) : ( row ) );
	}

	public function UpdateButtonsVisibility()
	{
		var i : Int32;
		var row : Int32;
		var firstRow : Int32;
		firstRow = GetRowClamped( m_scrollRow );
		for( i = 0; i < m_buttons.Size(); i += 1 )
		{
			row = GetRow( i );
			if( ( m_isVisibleOnscreen && ( row >= firstRow ) ) && ( row < ( firstRow + m_visibleRows ) ) )
			{
				m_buttons[ i ].OnVisibilityOnGridChanged( true );
			}
			else
			{
				m_buttons[ i ].OnVisibilityOnGridChanged( false );
			}
		}
	}

	public function UpdateSelectedState()
	{
		var i : Int32;
		for( i = 0; i < m_buttons.Size(); i += 1 )
		{
			if( i == m_SelectedIndex )
			{
				if( !( m_buttons[ i ].IsToggledVisually() ) )
				{
					m_buttons[ i ].ButtonStateChanged( true );
				}
			}
			else
			{
				if( m_buttons[ i ].IsToggledVisually() )
				{
					m_buttons[ i ].ButtonStateChanged( false );
				}
			}
		}
	}

	public function UpdateSize( timeDelta : Float )
	{
		var i : Int32;
		var row : Int32;
		var firstRow : Int32;
		firstRow = GetRowClamped( m_scrollRow );
		for( i = 0; i < m_buttons.Size(); i += 1 )
		{
			row = GetRow( i );
			if( ( row >= firstRow ) && ( row < ( firstRow + m_visibleRows ) ) )
			{
				m_buttons[ i ].UpdateSize( timeDelta );
			}
		}
	}

	public function Update( timeDelta : Float )
	{
		UpdateSize( timeDelta );
		UpdateSelectedState();
	}

}

