class GalleryFilterController extends inkLogicController
{
	protected editable var m_icon : inkImageRef;
	protected editable var m_text : inkTextRef;
	protected editable var m_filterRootWidget : inkWidgetRef;
	private var m_filterType : inkGameScreenshotSortMode;
	private var m_labelKey : CName;
	private var m_tooltipsManager : weak< gameuiTooltipsManager >;
	private var m_active : Bool;
	private var m_hovered : Bool;

	protected event OnInitialize()
	{
		RegisterToCallback( 'OnHoverOver', this, 'OnHoverOver' );
		RegisterToCallback( 'OnHoverOut', this, 'OnHoverOut' );
	}

	protected event OnUninitialize()
	{
		UnregisterFromCallback( 'OnHoverOver', this, 'OnHoverOver' );
		UnregisterFromCallback( 'OnHoverOut', this, 'OnHoverOut' );
	}

	protected event OnHoverOver( evt : inkPointerEvent )
	{
		var tooltipData : MessageTooltipData;
		tooltipData = new MessageTooltipData;
		tooltipData.Title = GetLocalizedTextByKey( m_labelKey );
		m_tooltipsManager.ShowTooltipAtWidget( 0, evt.GetTarget(), tooltipData, gameuiETooltipPlacement.RightTop, true );
		m_hovered = true;
		if( !( m_active ) )
		{
			GetRootWidget().SetState( 'Hover' );
		}
	}

	protected event OnHoverOut( evt : inkPointerEvent )
	{
		m_hovered = false;
		if( !( m_active ) )
		{
			GetRootWidget().SetState( 'Default' );
			m_tooltipsManager.HideTooltips();
		}
	}

	public function Setup( filterType : inkGameScreenshotSortMode, iconName : CName, labelKey : CName, tooltipsManager : weak< gameuiTooltipsManager > )
	{
		m_filterType = filterType;
		inkImageRef.SetTexturePart( m_icon, iconName );
		m_labelKey = labelKey;
		m_tooltipsManager = tooltipsManager;
	}

	public function GetFilterType() : inkGameScreenshotSortMode
	{
		return m_filterType;
	}

	public function SetFilterType( filterType : inkGameScreenshotSortMode )
	{
		m_filterType = filterType;
	}

	public function SetActive( value : Bool )
	{
		m_active = value;
		GetRootWidget().SetState( ( ( value ) ? ( 'Active' ) : ( 'Default' ) ) );
		m_tooltipsManager.HideTooltips();
		if( !( value ) && m_hovered )
		{
			GetRootWidget().SetState( 'Hover' );
		}
	}

	public function IsActive() : Bool
	{
		return m_active;
	}

}

