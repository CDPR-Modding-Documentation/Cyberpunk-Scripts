class PaginationController extends inkLogicController
{
	private editable var m_paginationRoot : inkHorizontalPanelRef;
	editable var m_nextArrow : inkWidgetRef;
	editable var m_previousArrow : inkWidgetRef;
	private var m_paginationNumbers : array< weak< PaginationNumberController > >;
	private const var m_halfPaginationDisplay : Int32;
	default m_halfPaginationDisplay = 2;
	private const var m_fullPaginationDisplay : Int32;
	default m_fullPaginationDisplay = 5;

	public function SetData( pageCount : Int32 )
	{
		var i : Int32;
		for( i = 0; i < m_paginationNumbers.Size(); i += 1 )
		{
			m_paginationNumbers[ i ].UnregisterFromCallback( 'OnRelease', this, 'OnNumberReleased' );
			inkHorizontalPanelRef.RemoveChild( m_paginationRoot, m_paginationNumbers[ i ].GetRootWidget() );
		}
		m_paginationNumbers.Clear();
		for( i = 0; i < pageCount; i += 1 )
		{
			CreatePageNumber( i );
		}
	}

	protected event OnUninitialize()
	{
		var i : Int32;
		for( i = 0; i < m_paginationNumbers.Size(); i += 1 )
		{
			m_paginationNumbers[ i ].UnregisterFromCallback( 'OnRelease', this, 'OnNumberReleased' );
		}
	}

	private function CreatePageNumber( number : Int32 )
	{
		var paginationNumberWidget : weak< inkWidget >;
		var paginationNumberController : weak< PaginationNumberController >;
		paginationNumberWidget = SpawnFromLocal( inkHorizontalPanelRef.Get( m_paginationRoot ), 'paginationItem' );
		paginationNumberController = ( ( PaginationNumberController )( paginationNumberWidget.GetController() ) );
		paginationNumberController.SetData( number );
		m_paginationNumbers.PushBack( paginationNumberController );
		paginationNumberController.RegisterToCallback( 'OnRelease', this, 'OnNumberReleased' );
	}

	public function GetPaginationNumbers() : array< weak< PaginationNumberController > >
	{
		return m_paginationNumbers;
	}

	public function SetActivePageNumber( index : Int32 )
	{
		var i : Int32;
		for( i = 0; i < m_paginationNumbers.Size(); i += 1 )
		{
			m_paginationNumbers[ i ].SetActive( false );
			m_paginationNumbers[ i ].SetVisible( false );
		}
		if( index <= m_halfPaginationDisplay )
		{
			for( i = 0; i < Min( m_fullPaginationDisplay, m_paginationNumbers.Size() ); i += 1 )
			{
				m_paginationNumbers[ i ].SetVisible( true );
			}
		}
		else if( index >= ( m_paginationNumbers.Size() - m_halfPaginationDisplay ) )
		{
			for( i = m_paginationNumbers.Size() - m_fullPaginationDisplay; i < m_paginationNumbers.Size(); i += 1 )
			{
				m_paginationNumbers[ i ].SetVisible( true );
			}
		}
		else
		{
			for( i = index - m_halfPaginationDisplay; i <= ( index + m_halfPaginationDisplay ); i += 1 )
			{
				m_paginationNumbers[ i ].SetVisible( true );
			}
		}
		m_paginationNumbers[ index ].SetActive( true );
	}

}

class PaginationArrowController extends inkLogicController
{
	private editable var m_arrowFilled : inkWidgetRef;

	protected event OnInitialize()
	{
		RegisterToCallback( 'OnHoverOver', this, 'OnHoverOver' );
		RegisterToCallback( 'OnHoverOut', this, 'OnHoverOut' );
		inkWidgetRef.SetVisible( m_arrowFilled, false );
	}

	protected event OnUninitialize()
	{
		UnregisterFromCallback( 'OnHoverOver', this, 'OnHoverOver' );
		UnregisterFromCallback( 'OnHoverOut', this, 'OnHoverOut' );
	}

	protected event OnHoverOver( e : inkPointerEvent )
	{
		inkWidgetRef.SetVisible( m_arrowFilled, true );
	}

	protected event OnHoverOut( e : inkPointerEvent )
	{
		inkWidgetRef.SetVisible( m_arrowFilled, false );
	}

}

class PaginationNumberController extends inkLogicController
{
	editable var m_numberText : inkTextRef;
	editable var m_line : inkWidgetRef;
	private var m_pageNumber : Int32;
	private var m_isActiveNumber : Bool;
	default m_isActiveNumber = false;

	protected event OnInitialize()
	{
		RegisterToCallback( 'OnHoverOver', this, 'OnHoverOver' );
		RegisterToCallback( 'OnHoverOut', this, 'OnHoverOut' );
	}

	protected event OnUninitialize()
	{
		UnregisterFromCallback( 'OnHoverOver', this, 'OnHoverOver' );
		UnregisterFromCallback( 'OnHoverOut', this, 'OnHoverOut' );
	}

	protected event OnHoverOver( e : inkPointerEvent )
	{
		if( m_isActiveNumber )
		{
			return 0;
		}
		inkTextRef.SetState( m_numberText, 'Hover' );
	}

	protected event OnHoverOut( e : inkPointerEvent )
	{
		if( m_isActiveNumber )
		{
			return 0;
		}
		inkTextRef.SetState( m_numberText, 'Default' );
	}

	public function SetData( number : Int32 )
	{
		var numberText : String;
		numberText = IntToString( number + 1 );
		inkTextRef.SetText( m_numberText, numberText );
		m_pageNumber = number;
	}

	public function GetPageNumber() : Int32
	{
		return m_pageNumber;
	}

	public function SetActive( active : Bool )
	{
		m_isActiveNumber = active;
		inkTextRef.SetState( m_numberText, ( ( m_isActiveNumber ) ? ( 'Hover' ) : ( 'Default' ) ) );
		inkWidgetRef.SetState( m_line, ( ( m_isActiveNumber ) ? ( 'Hover' ) : ( 'Default' ) ) );
	}

	public function SetVisible( visible : Bool )
	{
		GetRootWidget().SetVisible( visible );
	}

}

