class RipperDocItemBoughtCallback extends InventoryScriptCallback
{
	private var eventTarget : weak< RipperDocGameController >;

	public function Bind( eventTargetArg : RipperDocGameController )
	{
		eventTarget = eventTargetArg;
	}

	public override function OnItemAdded( itemIDArg : ItemID, itemData : weak< gameItemData >, flaggedAsSilent : Bool )
	{
		eventTarget.OnItemBought( itemIDArg, itemData );
	}

}

class RipperDocGameController extends gameuiMenuGameController
{
	private editable var m_TooltipsManagerRef : inkWidgetRef;
	private editable var m_buttonHintsManagerRef : inkWidgetRef;
	private editable var m_animationControllerContainer : inkWidgetRef;
	private editable var m_ripperdocIdContainerV1 : inkWidgetRef;
	private editable var m_ripperdocIdContainerV2 : inkWidgetRef;
	private editable var m_frontalCortexAnchor : inkCompoundRef;
	private editable var m_ocularCortexAnchor : inkCompoundRef;
	private editable var m_leftMiddleGridAnchor : inkCompoundRef;
	private editable var m_leftButtomGridAnchor : inkCompoundRef;
	private editable var m_rightTopGridAnchor : inkCompoundRef;
	private editable var m_rightButtomGridAnchor : inkCompoundRef;
	private editable var m_skeletonAnchor : inkCompoundRef;
	private editable var m_handsAnchor : inkCompoundRef;
	private editable var m_playerMoney : inkTextRef;
	private editable var m_playerMoneyHolder : inkWidgetRef;
	private editable var m_allocationPointContainerDefault : inkCompoundRef;
	private editable var m_cyberwareSlotsList : inkCompoundRef;
	private editable var m_cyberwareVirtualGrid : inkVirtualCompoundRef;
	private editable var m_radioGroupRef : inkWidgetRef;
	private editable var m_cyberwareInfoContainer : inkCompoundRef;
	private editable var m_itemsListScrollAreaContainer : inkWidgetRef;
	private editable var m_sortingButton : inkWidgetRef;
	private editable var m_sortingDropdown : inkWidgetRef;
	private var m_mode : RipperdocModes;
	private var m_screen : CyberwareScreenType;
	private var m_player : weak< PlayerPuppet >;
	private var m_buttonHintsController : weak< ButtonHints >;
	private var m_TooltipsManager : weak< gameuiTooltipsManager >;
	private var m_InventoryManager : InventoryDataManagerV2;
	private var m_uiScriptableSystem : weak< UIScriptableSystem >;
	private var m_menuEventDispatcher : weak< inkMenuEventDispatcher >;
	private var m_ripperdocTokenManager : RipperdocTokenManager;
	private var m_vendorUserData : VendorUserData;
	private var m_VendorDataManager : VendorDataManager;
	private var m_soldItems : SoldItemsCache;
	private var m_VendorBlackboard : weak< IBlackboard >;
	private var m_equipmentBlackboard : weak< IBlackboard >;
	private var m_equipmentBlackboardCallback : CallbackHandle;
	private var m_tokenBlackboard : weak< IBlackboard >;
	private var m_tokenBlackboardCallback : CallbackHandle;
	private var m_cyberwareInfo : weak< AGenericTooltipController >;
	private var m_cyberwareInfoType : CyberwareInfoType;
	private var m_virtualCyberwareListController : weak< inkVirtualGridController >;
	private var m_cyberwareClassifier : CyberwareTemplateClassifier;
	private var m_cyberwareDataSource : ScriptableDataSource;
	private var m_cyberwaregDataView : CyberwareDataView;
	private var m_currentFilter : RipperdocFilter;
	private var m_radioGroup : weak< FilterRadioGroup >;
	private var m_ripperId : weak< RipperdocIdPanel >;
	private var m_selectedArea : gamedataEquipmentArea;
	private var m_equipmentGrid : weak< CyberwareInventoryMiniGrid >;
	private var m_inventoryListener : InventoryScriptListener;
	private var m_cybewareGrids : array< weak< CyberwareInventoryMiniGrid > >;
	private var m_isActivePanel : Bool;
	private var m_equiped : Bool;
	private var m_activeSlotIndex : Int32;
	private var m_animationController : weak< RipperdocScreenAnimationController >;
	private var m_tokenPopup : inkGameNotificationToken;
	private var m_useAlternativeSwitch : Bool;

	protected event OnSetUserData( userData : IScriptable )
	{
		m_vendorUserData = ( ( VendorUserData )( userData ) );
	}

	protected event OnInitialize()
	{
		var vendorPanelData : VendorPanelData;
		var vendorData : VendorData;
		var ripperdocIdRoot : inkWidgetRef;
		m_player = ( ( PlayerPuppet )( GetPlayerControlledObject() ) );
		m_useAlternativeSwitch = GameInstance.GetTransactionSystem( m_player.GetGame() ).UseAlternativeCyberware();
		if( m_vendorUserData )
		{
			vendorPanelData = m_vendorUserData.vendorData;
			vendorData = vendorPanelData.data;
			m_screen = CyberwareScreenType.Ripperdoc;
			m_VendorDataManager = new VendorDataManager;
			m_VendorDataManager.Initialize( GetPlayerControlledObject(), vendorData.entityID );
			inkWidgetRef.SetVisible( m_ripperdocIdContainerV1, !( m_useAlternativeSwitch ) );
			inkWidgetRef.SetVisible( m_ripperdocIdContainerV2, m_useAlternativeSwitch );
			ripperdocIdRoot = ( ( m_useAlternativeSwitch ) ? ( m_ripperdocIdContainerV2 ) : ( m_ripperdocIdContainerV1 ) );
			m_ripperId = ( ( RipperdocIdPanel )( SpawnFromLocal( inkWidgetRef.Get( ripperdocIdRoot ), 'ripperdoc_id' ).GetController() ) );
			m_ripperId.SetName( m_VendorDataManager.GetVendorName() );
			m_ripperId.SetFeatureVersion( m_useAlternativeSwitch );
			inkWidgetRef.SetVisible( m_playerMoneyHolder, true );
			UpdateMoney();
		}
		else
		{
			m_screen = CyberwareScreenType.Inventory;
			inkWidgetRef.SetVisible( m_playerMoneyHolder, false );
		}
		RegisterInventoryListener( GetPlayerControlledObject() );
		Init();
		m_soldItems = new SoldItemsCache;
		inkCompoundRef.RemoveAllChildren( m_cyberwareSlotsList );
		m_virtualCyberwareListController = ( ( inkVirtualGridController )( inkVirtualCompoundRef.GetControllerByType( m_cyberwareVirtualGrid, 'inkVirtualGridController' ) ) );
		m_cyberwareClassifier = new CyberwareTemplateClassifier;
		m_cyberwareDataSource = new ScriptableDataSource;
		m_cyberwaregDataView = new CyberwareDataView;
		m_cyberwaregDataView.SetSource( m_cyberwareDataSource );
		m_virtualCyberwareListController.SetClassifier( m_cyberwareClassifier );
		m_virtualCyberwareListController.SetSource( m_cyberwaregDataView );
		m_selectedArea = gamedataEquipmentArea.Invalid;
		SetupSorting();
		GameInstance.GetTelemetrySystem( GetPlayerControlledObject().GetGame() ).LogVendorMenuState( m_VendorDataManager.GetVendorID(), true );
		super.OnInitialize();
	}

	protected event OnUninitialize()
	{
		var vendorData : VendorData;
		vendorData.isActive = false;
		m_VendorBlackboard.SetVariant( GetAllBlackboardDefs().UI_Vendor.VendorData, vendorData, true );
		m_virtualCyberwareListController.SetClassifier( NULL );
		m_virtualCyberwareListController.SetSource( NULL );
		m_cyberwaregDataView.SetSource( NULL );
		m_cyberwareClassifier = NULL;
		m_cyberwareDataSource = NULL;
		m_cyberwaregDataView = NULL;
		UnregisterInventoryListener( GetPlayerControlledObject() );
		m_InventoryManager.UnInitialize();
		UnregisterBlackboard();
		m_menuEventDispatcher.UnregisterFromEvent( 'OnBack', this, 'OnBack' );
		GameInstance.GetTelemetrySystem( GetPlayerControlledObject().GetGame() ).LogVendorMenuState( m_VendorDataManager.GetVendorID(), false );
		m_equipmentGrid = NULL;
		m_cybewareGrids.Clear();
		super.OnUninitialize();
	}

	private function Init()
	{
		m_TooltipsManager = ( ( gameuiTooltipsManager )( inkWidgetRef.GetControllerByType( m_TooltipsManagerRef, 'gameuiTooltipsManager' ) ) );
		m_TooltipsManager.Setup( ETooltipsStyle.Menus );
		SetFilters();
		m_buttonHintsController = ( ( ButtonHints )( SpawnFromExternal( inkWidgetRef.Get( m_buttonHintsManagerRef ), R"base\gameplay\gui\common\buttonhints.inkwidget", 'Root' ).GetController() ) );
		m_InventoryManager = new InventoryDataManagerV2;
		m_InventoryManager.Initialize( m_player );
		m_uiScriptableSystem = UIScriptableSystem.GetInstance( m_player.GetGame() );
		m_cyberwaregDataView.BindUIScriptableSystem( m_uiScriptableSystem );
		RegisterBlackboard( GetPlayerControlledObject() );
		PrepareCyberwareSlots();
		m_animationController = ( ( RipperdocScreenAnimationController )( inkWidgetRef.GetControllerByType( m_animationControllerContainer, 'RipperdocScreenAnimationController' ) ) );
		m_animationController.SetGender( m_player.GetResolvedGenderName() == 'Female' );
		m_ripperdocTokenManager = new RipperdocTokenManager;
		m_ripperdocTokenManager.Initialize( m_player );
		OpenDefaultMode();
		m_ripperId.PlayIntoAnimation();
		PlayLibraryAnimation( 'Paperdoll_default_tab_intro' );
	}

	protected event OnVendorHubMenuChanged( evt : VendorHubMenuChanged )
	{
		m_isActivePanel = evt.item == HubVendorMenuItems.Cyberware;
	}

	private function SetFilters()
	{
		m_radioGroup = ( ( FilterRadioGroup )( inkWidgetRef.GetControllerByType( m_radioGroupRef, 'FilterRadioGroup' ) ) );
		m_radioGroup.SetData( 3, m_TooltipsManager, 0 );
		m_radioGroup.RegisterToCallback( 'OnValueChanged', this, 'OnFilterChange' );
		m_currentFilter = RipperdocFilter.All;
	}

	protected event OnFilterChange( controller : weak< inkRadioGroupController >, selectedIndex : Int32 )
	{
		PlaySound( 'Button', 'OnPress' );
		m_cyberwaregDataView.SetFilterType( ( ( RipperdocFilter )( selectedIndex ) ) );
		PlayLibraryAnimation( 'filter_change' );
		( ( inkScrollController )( inkWidgetRef.GetController( m_itemsListScrollAreaContainer ) ) ).SetScrollPosition( 0.0 );
	}

	private function SetupSorting()
	{
		var controller : DropdownListController;
		var sortingButtonController : DropdownButtonController;
		inkWidgetRef.RegisterToCallback( m_sortingButton, 'OnRelease', this, 'OnSortingButtonClicked' );
		controller = ( ( DropdownListController )( inkWidgetRef.GetController( m_sortingDropdown ) ) );
		sortingButtonController = ( ( DropdownButtonController )( inkWidgetRef.GetController( m_sortingButton ) ) );
		controller.Setup( this, SortingDropdownData.GetDefaultDropdownOptions(), sortingButtonController );
		sortingButtonController.SetData( SortingDropdownData.GetDropdownOption( controller.GetData(), ItemSortMode.Default ) );
	}

	protected event OnDropdownItemClickedEvent( evt : DropdownItemClickedEvent )
	{
		var identifier : ItemSortMode;
		var sortingButtonController : DropdownButtonController;
		var data : DropdownItemData;
		identifier = ( ( ItemSortMode )evt.identifier );
		data = SortingDropdownData.GetDropdownOption( ( ( DropdownListController )( inkWidgetRef.GetController( m_sortingDropdown ) ) ).GetData(), identifier );
		PlaySound( 'Button', 'OnPress' );
		if( data )
		{
			sortingButtonController = ( ( DropdownButtonController )( inkWidgetRef.GetController( m_sortingButton ) ) );
			sortingButtonController.SetData( data );
			m_cyberwaregDataView.SetSortMode( identifier );
		}
	}

	protected event OnSortingButtonClicked( evt : inkPointerEvent )
	{
		var controller : DropdownListController;
		if( evt.IsAction( 'click' ) )
		{
			PlaySound( 'Button', 'OnPress' );
			controller = ( ( DropdownListController )( inkWidgetRef.GetController( m_sortingDropdown ) ) );
			controller.Toggle();
		}
	}

	private function UpdateMoney()
	{
		var vendorMoney : Int32;
		vendorMoney = MarketSystem.GetVendorMoney( m_VendorDataManager.GetVendorInstance() );
		m_ripperId.SetMoney( vendorMoney );
		inkTextRef.SetText( m_playerMoney, IntToString( m_VendorDataManager.GetLocalPlayerCurrencyAmount() ) );
	}

	private function RegisterInventoryListener( player : GameObject )
	{
		var itemBoughtCallback : RipperDocItemBoughtCallback;
		itemBoughtCallback = new RipperDocItemBoughtCallback;
		itemBoughtCallback.itemID = ItemID.None();
		itemBoughtCallback.Bind( this );
		m_inventoryListener = GameInstance.GetTransactionSystem( player.GetGame() ).RegisterInventoryListener( player, itemBoughtCallback );
	}

	private function UnregisterInventoryListener( player : GameObject )
	{
		if( m_inventoryListener )
		{
			GameInstance.GetTransactionSystem( player.GetGame() ).UnregisterInventoryListener( player, m_inventoryListener );
			m_inventoryListener = NULL;
		}
	}

	public function OnItemBought( itemID : ItemID, itemData : weak< gameItemData > )
	{
		m_soldItems.RemoveItem( itemID, 1 );
		m_InventoryManager.MarkToRebuild();
		UpdateMoney();
		SetInventoryCWList();
		EquipCyberware( itemData );
	}

	protected event OnUIVendorItemSoldEvent( evt : UIVendorItemsSoldEvent )
	{
		var i : Int32;
		for( i = 0; i < evt.itemsID.Size(); i += 1 )
		{
			m_soldItems.AddItem( evt.itemsID[ i ], evt.quantity[ i ], evt.piecesPrice[ i ] );
		}
		m_InventoryManager.MarkToRebuild();
		UpdateMoney();
		SetInventoryCWList();
	}

	private function EquipCyberware( itemData : weak< gameItemData > )
	{
		var equipRequest : EquipRequest;
		var notification : UIMenuNotificationEvent;
		var additionalInfo : VendorRequirementsNotMetNotificationData;
		if( !( EquipmentSystem.GetInstance( m_player ).GetPlayerData( m_player ).IsEquippable( itemData ) ) )
		{
			notification = new UIMenuNotificationEvent;
			notification.m_notificationType = UIMenuNotificationType.VendorRequirementsNotMet;
			additionalInfo = new VendorRequirementsNotMetNotificationData;
			additionalInfo.m_data = GetEquipRequirements( itemData );
			notification.m_additionalInfo = additionalInfo;
			GameInstance.GetUISystem( m_player.GetGame() ).QueueEvent( notification );
			return;
		}
		m_activeSlotIndex = m_equipmentGrid.GetSlotToEquipe( itemData.GetID() );
		m_equiped = false;
		equipRequest = new EquipRequest;
		equipRequest.owner = m_player;
		equipRequest.itemID = itemData.GetID();
		equipRequest.slotIndex = m_activeSlotIndex;
		PlaySound( 'ItemCyberware', 'OnInstall' );
		GameInstance.GetScriptableSystemsContainer( m_player.GetGame() ).Get( 'EquipmentSystem' ).QueueRequest( equipRequest );
	}

	private function GetEquipRequirements( itemData : gameItemData ) : SItemStackRequirementData
	{
		var i : Int32;
		var prereqs : array< weak< IPrereq_Record > >;
		var statPrereq : StatPrereq_Record;
		var data : SItemStackRequirementData;
		var itemRecord : weak< Item_Record >;
		itemRecord = RPGManager.GetItemRecord( itemData.GetID() );
		itemRecord.EquipPrereqs( prereqs );
		if( itemRecord.UsesVariants() )
		{
			itemRecord.GetVariantsItem( itemData.GetVariant() ).VariantPrereqs( prereqs );
		}
		for( i = 0; i < prereqs.Size(); i += 1 )
		{
			statPrereq = ( ( StatPrereq_Record )( prereqs[ i ] ) );
			if( statPrereq )
			{
				data.statType = ( ( gamedataStatType )( ( ( Int32 )( EnumValueFromName( 'gamedataStatType', statPrereq.StatType() ) ) ) ) );
				data.requiredValue = statPrereq.ValueToCheck();
				return data;
			}
		}
		return data;
	}

	protected function RegisterBlackboard( player : GameObject )
	{
		m_equipmentBlackboard = GameInstance.GetBlackboardSystem( player.GetGame() ).Get( GetAllBlackboardDefs().UI_Equipment );
		if( m_equipmentBlackboard )
		{
			m_equipmentBlackboardCallback = m_equipmentBlackboard.RegisterDelayedListenerVariant( GetAllBlackboardDefs().UI_Equipment.itemEquipped, this, 'OnItemEquiped' );
		}
		m_tokenBlackboard = GameInstance.GetBlackboardSystem( player.GetGame() ).Get( GetAllBlackboardDefs().TokenUpgradedCyberwareBlackboard );
		if( m_tokenBlackboard )
		{
			m_tokenBlackboardCallback = m_tokenBlackboard.RegisterDelayedListenerVariant( GetAllBlackboardDefs().TokenUpgradedCyberwareBlackboard.CyberwareTypes, this, 'OnItemUpgrade' );
		}
		m_VendorBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_Vendor );
	}

	protected function UnregisterBlackboard()
	{
		if( m_equipmentBlackboard )
		{
			m_equipmentBlackboard.UnregisterListenerVariant( GetAllBlackboardDefs().UI_Equipment.itemEquipped, m_equipmentBlackboardCallback );
		}
		m_VendorBlackboard = NULL;
	}

	private function PrepareCyberwareSlots()
	{
		inkCompoundRef.RemoveAllChildren( m_rightButtomGridAnchor );
		inkCompoundRef.RemoveAllChildren( m_frontalCortexAnchor );
		inkCompoundRef.RemoveAllChildren( m_ocularCortexAnchor );
		inkCompoundRef.RemoveAllChildren( m_leftMiddleGridAnchor );
		inkCompoundRef.RemoveAllChildren( m_leftButtomGridAnchor );
		inkCompoundRef.RemoveAllChildren( m_rightTopGridAnchor );
		inkCompoundRef.RemoveAllChildren( m_skeletonAnchor );
		inkCompoundRef.RemoveAllChildren( m_handsAnchor );
		SpawnCWAreaGrid( gamedataEquipmentArea.FrontalCortexCW, m_frontalCortexAnchor, inkEHorizontalAlign.Right );
		SpawnCWAreaGrid( gamedataEquipmentArea.EyesCW, m_ocularCortexAnchor, inkEHorizontalAlign.Right );
		SpawnCWAreaGrid( gamedataEquipmentArea.CardiovascularSystemCW, m_leftMiddleGridAnchor, inkEHorizontalAlign.Right );
		SpawnCWAreaGrid( gamedataEquipmentArea.ImmuneSystemCW, m_leftButtomGridAnchor, inkEHorizontalAlign.Right );
		SpawnCWAreaGrid( gamedataEquipmentArea.NervousSystemCW, m_leftButtomGridAnchor, inkEHorizontalAlign.Right );
		SpawnCWAreaGrid( gamedataEquipmentArea.IntegumentarySystemCW, m_leftButtomGridAnchor, inkEHorizontalAlign.Right );
		SpawnCWAreaGrid( gamedataEquipmentArea.SystemReplacementCW, m_rightTopGridAnchor, inkEHorizontalAlign.Left );
		SpawnCWAreaGrid( gamedataEquipmentArea.MusculoskeletalSystemCW, m_skeletonAnchor, inkEHorizontalAlign.Left );
		SpawnCWAreaGrid( gamedataEquipmentArea.HandsCW, m_handsAnchor, inkEHorizontalAlign.Left );
		SpawnCWAreaGrid( gamedataEquipmentArea.ArmsCW, m_rightButtomGridAnchor, inkEHorizontalAlign.Left );
		SpawnCWAreaGrid( gamedataEquipmentArea.LegsCW, m_rightButtomGridAnchor, inkEHorizontalAlign.Left );
	}

	private function SpawnCWAreaGrid( equipArea : gamedataEquipmentArea, parentRef : inkCompoundRef, align : inkEHorizontalAlign )
	{
		var gridUserData : GridUserData;
		var widgetName : CName;
		gridUserData = new GridUserData;
		gridUserData.equipArea = equipArea;
		gridUserData.align = align;
		widgetName = ( ( align == inkEHorizontalAlign.Right ) ? ( 'cyberwareInventoryMiniGridLeft' ) : ( 'cyberwareInventoryMiniGridRight' ) );
		AsyncSpawnFromLocal( inkCompoundRef.Get( parentRef ), widgetName, this, 'OnGridSpawned', gridUserData );
	}

	protected event OnGridSpawned( widget : inkWidget, userData : IScriptable )
	{
		var i, numSlots, amountOfNewItems : Int32;
		var minigridController : CyberwareInventoryMiniGrid;
		var cyberwares : array< InventoryItemData >;
		var itemData : InventoryItemData;
		var gridUserData : GridUserData;
		gridUserData = ( ( GridUserData )( userData ) );
		widget.SetHAlign( gridUserData.align );
		minigridController = ( ( CyberwareInventoryMiniGrid )( widget.GetController() ) );
		numSlots = m_InventoryManager.GetNumberOfSlots( gridUserData.equipArea );
		for( i = 0; i < numSlots; i += 1 )
		{
			itemData = m_InventoryManager.GetItemDataEquippedInArea( gridUserData.equipArea, i );
			InventoryItemData.SetEquipmentArea( itemData, gridUserData.equipArea );
			cyberwares.PushBack( itemData );
		}
		amountOfNewItems = ( ( m_screen == CyberwareScreenType.Ripperdoc ) ? ( GetAmountOfAvailableItems( gridUserData.equipArea ) ) : ( GetAmountOfMods( itemData ) ) );
		minigridController.SetupData( gridUserData.equipArea, cyberwares, amountOfNewItems, this, ( ( m_mode == RipperdocModes.Item ) ? ( 'OnEquipmentSlotClick' ) : ( 'OnPreviewCyberwareClick' ) ), m_screen, InventoryItemData.GetAttachmentsSize( itemData ) > 0 );
		m_cybewareGrids.PushBack( minigridController );
	}

	private function UpdateCWAreaGrid( selectedArea : gamedataEquipmentArea )
	{
		var i, numSlots, amountOfNewItems : Int32;
		var cyberwares : array< InventoryItemData >;
		var itemData : InventoryItemData;
		numSlots = m_InventoryManager.GetNumberOfSlots( selectedArea );
		for( i = 0; i < numSlots; i += 1 )
		{
			itemData = m_InventoryManager.GetItemDataEquippedInArea( selectedArea, i );
			InventoryItemData.SetEquipmentArea( itemData, selectedArea );
			cyberwares.PushBack( itemData );
		}
		amountOfNewItems = ( ( m_screen == CyberwareScreenType.Ripperdoc ) ? ( GetAmountOfAvailableItems( selectedArea ) ) : ( GetAmountOfMods( itemData ) ) );
		for( i = 0; i < m_cybewareGrids.Size(); i += 1 )
		{
			if( m_cybewareGrids[ i ].GetEquipementArea() == selectedArea )
			{
				m_cybewareGrids[ i ].UpdateData( selectedArea, cyberwares, amountOfNewItems, m_screen );
				return;
			}
		}
	}

	private function SelectSlot( newSlotIndex : Int32 )
	{
		m_equipmentGrid.SelectSlot( newSlotIndex );
		UpdateTooltipData( m_equipmentGrid.GetSelectedSlotData() );
	}

	private function UpdateTooltipData( itemData : InventoryItemData )
	{
		var tooltipsData : InventoryTooltipData;
		var targetCyberwareInfoType : CyberwareInfoType;
		if( InventoryItemData.IsEmpty( itemData ) )
		{
			inkCompoundRef.SetVisible( m_cyberwareInfoContainer, false );
			return;
		}
		if( InventoryItemData.GetGameItemData( itemData ).HasTag( 'Cyberdeck' ) )
		{
			targetCyberwareInfoType = CyberwareInfoType.Cyberdeck;
		}
		inkCompoundRef.SetVisible( m_cyberwareInfoContainer, true );
		if( ( m_cyberwareInfo == NULL ) || m_cyberwareInfoType != targetCyberwareInfoType )
		{
			inkCompoundRef.RemoveAllChildren( m_cyberwareInfoContainer );
			m_cyberwareInfo = NULL;
			if( targetCyberwareInfoType == CyberwareInfoType.Cyberdeck )
			{
				m_cyberwareInfo = ( ( AGenericTooltipController )( SpawnFromExternal( inkCompoundRef.Get( m_cyberwareInfoContainer ), R"base\gameplay\gui\common\tooltip\cyberdecktooltip.inkwidget", 'cyberdeckTooltip' ).GetController() ) );
			}
			else
			{
				m_cyberwareInfo = ( ( AGenericTooltipController )( SpawnFromExternal( inkCompoundRef.Get( m_cyberwareInfoContainer ), R"base\gameplay\gui\common\tooltip\itemtooltip.inkwidget", 'itemTooltip' ).GetController() ) );
			}
			m_cyberwareInfoType = targetCyberwareInfoType;
		}
		tooltipsData = m_InventoryManager.GetTooltipDataForInventoryItem( itemData, InventoryItemData.IsEquipped( itemData ) );
		m_equipmentGrid.UpdateTitle( tooltipsData.itemName );
		m_cyberwareInfo.SetData( tooltipsData );
		inkCompoundRef.SetVisible( m_cyberwareInfoContainer, true );
		PlayLibraryAnimationOnTargets( 'tooltipContainer_change', SelectWidgets( inkCompoundRef.Get( m_cyberwareInfoContainer ) ) );
	}

	private function GetAmountOfAvailableItems( equipArea : gamedataEquipmentArea ) : Int32
	{
		var i : Int32;
		var ripperdocInventory : array< InventoryItemData >;
		var playerInventory : array< InventoryItemData >;
		ripperdocInventory = GetRipperdocItemsForEquipmentArea( equipArea );
		playerInventory = m_InventoryManager.GetPlayerInventoryData( equipArea );
		for( i = 0; i < playerInventory.Size(); i = i + 1 )
		{
			if( !( InventoryItemData.IsEquipped( playerInventory[ i ] ) ) )
			{
				ripperdocInventory.PushBack( playerInventory[ i ] );
			}
		}
		return ripperdocInventory.Size();
	}

	private function GetAmountOfMods( itemData : InventoryItemData ) : Int32
	{
		var i, modsCount, slotsCount : Int32;
		var mods : array< InventoryItemData >;
		var attachments : InventoryItemAttachments;
		slotsCount = InventoryItemData.GetAttachmentsSize( itemData );
		if( InventoryItemData.GetEquipmentArea( itemData ) != gamedataEquipmentArea.ArmsCW && ( slotsCount > 0 ) )
		{
			attachments = InventoryItemData.GetAttachment( itemData, 0 );
			mods = m_InventoryManager.GetPlayerInventoryPartsForItem( InventoryItemData.GetID( itemData ), attachments.SlotID );
			return mods.Size();
		}
		for( i = 0; i < slotsCount; i += 1 )
		{
			attachments = InventoryItemData.GetAttachment( itemData, i );
			mods = m_InventoryManager.GetPlayerInventoryPartsForItem( InventoryItemData.GetID( itemData ), attachments.SlotID );
			modsCount += mods.Size();
		}
		return modsCount;
	}

	protected event OnVendorUpdated( value : Variant ) {}

	protected event OnSetMenuEventDispatcher( menuEventDispatcher : weak< inkMenuEventDispatcher > )
	{
		super.OnSetMenuEventDispatcher( menuEventDispatcher );
		m_menuEventDispatcher = menuEventDispatcher;
		m_menuEventDispatcher.RegisterToEvent( 'OnBack', this, 'OnBack' );
	}

	protected event OnBack( userData : IScriptable )
	{
		switch( m_mode )
		{
			case RipperdocModes.Default:
				if( m_screen == CyberwareScreenType.Inventory )
				{
					super.OnBack( userData );
				}
				else if( !( StatusEffectSystem.ObjectHasStatusEffectWithTag( GetPlayerControlledObject(), 'LockInHubMenu' ) ) )
				{
					m_menuEventDispatcher.SpawnEvent( 'OnVendorClose' );
				}
			break;
			case RipperdocModes.Item:
				OpenDefaultMode();
			break;
		}
	}

	protected event OnItemEquiped( value : Variant )
	{
		var attributeEvt : AttributeUpdateEvent;
		if( !( m_equiped ) )
		{
			attributeEvt = new AttributeUpdateEvent;
			QueueEvent( attributeEvt );
			SetInventoryCWList();
			SetEquipmentGrid();
			PlayLibraryAnimation( 'filter_change' );
			m_equiped = true;
		}
	}

	protected event OnItemUpgrade( value : Variant )
	{
		var attributeEvt : AttributeUpdateEvent;
		attributeEvt = new AttributeUpdateEvent;
		QueueEvent( attributeEvt );
	}

	protected event OnPreviewCyberwareClick( evt : inkPointerEvent )
	{
		var itemController : weak< InventoryItemDisplayController >;
		var openModsScreenEvent : CyberwareTabModsRequest;
		var itemData : InventoryItemData;
		if( evt.IsAction( 'select' ) )
		{
			itemController = GetCyberwareSlotControllerFromTarget( evt );
			m_selectedArea = itemController.GetEquipmentArea();
			m_activeSlotIndex = itemController.GetSlotIndex();
			PlaySound( 'Button', 'OnPress' );
			switch( m_screen )
			{
				case CyberwareScreenType.Ripperdoc:
					OpenItemMode();
				break;
				case CyberwareScreenType.Inventory:
					itemData = itemController.GetItemData();
				if( InventoryItemData.GetAttachmentsSize( itemData ) > 0 )
				{
					openModsScreenEvent = new CyberwareTabModsRequest;
					openModsScreenEvent.open = true;
					openModsScreenEvent.wrapper = new CyberwareDisplayWrapper;
					openModsScreenEvent.wrapper.displayData = itemController.GetItemDisplayData();
					QueueEvent( openModsScreenEvent );
				}
				break;
			}
		}
		else if( evt.IsAction( 'upgrade_perk' ) && CheckTokenAvailability() )
		{
			OpenTokenPopup( itemData );
		}
	}

	protected event OnEquipmentSlotClick( evt : inkPointerEvent )
	{
		var itemController : weak< InventoryItemDisplayController >;
		itemController = GetCyberwareSlotControllerFromTarget( evt );
		if( evt.IsAction( 'select' ) )
		{
			PlaySound( 'Button', 'OnPress' );
			SelectSlot( itemController.GetSlotIndex() );
		}
		else if( ( evt.IsAction( 'upgrade_perk' ) && !( InventoryItemData.IsEmpty( itemController.GetItemData() ) ) ) && CheckTokenAvailability() )
		{
			OpenTokenPopup( itemController.GetItemData() );
		}
	}

	private function OpenDefaultMode()
	{
		m_animationController.PlayDefaultScreenOpen( m_selectedArea );
		m_mode = RipperdocModes.Default;
		UpdateCWAreaGrid( m_selectedArea );
		ProcessRipperdocSlotsModeTutorial();
		SetDefaultModeButtonHints();
	}

	private override function ReadUICondition( condition : gamedataUICondition ) : Bool
	{
		switch( condition )
		{
			case gamedataUICondition.InSubMenu:
				return m_mode == RipperdocModes.Item;
			case gamedataUICondition.InHandsSubMenu:
				return m_selectedArea == gamedataEquipmentArea.HandsCW;
			case gamedataUICondition.InEyesSubMenu:
				return m_selectedArea == gamedataEquipmentArea.EyesCW;
		}
		return false;
	}

	private function OpenItemMode()
	{
		m_equiped = true;
		m_mode = RipperdocModes.Item;
		SetInventoryCWList();
		SetEquipmentGrid();
		ProcessRipperdocItemModeTutorial();
		SetItemModeButtonHints();
		m_animationController.PlayItemSceenOpen( m_equipmentGrid.GetRootWidget(), m_selectedArea );
	}

	protected function ProcessRipperdocSlotsModeTutorial()
	{
		if( ( GameInstance.GetQuestsSystem( m_player.GetGame() ).GetFact( 'tutorial_ripperdoc_slots' ) == 0 ) && m_screen == CyberwareScreenType.Ripperdoc )
		{
			GameInstance.GetQuestsSystem( m_player.GetGame() ).SetFact( 'tutorial_ripperdoc_slots', 1 );
		}
	}

	protected function ProcessRipperdocItemModeTutorial()
	{
		if( ( GameInstance.GetQuestsSystem( m_player.GetGame() ).GetFact( 'tutorial_ripperdoc_buy' ) == 0 ) && m_screen == CyberwareScreenType.Ripperdoc )
		{
			GameInstance.GetQuestsSystem( m_player.GetGame() ).SetFact( 'tutorial_ripperdoc_buy', 1 );
		}
	}

	private function SetEquipmentGrid()
	{
		var cyberwares : array< InventoryItemData >;
		var widget : weak< inkWidget >;
		cyberwares = GetEquippedCWList();
		if( m_equipmentGrid == NULL )
		{
			inkCompoundRef.RemoveAllChildren( m_cyberwareSlotsList );
			widget = SpawnFromLocal( inkCompoundRef.Get( m_cyberwareSlotsList ), 'cyberwareInventoryMiniGrid' );
			widget.SetHAlign( inkEHorizontalAlign.Fill );
			m_equipmentGrid = ( ( CyberwareInventoryMiniGrid )( widget.GetController() ) );
			m_equipmentGrid.SetupData( m_selectedArea, cyberwares, 0, this, 'OnEquipmentSlotClick', m_screen, false );
		}
		else
		{
			m_equipmentGrid.UpdateData( m_selectedArea, cyberwares );
		}
		SelectSlot( m_activeSlotIndex );
	}

	private function GetEquippedCWList() : array< InventoryItemData >
	{
		var i, numSlots : Int32;
		var cyberwares : array< InventoryItemData >;
		var itemData : InventoryItemData;
		numSlots = m_InventoryManager.GetNumberOfSlots( m_selectedArea );
		for( i = 0; i < numSlots; i += 1 )
		{
			itemData = m_InventoryManager.GetItemDataEquippedInArea( m_selectedArea, i );
			InventoryItemData.SetEquipmentArea( itemData, m_selectedArea );
			cyberwares.PushBack( itemData );
		}
		return cyberwares;
	}

	private function SetInventoryCWList()
	{
		var i, playerMoney : Int32;
		var ripperdocCyberwares, playerCyberwares : array< InventoryItemData >;
		var itemDatas : array< IScriptable >;
		var itemWrapper : CyberwareDataWrapper;
		var isReqMet, hasBuyBack : Bool;
		var cacheItem : SoldItem;
		ripperdocCyberwares = GetRipperdocItemsForEquipmentArea( m_selectedArea );
		playerCyberwares = m_InventoryManager.GetPlayerInventoryData( m_selectedArea );
		for( i = 0; i < playerCyberwares.Size(); i = i + 1 )
		{
			if( !( InventoryItemData.IsEquipped( playerCyberwares[ i ] ) ) )
			{
				InventoryItemData.SetEquipRequirements( playerCyberwares[ i ], RPGManager.GetEquipRequirements( m_player, InventoryItemData.GetGameItemData( playerCyberwares[ i ] ) ) );
				itemWrapper = new CyberwareDataWrapper;
				isReqMet = EquipmentSystem.GetInstance( m_player ).GetPlayerData( m_player ).IsEquippable( InventoryItemData.GetGameItemData( playerCyberwares[ i ] ) );
				InventoryItemData.SetIsEquippable( playerCyberwares[ i ], isReqMet );
				InventoryItemData.SetIsVendorItem( playerCyberwares[ i ], false );
				itemWrapper.InventoryItem = playerCyberwares[ i ];
				m_InventoryManager.GetOrCreateInventoryItemSortData( itemWrapper.InventoryItem, m_uiScriptableSystem );
				itemWrapper.IsVendor = false;
				itemWrapper.IsUpgraded = m_ripperdocTokenManager.IsItemUpgraded( InventoryItemData.GetID( itemWrapper.InventoryItem ) );
				itemDatas.PushBack( itemWrapper );
			}
		}
		playerMoney = m_VendorDataManager.GetLocalPlayerCurrencyAmount();
		for( i = 0; i < ripperdocCyberwares.Size(); i = i + 1 )
		{
			cacheItem = m_soldItems.GetItem( InventoryItemData.GetID( ripperdocCyberwares[ i ] ) );
			if( cacheItem != NULL )
			{
				hasBuyBack = true;
			}
			InventoryItemData.SetEquipRequirements( ripperdocCyberwares[ i ], RPGManager.GetEquipRequirements( m_player, InventoryItemData.GetGameItemData( ripperdocCyberwares[ i ] ) ) );
			itemWrapper = new CyberwareDataWrapper;
			itemWrapper.InventoryItem = ripperdocCyberwares[ i ];
			m_InventoryManager.GetOrCreateInventoryItemSortData( itemWrapper.InventoryItem, m_uiScriptableSystem );
			itemWrapper.IsVendor = true;
			itemWrapper.PlayerMoney = playerMoney;
			itemWrapper.IsBuyback = cacheItem != NULL;
			itemDatas.PushBack( itemWrapper );
		}
		if( hasBuyBack )
		{
			m_radioGroup.AddFilter( ( ( Int32 )( RipperdocFilter.Buyback ) ) );
		}
		else
		{
			m_radioGroup.RemoveFilter( ( ( Int32 )( RipperdocFilter.Buyback ) ) );
		}
		m_cyberwareDataSource.Reset( itemDatas );
	}

	protected event OnSlotClick( evt : ItemDisplayClickEvent )
	{
		var itemData : InventoryItemData;
		var itemGameData : weak< gameItemData >;
		var vendorNotification : UIMenuNotificationEvent;
		var additionalInfo : VendorRequirementsNotMetNotificationData;
		var type : VendorConfirmationPopupType;
		itemData = evt.itemData;
		if( !( m_isActivePanel ) || InventoryItemData.IsEmpty( itemData ) )
		{
			return false;
		}
		itemGameData = InventoryItemData.GetGameItemData( itemData );
		if( evt.actionName.IsAction( 'click' ) )
		{
			PlaySound( 'Button', 'OnPress' );
			if( InventoryItemData.IsVendorItem( itemData ) )
			{
				if( !( InventoryItemData.IsRequirementMet( itemData ) ) )
				{
					vendorNotification = new UIMenuNotificationEvent;
					vendorNotification.m_notificationType = UIMenuNotificationType.VendorRequirementsNotMet;
					additionalInfo = new VendorRequirementsNotMetNotificationData;
					additionalInfo.m_data = InventoryItemData.GetRequirement( itemData );
					vendorNotification.m_additionalInfo = additionalInfo;
					GameInstance.GetUISystem( m_player.GetGame() ).QueueEvent( vendorNotification );
				}
				else if( evt.isBuybackStack )
				{
					m_VendorDataManager.BuybackItemFromVendor( itemGameData, 1 );
				}
				else if( m_VendorDataManager.GetBuyingPrice( itemGameData.GetID() ) > m_VendorDataManager.GetLocalPlayerCurrencyAmount() )
				{
					vendorNotification = new UIMenuNotificationEvent;
					vendorNotification.m_notificationType = UIMenuNotificationType.VNotEnoughMoney;
					GameInstance.GetUISystem( m_player.GetGame() ).QueueEvent( vendorNotification );
				}
				else
				{
					type = ( ( EquipmentSystem.GetInstance( m_player ).GetPlayerData( m_player ).IsEquippable( itemGameData ) ) ? ( VendorConfirmationPopupType.BuyAndEquipCyberware ) : ( VendorConfirmationPopupType.BuyNotEquipableCyberware ) );
					OpenConfirmationPopup( itemData, m_VendorDataManager.GetBuyingPrice( InventoryItemData.GetID( itemData ) ), type, 'OnBuyConfirmationPopupClosed' );
				}
			}
			else if( !( InventoryItemData.IsEquipped( itemData ) ) && m_equiped )
			{
				EquipCyberware( itemGameData );
			}
		}
		else if( ( evt.actionName.IsAction( 'disassemble_item' ) && !( InventoryItemData.IsEquipped( itemData ) ) ) && !( InventoryItemData.IsVendorItem( itemData ) ) )
		{
			OpenConfirmationPopup( itemData, m_VendorDataManager.GetSellingPrice( InventoryItemData.GetID( itemData ) ), VendorConfirmationPopupType.SellCyberware, 'OnSellConfirmationPopupClosed' );
		}
	}

	private function OpenConfirmationPopup( itemData : InventoryItemData, price : Int32, type : VendorConfirmationPopupType, listener : CName )
	{
		var data : VendorConfirmationPopupData;
		data = new VendorConfirmationPopupData;
		data.notificationName = 'base\gameplay\gui\widgets\notifications\vendor_confirmation.inkwidget';
		data.isBlocking = true;
		data.useCursor = true;
		data.queueName = 'modal_popup';
		data.itemData = itemData;
		data.quantity = InventoryItemData.GetQuantity( itemData );
		data.type = type;
		data.price = price;
		m_tokenPopup = ShowGameNotification( data );
		m_tokenPopup.RegisterListener( this, listener );
		m_buttonHintsController.Hide();
	}

	protected event OnBuyConfirmationPopupClosed( data : inkGameNotificationData )
	{
		var resultData : VendorConfirmationPopupCloseData;
		m_tokenPopup = NULL;
		resultData = ( ( VendorConfirmationPopupCloseData )( data ) );
		if( resultData.confirm )
		{
			m_VendorDataManager.BuyItemFromVendor( InventoryItemData.GetGameItemData( resultData.itemData ), InventoryItemData.GetQuantity( resultData.itemData ) );
		}
		m_buttonHintsController.Show();
		PlaySound( 'Button', 'OnPress' );
	}

	protected event OnSellConfirmationPopupClosed( data : inkGameNotificationData )
	{
		var resultData : VendorConfirmationPopupCloseData;
		m_tokenPopup = NULL;
		resultData = ( ( VendorConfirmationPopupCloseData )( data ) );
		if( resultData.confirm )
		{
			m_VendorDataManager.SellItemToVendor( InventoryItemData.GetGameItemData( resultData.itemData ), InventoryItemData.GetQuantity( resultData.itemData ) );
		}
		m_buttonHintsController.Show();
		PlaySound( 'Button', 'OnPress' );
	}

	private function OpenTokenPopup( itemData : InventoryItemData )
	{
		var data : RipperdocTokenPopupData;
		data = new RipperdocTokenPopupData;
		data.notificationName = 'base\gameplay\gui\widgets\notifications\ripperdoc_token_popup.inkwidget';
		data.isBlocking = true;
		data.useCursor = true;
		data.cwItemData = itemData;
		data.queueName = 'modal_popup';
		m_tokenPopup = ShowGameNotification( data );
		m_tokenPopup.RegisterListener( this, 'OnBuyTokenPopupClosed' );
		m_buttonHintsController.Hide();
	}

	protected event OnBuyTokenPopupClosed( data : inkGameNotificationData )
	{
		var resultData : RipperdocTokenPopupCloseData;
		m_tokenPopup = NULL;
		resultData = ( ( RipperdocTokenPopupCloseData )( data ) );
		if( resultData.confirm )
		{
			m_ripperdocTokenManager.ApplyToken( InventoryItemData.GetID( resultData.cwItemData ) );
		}
		m_buttonHintsController.Show();
		PlaySound( 'Button', 'OnPress' );
	}

	protected event OnCyberwareSlotHoverOver( evt : ItemDisplayHoverOverEvent )
	{
		InventoryItemHoverOver( evt.itemData, evt.isBuybackStack );
		m_selectedArea = InventoryItemData.GetEquipmentArea( evt.itemData );
		m_animationController.PlayHoverAnimation( m_selectedArea, m_mode );
	}

	protected event OnCyberwareSlotHoverOut( evt : ItemDisplayHoverOutEvent )
	{
		var hoverEvt : HoverSatateChangedEvent;
		m_TooltipsManager.HideTooltips();
		SetInventoryItemButtonHintsHoverOut();
		m_animationController.PlayHoverOverAnimation( m_selectedArea, m_mode );
		hoverEvt = new HoverSatateChangedEvent;
		hoverEvt.isHovered = false;
		QueueEvent( hoverEvt );
	}

	private function InventoryItemHoverOver( itemData : InventoryItemData, isBuybackStack : Bool )
	{
		var i : Int32;
		var itemTooltipData : InventoryTooltipData;
		var equippedCyberwares : array< InventoryItemData >;
		var hoverEvt : HoverSatateChangedEvent;
		m_TooltipsManager.HideTooltips();
		SetInventoryItemButtonHintsHoverOver( itemData );
		if( InventoryItemData.IsEmpty( itemData ) )
		{
			return;
		}
		if( InventoryItemData.IsEquipped( itemData ) )
		{
			itemTooltipData = m_InventoryManager.GetTooltipDataForInventoryItem( itemData, true, InventoryItemData.IsVendorItem( itemData ) );
		}
		else
		{
			equippedCyberwares = GetEquippedCWList();
			for( i = 0; i < equippedCyberwares.Size(); i += 1 )
			{
				if( !( InventoryItemData.IsEmpty( equippedCyberwares[ 0 ] ) ) )
				{
					itemTooltipData = m_InventoryManager.GetComparisonTooltipsData( equippedCyberwares[ 0 ], itemData, false );
				}
			}
			if( itemTooltipData == NULL )
			{
				itemTooltipData = m_InventoryManager.GetTooltipDataForInventoryItem( itemData, false, InventoryItemData.IsVendorItem( itemData ) );
			}
			if( isBuybackStack )
			{
				itemTooltipData.buyPrice = ( ( Float )( RPGManager.CalculateSellPrice( m_VendorDataManager.GetVendorInstance().GetGame(), m_VendorDataManager.GetVendorInstance(), InventoryItemData.GetID( itemData ) ) ) );
			}
			hoverEvt = new HoverSatateChangedEvent;
			hoverEvt.isHovered = true;
			hoverEvt.itemInventoryData = itemData;
			QueueEvent( hoverEvt );
		}
		ShowCWTooltip( itemData, itemTooltipData );
	}

	private function ShowCWTooltip( itemData : InventoryItemData, itemTooltipData : InventoryTooltipData )
	{
		if( InventoryItemData.GetGameItemData( itemData ).HasTag( 'Cyberdeck' ) )
		{
			m_TooltipsManager.ShowTooltip( 'cyberdeckTooltip', itemTooltipData, inkMargin( 60.0, 60.0, 0.0, 0.0 ) );
		}
		else if( InventoryItemData.GetItemType( itemData ) == gamedataItemType.Prt_Program )
		{
			m_TooltipsManager.ShowTooltip( 'programTooltip', itemTooltipData, inkMargin( 60.0, 60.0, 0.0, 0.0 ) );
		}
		else
		{
			m_TooltipsManager.ShowTooltip( 'itemTooltip', itemTooltipData, inkMargin( 60.0, 60.0, 0.0, 0.0 ) );
		}
	}

	private function SetDefaultModeButtonHints()
	{
		m_buttonHintsController.RemoveButtonHint( 'back' );
		if( !( StatusEffectSystem.ObjectHasStatusEffectWithTag( GetPlayerControlledObject(), 'LockInHubMenu' ) ) || m_screen == CyberwareScreenType.Inventory )
		{
			m_buttonHintsController.AddButtonHint( 'back', GetLocalizedText( "LocKey#903" ) );
		}
	}

	private function SetItemModeButtonHints()
	{
		m_buttonHintsController.AddButtonHint( 'back', "LocKey#15324" );
	}

	private function SetInventoryItemButtonHintsHoverOver( displayingData : InventoryItemData )
	{
		var isEquipped, isEmpty : Bool;
		isEmpty = InventoryItemData.IsEmpty( displayingData );
		isEquipped = InventoryItemData.IsEquipped( displayingData );
		switch( m_screen )
		{
			case CyberwareScreenType.Ripperdoc:
				if( m_mode == RipperdocModes.Default )
				{
					m_buttonHintsController.AddButtonHint( 'select', "LocKey#273" );
				}
				else if( m_mode == RipperdocModes.Item )
				{
					if( isEmpty || isEquipped )
					{
						m_buttonHintsController.AddButtonHint( 'select', "LocKey#34928" );
					}
					else if( InventoryItemData.IsVendorItem( displayingData ) )
					{
						m_buttonHintsController.AddButtonHint( 'select', "LocKey#17847" );
					}
					else
					{
						m_buttonHintsController.AddButtonHint( 'disassemble_item', "LocKey#17848" );
						m_buttonHintsController.AddButtonHint( 'select', "LocKey#246" );
					}
				}
			if( isEquipped && CheckTokenAvailability() )
			{
				m_buttonHintsController.AddButtonHint( 'upgrade_perk', ( ( m_ripperdocTokenManager.IsItemUpgraded( InventoryItemData.GetID( displayingData ) ) ) ? ( "LocKey#79251" ) : ( "LocKey#79250" ) ) );
			}
			SetCursorContext( 'Hover' );
			break;
			case CyberwareScreenType.Inventory:
				if( m_mode == RipperdocModes.Default )
				{
					m_buttonHintsController.AddButtonHint( 'select', "LocKey#273" );
				}
			SetCursorContext( 'Default' );
			break;
		}
	}

	private function SetInventoryItemButtonHintsHoverOut()
	{
		m_buttonHintsController.RemoveButtonHint( 'select' );
		m_buttonHintsController.RemoveButtonHint( 'upgrade_perk' );
		m_buttonHintsController.RemoveButtonHint( 'disassemble_item' );
	}

	private function GetCyberwareSlotControllerFromTarget( evt : inkPointerEvent ) : InventoryItemDisplayController
	{
		var widget : inkWidget;
		var controller : weak< InventoryItemDisplayController >;
		widget = evt.GetCurrentTarget();
		controller = ( ( InventoryItemDisplayController )( widget.GetController() ) );
		return controller;
	}

	private function GetRipperdocItemsForEquipmentArea( equipArea : gamedataEquipmentArea ) : array< InventoryItemData >
	{
		var i : Int32;
		var data : array< VendorGameItemData >;
		var owner : weak< GameObject >;
		var gameData : gameItemData;
		var itemRecord : weak< Item_Record >;
		var itemData : InventoryItemData;
		var itemDataArray : array< InventoryItemData >;
		data = m_VendorDataManager.GetRipperDocItems();
		owner = m_VendorDataManager.GetVendorInstance();
		for( i = 0; i < data.Size(); i += 1 )
		{
			gameData = data[ i ].gameItemData;
			itemRecord = TweakDBInterface.GetItemRecord( ItemID.GetTDBID( gameData.GetID() ) );
			if( itemRecord.EquipArea().Type() == equipArea )
			{
				itemData = m_InventoryManager.GetInventoryItemData( owner, data[ i ].gameItemData, true );
				InventoryItemData.SetIsVendorItem( itemData, true );
				InventoryItemData.SetIsEquippable( itemData, EquipmentSystem.GetInstance( m_player ).GetPlayerData( m_player ).IsEquippable( data[ i ].gameItemData ) );
				InventoryItemData.SetIsRequirementMet( itemData, data[ i ].itemStack.isAvailable );
				InventoryItemData.SetRequirement( itemData, data[ i ].itemStack.requirement );
				itemDataArray.PushBack( itemData );
			}
		}
		return itemDataArray;
	}

	private function CheckTokenAvailability() : Bool
	{
		return m_useAlternativeSwitch && m_ripperdocTokenManager.IfPlayerHasTokens();
	}

}

class CyberwareTemplateClassifier extends inkVirtualItemTemplateClassifier
{

	public virtual function ClassifyItem( data : Variant ) : Uint32
	{
		return 0;
	}

}

class CyberwareDataView extends ScriptableDataView
{
	private var m_itemFilterType : RipperdocFilter;
	private var m_itemSortMode : ItemSortMode;
	private var m_uiScriptableSystem : weak< UIScriptableSystem >;

	public function BindUIScriptableSystem( uiScriptableSystem : weak< UIScriptableSystem > )
	{
		m_uiScriptableSystem = uiScriptableSystem;
	}

	public function SetFilterType( type : RipperdocFilter )
	{
		m_itemFilterType = type;
		Filter();
	}

	public override function FilterItem( data : IScriptable ) : Bool
	{
		var m_wrappedData : CyberwareDataWrapper;
		m_wrappedData = ( ( CyberwareDataWrapper )( ( ( IScriptable )( data ) ) ) );
		switch( m_itemFilterType )
		{
			case RipperdocFilter.Player:
				return !( InventoryItemData.IsVendorItem( m_wrappedData.InventoryItem ) );
			case RipperdocFilter.Vendor:
				return InventoryItemData.IsVendorItem( m_wrappedData.InventoryItem );
			case RipperdocFilter.Buyback:
				return m_wrappedData.IsBuyback;
			default:
				return true;
		}
		return true;
	}

	public function SetSortMode( mode : ItemSortMode )
	{
		m_itemSortMode = mode;
		EnableSorting();
		Sort();
		DisableSorting();
	}

	protected virtual function PreSortingInjection( builder : ItemCompareBuilder ) : ItemCompareBuilder
	{
		return builder;
	}

	public override function SortItem( left : IScriptable, right : IScriptable ) : Bool
	{
		var leftItem, rightItem : InventoryItemSortData;
		leftItem = InventoryItemData.GetSortData( ( ( CyberwareDataWrapper )( ( ( IScriptable )( left ) ) ) ).InventoryItem );
		rightItem = InventoryItemData.GetSortData( ( ( CyberwareDataWrapper )( ( ( IScriptable )( right ) ) ) ).InventoryItem );
		switch( m_itemSortMode )
		{
			case ItemSortMode.NewItems:
				return PreSortingInjection( ItemCompareBuilder.Make( leftItem, rightItem ) ).NewItem( m_uiScriptableSystem ).QualityDesc().ItemType().NameAsc().GetBool();
			case ItemSortMode.NameAsc:
				return PreSortingInjection( ItemCompareBuilder.Make( leftItem, rightItem ) ).NameAsc().QualityDesc().GetBool();
			case ItemSortMode.NameDesc:
				return PreSortingInjection( ItemCompareBuilder.Make( leftItem, rightItem ) ).NameDesc().QualityDesc().GetBool();
			case ItemSortMode.QualityAsc:
				return PreSortingInjection( ItemCompareBuilder.Make( leftItem, rightItem ) ).QualityDesc().NameAsc().QualityDesc().GetBool();
			case ItemSortMode.QualityDesc:
				return PreSortingInjection( ItemCompareBuilder.Make( leftItem, rightItem ) ).QualityAsc().NameAsc().QualityDesc().GetBool();
			case ItemSortMode.WeightAsc:
				return PreSortingInjection( ItemCompareBuilder.Make( leftItem, rightItem ) ).WeightAsc().NameAsc().QualityDesc().GetBool();
			case ItemSortMode.WeightDesc:
				return PreSortingInjection( ItemCompareBuilder.Make( leftItem, rightItem ) ).WeightDesc().NameAsc().QualityDesc().GetBool();
			case ItemSortMode.PriceAsc:
				return PreSortingInjection( ItemCompareBuilder.Make( leftItem, rightItem ) ).PriceAsc().NameAsc().QualityDesc().GetBool();
			case ItemSortMode.PriceDesc:
				return PreSortingInjection( ItemCompareBuilder.Make( leftItem, rightItem ) ).PriceDesc().NameAsc().QualityDesc().GetBool();
			case ItemSortMode.ItemType:
				return PreSortingInjection( ItemCompareBuilder.Make( leftItem, rightItem ) ).ItemType().NameAsc().QualityDesc().GetBool();
		}
		return PreSortingInjection( ItemCompareBuilder.Make( leftItem, rightItem ) ).QualityDesc().ItemType().NameAsc().GetBool();
	}

}

class CyberwareItemLogicController extends inkVirtualCompoundItemController
{
	protected editable var m_slotRoot : inkCompoundRef;
	protected var m_slot : weak< InventoryItemDisplayController >;

	public function OnDataChanged( value : Variant )
	{
		var itemData : CyberwareDataWrapper;
		itemData = ( ( CyberwareDataWrapper )( ( ( IScriptable )value ) ) );
		if( !( m_slot ) )
		{
			m_slot = ( ( InventoryItemDisplayController )( ItemDisplayUtils.SpawnCommonSlotController( this, inkCompoundRef.Get( m_slotRoot ), 'itemDisplay' ) ) );
		}
		if( itemData.IsVendor )
		{
			m_slot.Setup( itemData.InventoryItem, ItemDisplayContext.Vendor, itemData.PlayerMoney >= ( ( Int32 )( InventoryItemData.GetBuyPrice( itemData.InventoryItem ) ) ) );
		}
		else
		{
			m_slot.Setup( itemData.InventoryItem, ItemDisplayContext.VendorPlayer, true, true );
		}
		m_slot.SetBuybackStack( itemData.IsBuyback );
	}

}

class CyberwareDataWrapper extends IScriptable
{
	var InventoryItem : InventoryItemData;
	var IsVendor : Bool;
	var IsBuyback : Bool;
	var PlayerMoney : Int32;
	var IsUpgraded : Bool;
}

class CyberwareDisplayWrapper extends IScriptable
{
	var displayData : InventoryItemDisplayData;
}

class CyberwareTabModsRequest extends Event
{
	var open : Bool;
	var wrapper : CyberwareDisplayWrapper;
}

class RipperdocIdPanel extends inkLogicController
{
	protected editable var m_fluffContainer : inkWidgetRef;
	protected editable var m_nameLabel : inkTextRef;
	protected editable var m_moneyLabel : inkTextRef;

	public function SetName( vendorName : String )
	{
		if( !( IsStringValid( vendorName ) ) )
		{
			vendorName = "MISSING VENDOR NAME";
		}
		inkTextRef.SetText( m_nameLabel, vendorName );
	}

	public function SetFeatureVersion( alternativeSwitch : Bool )
	{
		inkWidgetRef.SetVisible( m_fluffContainer, !( alternativeSwitch ) );
	}

	public function SetMoney( money : Int32 )
	{
		inkTextRef.SetText( m_moneyLabel, IntToString( money ) );
	}

	public function PlayIntoAnimation()
	{
		PlayLibraryAnimation( 'ripper_id' );
	}

}

enum RipperdocModes
{
	Default = 0,
	Item = 1,
}

enum CyberwareScreenType
{
	Ripperdoc = 0,
	Inventory = 1,
}

enum CyberwareInfoType
{
	Default = 0,
	Cyberdeck = 1,
}

