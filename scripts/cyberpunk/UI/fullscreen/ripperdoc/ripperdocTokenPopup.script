class RipperdocTokenPopupData extends inkGameNotificationData
{
	var cwItemData : InventoryItemData;
}

class RipperdocTokenPopupCloseData extends inkGameNotificationData
{
	var confirm : Bool;
	var chosenOptionIndex : Int32;
	var cwItemData : InventoryItemData;
}

class RipperdocTokenPopup extends inkGameController
{
	protected editable var m_option1 : inkWidgetRef;
	protected editable var m_option2 : inkWidgetRef;
	protected editable var m_option3 : inkWidgetRef;
	protected editable var m_buttonCancel : inkWidgetRef;
	private editable var m_buttonHintsRoot : inkWidgetRef;
	private var m_data : RipperdocTokenPopupData;
	private editable var m_libraryPath : inkWidgetLibraryReference;

	protected event OnInitialize()
	{
		RegisterToGlobalInputCallback( 'OnPostOnPress', this, 'OnHandlePressInput' );
		m_data = ( ( RipperdocTokenPopupData )( GetRootWidget().GetUserData( 'RipperdocTokenPopupData' ) ) );
		inkWidgetRef.RegisterToCallback( m_buttonCancel, 'OnRelease', this, 'OnCancelClick' );
		inkWidgetRef.RegisterToCallback( m_option1, 'OnRelease', this, 'OnOption1Click' );
		inkWidgetRef.RegisterToCallback( m_option2, 'OnRelease', this, 'OnOption2Click' );
		inkWidgetRef.RegisterToCallback( m_option3, 'OnRelease', this, 'OnOption3Click' );
		SetButtonHints();
	}

	protected event OnUninitialize()
	{
		UnregisterFromGlobalInputCallback( 'OnPostOnPress', this, 'OnHandlePressInput' );
	}

	private function SetButtonHints()
	{
		AddButtonHints( 'UI_Cancel', "UI-ResourceExports-Cancel" );
	}

	private function AddButtonHints( actionName : CName, label : String )
	{
		var buttonHint : LabelInputDisplayController;
		buttonHint = ( ( LabelInputDisplayController )( SpawnFromExternal( inkWidgetRef.Get( m_buttonHintsRoot ), inkWidgetLibraryResource.GetPath( m_libraryPath.widgetLibrary ), m_libraryPath.widgetItem ).GetController() ) );
		buttonHint.SetInputActionLabel( actionName, label );
	}

	protected event OnHandlePressInput( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'cancel' ) )
		{
			Close( false, -1 );
		}
	}

	protected event OnOption1Click( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) )
		{
			Close( true, 0 );
		}
	}

	protected event OnOption2Click( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) )
		{
			Close( true, 1 );
		}
	}

	protected event OnOption3Click( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) )
		{
			Close( true, 2 );
		}
	}

	protected event OnCancelClick( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) )
		{
			Close( false, -1 );
		}
	}

	private function Close( success : Bool, option : Int32 )
	{
		var closeData : RipperdocTokenPopupCloseData;
		closeData = new RipperdocTokenPopupCloseData;
		closeData.confirm = success;
		closeData.chosenOptionIndex = option;
		closeData.cwItemData = m_data.cwItemData;
		m_data.token.TriggerCallback( closeData );
	}

}

