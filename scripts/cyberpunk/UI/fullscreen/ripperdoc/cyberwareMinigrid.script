class CyberwareInventoryMiniGrid extends inkLogicController
{
	private editable var m_gridContainer : inkUniformGridRef;
	private editable var m_label : inkTextRef;
	private editable var m_sublabel : inkTextRef;
	private editable var m_number : inkTextRef;
	private editable var m_numberPanel : inkWidgetRef;
	private var m_gridWidth : Int32;
	private var m_selectedSlotIndex : Int32;
	private var m_equipArea : gamedataEquipmentArea;
	private var m_parentObject : IScriptable;
	private var m_onRealeaseCallbackName : CName;
	private var m_gridData : array< weak< InventoryItemDisplayController > >;

	protected event OnInitialize()
	{
		m_gridWidth = 0;
		inkTextRef.SetVisible( m_label, false );
		RegisterToCallback( 'OnStateChanged', this, 'OnStateChanged' );
	}

	protected event OnUninitialize()
	{
		RemoveElements( 0 );
	}

	public function SetOrientation( orientation : inkEOrientation )
	{
		inkUniformGridRef.SetOrientation( m_gridContainer, orientation );
	}

	public function SetupData( equipArea : gamedataEquipmentArea, playerEquipAreaInventory : array< InventoryItemData >, count : Int32, parent : IScriptable, onRealeaseCallbackName : CName, screen : CyberwareScreenType, hasMods : Bool )
	{
		var i, limit : Int32;
		var gridListItem : weak< InventoryItemDisplayController >;
		var slotUserData : SlotUserData;
		m_parentObject = parent;
		m_equipArea = equipArea;
		m_onRealeaseCallbackName = onRealeaseCallbackName;
		limit = playerEquipAreaInventory.Size();
		inkUniformGridRef.SetWrappingWidgetCount( m_gridContainer, ( ( Uint32 )( limit ) ) );
		while( m_gridData.Size() > 0 )
		{
			gridListItem = m_gridData.PopBack();
			inkUniformGridRef.RemoveChild( m_gridContainer, gridListItem.GetRootWidget() );
		}
		for( i = 0; i < limit; i += 1 )
		{
			slotUserData = new SlotUserData;
			slotUserData.itemData = playerEquipAreaInventory[ i ];
			slotUserData.index = i;
			slotUserData.area = equipArea;
			ItemDisplayUtils.SpawnCommonSlotAsync( this, m_gridContainer, 'itemDisplay', 'OnSlotSpawned', slotUserData );
		}
		UnselectSlot();
		UpdateTitles( count, screen, hasMods );
	}

	protected event OnStateChanged( widget : weak< inkWidget >, oldState : CName, newState : CName )
	{
		var i : Int32;
		for( i = 0; i < m_gridData.Size(); i += 1 )
		{
			m_gridData[ i ].GetRootWidget().SetState( newState );
		}
	}

	public function SelectSlot( index : Int32 )
	{
		UnselectSlot();
		if( index < m_gridData.Size() )
		{
			m_selectedSlotIndex = index;
			m_gridData[ m_selectedSlotIndex ].SetHighlighted( true );
		}
	}

	private function UnselectSlot()
	{
		if( m_selectedSlotIndex < m_gridData.Size() )
		{
			m_gridData[ m_selectedSlotIndex ].SetHighlighted( false );
		}
		m_selectedSlotIndex = -1;
	}

	public function GetSelectedSlotData() : InventoryItemData
	{
		return m_gridData[ m_selectedSlotIndex ].GetItemData();
	}

	public function GetSlotToEquipe( itemID : ItemID ) : Int32
	{
		var cyberwareType : CName;
		var i, emptySlot : Int32;
		emptySlot = -1;
		cyberwareType = TweakDBInterface.GetCName( ItemID.GetTDBID( itemID ) + T".cyberwareType", '' );
		for( i = m_gridData.Size() - 1; i >= 0; i -= 1 )
		{
			if( InventoryItemData.IsEmpty( m_gridData[ i ].GetItemData() ) )
			{
				emptySlot = m_gridData[ i ].GetSlotIndex();
				continue;
			}
			if( cyberwareType == TweakDBInterface.GetCName( ItemID.GetTDBID( InventoryItemData.GetID( m_gridData[ i ].GetItemData() ) ) + T".cyberwareType", '' ) )
			{
				return m_gridData[ i ].GetSlotIndex();
			}
		}
		return ( ( emptySlot != -1 ) ? ( emptySlot ) : ( m_selectedSlotIndex ) );
	}

	public function GetEquipementArea() : gamedataEquipmentArea
	{
		return m_equipArea;
	}

	public function UpdateData( equipArea : gamedataEquipmentArea, playerEquipAreaInventory : array< InventoryItemData >, optional count : Int32, optional screen : CyberwareScreenType )
	{
		var i, limit : Int32;
		var gridListItem : InventoryItemDisplayController;
		limit = playerEquipAreaInventory.Size();
		m_equipArea = equipArea;
		inkUniformGridRef.SetWrappingWidgetCount( m_gridContainer, ( ( Uint32 )( limit ) ) );
		RemoveElements( limit );
		while( m_gridData.Size() < limit )
		{
			gridListItem = ( ( InventoryItemDisplayController )( ItemDisplayUtils.SpawnCommonSlotController( this, inkUniformGridRef.Get( m_gridContainer ), 'itemDisplay' ) ) );
			gridListItem.RegisterToCallback( 'OnRelease', m_parentObject, m_onRealeaseCallbackName );
			m_gridData.PushBack( gridListItem );
		}
		for( i = 0; i < limit; i += 1 )
		{
			gridListItem = m_gridData[ i ];
			gridListItem.Setup( playerEquipAreaInventory[ i ], m_equipArea, "", i );
		}
		UpdateTitles( count, screen );
		UnselectSlot();
	}

	protected event OnSlotSpawned( widget : inkWidget, userData : IScriptable )
	{
		var gridListItem : InventoryItemDisplayController;
		var slotUserData : SlotUserData;
		slotUserData = ( ( SlotUserData )( userData ) );
		gridListItem = ( ( InventoryItemDisplayController )( widget.GetController() ) );
		gridListItem.Setup( slotUserData.itemData, slotUserData.area, "", slotUserData.index, ItemDisplayContext.Ripperdoc );
		gridListItem.RegisterToCallback( 'OnRelease', m_parentObject, m_onRealeaseCallbackName );
		m_gridData.PushBack( gridListItem );
	}

	public function UpdateTitles( count : Int32, screen : CyberwareScreenType, optional hasMods : Bool )
	{
		var sublabelText : String;
		inkTextRef.SetVisible( m_label, true );
		inkTextRef.SetVisible( m_sublabel, true );
		inkTextRef.SetText( m_label, GetAreaHeader( m_equipArea ) );
		if( ( count > 0 ) || hasMods )
		{
			sublabelText = ( ( screen == CyberwareScreenType.Ripperdoc ) ? ( "UI-Ripperdoc-AvailableItems" ) : ( "UI-Ripperdoc-AvailableMods" ) );
			inkTextRef.SetText( m_sublabel, sublabelText );
			inkTextRef.SetOpacity( m_sublabel, 1.0 );
			inkWidgetRef.SetVisible( m_numberPanel, true );
			inkTextRef.SetText( m_number, IntToString( count ) );
		}
		else if( screen == CyberwareScreenType.Ripperdoc )
		{
			inkTextRef.SetText( m_sublabel, "UI-Ripperdoc-NoItems" );
			inkTextRef.SetOpacity( m_sublabel, 0.2 );
			inkWidgetRef.SetVisible( m_numberPanel, false );
		}
		else
		{
			inkTextRef.SetVisible( m_sublabel, false );
			inkWidgetRef.SetVisible( m_numberPanel, false );
		}
	}

	public function UpdateTitle( label : String )
	{
		inkTextRef.SetText( m_label, label );
	}

	public function GetInventoryItemDisplays() : array< weak< InventoryItemDisplayController > >
	{
		return m_gridData;
	}

	private function RemoveElements( limit : Int32 )
	{
		var gridListItem : weak< InventoryItemDisplayController >;
		while( m_gridData.Size() > limit )
		{
			gridListItem = m_gridData.PopBack();
			gridListItem.UnregisterFromCallback( 'OnRelease', m_parentObject, m_onRealeaseCallbackName );
			inkUniformGridRef.RemoveChild( m_gridContainer, gridListItem.GetRootWidget() );
		}
	}

	private function GetAreaHeader( area : gamedataEquipmentArea ) : String
	{
		var record : EquipmentArea_Record;
		var label : String;
		record = TweakDBInterface.GetEquipmentAreaRecord( TDBID.Create( "EquipmentArea." + EnumValueToString( "gamedataEquipmentArea", ( ( Int32 )( area ) ) ) ) );
		label = record.LocalizedName();
		if( label == "" )
		{
			label = EnumValueToString( "gamedataEquipmentArea", ( ( Int32 )( area ) ) );
		}
		return label;
	}

}

class SlotUserData extends IScriptable
{
	var itemData : InventoryItemData;
	var index : Int32;
	var area : gamedataEquipmentArea;
}

class GridUserData extends IScriptable
{
	var equipArea : gamedataEquipmentArea;
	var align : inkEHorizontalAlign;
}

