class RipperdocScreenAnimationController extends inkLogicController
{
	private editable var m_defaultAnimationTab : inkWidgetRef;
	private editable var m_itemAnimationTab : inkWidgetRef;
	private editable var m_defaultTab : inkWidgetRef;
	private editable var m_itemTab : inkWidgetRef;
	private editable var m_femaleHovers : inkWidgetRef;
	private editable var m_maleHovers : inkWidgetRef;
	private editable var m_F_immuneHoverTexture : inkWidgetRef;
	private editable var m_F_systemReplacementHoverTexture : inkWidgetRef;
	private editable var m_F_integumentaryHoverTexture : inkWidgetRef;
	private editable var m_F_musculoskeletalHoverTexture : inkWidgetRef;
	private editable var m_F_nervousHoverTexture : inkWidgetRef;
	private editable var m_F_eyesHoverTexture : inkWidgetRef;
	private editable var m_F_legsHoverTexture : inkWidgetRef;
	private editable var m_F_frontalCortexHoverTexture : inkWidgetRef;
	private editable var m_F_handsHoverTexture : inkWidgetRef;
	private editable var m_F_cardiovascularHoverTexture : inkWidgetRef;
	private editable var m_F_armsHoverTexture : inkWidgetRef;
	private editable var m_M_integumentaryHoverTexture : inkWidgetRef;
	private editable var m_M_armsHoverTexture : inkWidgetRef;
	private editable var m_M_cardiovascularHoverTexture : inkWidgetRef;
	private editable var m_M_handsHoverTexture : inkWidgetRef;
	private editable var m_M_frontalCortexHoverTexture : inkWidgetRef;
	private editable var m_M_immuneHoverTexture : inkWidgetRef;
	private editable var m_M_legsHoverTexture : inkWidgetRef;
	private editable var m_M_systemReplacementHoverTexture : inkWidgetRef;
	private editable var m_M_musculoskeletalHoverTexture : inkWidgetRef;
	private editable var m_M_nervousHoverTexture : inkWidgetRef;
	private editable var m_M_eyesHoverTexture : inkWidgetRef;
	private editable var m_man_wiresTexture : inkWidgetRef;
	private editable var m_woman_wiresTexture : inkWidgetRef;
	private var m_hoverAnimation : inkAnimProxy;
	private var m_hoverOverAnimation : inkAnimProxy;
	private var m_introDefaultAnimation : inkAnimProxy;
	private var m_outroDefaultAnimation : inkAnimProxy;
	private var m_introPaperdollAnimation : inkAnimProxy;
	private var m_outroPaperdollAnimation : inkAnimProxy;
	private var m_isFemale : Bool;

	protected event OnInitialize()
	{
		inkWidgetRef.SetOpacity( m_F_frontalCortexHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_F_eyesHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_F_cardiovascularHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_F_immuneHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_F_nervousHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_F_integumentaryHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_F_systemReplacementHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_F_musculoskeletalHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_F_handsHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_F_armsHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_F_legsHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_M_frontalCortexHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_M_eyesHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_M_cardiovascularHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_M_immuneHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_M_nervousHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_M_integumentaryHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_M_systemReplacementHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_M_musculoskeletalHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_M_handsHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_M_armsHoverTexture, 0.0 );
		inkWidgetRef.SetOpacity( m_M_legsHoverTexture, 0.0 );
	}

	public function SetGender( female : Bool )
	{
		m_isFemale = female;
		inkWidgetRef.SetVisible( m_femaleHovers, m_isFemale );
		inkWidgetRef.SetVisible( m_maleHovers, !( m_isFemale ) );
		inkWidgetRef.SetVisible( m_woman_wiresTexture, m_isFemale );
		inkWidgetRef.SetVisible( m_man_wiresTexture, !( m_isFemale ) );
	}

	public function PlayItemSceenOpen( target : inkWidget, area : gamedataEquipmentArea )
	{
		inkWidgetRef.SetVisible( m_itemTab, true );
		StopAllAnimations();
		m_outroDefaultAnimation = PlayLibraryAnimation( 'default_tab_outro' );
		m_outroDefaultAnimation.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnDefaultTabOutroAnimFinished' );
		PlayLibraryAnimation( 'item_tab_intro' );
		PlayIntroAnimation( area );
	}

	protected event OnDefaultTabOutroAnimFinished( anim : inkAnimProxy )
	{
		m_outroDefaultAnimation.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnDefaultTabOutroAnimFinished' );
		inkWidgetRef.SetVisible( m_defaultTab, false );
	}

	public function PlayDefaultScreenOpen( area : gamedataEquipmentArea )
	{
		inkWidgetRef.SetVisible( m_itemTab, false );
		inkWidgetRef.SetVisible( m_defaultTab, true );
		StopAllAnimations();
		m_introDefaultAnimation = PlayLibraryAnimation( 'default_tab_intro' );
		if( area != gamedataEquipmentArea.Invalid )
		{
			PlayOutroAnimation( area );
		}
	}

	private function StopAllAnimations()
	{
		if( m_hoverAnimation.IsPlaying() )
		{
			m_hoverAnimation.GotoStartAndStop();
		}
		if( m_hoverOverAnimation.IsPlaying() )
		{
			m_hoverOverAnimation.GotoStartAndStop();
		}
		if( m_introDefaultAnimation.IsPlaying() )
		{
			m_introDefaultAnimation.GotoStartAndStop();
		}
		if( m_outroDefaultAnimation.IsPlaying() )
		{
			m_outroDefaultAnimation.GotoStartAndStop();
		}
		if( m_introPaperdollAnimation.IsPlaying() )
		{
			m_introPaperdollAnimation.GotoStartAndStop();
		}
		if( m_outroPaperdollAnimation.IsPlaying() )
		{
			m_outroPaperdollAnimation.GotoStartAndStop();
		}
	}

	private function IsTransitionAnimationPlaying() : Bool
	{
		return ( ( m_introDefaultAnimation.IsPlaying() || m_outroDefaultAnimation.IsPlaying() ) || m_introPaperdollAnimation.IsPlaying() ) || m_outroPaperdollAnimation.IsPlaying();
	}

	private function PlayIntroAnimation( area : gamedataEquipmentArea )
	{
		var animName : CName;
		if( m_introPaperdollAnimation.IsPlaying() )
		{
			m_introPaperdollAnimation.GotoStartAndStop();
		}
		if( m_outroPaperdollAnimation.IsPlaying() )
		{
			m_outroPaperdollAnimation.GotoStartAndStop();
		}
		switch( area )
		{
			case gamedataEquipmentArea.FrontalCortexCW:
				animName = 'frontalCortex_intro';
			break;
			case gamedataEquipmentArea.EyesCW:
				animName = 'ocular_intro';
			break;
			case gamedataEquipmentArea.CardiovascularSystemCW:
				animName = 'circlatory_intro';
			break;
			case gamedataEquipmentArea.ImmuneSystemCW:
				animName = 'immune_intro';
			break;
			case gamedataEquipmentArea.NervousSystemCW:
				animName = 'nervous_intro';
			break;
			case gamedataEquipmentArea.IntegumentarySystemCW:
				animName = 'integumentary_intro';
			break;
			case gamedataEquipmentArea.SystemReplacementCW:
				animName = 'operating_intro';
			break;
			case gamedataEquipmentArea.MusculoskeletalSystemCW:
				animName = 'skeleton_intro';
			break;
			case gamedataEquipmentArea.HandsCW:
				animName = 'hands_intro';
			break;
			case gamedataEquipmentArea.ArmsCW:
				animName = 'arms_intro';
			break;
			case gamedataEquipmentArea.LegsCW:
				animName = 'legs_intro';
			break;
		}
		animName = ( ( m_isFemale ) ? ( animName ) : ( 'M_' + animName ) );
		inkWidgetRef.SetVisible( m_itemAnimationTab, true );
		m_introPaperdollAnimation = PlayLibraryAnimation( animName );
		m_introPaperdollAnimation.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnIntroPaperdollAnimationFinished' );
	}

	protected event OnIntroPaperdollAnimationFinished( anim : inkAnimProxy )
	{
		m_introPaperdollAnimation.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnIntroPaperdollAnimationFinished' );
		inkWidgetRef.SetVisible( m_defaultAnimationTab, false );
	}

	private function PlayOutroAnimation( area : gamedataEquipmentArea )
	{
		var animName : CName;
		if( m_introPaperdollAnimation.IsPlaying() )
		{
			m_introPaperdollAnimation.GotoStartAndStop();
		}
		if( m_outroPaperdollAnimation.IsPlaying() )
		{
			m_outroPaperdollAnimation.GotoStartAndStop();
		}
		switch( area )
		{
			case gamedataEquipmentArea.FrontalCortexCW:
				animName = 'frontalCortex_outro';
			break;
			case gamedataEquipmentArea.EyesCW:
				animName = 'ocular_outro';
			break;
			case gamedataEquipmentArea.CardiovascularSystemCW:
				animName = 'circlatory_outro';
			break;
			case gamedataEquipmentArea.ImmuneSystemCW:
				animName = 'immune_outro';
			break;
			case gamedataEquipmentArea.NervousSystemCW:
				animName = 'nervous_outro';
			break;
			case gamedataEquipmentArea.IntegumentarySystemCW:
				animName = 'integumentary_outro';
			break;
			case gamedataEquipmentArea.SystemReplacementCW:
				animName = 'operating_outro';
			break;
			case gamedataEquipmentArea.MusculoskeletalSystemCW:
				animName = 'skeleton_outro';
			break;
			case gamedataEquipmentArea.HandsCW:
				animName = 'hands_outro';
			break;
			case gamedataEquipmentArea.ArmsCW:
				animName = 'arms_outro';
			break;
			case gamedataEquipmentArea.LegsCW:
				animName = 'legs_outro';
			break;
		}
		animName = ( ( m_isFemale ) ? ( animName ) : ( 'M_' + animName ) );
		inkWidgetRef.SetVisible( m_defaultAnimationTab, true );
		m_outroPaperdollAnimation = PlayLibraryAnimation( animName );
		m_outroPaperdollAnimation.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnOutroPaperdollAnimationFinished' );
	}

	protected event OnOutroPaperdollAnimationFinished( anim : inkAnimProxy )
	{
		m_outroPaperdollAnimation.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnOutroPaperdollAnimationFinished' );
		inkWidgetRef.SetVisible( m_itemAnimationTab, false );
	}

	private function GetHoverAnimationTarget( area : gamedataEquipmentArea ) : weak< inkWidget >
	{
		var target : weak< inkWidget >;
		switch( area )
		{
			case gamedataEquipmentArea.FrontalCortexCW:
				target = ( ( m_isFemale ) ? ( inkWidgetRef.Get( m_F_frontalCortexHoverTexture ) ) : ( inkWidgetRef.Get( m_M_frontalCortexHoverTexture ) ) );
			break;
			case gamedataEquipmentArea.EyesCW:
				target = ( ( m_isFemale ) ? ( inkWidgetRef.Get( m_F_eyesHoverTexture ) ) : ( inkWidgetRef.Get( m_M_eyesHoverTexture ) ) );
			break;
			case gamedataEquipmentArea.CardiovascularSystemCW:
				target = ( ( m_isFemale ) ? ( inkWidgetRef.Get( m_F_cardiovascularHoverTexture ) ) : ( inkWidgetRef.Get( m_M_cardiovascularHoverTexture ) ) );
			break;
			case gamedataEquipmentArea.ImmuneSystemCW:
				target = ( ( m_isFemale ) ? ( inkWidgetRef.Get( m_F_immuneHoverTexture ) ) : ( inkWidgetRef.Get( m_M_immuneHoverTexture ) ) );
			break;
			case gamedataEquipmentArea.NervousSystemCW:
				target = ( ( m_isFemale ) ? ( inkWidgetRef.Get( m_F_nervousHoverTexture ) ) : ( inkWidgetRef.Get( m_M_nervousHoverTexture ) ) );
			break;
			case gamedataEquipmentArea.IntegumentarySystemCW:
				target = ( ( m_isFemale ) ? ( inkWidgetRef.Get( m_F_integumentaryHoverTexture ) ) : ( inkWidgetRef.Get( m_M_integumentaryHoverTexture ) ) );
			break;
			case gamedataEquipmentArea.SystemReplacementCW:
				target = ( ( m_isFemale ) ? ( inkWidgetRef.Get( m_F_systemReplacementHoverTexture ) ) : ( inkWidgetRef.Get( m_M_systemReplacementHoverTexture ) ) );
			break;
			case gamedataEquipmentArea.MusculoskeletalSystemCW:
				target = ( ( m_isFemale ) ? ( inkWidgetRef.Get( m_F_musculoskeletalHoverTexture ) ) : ( inkWidgetRef.Get( m_M_musculoskeletalHoverTexture ) ) );
			break;
			case gamedataEquipmentArea.HandsCW:
				target = ( ( m_isFemale ) ? ( inkWidgetRef.Get( m_F_handsHoverTexture ) ) : ( inkWidgetRef.Get( m_M_handsHoverTexture ) ) );
			break;
			case gamedataEquipmentArea.ArmsCW:
				target = ( ( m_isFemale ) ? ( inkWidgetRef.Get( m_F_armsHoverTexture ) ) : ( inkWidgetRef.Get( m_M_armsHoverTexture ) ) );
			break;
			case gamedataEquipmentArea.LegsCW:
				target = ( ( m_isFemale ) ? ( inkWidgetRef.Get( m_F_legsHoverTexture ) ) : ( inkWidgetRef.Get( m_M_legsHoverTexture ) ) );
			break;
		}
		return target;
	}

	public function PlayHoverAnimation( area : gamedataEquipmentArea, mode : RipperdocModes )
	{
		var target : weak< inkWidget >;
		if( m_hoverAnimation.IsPlaying() )
		{
			m_hoverAnimation.GotoStartAndStop();
		}
		if( IsTransitionAnimationPlaying() || mode != RipperdocModes.Default )
		{
			return;
		}
		target = GetHoverAnimationTarget( area );
		m_hoverAnimation = PlayLibraryAnimationOnTargets( 'hover_area', SelectWidgets( target ) );
	}

	public function PlayHoverOverAnimation( area : gamedataEquipmentArea, mode : RipperdocModes )
	{
		var target : weak< inkWidget >;
		if( m_hoverOverAnimation.IsPlaying() )
		{
			m_hoverOverAnimation.GotoEndAndStop();
		}
		if( IsTransitionAnimationPlaying() || mode != RipperdocModes.Default )
		{
			return;
		}
		target = GetHoverAnimationTarget( area );
		m_hoverOverAnimation = PlayLibraryAnimationOnTargets( 'hoverover_area', SelectWidgets( target ) );
	}

}

