class AttributeAllocationController extends inkLogicController
{
	private editable var m_pointsContainer : inkCompoundRef;
	private editable var m_attributeName : inkTextRef;
	private editable var m_attributePoints : inkTextRef;
	private editable var m_attributeIcon : inkImageRef;
	private var m_data : AttributeAllocationData;

	public function Setup( data : AttributeAllocationData )
	{
		m_data = data;
		inkImageRef.SetTexturePart( m_attributeIcon, GetIconAtlasPart( m_data.AttributeType ) );
		inkTextRef.SetText( m_attributeName, TweakDBInterface.GetStatRecord( TDBID.Create( "BaseStats." + EnumValueToString( "gamedataStatType", ( ( Int32 )( m_data.AttributeType ) ) ) ) ).LocalizedName() );
		UpdatePointsValues();
	}

	public function ChangeHoverState( hover : Bool, optional value : Int32 )
	{
		var state : CName;
		if( hover )
		{
			state = ( ( value > ( m_data.TotalPoints - m_data.AllocatedPoints ) ) ? ( 'Unavailable' ) : ( 'Available' ) );
			inkTextRef.SetText( m_attributePoints, ( IntToString( m_data.AllocatedPoints + value ) + "/" ) + IntToString( m_data.TotalPoints ) );
			GetRootWidget().SetState( state );
		}
		else
		{
			GetRootWidget().SetState( 'Default' );
			inkTextRef.SetText( m_attributePoints, ( IntToString( m_data.AllocatedPoints ) + "/" ) + IntToString( m_data.TotalPoints ) );
		}
	}

	public function UpdateData( allocatedPoints : Int32, totalPoints : Int32 )
	{
		m_data.TotalPoints = totalPoints;
		m_data.AllocatedPoints = allocatedPoints;
		UpdatePointsValues();
	}

	public function GetStatType() : gamedataStatType
	{
		return m_data.AttributeType;
	}

	private function UpdatePointsValues()
	{
		var state : CName;
		state = ( ( m_data.AllocatedPoints > m_data.TotalPoints ) ? ( 'Unavailable' ) : ( 'Default' ) );
		GetRootWidget().SetState( state );
		inkTextRef.SetText( m_attributePoints, ( IntToString( m_data.AllocatedPoints ) + "/" ) + IntToString( m_data.TotalPoints ) );
	}

	protected function GetIconAtlasPart( attribute : gamedataStatType ) : CName
	{
		switch( attribute )
		{
			case gamedataStatType.Strength:
				return 'ico_body';
			case gamedataStatType.Reflexes:
				return 'ico_ref';
			case gamedataStatType.TechnicalAbility:
				return 'ico_tech';
			case gamedataStatType.Cool:
				return 'ico_cool';
			case gamedataStatType.Intelligence:
				return 'ico_int';
		}
		return 'undiscovered';
	}

}

class AttributeAllocationData
{
	var AttributeType : gamedataStatType;
	var TotalPoints : Int32;
	var AllocatedPoints : Int32;
}

