class AttributeAllocationPanelController extends gameuiMenuGameController
{
	private editable var m_allocationPointsContainer : inkCompoundRef;
	private editable var m_armorAmountText : inkTextRef;
	private editable var m_tokenAmountText : inkTextRef;
	private var m_allocationData : array< AttributeAllocationData >;
	private var m_allocationWidgets : array< weak< AttributeAllocationController > >;
	private var m_statsSystem : weak< StatsSystem >;
	private var m_player : weak< PlayerPuppet >;
	private var m_useAlternativeSwitch : Bool;
	private var m_ripperdocTokenManager : RipperdocTokenManager;

	protected event OnInitialize()
	{
		m_player = ( ( PlayerPuppet )( GetPlayerControlledObject() ) );
		m_useAlternativeSwitch = GameInstance.GetTransactionSystem( m_player.GetGame() ).UseAlternativeCyberware();
		if( !( m_useAlternativeSwitch ) )
		{
			GetRootWidget().SetVisible( false );
			return false;
		}
		m_statsSystem = GameInstance.GetStatsSystem( m_player.GetGame() );
		m_ripperdocTokenManager = new RipperdocTokenManager;
		m_ripperdocTokenManager.Initialize( m_player );
		inkTextRef.SetText( m_tokenAmountText, IntToString( m_ripperdocTokenManager.GetTokensAmount() ) );
		inkTextRef.SetText( m_armorAmountText, IntToString( GetStateValue( gamedataStatType.Armor ) ) );
		SetAllocationPoints();
	}

	private function SetAllocationPoints()
	{
		inkCompoundRef.RemoveAllChildren( m_allocationPointsContainer );
		CreateAllocationDataWidget( gamedataStatType.Strength );
		CreateAllocationDataWidget( gamedataStatType.Reflexes );
		CreateAllocationDataWidget( gamedataStatType.TechnicalAbility );
		CreateAllocationDataWidget( gamedataStatType.Intelligence );
		CreateAllocationDataWidget( gamedataStatType.Cool );
	}

	private function CreateAllocationDataWidget( statType : gamedataStatType )
	{
		var data : AttributeAllocationData;
		var widgetController : weak< AttributeAllocationController >;
		data = new AttributeAllocationData;
		data.AttributeType = statType;
		data.TotalPoints = GetStateValue( GetStatAvalaibleType( statType ) );
		data.AllocatedPoints = GetStateValue( GetStatAllocatedType( statType ) );
		widgetController = ( ( AttributeAllocationController )( SpawnFromLocal( inkCompoundRef.Get( m_allocationPointsContainer ), 'atrributeAllocation' ).GetController() ) );
		widgetController.Setup( data );
		m_allocationWidgets.PushBack( widgetController );
	}

	protected event OnUpdateStats( evt : AttributeUpdateEvent )
	{
		var i, token : Int32;
		var type : gamedataStatType;
		for( i = 0; i < m_allocationWidgets.Size(); i += 1 )
		{
			type = m_allocationWidgets[ i ].GetStatType();
			m_allocationWidgets[ i ].UpdateData( GetStateValue( GetStatAllocatedType( type ) ), GetStateValue( type ) );
		}
		token = m_ripperdocTokenManager.GetTokensAmount();
		inkTextRef.SetText( m_tokenAmountText, IntToString( token ) );
		inkTextRef.SetText( m_armorAmountText, IntToString( GetStateValue( gamedataStatType.Armor ) ) );
	}

	protected event OnHoverStateChanged( evt : HoverSatateChangedEvent )
	{
		if( evt.isHovered )
		{
			HoverPanel( evt.itemInventoryData );
		}
		else
		{
			HoverOverPanel();
		}
	}

	private function HoverPanel( itemData : InventoryItemData )
	{
		var i, j : Int32;
		var statPrereqs : array< SItemStackRequirementData >;
		var attributeType : gamedataStatType;
		var attributeValue : Int32;
		statPrereqs = InventoryItemData.GetEquipRequirements( itemData );
		for( i = 0; i < m_allocationWidgets.Size(); i += 1 )
		{
			for( j = 0; j < statPrereqs.Size(); j += 1 )
			{
				attributeType = statPrereqs[ j ].statType;
				attributeValue = ( ( Int32 )( statPrereqs[ j ].requiredValue ) );
				if( GetStatAvalaibleType( m_allocationWidgets[ i ].GetStatType() ) == attributeType && ( attributeValue > 0 ) )
				{
					m_allocationWidgets[ i ].ChangeHoverState( true, attributeValue );
				}
			}
		}
	}

	private function HoverOverPanel()
	{
		var i : Int32;
		for( i = 0; i < m_allocationWidgets.Size(); i += 1 )
		{
			m_allocationWidgets[ i ].ChangeHoverState( false );
		}
	}

	private function GetStateValue( type : gamedataStatType ) : Int32
	{
		return RoundF( m_statsSystem.GetStatValue( m_player.GetEntityID(), type ) );
	}

	private function GetStatAvalaibleType( attribute : gamedataStatType ) : gamedataStatType
	{
		switch( attribute )
		{
			case gamedataStatType.Strength:
				return gamedataStatType.StrengthAvailable;
			case gamedataStatType.Reflexes:
				return gamedataStatType.ReflexesAvailable;
			case gamedataStatType.TechnicalAbility:
				return gamedataStatType.TechnicalAbilityAvailable;
			case gamedataStatType.Cool:
				return gamedataStatType.CoolAvailable;
			case gamedataStatType.Intelligence:
				return gamedataStatType.IntelligenceAvailable;
		}
		return gamedataStatType.Invalid;
	}

	private function GetStatAllocatedType( attribute : gamedataStatType ) : gamedataStatType
	{
		switch( attribute )
		{
			case gamedataStatType.Strength:
				return gamedataStatType.StrengthAlocated;
			case gamedataStatType.Reflexes:
				return gamedataStatType.ReflexesAlocated;
			case gamedataStatType.TechnicalAbility:
				return gamedataStatType.TechnicalAbilityAlocated;
			case gamedataStatType.Cool:
				return gamedataStatType.CoolAlocated;
			case gamedataStatType.Intelligence:
				return gamedataStatType.IntelligenceAlocated;
		}
		return gamedataStatType.Invalid;
	}

}

class HoverSatateChangedEvent extends Event
{
	var isHovered : Bool;
	var itemInventoryData : InventoryItemData;
}

class AttributeUpdateEvent extends Event
{
}

