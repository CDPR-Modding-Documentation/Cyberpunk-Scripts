class CrafringMaterialItemController extends BaseButtonView
{
	protected editable var m_nameText : inkTextRef;
	protected editable var m_quantityText : inkTextRef;
	protected editable var m_quantityChangeText : inkTextRef;
	protected editable var m_icon : inkImageRef;
	protected editable var m_frame : inkWidgetRef;
	protected editable var m_data : CachedCraftingMaterial;
	private var m_quantity : Int32;
	private var m_hovered : Bool;
	private var m_lastState : CrafringMaterialItemHighlight;
	private var m_shouldBeHighlighted : Bool;

	protected event OnInitialize()
	{
		super.OnInitialize();
		if( m_ButtonController )
		{
			m_ButtonController.RegisterToCallback( 'OnButtonClick', this, 'OnButtonClick' );
		}
		RegisterToCallback( 'OnHoverOver', this, 'OnCraftingMaterialHoverOver' );
		RegisterToCallback( 'OnHoverOut', this, 'OnCraftingMaterialHoverOut' );
	}

	protected event OnCraftingMaterialHoverOver( evt : inkPointerEvent )
	{
		m_hovered = true;
		SetHighlighted();
	}

	protected event OnCraftingMaterialHoverOut( evt : inkPointerEvent )
	{
		m_hovered = false;
		SetHighlighted();
	}

	public function Setup( craftingMaterial : CachedCraftingMaterial )
	{
		m_data = craftingMaterial;
		RefreshUI();
		SetHighlighted( CrafringMaterialItemHighlight.None );
	}

	public function RefreshUI()
	{
		inkTextRef.SetText( m_nameText, m_data.m_displayName );
		inkTextRef.SetText( m_quantityText, IntToString( m_data.m_quantity ) );
		m_quantity = m_data.m_quantity;
		InkImageUtils.RequestSetImage( this, m_icon, m_data.m_iconPath );
		if( m_data.m_quantity <= 0 )
		{
			GetRootWidget().SetState( 'Empty' );
		}
	}

	public function SetHighlighted( type : CrafringMaterialItemHighlight, optional quantityChanged : Int32 )
	{
		m_lastState = type;
		SetHighlighted( quantityChanged );
	}

	public function SetHighlighted( optional quantityChanged : Int32 )
	{
		inkWidgetRef.SetVisible( m_frame, m_lastState != CrafringMaterialItemHighlight.None );
		m_shouldBeHighlighted = quantityChanged != 0;
		inkTextRef.SetVisible( m_quantityChangeText, m_shouldBeHighlighted );
		inkTextRef.SetText( m_quantityChangeText, ( "(+" + IntToString( quantityChanged ) ) + ")" );
		if( quantityChanged == 0 )
		{
			GetRootWidget().SetState( 'Default' );
		}
		else
		{
			GetRootWidget().SetState( 'Hover' );
		}
	}

	public function GetCachedCraftingMaterial() : weak< CachedCraftingMaterial >
	{
		return m_data;
	}

	public function GetItemID() : ItemID
	{
		return m_data.m_itemID;
	}

	public function GetQuantity() : Int32
	{
		return m_quantity;
	}

	public function GetMateialDisplayName() : String
	{
		return m_data.m_displayName;
	}

	protected event OnCraftingMaterialAnimationCompleted( anim : inkAnimProxy )
	{
		if( m_shouldBeHighlighted )
		{
			GetRootWidget().SetState( 'Default' );
			GetRootWidget().SetState( 'Hover' );
		}
		else
		{
			GetRootWidget().SetState( 'Hover' );
			GetRootWidget().SetState( 'Default' );
		}
	}

	public function PlayAnimation()
	{
		var proxy : inkAnimProxy;
		proxy = PlayLibraryAnimationOnAutoSelectedTargets( 'craftingMaterial_animation', GetRootWidget() );
		proxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnCraftingMaterialAnimationCompleted' );
	}

}

enum CrafringMaterialItemHighlight
{
	None = 0,
	Hover = 1,
	Add = 2,
	Remove = 3,
}

