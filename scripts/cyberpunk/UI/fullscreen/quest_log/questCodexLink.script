class BaseCodexLinkController extends inkLogicController
{
	protected editable var m_linkImage : inkImageRef;
	protected editable var m_linkLabel : inkTextRef;
	protected var m_animProxy : inkAnimProxy;
	protected var m_isInteractive : Bool;

	protected event OnInitialize()
	{
		RegisterToCallback( 'OnHoverOver', this, 'OnHoverOver' );
		RegisterToCallback( 'OnHoverOut', this, 'OnHoverOut' );
		RegisterToCallback( 'OnRelease', this, 'OnRelease' );
		m_isInteractive = true;
	}

	protected event OnHoverOver( evt : inkPointerEvent )
	{
		if( m_isInteractive )
		{
			ForcePlayAnimation( 'hyperlink_hover' );
		}
	}

	protected event OnHoverOut( evt : inkPointerEvent )
	{
		if( m_isInteractive )
		{
			ForcePlayAnimation( 'clear_hyperlink_hover' );
		}
	}

	protected event OnRelease( e : inkPointerEvent )
	{
		if( m_isInteractive )
		{
			if( e.IsAction( 'click' ) )
			{
				Activate();
			}
			else if( e.IsAction( 'activate' ) )
			{
				ActivateSecondary();
			}
		}
	}

	private virtual function Activate() {}

	private virtual function ActivateSecondary() {}

	private function ForcePlayAnimation( animationName : CName )
	{
		if( m_animProxy.IsPlaying() )
		{
			m_animProxy.Stop();
		}
		m_animProxy = PlayLibraryAnimationOnAutoSelectedTargets( animationName, GetRootWidget() );
	}

}

class QuestCodexLinkController extends BaseCodexLinkController
{
	protected editable var m_linkLabelContainer : inkWidgetRef;
	private var m_journalEntry : JournalEntry;

	public function Setup( journalEntry : JournalEntry )
	{
		var imgEntry : JournalImageEntry;
		var codexEntry : JournalCodexEntry;
		m_journalEntry = journalEntry;
		imgEntry = ( ( JournalImageEntry )( journalEntry ) );
		if( imgEntry )
		{
			SetupImageLink( imgEntry );
		}
		else
		{
			codexEntry = ( ( JournalCodexEntry )( journalEntry ) );
			SetupCodexLink( codexEntry );
		}
	}

	private function SetupCodexLink( codexEntry : JournalCodexEntry )
	{
		inkTextRef.SetText( m_linkLabel, codexEntry.GetTitle() );
		inkTextRef.SetVisible( m_linkLabel, true );
		if( TDBID.IsValid( codexEntry.GetImageID() ) )
		{
			InkImageUtils.RequestSetImage( this, m_linkImage, codexEntry.GetLinkImageID(), 'OnCallback' );
		}
		GetRootWidget().SetInteractive( true );
	}

	private function SetupImageLink( imageEntry : JournalImageEntry )
	{
		if( TDBID.IsValid( imageEntry.GetThumbnailImageID() ) )
		{
			InkImageUtils.RequestSetImage( this, m_linkImage, imageEntry.GetThumbnailImageID() );
		}
		m_isInteractive = TDBID.IsValid( imageEntry.GetImageID() );
		if( m_isInteractive )
		{
			inkTextRef.SetLocalizedText( m_linkLabel, 'Common-Access-Open' );
			inkWidgetRef.SetVisible( m_linkLabelContainer, true );
		}
		else
		{
			inkWidgetRef.SetVisible( m_linkLabelContainer, false );
		}
		GetRootWidget().SetInteractive( m_isInteractive );
	}

	private override function Activate()
	{
		var evt : OpenCodexPopupEvent;
		if( m_isInteractive )
		{
			evt = new OpenCodexPopupEvent;
			evt.m_entry = m_journalEntry;
			QueueBroadcastEvent( evt );
		}
	}

}

class QuestContactLinkController extends BaseCodexLinkController
{
	private editable var m_msgLabel : inkTextRef;
	private editable var m_msgContainer : inkWidgetRef;
	private var m_msgCounter : Int32;
	private var m_contactEntry : JournalContact;
	private var m_journalMgr : weak< JournalManager >;
	private var m_phoneSystem : weak< PhoneSystem >;

	public function Setup( journalEntry : JournalEntry, journalManager : weak< JournalManager >, phoneSystem : weak< PhoneSystem > )
	{
		var avatarTweakId : TweakDBID;
		m_phoneSystem = phoneSystem;
		m_journalMgr = journalManager;
		m_contactEntry = ( ( JournalContact )( journalEntry ) );
		inkTextRef.SetText( m_linkLabel, m_contactEntry.GetLocalizedName( journalManager ) );
		avatarTweakId = m_contactEntry.GetAvatarID( journalManager );
		if( TDBID.IsValid( avatarTweakId ) )
		{
			InkImageUtils.RequestSetImage( this, m_linkImage, avatarTweakId );
		}
		m_msgCounter = MessengerUtils.GetUnreadMessagesCount( journalManager, m_contactEntry );
		if( m_msgCounter > 0 )
		{
			inkTextRef.SetText( m_msgLabel, ( ( String )( m_msgCounter ) ) );
			inkWidgetRef.SetVisible( m_msgContainer, true );
		}
		else
		{
			inkWidgetRef.SetVisible( m_msgContainer, false );
		}
	}

	private override function Activate()
	{
		CallSelectedContact();
		CloseHubMenu();
	}

	private override function ActivateSecondary() {}

	private function CloseHubMenu()
	{
		var evt : ForceCloseHubMenuEvent;
		evt = new ForceCloseHubMenuEvent;
		QueueBroadcastEvent( evt );
	}

	private function ShowMessenger()
	{
		var evt : PhoneMessagePopupEvent;
		evt = new PhoneMessagePopupEvent;
		evt.m_data = new JournalNotificationData;
		evt.m_data.journalEntry = m_contactEntry;
		evt.m_data.queueName = 'modal_popup';
		evt.m_data.notificationName = 'base\gameplay\gui\widgets\notifications\phone_message_popup.inkwidget';
		evt.m_data.isBlocking = true;
		evt.m_data.useCursor = true;
		evt.m_data.menuMode = true;
		QueueBroadcastEvent( evt );
	}

	private function CallSelectedContact()
	{
		var callRequest : questTriggerCallRequest;
		callRequest = new questTriggerCallRequest;
		callRequest.addressee = StringToName( m_contactEntry.GetId() );
		callRequest.caller = 'Player';
		callRequest.callPhase = questPhoneCallPhase.IncomingCall;
		callRequest.callMode = questPhoneCallMode.Video;
		m_phoneSystem.QueueRequest( callRequest );
	}

}

class QuestMappinLinkController extends BaseCodexLinkController
{
	private var m_mappinEntry : JournalQuestMapPinBase;
	private var m_jumpTo : Vector3;

	public function Setup( mappinEntry : JournalQuestMapPinBase, jumpTo : Vector3 )
	{
		m_mappinEntry = mappinEntry;
		inkTextRef.SetText( m_linkLabel, m_mappinEntry.GetCaption() );
		m_jumpTo = jumpTo;
	}

	private override function Activate()
	{
		var evt : OpenMenuRequest;
		var userData : MapMenuUserData;
		evt = new OpenMenuRequest;
		evt.m_menuName = 'world_map';
		userData = new MapMenuUserData;
		userData.m_moveTo = m_jumpTo;
		evt.m_eventData.userData = userData;
		evt.m_eventData.m_overrideDefaultUserData = true;
		evt.m_isMainMenu = true;
		QueueBroadcastEvent( evt );
	}

}

