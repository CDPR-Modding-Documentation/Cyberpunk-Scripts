importonly final struct BinkResource
{
	public import static function IsValid( self : BinkResource ) : Bool;
	public import static function GetPath( self : BinkResource ) : ResRef;
}

import class gameuiCreditsController extends inkGameController
{
	import var shouldShowRewardPrompt : Bool;
	import var isInFinalBoardsMode : Bool;
	import var exitNotificationDisplayTime : Float;
}

class CreditsData extends inkUserData
{
	var isFinalBoards : Bool;
	editable var showRewardPrompt : Bool;
}

class CreditsGameController extends gameuiCreditsController
{
	private editable var m_videoContainer : inkCompoundRef;
	private editable var m_sceneTexture : inkImageRef;
	private editable var m_backgroundVideo : inkVideoRef;
	private editable var m_binkVideo : inkVideoRef;
	private const editable var m_binkVideos : array< BinkResource >;
	private var m_currentBinkVideo : Int32;
	private var m_videoSummary : VideoWidgetSummary;
	private var m_isDataSet : Bool;

	protected event OnInitialize()
	{
		InitializeCredits();
	}

	protected event OnUpdate( timeDelta : Float ) {}

	protected event OnUninitialize()
	{
		inkVideoRef.Stop( m_backgroundVideo );
		inkVideoRef.Stop( m_binkVideo );
	}

	protected event OnSetUserData( data : IScriptable )
	{
		if( ( ( CreditsData )( data ) ).isFinalBoards )
		{
			inkImageRef.SetVisible( m_sceneTexture, true );
			inkVideoRef.SetVisible( m_binkVideo, false );
		}
		else
		{
			inkImageRef.SetVisible( m_sceneTexture, false );
			inkVideoRef.SetVisible( m_binkVideo, true );
		}
		shouldShowRewardPrompt = ( ( CreditsData )( data ) ).showRewardPrompt;
		isInFinalBoardsMode = ( ( CreditsData )( data ) ).isFinalBoards;
		m_isDataSet = true;
	}

	private function InitializeCredits()
	{
		if( m_isDataSet == false )
		{
			inkImageRef.SetVisible( m_sceneTexture, false );
			inkVideoRef.SetVisible( m_binkVideo, true );
		}
		inkVideoRef.Play( m_backgroundVideo );
		inkVideoRef.SetTranslation( m_binkVideo, -400.0, 0.0 );
	}

	private function PlayNextVideo()
	{
		var ratio : Float;
		var videoContainerSize : Vector2;
		if( m_currentBinkVideo >= m_binkVideos.Size() )
		{
			return;
		}
		videoContainerSize = inkCompoundRef.GetSize( m_videoContainer );
		inkVideoRef.SetVideoPath( m_binkVideo, BinkResource.GetPath( m_binkVideos[ m_currentBinkVideo ] ) );
		if( !( inkVideoRef.IsPlayingVideo( m_binkVideo ) ) )
		{
			inkVideoRef.Play( m_binkVideo );
			m_videoSummary = inkVideoRef.GetVideoWidgetSummary( m_binkVideo );
			ratio = ( ( Float )( m_videoSummary.width ) ) / ( ( Float )( m_videoSummary.height ) );
			inkVideoRef.SetSize( m_binkVideo, videoContainerSize.X, videoContainerSize.X / ratio );
		}
		m_currentBinkVideo += 1;
	}

}

