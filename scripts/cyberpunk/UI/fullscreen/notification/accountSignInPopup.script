class SignInPopupEvent extends Event
{
}

class SignInPopupData extends inkGameNotificationData
{
}

class SignInPopupController extends inkGameController
{
	private editable var m_qrCodeContainerRef : inkWidgetRef;
	private editable var m_hyperlinkButtonRef : inkWidgetRef;
	private editable var m_closeButtonRef : inkWidgetRef;
	private editable var m_introAnimationName : CName;
	private var m_data : SignInPopupData;
	private var m_requestHandler : weak< inkISystemRequestsHandler >;
	private var m_introAnimProxy : inkAnimProxy;

	protected event OnInitialize()
	{
		m_data = ( ( SignInPopupData )( GetRootWidget().GetUserData( 'SignInPopupData' ) ) );
		m_requestHandler = GetSystemRequestsHandler();
		RegisterToGlobalInputCallback( 'OnPostOnRelease', this, 'OnRelease' );
		inkWidgetRef.RegisterToCallback( m_hyperlinkButtonRef, 'OnPress', this, 'OnPressHyperlink' );
		inkWidgetRef.RegisterToCallback( m_closeButtonRef, 'OnPress', this, 'OnPressClose' );
		m_introAnimProxy = PlayLibraryAnimation( m_introAnimationName );
		PlaySound( 'GameMenu', 'OnOpen' );
	}

	protected event OnUninitialize()
	{
		UnregisterFromGlobalInputCallback( 'OnPostOnRelease', this, 'OnRelease' );
		inkWidgetRef.UnregisterFromCallback( m_hyperlinkButtonRef, 'OnPress', this, 'OnPressHyperlink' );
		inkWidgetRef.UnregisterFromCallback( m_closeButtonRef, 'OnPress', this, 'OnPressClose' );
	}

	private function Close()
	{
		var playbackOptions : inkAnimOptions;
		PlaySound( 'Button', 'OnPress' );
		playbackOptions.playReversed = true;
		m_introAnimProxy = PlayLibraryAnimation( m_introAnimationName, playbackOptions );
		m_introAnimProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnOutroAnimationFinished' );
	}

	protected event OnRelease( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'close_popup' ) && !( m_introAnimProxy.IsPlaying() ) )
		{
			Close();
		}
	}

	protected event OnPressHyperlink( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) && !( m_introAnimProxy.IsPlaying() ) )
		{
			m_requestHandler.OpenPrivacyPolicyUrl();
		}
	}

	protected event OnPressClose( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) && !( m_introAnimProxy.IsPlaying() ) )
		{
			Close();
		}
	}

	protected event OnOutroAnimationFinished( proxy : inkAnimProxy )
	{
		m_introAnimProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnOutroAnimationFinished' );
		m_data.token.TriggerCallback( m_data );
	}

}

