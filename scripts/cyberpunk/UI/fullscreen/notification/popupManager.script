import class PopupsManager extends inkGameController
{
	private var m_blackboard : weak< IBlackboard >;
	private var m_bbDefinition : UIGameDataDef;
	private var m_journalManager : weak< JournalManager >;
	private var m_uiSystemBB : weak< IBlackboard >;
	private var m_uiSystemBBDef : UI_SystemDef;
	private var m_uiSystemId : CallbackHandle;
	private var m_isShownBbId : CallbackHandle;
	private var m_dataBbId : CallbackHandle;
	private var m_photomodeActiveId : CallbackHandle;
	private var m_tutorialOnHold : Bool;
	private var m_tutorialData : PopupData;
	private var m_tutorialSettings : PopupSettings;
	private var m_phoneMessageOnHold : Bool;
	private var m_phoneMessageData : JournalNotificationData;
	private var m_shardReadOnHold : Bool;
	private var m_shardReadData : NotifyShardRead;
	private var m_tutorialToken : inkGameNotificationToken;
	private var m_phoneMessageToken : inkGameNotificationToken;
	private var m_shardToken : inkGameNotificationToken;
	private var m_vehiclesManagerToken : inkGameNotificationToken;
	private var m_vehicleRadioToken : inkGameNotificationToken;
	private var m_codexToken : inkGameNotificationToken;
	private var m_ponrToken : inkGameNotificationToken;

	protected event OnPlayerAttach( playerPuppet : GameObject )
	{
		m_blackboard = GetUIBlackboard();
		m_bbDefinition = GetAllBlackboardDefs().UIGameData;
		m_journalManager = GameInstance.GetJournalManager( playerPuppet.GetGame() );
		m_uiSystemBB = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_System );
		m_uiSystemBBDef = GetAllBlackboardDefs().UI_System;
		m_uiSystemId = m_uiSystemBB.RegisterListenerBool( m_uiSystemBBDef.IsInMenu, this, 'OnMenuUpdate' );
		m_isShownBbId = m_blackboard.RegisterDelayedListenerBool( m_bbDefinition.Popup_IsShown, this, 'OnUpdateVisibility' );
		m_dataBbId = m_blackboard.RegisterDelayedListenerVariant( m_bbDefinition.Popup_Data, this, 'OnUpdateData' );
		m_photomodeActiveId = GetBlackboardSystem().Get( GetAllBlackboardDefs().PhotoMode ).RegisterListenerBool( GetAllBlackboardDefs().PhotoMode.IsActive, this, 'OnPhotomodeUpdate' );
	}

	protected event OnPlayerDetach( playerPuppet : GameObject )
	{
		m_uiSystemBB.UnregisterListenerBool( m_uiSystemBBDef.IsInMenu, m_uiSystemId );
		m_blackboard.UnregisterDelayedListener( m_bbDefinition.Popup_IsShown, m_isShownBbId );
		m_blackboard.UnregisterDelayedListener( m_bbDefinition.Popup_Data, m_dataBbId );
		GetBlackboardSystem().Get( GetAllBlackboardDefs().PhotoMode ).UnregisterListenerBool( GetAllBlackboardDefs().PhotoMode.IsActive, m_photomodeActiveId );
	}

	protected event OnMenuUpdate( isInMenu : Bool )
	{
		SetPhoneMessageVisibility( isInMenu );
		SetTutorialTokenVisibility( isInMenu );
		SetShardReadVisibility( isInMenu );
		ChangeTutorialVisibilityInMenu( isInMenu );
	}

	protected event OnPhotomodeUpdate( isInPhotomode : Bool )
	{
		SetPhoneMessageVisibility( isInPhotomode );
		SetTutorialTokenVisibility( isInPhotomode );
		ChangeTutorialVisibility( isInPhotomode, gameuiTutorialHiddenReason.InPhotomode );
	}

	protected event OnUpdateVisibility( value : Bool )
	{
		if( !( value ) && m_tutorialToken )
		{
			m_tutorialToken.TriggerCallback( NULL );
		}
	}

	private function SetPhoneMessageVisibility( hideToken : Bool )
	{
		if( hideToken && ( m_phoneMessageToken != NULL ) )
		{
			m_phoneMessageOnHold = true;
			m_phoneMessageToken = NULL;
			return;
		}
		if( ( !( hideToken ) && ( m_phoneMessageToken == NULL ) ) && m_phoneMessageOnHold )
		{
			m_phoneMessageOnHold = false;
			ShowPhoneMessage();
		}
	}

	private function SetTutorialTokenVisibility( hideToken : Bool )
	{
		if( hideToken )
		{
			if( ( m_tutorialToken != NULL ) && m_tutorialSettings.hideInMenu )
			{
				m_tutorialOnHold = true;
				m_tutorialToken = NULL;
			}
			if( m_vehicleRadioToken )
			{
				m_vehicleRadioToken.TriggerCallback( NULL );
			}
			if( m_vehiclesManagerToken )
			{
				m_vehiclesManagerToken.TriggerCallback( NULL );
			}
		}
		else if( ( m_tutorialToken == NULL ) && m_tutorialOnHold )
		{
			m_tutorialOnHold = false;
			ShowTutorial();
		}
	}

	private function SetShardReadVisibility( hideToken : Bool )
	{
		if( hideToken && ( m_shardToken != NULL ) )
		{
			m_shardReadOnHold = true;
			m_shardToken = NULL;
			return;
		}
		if( ( !( hideToken ) && ( m_shardToken == NULL ) ) && m_shardReadOnHold )
		{
			m_shardReadOnHold = false;
			ShardRead();
		}
	}

	protected event OnUpdateData( value : Variant )
	{
		m_tutorialOnHold = false;
		m_tutorialData = ( ( PopupData )value );
		m_tutorialSettings = ( ( PopupSettings )( m_blackboard.GetVariant( m_bbDefinition.Popup_Settings ) ) );
		ShowTutorial();
	}

	protected event OnPopupCloseRequest( data : inkGameNotificationData )
	{
		m_tutorialToken = NULL;
		m_blackboard.SetBool( m_bbDefinition.Popup_IsShown, false );
	}

	private function ShowTutorial()
	{
		var notificationData : TutorialPopupData;
		notificationData = new TutorialPopupData;
		notificationData.notificationName = 'base\gameplay\gui\widgets\notifications\tutorial.inkwidget';
		notificationData.queueName = 'tutorial';
		notificationData.closeAtInput = m_tutorialSettings.closeAtInput;
		notificationData.pauseGame = m_tutorialSettings.pauseGame;
		notificationData.position = m_tutorialSettings.position;
		notificationData.isModal = m_tutorialSettings.fullscreen;
		notificationData.margin = m_tutorialSettings.margin;
		notificationData.title = m_tutorialData.title;
		notificationData.message = m_tutorialData.message;
		notificationData.imageId = m_tutorialData.iconID;
		notificationData.videoType = m_tutorialData.videoType;
		notificationData.video = PopupData.GetVideo( m_tutorialData );
		notificationData.isBlocking = m_tutorialSettings.closeAtInput;
		m_tutorialToken = ShowGameNotification( notificationData );
		m_tutorialToken.RegisterListener( this, 'OnPopupCloseRequest' );
	}

	public import function ChangeTutorialVisibilityInMenu( isInMenu : Bool );
	public import function ChangeTutorialVisibility( hideTutorial : Bool, reason : gameuiTutorialHiddenReason );

	protected event OnCodexPopupRequest( evt : OpenCodexPopupEvent )
	{
		var codexPopupData : CodexPopupData;
		codexPopupData = new CodexPopupData;
		codexPopupData.m_entry = evt.m_entry;
		codexPopupData.isBlocking = true;
		codexPopupData.useCursor = true;
		codexPopupData.queueName = 'codex';
		codexPopupData.notificationName = 'base\gameplay\gui\widgets\notifications\codex_popup.inkwidget';
		m_codexToken = ShowGameNotification( codexPopupData );
		m_codexToken.RegisterListener( this, 'OnCodexPopupCloseRequest' );
	}

	protected event OnCodexPopupCloseRequest( data : inkGameNotificationData )
	{
		m_codexToken = NULL;
	}

	public function ShowPhoneMessage()
	{
		m_phoneMessageToken = ShowGameNotification( m_phoneMessageData );
		m_phoneMessageToken.RegisterListener( this, 'OnMessagePopupUseCloseRequest' );
	}

	protected event OnPhoneMessageShowRequest( evt : PhoneMessagePopupEvent )
	{
		m_phoneMessageData = evt.m_data;
		ShowPhoneMessage();
	}

	protected event OnPhoneMessageHideRequest( evt : PhoneMessageHidePopupEvent )
	{
		m_phoneMessageToken = NULL;
	}

	protected event OnMessagePopupUseCloseRequest( data : inkGameNotificationData )
	{
		m_phoneMessageToken = NULL;
	}

	protected event OnShardRead( evt : NotifyShardRead )
	{
		m_shardReadData = evt;
		ShardRead();
	}

	public function ShardRead()
	{
		var notificationData : ShardReadPopupData;
		notificationData = new ShardReadPopupData;
		notificationData.notificationName = 'base\gameplay\gui\widgets\notifications\shard_notification.inkwidget';
		notificationData.queueName = 'shards';
		notificationData.requiredGameState = 'inkGameState';
		notificationData.isBlocking = true;
		notificationData.useCursor = false;
		notificationData.title = m_shardReadData.title;
		notificationData.text = m_shardReadData.text;
		notificationData.isCrypted = m_shardReadData.isCrypted;
		notificationData.itemID = m_shardReadData.itemID;
		m_journalManager.SetEntryVisited( m_shardReadData.entry, true );
		m_shardToken = ShowGameNotification( notificationData );
		m_shardToken.RegisterListener( this, 'OnShardReadClosed' );
		if( notificationData.isCrypted )
		{
			ProcessCrackableShardTutorial();
		}
	}

	public function ProcessCrackableShardTutorial()
	{
		var questSystem : QuestsSystem;
		questSystem = GameInstance.GetQuestsSystem( GetPlayerControlledObject().GetGame() );
		if( ( questSystem.GetFact( 'encoded_shard_tutorial' ) == 0 ) && ( questSystem.GetFact( 'disable_tutorials' ) == 0 ) )
		{
			questSystem.SetFact( 'encoded_shard_tutorial', 1 );
		}
	}

	protected event OnShardReadClosed( data : inkGameNotificationData )
	{
		m_shardToken = NULL;
		PlaySound( 'Button', 'OnPress' );
	}

	protected event OnQuickSlotButtonHoldStartEvent( evt : QuickSlotButtonHoldStartEvent )
	{
		switch( evt.dPadItemDirection )
		{
			case EDPadSlot.VehicleWheel:
				SpawnVehiclesManagerPopup();
			break;
			case EDPadSlot.VehicleInsideWheel:
				SpawnVehicleRadioPopup();
			break;
			default:
				break;
		}
	}

	private function SpawnVehiclesManagerPopup()
	{
		var data : inkGameNotificationData;
		data = new inkGameNotificationData;
		data.notificationName = 'base\gameplay\gui\widgets\vehicle_control\vehicles_manager.inkwidget';
		data.queueName = 'VehiclesManager';
		data.isBlocking = false;
		m_vehiclesManagerToken = ShowGameNotification( data );
		m_vehiclesManagerToken.RegisterListener( this, 'OnVehiclesManagerCloseRequest' );
	}

	protected event OnVehiclesManagerCloseRequest( data : inkGameNotificationData )
	{
		m_vehiclesManagerToken = NULL;
	}

	private function SpawnVehicleRadioPopup()
	{
		var data : inkGameNotificationData;
		data = new inkGameNotificationData;
		data.notificationName = 'base\gameplay\gui\widgets\vehicle_control\vehicles_radio.inkwidget';
		data.queueName = 'VehiclesRadio';
		data.isBlocking = false;
		m_vehicleRadioToken = ShowGameNotification( data );
		m_vehicleRadioToken.RegisterListener( this, 'OnVehicleRadioCloseRequest' );
	}

	protected event OnVehicleRadioCloseRequest( data : inkGameNotificationData )
	{
		m_vehicleRadioToken = NULL;
	}

	protected event OnSpawnPonRRewardsScreen( evt : ShowPointOfNoReturnPromptEvent )
	{
		var notificationData : inkGameNotificationData;
		notificationData = new inkGameNotificationData;
		notificationData.notificationName = 'base\gameplay\gui\widgets\ponr\ponr_rewards.inkwidget';
		notificationData.queueName = 'PonR';
		notificationData.isBlocking = true;
		notificationData.useCursor = true;
		m_ponrToken = ShowGameNotification( notificationData );
		m_ponrToken.RegisterListener( this, 'OnClosePonRRewardsScreen' );
	}

	protected event OnClosePonRRewardsScreen( data : inkGameNotificationData )
	{
		m_ponrToken = NULL;
	}

}

import enum gameuiTutorialHiddenReason
{
	None,
	DefaultHiddenReason,
	InPhotomode,
}

