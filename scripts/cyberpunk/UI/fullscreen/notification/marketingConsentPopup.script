class MarketingConsentPopupController extends inkGameController
{
	[ category = "Consent" ]
	private editable var m_titleOneRef : inkWidgetRef;
	[ category = "Consent" ]
	private editable var m_titleTwoRef : inkWidgetRef;
	[ category = "Consent" ]
	private editable var m_messageIntroOneRef : inkWidgetRef;
	[ category = "Consent" ]
	private editable var m_messageIntroTwoRef : inkWidgetRef;
	[ category = "Consent" ]
	private editable var m_ageConsentRef : inkWidgetRef;
	[ category = "Consent" ]
	private editable var m_qrCodeContainerRef : inkWidgetRef;
	[ category = "Question One" ]
	private editable var m_questionOne_State : Bool;
	default m_questionOne_State = false;
	[ category = "Question Two" ]
	private editable var m_questionTwo_State : Bool;
	default m_questionTwo_State = false;
	[ category = "Question One" ]
	private editable var m_questionOne_ContainerRef : inkWidgetRef;
	[ category = "Question Two" ]
	private editable var m_questionTwo_ContainerRef : inkWidgetRef;
	[ category = "Question One" ]
	private editable var m_questionOne_ToggleRef : inkWidgetRef;
	[ category = "Question One" ]
	private editable var m_questionOne_ToggleFillRef : inkWidgetRef;
	[ category = "Question Two" ]
	private editable var m_questionTwo_ToggleRef : inkWidgetRef;
	[ category = "Question Two" ]
	private editable var m_questionTwo_ToggleFillRef : inkWidgetRef;
	[ category = "Buttons" ]
	private editable var m_hyperlinkButtonRef : inkWidgetRef;
	[ category = "Buttons" ]
	private editable var m_applyButtonRef : inkWidgetRef;
	[ category = "Buttons" ]
	private editable var m_declineButtonRef : inkWidgetRef;
	[ category = "Buttons" ]
	private editable var m_aceptAllButtonRef : inkWidgetRef;
	[ category = "Buttons" ]
	private editable var m_declineAllButtonRef : inkWidgetRef;
	[ category = "Animations" ]
	private editable var m_introAnimationName : CName;
	default m_introAnimationName = 'intro';
	[ category = "Animations" ]
	private editable var m_aceptAllAnimationName : CName;
	default m_aceptAllAnimationName = 'acceptAll';
	[ category = "Animations" ]
	private editable var m_declineAllAnimationName : CName;
	default m_declineAllAnimationName = 'declineAll';
	private var m_data : MarketingConsentPopupData;
	private var m_showBothQuestions : Bool;
	private var m_requestHandler : weak< inkISystemRequestsHandler >;
	private var m_introAnimProxy : inkAnimProxy;
	private var m_confirmationAnimProxy : inkAnimProxy;

	protected event OnInitialize()
	{
		m_data = ( ( MarketingConsentPopupData )( GetRootWidget().GetUserData( 'MarketingConsentPopupData' ) ) );
		m_showBothQuestions = m_data.m_type == inkMarketingConsentPopupType.Both;
		m_requestHandler = GetSystemRequestsHandler();
		RegisterToGlobalInputCallback( 'OnPostOnRelease', this, 'OnRelease' );
		inkWidgetRef.SetVisible( m_titleOneRef, true );
		inkWidgetRef.SetVisible( m_titleTwoRef, false );
		inkWidgetRef.SetVisible( m_messageIntroOneRef, m_showBothQuestions );
		inkWidgetRef.SetVisible( m_messageIntroTwoRef, !( m_showBothQuestions ) );
		inkWidgetRef.SetVisible( m_ageConsentRef, m_showBothQuestions );
		inkWidgetRef.SetVisible( m_questionOne_ContainerRef, m_showBothQuestions || m_data.m_type == inkMarketingConsentPopupType.Newsletter );
		inkWidgetRef.SetInteractive( m_questionOne_ContainerRef, m_showBothQuestions );
		inkWidgetRef.SetVisible( m_questionOne_ToggleRef, m_showBothQuestions );
		inkWidgetRef.SetVisible( m_questionTwo_ContainerRef, m_showBothQuestions || m_data.m_type == inkMarketingConsentPopupType.ThirdParty );
		inkWidgetRef.SetInteractive( m_questionTwo_ContainerRef, m_showBothQuestions );
		inkWidgetRef.SetVisible( m_questionTwo_ToggleRef, m_showBothQuestions );
		inkWidgetRef.SetVisible( m_declineButtonRef, !( m_showBothQuestions ) );
		inkWidgetRef.SetVisible( m_aceptAllButtonRef, m_showBothQuestions );
		inkWidgetRef.SetVisible( m_declineAllButtonRef, m_showBothQuestions );
		inkWidgetRef.RegisterToCallback( m_applyButtonRef, 'OnPress', this, 'OnPressApply' );
		if( m_showBothQuestions )
		{
			inkWidgetRef.RegisterToCallback( m_questionOne_ContainerRef, 'OnPress', this, 'OnPressQuestionOne' );
			inkWidgetRef.RegisterToCallback( m_questionTwo_ContainerRef, 'OnPress', this, 'OnPressQuestionTwo' );
			inkWidgetRef.RegisterToCallback( m_questionOne_ContainerRef, 'OnHoverOut', this, 'OnHoverOutQuestionOne' );
			inkWidgetRef.RegisterToCallback( m_questionTwo_ContainerRef, 'OnHoverOut', this, 'OnHoverOutQuestionTwo' );
			inkWidgetRef.RegisterToCallback( m_aceptAllButtonRef, 'OnPress', this, 'OnPressAceptAll' );
			inkWidgetRef.RegisterToCallback( m_declineAllButtonRef, 'OnPress', this, 'OnPressDeclineAll' );
		}
		else
		{
			inkWidgetRef.RegisterToCallback( m_declineButtonRef, 'OnPress', this, 'OnPressDecline' );
			m_questionOne_State = m_data.m_type == inkMarketingConsentPopupType.ThirdParty;
			m_questionTwo_State = m_data.m_type == inkMarketingConsentPopupType.Newsletter;
		}
		if( GetPlatformShortName() == "windows" )
		{
			inkWidgetRef.RegisterToCallback( m_hyperlinkButtonRef, 'OnPress', this, 'OnPressHyperlink' );
		}
		else
		{
			inkWidgetRef.SetVisible( m_hyperlinkButtonRef, false );
		}
		UpdateToggleOne();
		UpdateToggleTwo();
		m_introAnimProxy = PlayLibraryAnimation( m_introAnimationName );
		PlaySound( 'GameMenu', 'OnOpen' );
	}

	protected event OnUninitialize()
	{
		UnregisterFromGlobalInputCallback( 'OnPostOnRelease', this, 'OnRelease' );
		inkWidgetRef.UnregisterFromCallback( m_applyButtonRef, 'OnPress', this, 'OnPressApply' );
		if( m_showBothQuestions )
		{
			inkWidgetRef.UnregisterFromCallback( m_questionOne_ContainerRef, 'OnPress', this, 'OnPressQuestionOne' );
			inkWidgetRef.UnregisterFromCallback( m_questionTwo_ContainerRef, 'OnPress', this, 'OnPressQuestionTwo' );
			inkWidgetRef.UnregisterFromCallback( m_questionOne_ContainerRef, 'OnHoverOut', this, 'OnHoverOutQuestionOne' );
			inkWidgetRef.UnregisterFromCallback( m_questionTwo_ContainerRef, 'OnHoverOut', this, 'OnHoverOutQuestionTwo' );
			inkWidgetRef.UnregisterFromCallback( m_aceptAllButtonRef, 'OnPress', this, 'OnPressAceptAll' );
			inkWidgetRef.UnregisterFromCallback( m_declineAllButtonRef, 'OnPress', this, 'OnPressDeclineAll' );
		}
		else
		{
			inkWidgetRef.UnregisterFromCallback( m_declineButtonRef, 'OnPress', this, 'OnPressDecline' );
		}
		if( inkWidgetRef.IsVisible( m_hyperlinkButtonRef ) == true )
		{
			inkWidgetRef.UnregisterFromCallback( m_hyperlinkButtonRef, 'OnPress', this, 'OnPressHyperlink' );
		}
	}

	private function ApplyClose()
	{
		if( !( m_showBothQuestions ) )
		{
			if( m_data.m_type == inkMarketingConsentPopupType.Newsletter )
			{
				m_questionOne_State = true;
			}
			if( m_data.m_type == inkMarketingConsentPopupType.ThirdParty )
			{
				m_questionTwo_State = true;
			}
		}
		SendResults();
		Close();
	}

	private function AceptAllClose()
	{
		m_questionOne_State = true;
		m_questionTwo_State = true;
		UpdateToggleOne();
		UpdateToggleTwo();
		m_confirmationAnimProxy = PlayLibraryAnimation( m_aceptAllAnimationName );
		m_confirmationAnimProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnConfirmationFinished' );
	}

	private function DeclineAllClose()
	{
		m_questionOne_State = false;
		m_questionTwo_State = false;
		UpdateToggleOne();
		UpdateToggleTwo();
		m_confirmationAnimProxy = PlayLibraryAnimation( m_declineAllAnimationName );
		m_confirmationAnimProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnConfirmationFinished' );
	}

	private function DeclineClose()
	{
		if( !( m_showBothQuestions ) )
		{
			if( m_data.m_type == inkMarketingConsentPopupType.Newsletter )
			{
				m_questionOne_State = false;
			}
			if( m_data.m_type == inkMarketingConsentPopupType.ThirdParty )
			{
				m_questionTwo_State = false;
			}
		}
		SendResults();
		Close();
	}

	private function SendResults()
	{
		m_requestHandler.RequestMarketingConsentUpdate( m_questionOne_State, m_questionTwo_State );
	}

	private function Close()
	{
		var playbackOptions : inkAnimOptions;
		PlaySound( 'Button', 'OnPress' );
		playbackOptions.playReversed = true;
		m_introAnimProxy = PlayLibraryAnimation( m_introAnimationName, playbackOptions );
		m_introAnimProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnOutroAnimationFinished' );
	}

	private function UpdateToggleOne()
	{
		if( inkWidgetRef.IsVisible( m_questionOne_ToggleRef ) )
		{
			inkWidgetRef.SetState( m_questionOne_ContainerRef, ( ( m_questionOne_State ) ? ( 'Selected' ) : ( 'Default' ) ) );
			inkWidgetRef.SetVisible( m_questionOne_ToggleFillRef, m_questionOne_State );
		}
	}

	private function UpdateToggleTwo()
	{
		if( inkWidgetRef.IsVisible( m_questionTwo_ToggleRef ) )
		{
			inkWidgetRef.SetState( m_questionTwo_ContainerRef, ( ( m_questionTwo_State ) ? ( 'Selected' ) : ( 'Default' ) ) );
			inkWidgetRef.SetVisible( m_questionTwo_ToggleFillRef, m_questionTwo_State );
		}
	}

	protected event OnOutroAnimationFinished( proxy : inkAnimProxy )
	{
		m_introAnimProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnOutroAnimationFinished' );
		m_data.token.TriggerCallback( m_data );
	}

	protected event OnConfirmationFinished( proxy : inkAnimProxy )
	{
		m_confirmationAnimProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnConfirmationFinished' );
		SendResults();
		Close();
	}

	protected event OnRelease( evt : inkPointerEvent )
	{
		if( ( ( ( evt.IsAction( 'proceed' ) && !( m_introAnimProxy.IsPlaying() ) ) && inkWidgetRef.GetState( m_questionOne_ContainerRef ) != 'Hover' ) && inkWidgetRef.GetState( m_questionTwo_ContainerRef ) != 'Hover' ) && inkWidgetRef.GetState( m_hyperlinkButtonRef ) != 'Hover' )
		{
			ApplyClose();
		}
		else if( evt.IsAction( 'close_popup' ) && !( m_introAnimProxy.IsPlaying() ) )
		{
			if( m_showBothQuestions )
			{
				DeclineAllClose();
			}
			else
			{
				DeclineClose();
			}
		}
		else if( evt.IsAction( 'secondaryAction' ) && !( m_introAnimProxy.IsPlaying() ) )
		{
			AceptAllClose();
		}
	}

	protected event OnPressQuestionOne( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) && !( m_introAnimProxy.IsPlaying() ) )
		{
			m_questionOne_State = !( m_questionOne_State );
			UpdateToggleOne();
		}
	}

	protected event OnPressQuestionTwo( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) && !( m_introAnimProxy.IsPlaying() ) )
		{
			m_questionTwo_State = !( m_questionTwo_State );
			UpdateToggleTwo();
		}
	}

	protected event OnHoverOutQuestionOne( e : inkPointerEvent )
	{
		inkWidgetRef.SetState( m_questionOne_ContainerRef, ( ( m_questionOne_State ) ? ( 'Selected' ) : ( 'Default' ) ) );
	}

	protected event OnHoverOutQuestionTwo( e : inkPointerEvent )
	{
		inkWidgetRef.SetState( m_questionTwo_ContainerRef, ( ( m_questionTwo_State ) ? ( 'Selected' ) : ( 'Default' ) ) );
	}

	protected event OnPressHyperlink( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) && !( m_introAnimProxy.IsPlaying() ) )
		{
			m_requestHandler.OpenPrivacyPolicyUrl();
		}
	}

	protected event OnPressApply( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) && !( m_introAnimProxy.IsPlaying() ) )
		{
			ApplyClose();
		}
	}

	protected event OnPressDecline( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) && !( m_introAnimProxy.IsPlaying() ) )
		{
			DeclineClose();
		}
	}

	protected event OnPressAceptAll( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) && !( m_introAnimProxy.IsPlaying() ) )
		{
			AceptAllClose();
		}
	}

	protected event OnPressDeclineAll( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) && !( m_introAnimProxy.IsPlaying() ) )
		{
			DeclineAllClose();
		}
	}

}

class MarketingConsentPopupEvent extends Event
{
	var m_type : inkMarketingConsentPopupType;
}

class MarketingConsentPopupData extends inkGameNotificationData
{
	var m_type : inkMarketingConsentPopupType;
}

