class UIInGameNotificationViewData extends GenericNotificationViewData
{

	public override function CanMerge( data : GenericNotificationViewData ) : Bool
	{
		return true;
	}

	public override function OnRemoveNotification( data : IScriptable ) : Bool
	{
		return true;
	}

}

class UIInGameNotificationQueue extends gameuiGenericNotificationGameController
{
	private editable var m_duration : Float;
	default m_duration = 5.0f;

	public export override function GetShouldSaveState() : Bool
	{
		return false;
	}

	protected event OnUINotification( evt : UIInGameNotificationEvent )
	{
		var notificationData : gameuiGenericNotificationData;
		var userData : UIInGameNotificationViewData;
		userData = new UIInGameNotificationViewData;
		switch( evt.m_notificationType )
		{
			case UIInGameNotificationType.GenericNotification:
				userData.title = evt.m_title;
			break;
			case UIInGameNotificationType.CombatRestriction:
				userData.title = "UI-Notifications-CombatRestriction";
			break;
			case UIInGameNotificationType.ActionRestriction:
				userData.title = "UI-Notifications-ActionBlocked";
			break;
			case UIInGameNotificationType.CantSaveActionRestriction:
				userData.title = "UI-Notifications-CantSave-Generic";
			break;
			case UIInGameNotificationType.CantSaveCombatRestriction:
				userData.title = "UI-Notifications-CantSave-Combat";
			break;
			case UIInGameNotificationType.CantSaveQuestRestriction:
				userData.title = "UI-Notifications-CantSave-Generic";
			break;
			case UIInGameNotificationType.CantSaveDeathRestriction:
				userData.title = "UI-Notifications-CantSave-Dead";
			break;
			case UIInGameNotificationType.NotEnoughSlotsSaveResctriction:
				userData.title = "UI-Notifications-SaveNotEnoughSlots";
			break;
			case UIInGameNotificationType.NotEnoughSpaceSaveResctriction:
				userData.title = "UI-Notifications-SaveNotEnoughSpace";
			break;
			case UIInGameNotificationType.PhotoModeDisabledRestriction:
				userData.title = "UI-PhotoMode-NotSupported";
			break;
		}
		userData.soundEvent = 'QuestSuccessPopup';
		userData.soundAction = 'OnOpen';
		notificationData.time = m_duration;
		notificationData.widgetLibraryItemName = 'popups_side';
		notificationData.notificationData = userData;
		if( evt.m_overrideCurrentNotification )
		{
			RemoveNotification( evt );
		}
		AddNewNotificationData( notificationData );
	}

	protected event OnUINotificationRemove( evt : UIInGameNotificationRemoveEvent )
	{
		RemoveNotification( evt );
	}

}

class UIInGameNotification extends GenericNotificationController
{

	public override function SetNotificationData( notificationData : GenericNotificationViewData )
	{
		super.SetNotificationData( notificationData );
		PlayLibraryAnimationOnAutoSelectedTargets( 'notification_intro', GetRootWidget() );
	}

}

class UIInGameNotificationEvent extends Event
{
	var m_notificationType : UIInGameNotificationType;
	var m_additionalInfo : Variant;
	var m_title : String;
	var m_overrideCurrentNotification : Bool;

	public static function CreateSavingLockedEvent( const locks : ref< array< gameSaveLock > > ) : UIInGameNotificationEvent
	{
		var i : Int32;
		var notificationEvent : UIInGameNotificationEvent;
		notificationEvent = new UIInGameNotificationEvent;
		notificationEvent.m_notificationType = UIInGameNotificationType.CantSaveActionRestriction;
		for( i = 0; i < locks.Size(); i += 1 )
		{
			switch( locks[ i ].reason )
			{
				case gameSaveLockReason.Combat:
					if( ( ( Int32 )( notificationEvent.m_notificationType ) ) < ( ( Int32 )( UIInGameNotificationType.CantSaveCombatRestriction ) ) )
					{
						notificationEvent.m_notificationType = UIInGameNotificationType.CantSaveCombatRestriction;
					}
				break;
				case gameSaveLockReason.Scene:
				case gameSaveLockReason.Quest:
				case gameSaveLockReason.Boundary:
				case gameSaveLockReason.MainMenu:
				case gameSaveLockReason.LoadingScreen:
				case gameSaveLockReason.Tier:
					if( ( ( Int32 )( notificationEvent.m_notificationType ) ) < ( ( Int32 )( UIInGameNotificationType.CantSaveQuestRestriction ) ) )
					{
						notificationEvent.m_notificationType = UIInGameNotificationType.CantSaveQuestRestriction;
					}
				;
				break;
				case gameSaveLockReason.PlayerState:
					if( ( ( Int32 )( notificationEvent.m_notificationType ) ) < ( ( Int32 )( UIInGameNotificationType.CantSaveDeathRestriction ) ) )
					{
						notificationEvent.m_notificationType = UIInGameNotificationType.CantSaveDeathRestriction;
					}
				break;
				case gameSaveLockReason.NotEnoughSlots:
					if( ( ( Int32 )( notificationEvent.m_notificationType ) ) < ( ( Int32 )( UIInGameNotificationType.NotEnoughSlotsSaveResctriction ) ) )
					{
						notificationEvent.m_notificationType = UIInGameNotificationType.NotEnoughSlotsSaveResctriction;
					}
				break;
				case gameSaveLockReason.NotEnoughSpace:
					if( ( ( Int32 )( notificationEvent.m_notificationType ) ) < ( ( Int32 )( UIInGameNotificationType.NotEnoughSpaceSaveResctriction ) ) )
					{
						notificationEvent.m_notificationType = UIInGameNotificationType.NotEnoughSpaceSaveResctriction;
					}
				break;
			}
		}
		return notificationEvent;
	}

}

class UIInGameNotificationRemoveEvent extends Event
{
}

enum UIInGameNotificationType
{
	ActionRestriction = 0,
	CombatRestriction = 1,
	CantSaveActionRestriction = 2,
	CantSaveCombatRestriction = 3,
	CantSaveQuestRestriction = 4,
	CantSaveDeathRestriction = 5,
	NotEnoughSlotsSaveResctriction = 6,
	NotEnoughSpaceSaveResctriction = 7,
	PhotoModeDisabledRestriction = 8,
	GenericNotification = 9,
}

