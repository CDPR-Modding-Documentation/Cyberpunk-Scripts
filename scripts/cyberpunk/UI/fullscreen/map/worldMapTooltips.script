struct WorldMapTooltipData
{
	var controller : weak< BaseWorldMapMappinController >;
	var mappin : weak< IMappin >;
	var journalEntry : weak< JournalEntry >;
	var fastTravelEnabled : Bool;
	default fastTravelEnabled = false;
	var readJournal : Bool;
	default readJournal = false;
	var isCollection : Bool;
	var collectionCount : Int32;
}

struct FixerTooltipMapData
{
	var fixerLocKey : CName;
	var fixerIcon : UIIcon_Record;
	var allQuestsAmount : Int32;
	var generalQuestsProgress : Int32;
	var allQuestsInCurrentPackage : Int32;
	var currentPackageProgress : Int32;
}

class WorldMapTooltipContainer extends inkLogicController
{
	protected editable var m_defaultTooltip : inkWidgetRef;
	protected editable var m_policeTooltip : inkWidgetRef;
	protected var m_defaultTooltipController : weak< WorldMapTooltipBaseController >;
	protected var m_policeTooltipController : weak< WorldMapTooltipBaseController >;
	protected var m_tooltips : weak< WorldMapTooltipBaseController >[ 3 ];
	protected var m_currentVisibleIndex : Int32;
	default m_currentVisibleIndex = -1;

	protected event OnInitialize()
	{
		m_defaultTooltipController = ( ( WorldMapTooltipBaseController )( inkWidgetRef.GetController( m_defaultTooltip ) ) );
		m_policeTooltipController = ( ( WorldMapTooltipBaseController )( inkWidgetRef.GetController( m_policeTooltip ) ) );
		m_tooltips[ 1 ] = m_policeTooltipController;
		m_tooltips[ 2 ] = m_defaultTooltipController;
		HideAll( true );
	}

	public function Show( target : WorldMapTooltipType )
	{
		var oldController, newController : weak< WorldMapTooltipBaseController >;
		var priority : Int32;
		newController = GetTooltipController( target );
		priority = GetControllerPriorityIndex( newController );
		if( priority == m_currentVisibleIndex )
		{
			return;
		}
		if( newController.m_active || newController.m_visible )
		{
			return;
		}
		newController.m_active = true;
		if( m_currentVisibleIndex != -1 )
		{
			oldController = m_tooltips[ m_currentVisibleIndex ];
			if( m_currentVisibleIndex < priority )
			{
				oldController.HideInstant();
				newController.Show();
				m_currentVisibleIndex = priority;
			}
			else
			{
			}
		}
		else
		{
			newController.Show();
			m_currentVisibleIndex = priority;
		}
	}

	public function Hide( target : WorldMapTooltipType )
	{
		var oldController, newController : weak< WorldMapTooltipBaseController >;
		var priority : Int32;
		var shouldHideInstant : Bool;
		shouldHideInstant = false;
		oldController = GetTooltipController( target );
		priority = GetControllerPriorityIndex( oldController );
		oldController.m_active = false;
		if( oldController.m_visible )
		{
			if( ( m_currentVisibleIndex != -1 ) && ( m_currentVisibleIndex == priority ) )
			{
				for( m_currentVisibleIndex = m_currentVisibleIndex - 1; m_currentVisibleIndex >= 0; m_currentVisibleIndex -= 1 )
				{
					newController = m_tooltips[ m_currentVisibleIndex ];
					if( newController.m_active )
					{
						newController.Show();
						shouldHideInstant = true;
						break;
					}
				}
			}
			if( shouldHideInstant )
			{
				oldController.HideInstant();
			}
			else
			{
				oldController.Hide();
			}
		}
	}

	public function HideAll( optional force : Bool )
	{
		var i, total : Int32;
		total = m_tooltips.Size();
		for( i = 0; i < total; i += 1 )
		{
			m_tooltips[ i ].m_active = false;
			m_tooltips[ i ].HideInstant( force );
		}
	}

	public function SetData( target : WorldMapTooltipType, data : WorldMapTooltipData, menu : WorldMapMenuGameController )
	{
		GetTooltipController( target ).SetData( data, menu );
	}

	private function GetTooltipController( type : WorldMapTooltipType ) : weak< WorldMapTooltipBaseController >
	{
		switch( type )
		{
			case WorldMapTooltipType.Police:
				return m_policeTooltipController;
			default:
				return m_defaultTooltipController;
		}
	}

	private function GetControllerPriorityIndex( controller : weak< WorldMapTooltipBaseController > ) : Int32
	{
		var i, total : Int32;
		total = m_tooltips.Size();
		for( i = 0; i < total; i += 1 )
		{
			if( m_tooltips[ i ] == controller )
			{
				return i;
			}
		}
		return -1;
	}

}

class WorldMapTooltipBaseController extends inkLogicController
{
	protected editable var m_root : inkWidgetRef;
	private var m_showHideAnim : inkAnimProxy;
	var m_visible : Bool;
	default m_visible = false;
	var m_active : Bool;
	default m_active = false;

	protected virtual function GetShowAnimation() : CName
	{
		return 'ShowTooltip';
	}

	protected virtual function GetHideAnimation() : CName
	{
		return 'HideTooltip';
	}

	public virtual function Show()
	{
		if( !( m_visible ) )
		{
			if( m_showHideAnim )
			{
				m_showHideAnim.Stop();
			}
			m_showHideAnim = PlayLibraryAnimation( GetShowAnimation() );
			m_visible = true;
		}
	}

	public virtual function HideInstant( optional force : Bool )
	{
		if( m_visible || force )
		{
			if( m_showHideAnim )
			{
				m_showHideAnim.Stop();
			}
			inkWidgetRef.SetOpacity( m_root, 0.0 );
			m_visible = false;
		}
	}

	public virtual function Hide()
	{
		if( m_visible )
		{
			if( m_showHideAnim )
			{
				m_showHideAnim.Stop();
			}
			m_showHideAnim = PlayLibraryAnimation( GetHideAnimation() );
			m_visible = false;
		}
	}

	public virtual function SetData( data : WorldMapTooltipData, menu : WorldMapMenuGameController ) {}
}

class WorldMapTooltipController extends WorldMapTooltipBaseController
{
	protected editable var m_titleText : inkTextRef;
	protected editable var m_descText : inkTextRef;
	protected editable var m_lineBreak : inkWidgetRef;
	protected editable var m_icon : inkImageRef;
	protected editable var m_inputOpenJournalContainer : inkCompoundRef;
	protected editable var m_inputInteractContainer : inkCompoundRef;
	protected editable var m_threatLevelPanel : inkWidgetRef;
	protected editable var m_threatLevelValue : inkTextRef;
	protected editable var m_fixerPanel : inkWidgetRef;
	protected editable var m_collectionCountContainer : inkCompoundRef;
	protected editable var m_collectionCountText : inkTextRef;
	private var m_gigProgress : Float;
	private editable var m_bar : inkWidgetRef;
	private var m_barAnimationProxy : inkAnimProxy;
	private var m_animationProxy : inkAnimProxy;
	private editable var m_gigBarCompletedText : inkTextRef;
	private editable var m_gigBarTotalText : inkTextRef;

	protected event OnInitialize()
	{
		Reset();
	}

	public override function SetData( data : WorldMapTooltipData, menu : WorldMapMenuGameController )
	{
		var journalManager : JournalManager;
		var player : weak< GameObject >;
		var mappinVariant : gamedataMappinVariant;
		var mappinPhase : gamedataMappinPhase;
		var fastTravelmappin : FastTravelMappin;
		var pointData : FastTravelPointData;
		var vehicleMappin : VehicleMappin;
		var vehicleObject : weak< VehicleObject >;
		var m_objective : JournalQuestObjective;
		var m_quest : JournalQuest;
		var m_phase : JournalQuestPhase;
		var m_mappin : JournalQuestMapPin;
		var fixerData : FixerTooltipMapData;
		var iconRecord : UIIcon_Record;
		var titleStr : String;
		var descStr : String;
		var recommendedLvl : Uint32;
		var inputInteract : Bool;
		var inputOpenJournal : Bool;
		var levelState : CName;
		var threatVisible : Bool;
		var threatString : String;
		var isInGigGroupmappin : Bool;
		var contentID : TweakDBID;
		var contentRecord : weak< ContentAssignment_Record >;
		var curveModifier : weak< CurveStatModifier_Record >;
		var playerLevel : Int32;
		var journalID : String;
		var prefix, suffix : String;
		recommendedLvl = 0;
		inputInteract = false;
		inputOpenJournal = false;
		threatVisible = false;
		isInGigGroupmappin = false;
		journalManager = menu.GetJournalManager();
		player = menu.GetPlayer();
		playerLevel = RoundMath( GameInstance.GetStatsSystem( player.GetGame() ).GetStatValue( player.GetEntityID(), gamedataStatType.Level ) );
		if( ( ( ( data.controller != NULL ) && ( data.mappin != NULL ) ) && ( journalManager != NULL ) ) && ( player != NULL ) )
		{
			inkTextRef.SetVisible( m_descText, true );
			inkWidgetRef.SetVisible( m_fixerPanel, false );
			GetRootWidget().SetState( 'Default' );
			mappinVariant = data.mappin.GetVariant();
			mappinPhase = data.mappin.GetPhase();
			fastTravelmappin = ( ( FastTravelMappin )( data.mappin ) );
			vehicleMappin = ( ( VehicleMappin )( data.mappin ) );
			if( ( ( ( ( ( ( ( ( ( ( ( mappinVariant == gamedataMappinVariant.QuestGiverVariant || mappinVariant == gamedataMappinVariant.RetrievingVariant ) || mappinVariant == gamedataMappinVariant.HuntForPsychoVariant ) || mappinVariant == gamedataMappinVariant.ThieveryVariant ) || mappinVariant == gamedataMappinVariant.SabotageVariant ) || mappinVariant == gamedataMappinVariant.ClientInDistressVariant ) || mappinVariant == gamedataMappinVariant.CourierVariant ) || mappinVariant == gamedataMappinVariant.BountyHuntVariant ) || mappinVariant == gamedataMappinVariant.ConvoyVariant ) || mappinVariant == gamedataMappinVariant.Zzz02_MotorcycleForPurchaseVariant ) || mappinVariant == gamedataMappinVariant.Zzz06_NCPDGigVariant ) || mappinVariant == gamedataMappinVariant.Zzz01_CarForPurchaseVariant ) || mappinVariant == gamedataMappinVariant.Zzz05_ApartmentToPurchaseVariant )
			{
				isInGigGroupmappin = true;
			}
			if( vehicleMappin )
			{
				vehicleObject = vehicleMappin.GetVehicle();
				titleStr = ( ( vehicleObject ) ? ( vehicleObject.GetDisplayName() ) : ( GetLocalizedText( "UI-MappinTypes-PersonalVehicle" ) ) );
				descStr = GetLocalizedText( "UI-MappinTypes-PersonalVehicleDescription" );
			}
			else if( fastTravelmappin )
			{
				pointData = fastTravelmappin.GetPointData();
				descStr = GetLocalizedText( "UI-MappinTypes-FastTravel" );
				titleStr = ( ( data.isCollection ) ? ( GetLocalizedText( "UI-MappinTypes-FastTravelDescription" ) ) : ( pointData.GetPointDisplayName() ) );
				inputInteract = data.fastTravelEnabled;
			}
			else
			{
				if( mappinPhase == gamedataMappinPhase.UndiscoveredPhase && isInGigGroupmappin )
				{
					titleStr = "UI-MappinTypes-Gig";
					descStr = "UI-MappinTypes-GigDescription";
				}
				else if( mappinPhase == gamedataMappinPhase.UndiscoveredPhase )
				{
					titleStr = "UI-MappinTypes-Undiscovered";
				}
				else
				{
					m_mappin = ( ( JournalQuestMapPin )( data.journalEntry ) );
					if( m_mappin != NULL )
					{
						m_objective = ( ( JournalQuestObjective )( journalManager.GetParentEntry( m_mappin ) ) );
						if( m_objective != NULL )
						{
							m_phase = ( ( JournalQuestPhase )( journalManager.GetParentEntry( m_objective ) ) );
							if( m_phase != NULL )
							{
								m_quest = ( ( JournalQuest )( journalManager.GetParentEntry( m_phase ) ) );
								if( m_quest != NULL )
								{
									GetRootWidget().SetState( 'Quest' );
									titleStr = m_quest.GetTitle( journalManager );
									descStr = m_objective.GetDescription();
								}
							}
						}
					}
					if( mappinVariant == gamedataMappinVariant.FixerVariant )
					{
						fixerData = MappinUIUtils.GetFixerVariantData( GameInstance.GetQuestsSystem( player.GetGame() ), data.mappin );
						titleStr = GetLocalizedTextByKey( fixerData.fixerLocKey );
						iconRecord = fixerData.fixerIcon;
						m_gigProgress = ( ( Float )( fixerData.generalQuestsProgress ) ) / ( ( Float )( fixerData.allQuestsAmount ) );
						inkTextRef.SetText( m_gigBarCompletedText, ( ( String )( fixerData.generalQuestsProgress ) ) );
						inkTextRef.SetText( m_gigBarTotalText, ( ( String )( fixerData.allQuestsAmount ) ) );
						inkTextRef.SetVisible( m_descText, false );
						inkWidgetRef.SetVisible( m_fixerPanel, true );
						GetRootWidget().SetState( 'Fixer' );
						PlayAnim( 'OnTooltipIntro', 'OnFixerProgressBarAnim' );
					}
					if( titleStr == "" )
					{
						titleStr = NameToString( MappinUIUtils.MappinToString( mappinVariant, mappinPhase ) );
					}
					if( descStr == "" )
					{
						descStr = NameToString( MappinUIUtils.MappinToDescriptionString( mappinVariant ) );
					}
				}
				if( isInGigGroupmappin )
				{
					GetRootWidget().SetState( 'Gig' );
				}
				if( data.journalEntry != NULL )
				{
					recommendedLvl = journalManager.GetRecommendedLevel( data.journalEntry );
					if( m_quest )
					{
						contentID = m_quest.GetRecommendedLevelID();
					}
					else
					{
						journalID = data.journalEntry.GetId();
						if( ( StrBeginsWith( journalID, "mq" ) || StrBeginsWith( journalID, "sq" ) ) || StrBeginsWith( journalID, "q" ) )
						{
							StrSplitFirst( journalID, "_", prefix, suffix );
							journalID = prefix;
						}
						contentID = TDBID.Create( "DeviceContentAssignment." + journalID );
					}
					contentRecord = TweakDBInterface.GetContentAssignmentRecord( contentID );
					if( contentRecord )
					{
						curveModifier = ( ( CurveStatModifier_Record )( contentRecord.PowerLevelMod() ) );
						if( curveModifier )
						{
							recommendedLvl = ( ( Uint32 )( RoundF( GameInstance.GetStatsDataSystem( player.GetGame() ).GetValueFromCurve( StringToName( curveModifier.Id() ), ( ( Float )( playerLevel ) ), StringToName( curveModifier.Column() ) ) ) ) );
						}
						else
						{
							recommendedLvl = ( ( Uint32 )( GameInstance.GetLevelAssignmentSystem( player.GetGame() ).GetLevelAssignment( contentID ) ) );
						}
					}
				}
				levelState = QuestLogUtils.GetLevelState( playerLevel, ( ( Int32 )( recommendedLvl ) ) );
				switch( levelState )
				{
					case 'ThreatHigh':
						threatVisible = true;
					threatString = GetLocalizedText( "UI-Tooltips-ThreatHigh" );
					break;
					case 'ThreatVeryHigh':
						threatVisible = true;
					threatString = GetLocalizedText( "UI-Tooltips-ThreatVeryHigh" );
					break;
					default:
						break;
				}
			}
			inputOpenJournal = data.readJournal;
		}
		inkWidgetRef.SetVisible( m_threatLevelPanel, threatVisible );
		if( threatVisible )
		{
			inkTextRef.SetText( m_threatLevelValue, threatString );
		}
		inkCompoundRef.SetVisible( m_collectionCountContainer, data.isCollection );
		if( data.isCollection )
		{
			inkTextRef.SetText( m_collectionCountText, IntToString( data.collectionCount ) );
			inputOpenJournal = false;
			inputInteract = false;
		}
		inkTextRef.SetText( m_titleText, titleStr );
		if( descStr == "None" )
		{
			inkTextRef.SetVisible( m_descText, false );
		}
		else
		{
			inkTextRef.SetVisible( m_descText, true );
			inkTextRef.SetText( m_descText, descStr );
		}
		if( iconRecord.AtlasPartName() != 'None' )
		{
			inkImageRef.SetTexturePart( m_icon, iconRecord.AtlasPartName() );
		}
		if( ( inkTextRef.IsVisible( m_descText ) || inkWidgetRef.IsVisible( m_fixerPanel ) ) || inkWidgetRef.IsVisible( m_threatLevelPanel ) )
		{
			inkWidgetRef.SetVisible( m_lineBreak, true );
		}
		else
		{
			inkWidgetRef.SetVisible( m_lineBreak, false );
		}
		inkCompoundRef.SetVisible( m_inputOpenJournalContainer, inputOpenJournal );
		inkCompoundRef.SetVisible( m_inputInteractContainer, inputInteract );
	}

	protected event OnFixerProgressBarAnim( anim : inkAnimProxy )
	{
		var barProgress : inkAnimDef;
		var sizeInterpolator : inkAnimSize;
		var barWidthSize : Float;
		var barHeightSize : Float;
		var barStartSize : Vector2;
		var barEndSize : Vector2;
		barWidthSize = 300.0;
		barHeightSize = 6.0;
		barStartSize = Vector2( 0.0, barHeightSize );
		barEndSize = Vector2( AbsF( m_gigProgress * barWidthSize ), barHeightSize );
		barProgress = new inkAnimDef;
		sizeInterpolator = new inkAnimSize;
		sizeInterpolator.SetDuration( 0.40000001 );
		sizeInterpolator.SetStartSize( barStartSize );
		sizeInterpolator.SetEndSize( barEndSize );
		sizeInterpolator.SetType( inkanimInterpolationType.Quintic );
		sizeInterpolator.SetMode( inkanimInterpolationMode.EasyInOut );
		barProgress.AddInterpolator( sizeInterpolator );
		m_barAnimationProxy = inkWidgetRef.PlayAnimation( m_bar, barProgress );
	}

	protected function GetLevelState( playerLevel, recommendedLvl : Int32 ) : CName
	{
		return QuestLogUtils.GetLevelState( playerLevel, recommendedLvl );
	}

	protected function Reset()
	{
		SetData( WorldMapTooltipData(), NULL );
	}

	public function PlayAnim( animName : CName, optional callBack : CName )
	{
		if( m_animationProxy && m_animationProxy.IsPlaying() )
		{
			m_animationProxy.Stop();
		}
		m_animationProxy = PlayLibraryAnimation( animName );
		if( callBack != '' )
		{
			m_animationProxy.RegisterToCallback( inkanimEventType.OnFinish, this, callBack );
		}
	}

}

class WorldMapPoliceTooltipController extends WorldMapTooltipController
{

	protected override function GetShowAnimation() : CName
	{
		return 'ShowPoliceTooltip';
	}

	protected override function GetHideAnimation() : CName
	{
		return 'HidePoliceTooltip';
	}

	public override function SetData( data : WorldMapTooltipData, menu : WorldMapMenuGameController )
	{
		var journalManager : JournalManager;
		var player : weak< GameObject >;
		var mappinVariant : gamedataMappinVariant;
		var mappinPhase : gamedataMappinPhase;
		var titleStr : String;
		var descStr : String;
		var recommendedLvl : Int32;
		var playerLevel : Int32;
		var threatVisible : Bool;
		var threatString : String;
		var contentID : TweakDBID;
		var contentRecord : weak< ContentAssignment_Record >;
		var curveModifier : weak< CurveStatModifier_Record >;
		var powerLevel : Float;
		var levelState : CName;
		var journalQuest : JournalQuest;
		recommendedLvl = 0;
		threatVisible = false;
		journalManager = menu.GetJournalManager();
		player = menu.GetPlayer();
		powerLevel = GameInstance.GetStatsSystem( player.GetGame() ).GetStatValue( player.GetEntityID(), gamedataStatType.Level );
		if( ( ( ( data.controller != NULL ) && ( data.mappin != NULL ) ) && ( journalManager != NULL ) ) && ( player != NULL ) )
		{
			mappinVariant = data.mappin.GetVariant();
			mappinPhase = data.mappin.GetPhase();
			if( mappinPhase == gamedataMappinPhase.UndiscoveredPhase )
			{
				titleStr = "UI-MappinTypes-Undiscovered";
			}
			else if( mappinPhase == gamedataMappinPhase.UndiscoveredPhase && mappinVariant == gamedataMappinVariant.QuestGiverVariant )
			{
				titleStr = "UI-MappinTypes-Gig";
				descStr = "UI-MappinTypes-GigDescription";
				mappinVariant = mappinVariant;
			}
			else if( mappinPhase == gamedataMappinPhase.CompletedPhase )
			{
				titleStr = NameToString( MappinUIUtils.MappinToString( mappinVariant, mappinPhase ) );
				descStr = "UI-Notifications-QuestCompleted";
			}
			else
			{
				titleStr = NameToString( MappinUIUtils.MappinToString( mappinVariant, mappinPhase ) );
				descStr = NameToString( MappinUIUtils.MappinToDescriptionString( mappinVariant ) );
			}
			if( data.journalEntry != NULL )
			{
				recommendedLvl = ( ( Int32 )( journalManager.GetRecommendedLevel( data.journalEntry ) ) );
				journalQuest = ( ( JournalQuest )( data.journalEntry ) );
				if( journalQuest )
				{
					contentID = journalQuest.GetRecommendedLevelID();
				}
				else
				{
					contentID = TDBID.Create( "DeviceContentAssignment." + data.journalEntry.GetId() );
				}
				contentRecord = TweakDBInterface.GetContentAssignmentRecord( contentID );
				if( contentRecord )
				{
					curveModifier = ( ( CurveStatModifier_Record )( contentRecord.PowerLevelMod() ) );
					if( curveModifier )
					{
						recommendedLvl = RoundMath( GameInstance.GetStatsDataSystem( player.GetGame() ).GetValueFromCurve( StringToName( curveModifier.Id() ), powerLevel, StringToName( curveModifier.Column() ) ) );
					}
					else
					{
						recommendedLvl = GameInstance.GetLevelAssignmentSystem( player.GetGame() ).GetLevelAssignment( contentID );
					}
				}
			}
			playerLevel = ( ( Int32 )( GameInstance.GetStatsSystem( player.GetGame() ).GetStatValue( player.GetEntityID(), gamedataStatType.Level ) ) );
			levelState = QuestLogUtils.GetLevelState( playerLevel, recommendedLvl );
			switch( levelState )
			{
				case 'ThreatHigh':
					threatVisible = true;
				threatString = GetLocalizedText( "UI-Tooltips-ThreatHigh" );
				break;
				case 'ThreatVeryHigh':
					threatVisible = true;
				threatString = GetLocalizedText( "UI-Tooltips-ThreatVeryHigh" );
				break;
				default:
					break;
			}
			inkTextRef.SetText( m_threatLevelValue, threatString );
		}
		inkWidgetRef.SetVisible( m_threatLevelPanel, threatVisible );
		if( threatVisible )
		{
			inkTextRef.SetText( m_threatLevelValue, threatString );
		}
		inkCompoundRef.SetVisible( m_collectionCountContainer, data.isCollection );
		if( data.isCollection )
		{
			inkTextRef.SetText( m_collectionCountText, IntToString( data.collectionCount ) );
		}
		inkTextRef.SetText( m_titleText, titleStr );
		if( descStr == "None" )
		{
			inkTextRef.SetVisible( m_descText, false );
		}
		else
		{
			inkTextRef.SetVisible( m_descText, true );
			inkTextRef.SetText( m_descText, descStr );
		}
	}

}

class WorldMapGangItemController extends inkLogicController
{
	private editable var m_factionNameText : inkTextRef;
	private editable var m_factionIconImage : inkImageRef;

	public function SetData( affiliationRecord : weak< Affiliation_Record > )
	{
		inkTextRef.SetLocalizedText( m_factionNameText, affiliationRecord.LocalizedName() );
		inkImageRef.SetTexturePart( m_factionIconImage, affiliationRecord.IconPath() );
	}

}

enum WorldMapTooltipType
{
	Default = 0,
	Police = 1,
}

