class PatchNotesGameController extends gameuiMenuGameController
{
	private editable var m_buttonHintsRef : inkWidgetRef;
	private editable var m_animationName : CName;
	default m_animationName = 'intro';
	private editable var m_confirmBtn : inkWidgetRef;
	private editable var m_selectorRef : inkWidgetRef;
	private editable var m_patchImageRef : inkImageRef;
	private const editable var m_platformSpecificNotes : array< inkWidgetRef >;
	private var m_uiSystem : UISystem;
	private var m_menuEventDispatcher : weak< inkMenuEventDispatcher >;
	private var m_animProxy : inkAnimProxy;
	private var m_isInputBlocked : Bool;
	default m_isInputBlocked = true;
	private var m_contentList : array< inkCompoundRef >;
	private var m_atlasParts : array< CName >;
	private var m_labelsList : array< String >;
	private var m_selectedIndex : Int32;
	private editable var m_contentPatchRef_1500 : inkCompoundRef;
	private editable var m_contentPatchRef_1600 : inkCompoundRef;
	private editable var m_contentPatchAtlasPart_1500 : CName;
	private editable var m_contentPatchAtlasPart_1600 : CName;
	private editable var m_tabsRef : inkWidgetRef;
	private editable var m_tabsController : weak< TabRadioGroup >;
	private editable var m_cloudSaveSettingsBlockRef : inkCompoundRef;
	private var m_cloudSaveSettingsBlock : weak< PatchSettingsController >;

	protected event OnInitialize()
	{
		super.OnInitialize();
		PlaySound( 'GameMenu', 'OnOpen' );
		RegisterToGlobalInputCallback( 'OnPreOnRelease', this, 'OnGlobalRelease' );
		PlayAnimation( m_animationName );
		m_animProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnIntroAnimationFinished' );
		inkWidgetRef.RegisterToCallback( m_confirmBtn, 'OnPress', this, 'OnPressConfirm' );
		m_uiSystem = GameInstance.GetUISystem( GetPlayerControlledObject().GetGame() );
		SetupPlatformSpecificNotes();
		SetPatchContent( gameuiPatchIntro.Patch1500_NextGen, m_contentPatchRef_1500, "UI-DLC-PatchNotes1500-Name", m_contentPatchAtlasPart_1500 );
		SetPatchContent( gameuiPatchIntro.Patch1600, m_contentPatchRef_1600, "UI-DLC-PatchNotes1600-Name", m_contentPatchAtlasPart_1600 );
		InitTabs();
		m_selectedIndex = m_contentList.Size() - 1;
		inkCompoundRef.SetVisible( m_contentPatchRef_1600, true );
		inkImageRef.SetTexturePart( m_patchImageRef, m_contentPatchAtlasPart_1600 );
		m_cloudSaveSettingsBlock = ( ( PatchSettingsController )( inkCompoundRef.GetControllerByType( m_cloudSaveSettingsBlockRef, 'PatchSettingsController' ) ) );
		m_cloudSaveSettingsBlock.SetupControl( GetPlayerControlledObject().GetGame() );
	}

	private function SetupPlatformSpecificNotes()
	{
		var i, limit : Int32;
		var controller : PlatformSpecificPatchNote;
		var platformName : String;
		var shouldBeVisible : Bool;
		var platformNameToSkip : String;
		var platformNameToShow : String;
		platformName = GetPlatformShortName();
		for( i = 0, limit = m_platformSpecificNotes.Size(); i < limit; i += 1 )
		{
			controller = ( ( PlatformSpecificPatchNote )( inkWidgetRef.GetControllerByType( m_platformSpecificNotes[ i ], 'PlatformSpecificPatchNote' ) ) );
			platformNameToSkip = controller.GetPlatformNameToSkip();
			platformNameToShow = controller.GetPlatformName();
			shouldBeVisible = true;
			if( platformNameToSkip != "" )
			{
				if( platformNameToSkip == platformName )
				{
					shouldBeVisible = false;
				}
			}
			else if( platformNameToShow != "" )
			{
				shouldBeVisible = platformName == platformNameToShow;
			}
			inkWidgetRef.SetVisible( m_platformSpecificNotes[ i ], shouldBeVisible );
		}
	}

	private function SetPatchContent( version : gameuiPatchIntro, contentRef : inkCompoundRef, label : String, imageAtlasPart : CName )
	{
		if( m_uiSystem.IsPatchIntroNeeded( version ) )
		{
			m_contentList.PushBack( contentRef );
			m_labelsList.PushBack( label );
			m_atlasParts.PushBack( imageAtlasPart );
			m_uiSystem.MarkPatchIntroAsSeen( version );
		}
		inkCompoundRef.SetVisible( contentRef, false );
	}

	private function InitTabs()
	{
		m_tabsController = ( ( TabRadioGroup )( inkWidgetRef.GetController( m_tabsRef ) ) );
		m_tabsController.SetData( m_contentList.Size(), , m_labelsList );
		m_tabsController.RegisterToCallback( 'OnValueChanged', this, 'OnTabChanged' );
		m_tabsController.Toggle( m_contentList.Size() - 1 );
	}

	protected event OnTabChanged( controller : weak< inkRadioGroupController >, selectedIndex : Int32 )
	{
		if( m_selectedIndex != selectedIndex )
		{
			inkCompoundRef.SetVisible( m_contentList[ m_selectedIndex ], false );
			m_selectedIndex = selectedIndex;
			inkCompoundRef.SetVisible( m_contentList[ m_selectedIndex ], true );
			inkImageRef.SetTexturePart( m_patchImageRef, m_atlasParts[ m_selectedIndex ] );
		}
	}

	protected event OnUninitialize()
	{
		super.OnUninitialize();
		UnregisterFromGlobalInputCallback( 'OnPostOnRelease', this, 'OnGlobalRelease' );
	}

	protected event OnSetMenuEventDispatcher( menuEventDispatcher : weak< inkMenuEventDispatcher > )
	{
		super.OnSetMenuEventDispatcher( menuEventDispatcher );
		m_menuEventDispatcher = menuEventDispatcher;
	}

	protected event OnPatchSelectEvent( evt : PatchSelectEvent )
	{
		if( m_selectedIndex != evt.m_index )
		{
			inkCompoundRef.SetVisible( m_contentList[ m_selectedIndex ], false );
			m_selectedIndex = evt.m_index;
			inkCompoundRef.SetVisible( m_contentList[ m_selectedIndex ], true );
			inkImageRef.SetTexturePart( m_patchImageRef, m_atlasParts[ m_selectedIndex ] );
		}
	}

	protected event OnPressConfirm( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) )
		{
			evt.Handle();
			Close();
		}
	}

	protected event OnGlobalRelease( evt : inkPointerEvent )
	{
		if( !( m_isInputBlocked ) )
		{
			if( evt.IsAction( 'back' ) || evt.IsAction( 'one_click_confirm' ) )
			{
				Close();
			}
		}
		evt.Handle();
	}

	private function Close()
	{
		var playbackOptions : inkAnimOptions;
		PlaySound( 'Button', 'OnPress' );
		PlaySound( 'GameMenu', 'OnClose' );
		playbackOptions.playReversed = true;
		PlayAnimation( m_animationName, playbackOptions );
		m_animProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnOutroAnimationFinished' );
		m_isInputBlocked = true;
	}

	protected event OnIntroAnimationFinished( proxy : inkAnimProxy )
	{
		m_isInputBlocked = false;
	}

	protected event OnOutroAnimationFinished( proxy : inkAnimProxy )
	{
		m_menuEventDispatcher.SpawnEvent( 'OnClosePatchNotes' );
	}

	private function PlayAnimation( animationName : CName, optional playbackOptions : inkAnimOptions )
	{
		if( m_animProxy && m_animProxy.IsPlaying() )
		{
			m_animProxy.Stop( true );
		}
		m_animProxy = PlayLibraryAnimation( animationName, playbackOptions );
	}

}

class PatchSettingsController extends inkLogicController
{
	private editable var m_settingsGroupName : CName;
	private editable var m_settingsVarName : CName;
	private editable var m_settingsVarControlWidget : inkWidgetRef;
	private var m_settingsVarController : weak< SettingsSelectorController >;
	private var m_settingsListener : PatchSettingsControllerListener;

	protected event OnInitialize()
	{
		m_settingsVarController = ( ( SettingsSelectorController )( inkWidgetRef.GetController( m_settingsVarControlWidget ) ) );
		m_settingsListener = new PatchSettingsControllerListener;
		m_settingsListener.RegisterController( this );
	}

	public function SetupControl( gameInst : GameInstance )
	{
		var settingsGroup : ConfigGroup;
		var settingsVar : ConfigVar;
		settingsGroup = GameInstance.GetSettingsSystem( gameInst ).GetGroup( m_settingsGroupName );
		settingsVar = settingsGroup.GetVar( m_settingsVarName );
		m_settingsListener.Register( settingsGroup.GetPath() );
		if( settingsVar )
		{
			m_settingsVarController.Setup( settingsVar, true );
			GetRootWidget().SetVisible( true );
		}
		else
		{
			GetRootWidget().SetVisible( false );
		}
	}

	public function OnVarModified( groupPath : CName, varName : CName, varType : ConfigVarType, reason : ConfigChangeReason )
	{
		if( m_settingsGroupName == groupPath && m_settingsVarName == varName )
		{
			m_settingsVarController.Refresh();
		}
	}

}

class PatchSettingsControllerListener extends ConfigVarListener
{
	private var m_ctrl : weak< PatchSettingsController >;

	public function RegisterController( ctrl : PatchSettingsController )
	{
		m_ctrl = ctrl;
	}

	public export override function OnVarModified( groupPath : CName, varName : CName, varType : ConfigVarType, reason : ConfigChangeReason )
	{
		m_ctrl.OnVarModified( groupPath, varName, varType, reason );
	}

}

class SelectorControllerListInt extends SettingsSelectorControllerList
{
	private var m_count : Int32;
	private var m_index : Int32;

	public override function Setup( entry : ConfigVar, isPreGame : Bool ) {}

	public function SpawnDots( count : Int32, index : Int32 )
	{
		m_count = count;
		PopulateDots( m_count );
		SelectDot( 0 );
		m_index = index;
	}

	private override function ChangeValue( forward : Bool )
	{
		var evt : PatchSelectEvent;
		if( forward )
		{
			m_index = ( ( m_index >= ( m_count - 1 ) ) ? ( 0 ) : ( m_index + 1 ) );
		}
		else
		{
			m_index = ( ( m_index <= 0 ) ? ( m_count - 1 ) : ( m_index - 1 ) );
		}
		Refresh();
		evt = new PatchSelectEvent;
		evt.m_index = m_index;
		QueueEvent( evt );
	}

	public override function Refresh()
	{
		SelectDot( m_index );
	}

}

class PatchSelectEvent extends Event
{
	var m_index : Int32;
}

class PlatformSpecificPatchNote extends inkLogicController
{
	editable var m_platformName : String;
	editable var m_platformNameToSkip : String;

	public function GetPlatformName() : String
	{
		return m_platformName;
	}

	public function GetPlatformNameToSkip() : String
	{
		return m_platformNameToSkip;
	}

}

exec function DbgMarkPatchIntroAsSeen( gameInstance : GameInstance )
{
	GameInstance.GetUISystem( gameInstance ).MarkPatchIntroAsSeen( gameuiPatchIntro.Patch1500_NextGen );
	GameInstance.GetUISystem( gameInstance ).MarkPatchIntroAsSeen( gameuiPatchIntro.Patch1600 );
}

exec function DbgResetPatchIntro( gameInstance : GameInstance )
{
	GameInstance.GetUISystem( gameInstance ).ResetPatchIntro( gameuiPatchIntro.Patch1500_NextGen );
	GameInstance.GetUISystem( gameInstance ).ResetPatchIntro( gameuiPatchIntro.Patch1600 );
}

