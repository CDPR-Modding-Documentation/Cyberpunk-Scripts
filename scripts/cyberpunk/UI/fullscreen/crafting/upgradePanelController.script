class UpgradingScreenController extends CraftingMainLogicController
{
	default m_maxIngredientCount = 8;
	private var m_itemTooltipControllers : array< weak< AGenericTooltipController > >;
	private var m_tooltipDatas : array< InventoryTooltipData >;
	private var m_WeaponAreas : array< gamedataItemType >;
	private var m_EquipAreas : array< gamedataEquipmentArea >;
	private var m_newItem : weak< gameItemData >;
	private var m_statMod : gameStatModifierData;
	private var m_levelMod : gameStatModifierData;

	public override function Init( craftingGameController : weak< CraftingMainGameController > )
	{
		super.Init( craftingGameController );
		SetCraftingButton( "UI-Crafting-Upgrade" );
		m_EquipAreas = InventoryDataManagerV2.GetInventoryEquipmentAreas();
		m_WeaponAreas = InventoryDataManagerV2.GetInventoryWeaponTypes();
	}

	public override function RefreshListViewContent( optional inventoryItemData : InventoryItemData )
	{
		m_dataSource.Clear();
		m_dataSource.Reset( GetUpgradableList() );
		if( !( InventoryItemData.IsEmpty( inventoryItemData ) ) )
		{
			UpdateItemPreviewPanel( inventoryItemData );
		}
		else
		{
			UpdateItemPreviewPanel( m_selectedItemData );
		}
	}

	protected override function SetupFilters()
	{
		m_filters.PushBack( ( ( Int32 )( ItemFilterCategory.AllCount ) ) );
		m_filters.PushBack( ( ( Int32 )( ItemFilterCategory.RangedWeapons ) ) );
		m_filters.PushBack( ( ( Int32 )( ItemFilterCategory.MeleeWeapons ) ) );
		m_filters.PushBack( ( ( Int32 )( ItemFilterCategory.Clothes ) ) );
		super.SetupFilters();
	}

	protected override function UpdateItemPreview( craftableController : CraftableItemLogicController )
	{
		var selectedItem : InventoryItemData;
		SetItemButtonHintsHoverOut( NULL );
		selectedItem = ( ( ItemCraftingData )( ( ( IScriptable )( craftableController.GetData() ) ) ) ).inventoryItem;
		UpdateItemPreviewPanel( selectedItem );
	}

	private function UpdateItemPreviewPanel( selectedItem : InventoryItemData )
	{
		if( InventoryItemData.IsEmpty( selectedItem ) )
		{
			inkWidgetRef.SetVisible( m_itemDetailsContainer, false );
			return;
		}
		inkWidgetRef.SetVisible( m_itemDetailsContainer, true );
		m_selectedItemData = selectedItem;
		m_selectedRecipe = m_craftingSystem.GetUpgradeRecipeData( InventoryItemData.GetID( m_selectedItemData ) );
		SetupIngredients( m_selectedRecipe.ingredients );
		UpdateTooltipData();
		SetQualityHeader();
		m_isCraftable = IsUpgradable( m_selectedItemData, true );
		inkTextRef.SetVisible( m_blockedText, !( m_isCraftable ) );
		m_progressButtonController.SetAvaibility( m_isCraftable );
	}

	private function SetupIngredients( ingredient : array< IngredientData > )
	{
		var i, ingredientCount : Int32;
		var controller : weak< IngredientListItemLogicController >;
		ingredientCount = ingredient.Size();
		for( i = 0; i < ingredientCount; i += 1 )
		{
			controller = m_ingredientsControllerList[ i ];
			controller.SetupData( ingredient[ i ], m_tooltipsManager, 1 );
		}
		for( i = ingredientCount; i < m_maxIngredientCount; i += 1 )
		{
			controller = m_ingredientsControllerList[ i ];
			controller.SetUnusedState();
		}
	}

	private function UpdateTooltipData()
	{
		GetItemTooltips( m_selectedItemData );
		if( m_itemTooltipControllers.Size() <= 0 )
		{
			AsyncSpawnFromExternal( inkWidgetRef.Get( m_tooltipContainer ), R"base\gameplay\gui\common\tooltip\itemtooltip.inkwidget", 'itemTooltip', this, 'OnItemTooltipSpawned' );
			AsyncSpawnFromExternal( inkWidgetRef.Get( m_tooltipContainer ), R"base\gameplay\gui\common\tooltip\itemtooltip.inkwidget", 'itemTooltip', this, 'OnUpgradedItemTooltipSpawned' );
			return;
		}
		m_itemTooltipControllers[ 0 ].SetData( m_tooltipDatas[ 0 ] );
		ApplyStatsModification();
		m_itemTooltipControllers[ 1 ].SetData( m_tooltipDatas[ 1 ] );
		RemoveStatsModification();
	}

	protected event OnItemTooltipSpawned( widget : inkWidget, userData : IScriptable )
	{
		var tooltipController : AGenericTooltipController;
		tooltipController = ( ( AGenericTooltipController )( widget.GetController() ) );
		tooltipController.SetData( m_tooltipDatas[ 0 ] );
		m_itemTooltipControllers.PushBack( tooltipController );
	}

	protected event OnUpgradedItemTooltipSpawned( widget : inkWidget, userData : IScriptable )
	{
		var tooltipController : AGenericTooltipController;
		tooltipController = ( ( AGenericTooltipController )( widget.GetController() ) );
		m_itemTooltipControllers.PushBack( tooltipController );
		ApplyStatsModification();
		tooltipController.SetData( m_tooltipDatas[ 1 ] );
		RemoveStatsModification();
	}

	private function SetQualityHeader()
	{
		var rarityLabel, iconicLabel : String;
		var stateName : CName;
		var isIconic : Bool;
		var quality : gamedataQuality;
		iconicLabel = GetLocalizedText( UIItemsHelper.QualityToLocalizationKey( gamedataQuality.Iconic ) );
		stateName = InventoryItemData.GetQuality( m_selectedItemData );
		isIconic = RPGManager.IsItemIconic( InventoryItemData.GetGameItemData( m_selectedItemData ) );
		quality = UIItemsHelper.QualityNameToEnum( InventoryItemData.GetQuality( m_selectedItemData ) );
		rarityLabel = GetLocalizedText( UIItemsHelper.QualityToLocalizationKey( quality ) );
		inkTextRef.SetText( m_itemQuality, ( ( isIconic ) ? ( ( rarityLabel + " / " ) + iconicLabel ) : ( rarityLabel ) ) );
		inkTextRef.SetState( m_itemQuality, stateName );
		inkTextRef.SetText( m_itemName, m_selectedRecipe.label );
		inkTextRef.SetState( m_itemName, stateName );
	}

	protected event OnHoldFinished( evt : ProgressBarFinishedProccess )
	{
		if( !( m_isPanelOpen ) )
		{
			return false;
		}
		UpgradeItem( m_selectedItemData );
	}

	protected override function SetItemButtonHintsHoverOver( evt : inkPointerEvent )
	{
		if( m_isCraftable )
		{
			m_buttonHintsController.AddButtonHint( 'craft_item', GetLocalizedText( "UI-Crafting-hold_to_upgrade" ) );
		}
	}

	private function GetUpgradableList() : array< IScriptable >
	{
		var i : Int32;
		var itemArrayHolder : array< IScriptable >;
		m_inventoryManager.MarkToRebuild();
		for( i = 0; i < m_EquipAreas.Size(); i += 1 )
		{
			FillInventoryData( m_inventoryManager.GetPlayerInventoryData( m_EquipAreas[ i ] ), itemArrayHolder );
		}
		for( i = 0; i < m_WeaponAreas.Size(); i += 1 )
		{
			FillInventoryData( m_inventoryManager.GetPlayerItemsByType( m_WeaponAreas[ i ] ), itemArrayHolder );
		}
		return itemArrayHolder;
	}

	private function GetItemTooltips( oldData : InventoryItemData )
	{
		var newData : InventoryItemData;
		m_tooltipDatas.Clear();
		m_newItem = GameInstance.GetTransactionSystem( m_craftingGameController.GetPlayer().GetGame() ).GetItemData( m_craftingGameController.GetPlayer(), InventoryItemData.GetID( oldData ) );
		ApplyStatsModification();
		newData = m_inventoryManager.GetInventoryItemData( m_craftingGameController.GetPlayer(), m_newItem, false, false );
		m_tooltipDatas.PushBack( m_inventoryManager.GetComparisonTooltipsData( newData, oldData, false ) );
		m_tooltipDatas.PushBack( m_inventoryManager.GetComparisonTooltipsData( oldData, newData, false ) );
		m_tooltipDatas[ 0 ].displayContext = InventoryTooltipDisplayContext.Upgrading;
		m_tooltipDatas[ 1 ].displayContext = InventoryTooltipDisplayContext.Upgrading;
		RemoveStatsModification();
	}

	private function ApplyStatsModification()
	{
		m_statMod = RPGManager.CreateStatModifier( gamedataStatType.ItemLevel, gameStatModifierType.Additive, 10.0 );
		GameInstance.GetStatsSystem( m_craftingGameController.GetPlayer().GetGame() ).AddModifier( m_newItem.GetStatsObjectID(), m_statMod );
		if( TweakDBInterface.GetItemRecord( ItemID.GetTDBID( m_newItem.GetID() ) ).TagsContains( WeaponObject.GetRangedWeaponTag() ) )
		{
			m_levelMod = RPGManager.CreateStatModifier( gamedataStatType.Level, gameStatModifierType.Additive, 1.0 );
			GameInstance.GetStatsSystem( m_craftingGameController.GetPlayer().GetGame() ).AddModifier( m_newItem.GetStatsObjectID(), m_levelMod );
		}
	}

	private function RemoveStatsModification()
	{
		GameInstance.GetStatsSystem( m_craftingGameController.GetPlayer().GetGame() ).RemoveModifier( m_newItem.GetStatsObjectID(), m_statMod );
		if( m_levelMod )
		{
			GameInstance.GetStatsSystem( m_craftingGameController.GetPlayer().GetGame() ).RemoveModifier( m_newItem.GetStatsObjectID(), m_levelMod );
		}
	}

	private function UpgradeItem( selectedItemData : InventoryItemData )
	{
		var upgradeItemRequest : UpgradeItemRequest;
		upgradeItemRequest = new UpgradeItemRequest;
		upgradeItemRequest.owner = m_craftingGameController.GetPlayer();
		upgradeItemRequest.itemID = InventoryItemData.GetID( selectedItemData );
		m_craftingSystem.QueueRequest( upgradeItemRequest );
	}

	private function FillInventoryData( itemDataHolder : array< InventoryItemData >, out itemArrayHolder : array< IScriptable > )
	{
		var itemWrapper : ItemCraftingData;
		var itemData : gameItemData;
		var i : Int32;
		for( i = 0; i < itemDataHolder.Size(); i += 1 )
		{
			itemWrapper = new ItemCraftingData;
			itemWrapper.inventoryItem = itemDataHolder[ i ];
			itemData = InventoryItemData.GetGameItemData( itemDataHolder[ i ] );
			itemWrapper.isUpgradable = IsUpgradable( itemDataHolder[ i ], false );
			itemWrapper.isNew = m_craftingGameController.GetScriptableSystem().IsInventoryItemNew( InventoryItemData.GetID( itemDataHolder[ i ] ) );
			if( !( RPGManager.IsItemMaxLevel( itemData ) ) )
			{
				itemArrayHolder.PushBack( itemWrapper );
			}
			m_inventoryManager.GetOrCreateInventoryItemSortData( itemWrapper.inventoryItem, m_craftingGameController.GetScriptableSystem() );
		}
	}

	private function IsUpgradable( item : InventoryItemData, sendNotification : Bool ) : Bool
	{
		var canUpgrade : Bool;
		var pl_level, it_level : Int32;
		var playerDevelopmentData : PlayerDevelopmentData;
		var levelParams : inkTextParams;
		var isItemMaxLevel : Bool;
		playerDevelopmentData = PlayerDevelopmentSystem.GetData( m_craftingGameController.GetPlayer() );
		pl_level = playerDevelopmentData.GetProficiencyLevel( gamedataProficiencyType.Level );
		it_level = InventoryItemData.GetRequiredLevel( item ) + 1;
		canUpgrade = m_craftingSystem.CanItemBeUpgraded( InventoryItemData.GetGameItemData( item ) ) && ( pl_level >= it_level );
		isItemMaxLevel = RPGManager.IsItemMaxLevel( InventoryItemData.GetGameItemData( item ) );
		if( sendNotification && !( canUpgrade ) )
		{
			if( pl_level < it_level )
			{
				levelParams = new inkTextParams;
				levelParams.AddNumber( "int_0", it_level );
				inkTextRef.SetText( m_blockedText, "LocKey#78455", levelParams );
				m_notificationType = UIMenuNotificationType.UpgradingLevelToLow;
			}
			else if( !( m_craftingSystem.EnoughIngredientsForUpgrading( InventoryItemData.GetGameItemData( item ) ) ) )
			{
				inkTextRef.SetText( m_blockedText, "LocKey#42797" );
				m_notificationType = UIMenuNotificationType.CraftingNotEnoughMaterial;
			}
			else if( isItemMaxLevel )
			{
				m_notificationType = UIMenuNotificationType.InventoryActionBlocked;
			}
		}
		return canUpgrade;
	}

}

