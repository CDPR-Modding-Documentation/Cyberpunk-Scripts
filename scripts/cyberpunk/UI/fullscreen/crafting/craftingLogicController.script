class CraftingMainLogicController extends inkLogicController
{
	protected editable var m_root : inkWidgetRef;
	protected editable var m_itemDetailsContainer : inkWidgetRef;
	protected editable var m_leftListScrollHolder : inkWidgetRef;
	protected editable var m_virtualListContainer : inkVirtualCompoundRef;
	protected editable var m_filterGroup : inkWidgetRef;
	protected editable var m_sortingButton : inkWidgetRef;
	protected editable var m_sortingDropdown : inkWidgetRef;
	protected editable var m_tooltipContainer : inkWidgetRef;
	protected editable var m_itemName : inkTextRef;
	protected editable var m_itemQuality : inkTextRef;
	protected editable var m_progressBarContainer : inkCompoundRef;
	protected editable var m_progressButtonContainer : inkCompoundRef;
	protected editable var m_blockedText : inkTextRef;
	protected editable var m_ingredientsListContainer : inkCompoundRef;
	protected var m_notificationType : UIMenuNotificationType;
	protected var m_classifier : CraftingItemTemplateClassifier;
	protected var m_dataView : CraftingDataView;
	protected var m_dataSource : ScriptableDataSource;
	protected var m_virtualListController : weak< inkVirtualGridController >;
	protected var m_leftListScrollController : weak< inkScrollController >;
	protected var m_ingredientsControllerList : array< weak< IngredientListItemLogicController > >;
	protected var m_maxIngredientCount : Int32;
	protected var m_selectedRecipe : RecipeData;
	protected var m_selectedItemData : InventoryItemData;
	protected var m_isCraftable : Bool;
	protected var m_filters : array< Int32 >;
	protected var m_progressButtonController : weak< ProgressBarButton >;
	protected var m_itemWeaponController : weak< InventoryItemDisplayController >;
	protected var m_itemIngredientController : weak< InventoryItemDisplayController >;
	protected var m_doPlayFilterSounds : Bool;
	protected var m_craftingGameController : weak< CraftingMainGameController >;
	protected var m_craftingSystem : weak< CraftingSystem >;
	protected var m_tooltipsManager : weak< gameuiTooltipsManager >;
	protected var m_buttonHintsController : weak< ButtonHints >;
	protected var m_inventoryManager : weak< InventoryDataManagerV2 >;
	protected var m_sortingController : weak< DropdownListController >;
	protected var m_sortingButtonController : weak< DropdownButtonController >;
	protected var m_isPanelOpen : Bool;

	public virtual function Init( craftingGameController : weak< CraftingMainGameController > )
	{
		m_craftingGameController = craftingGameController;
		m_craftingSystem = craftingGameController.GetCraftingSystem();
		m_tooltipsManager = craftingGameController.GetTooltipManager();
		m_buttonHintsController = craftingGameController.GetButtonHintsController();
		m_inventoryManager = craftingGameController.GetInventoryManager();
		InitVirtualList();
		SetupIngredientWidgets();
		SetupFilters();
		SetupSortingDropdown();
		inkWidgetRef.SetVisible( m_itemDetailsContainer, false );
		m_leftListScrollController = ( ( inkScrollController )( inkWidgetRef.GetController( m_leftListScrollHolder ) ) );
		m_doPlayFilterSounds = true;
	}

	protected function InitVirtualList()
	{
		m_virtualListController = ( ( inkVirtualGridController )( inkVirtualCompoundRef.GetControllerByType( m_virtualListContainer, 'inkVirtualGridController' ) ) );
		m_classifier = new CraftingItemTemplateClassifier;
		m_virtualListController.SetClassifier( m_classifier );
		m_dataSource = new ScriptableDataSource;
		m_dataView = new CraftingDataView;
		m_dataView.SetSource( m_dataSource );
		m_dataView.EnableSorting();
		m_dataView.BindUIScriptableSystem( m_craftingGameController.GetScriptableSystem() );
		m_virtualListController.SetSource( m_dataView );
		m_virtualListController.RegisterToCallback( 'OnItemActivated', this, 'OnItemSelect' );
	}

	public function OpenPanel()
	{
		inkWidgetRef.SetVisible( m_root, true );
		RefreshListViewContent();
		m_isPanelOpen = true;
	}

	public virtual function RefreshListViewContent( optional inventoryItemData : InventoryItemData ) {}

	public function ClosePanel()
	{
		inkWidgetRef.SetVisible( m_root, false );
		m_dataSource.Clear();
		m_isPanelOpen = false;
	}

	protected virtual function SetupIngredientWidgets()
	{
		var i : Int32;
		if( m_ingredientsControllerList.Size() < m_maxIngredientCount )
		{
			for( i = 0; i < m_maxIngredientCount; i += 1 )
			{
				AsyncSpawnFromLocal( inkCompoundRef.Get( m_ingredientsListContainer ), 'ingredientsListItem', this, 'OnIngedientControllerSpawned' );
			}
		}
	}

	protected event OnIngedientControllerSpawned( widget : inkWidget, userData : IScriptable )
	{
		var controller : weak< IngredientListItemLogicController >;
		controller = ( ( IngredientListItemLogicController )( widget.GetController() ) );
		controller.SetUnusedState();
		m_ingredientsControllerList.PushBack( controller );
	}

	protected virtual function SetupFilters()
	{
		var radioGroup : FilterRadioGroup;
		radioGroup = ( ( FilterRadioGroup )( inkWidgetRef.GetControllerByType( m_filterGroup, 'FilterRadioGroup' ) ) );
		radioGroup.SetData( m_filters, m_tooltipsManager, 0 );
		radioGroup.RegisterToCallback( 'OnValueChanged', this, 'OnFilterChange' );
		radioGroup.Toggle( 0 );
		OnFilterChange( NULL, 0 );
	}

	protected event OnFilterChange( controller : weak< inkRadioGroupController >, selectedIndex : Int32 )
	{
		var filter : ItemFilterCategory;
		filter = ( ( ItemFilterCategory )( m_filters[ selectedIndex ] ) );
		m_dataView.SetFilterType( filter );
		PlayLibraryAnimation( 'player_grid_show' );
		m_leftListScrollController.SetScrollPosition( 0.0 );
		if( m_doPlayFilterSounds )
		{
			PlaySound( 'Button', 'OnPress' );
		}
		inkWidgetRef.SetVisible( m_itemDetailsContainer, false );
	}

	protected function SetupSortingDropdown()
	{
		inkWidgetRef.RegisterToCallback( m_sortingButton, 'OnRelease', this, 'OnSortingButtonClicked' );
		m_sortingController = ( ( DropdownListController )( inkWidgetRef.GetController( m_sortingDropdown ) ) );
		m_sortingButtonController = ( ( DropdownButtonController )( inkWidgetRef.GetController( m_sortingButton ) ) );
		m_sortingController.Setup( this, SortingDropdownData.GetDefaultDropdownOptions(), m_sortingButtonController );
		m_sortingButtonController.SetData( GetDropdownOption( ItemSortMode.Default ) );
	}

	protected event OnSortingButtonClicked( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) )
		{
			m_sortingController.Toggle();
			PlaySound( 'Button', 'OnPress' );
		}
	}

	protected event OnDropdownItemClickedEvent( evt : DropdownItemClickedEvent )
	{
		var identifier : ItemSortMode;
		var data : DropdownItemData;
		identifier = ( ( ItemSortMode )evt.identifier );
		data = GetDropdownOption( identifier );
		if( data )
		{
			m_sortingButtonController.SetData( data );
			m_dataView.SetSortMode( identifier );
			PlaySound( 'Button', 'OnPress' );
		}
	}

	protected function SetCraftingButton( label : String )
	{
		m_progressButtonController = ( ( ProgressBarButton )( inkCompoundRef.GetControllerByType( m_progressButtonContainer, 'ProgressBarButton' ) ) );
		m_progressButtonController.SetupProgressButton( label, ( ( ProgressBarsController )( inkCompoundRef.GetControllerByType( m_progressBarContainer, 'ProgressBarsController' ) ) ) );
		m_progressButtonController.ButtonController.RegisterToCallback( 'OnPress', this, 'OnButtonClick' );
		m_progressButtonController.ButtonController.RegisterToCallback( 'OnHoverOver', this, 'SetItemButtonHintsHoverOver' );
		m_progressButtonController.ButtonController.RegisterToCallback( 'OnHoverOut', this, 'SetItemButtonHintsHoverOut' );
	}

	protected event OnButtonClick( evt : inkPointerEvent )
	{
		var craftingNotification : UIMenuNotificationEvent;
		if( evt.IsAction( 'click' ) )
		{
			if( !( m_isCraftable ) )
			{
				if( m_notificationType != UIMenuNotificationType.CraftingNoPerks )
				{
					craftingNotification = new UIMenuNotificationEvent;
					craftingNotification.m_notificationType = m_notificationType;
					QueueEvent( craftingNotification );
				}
				PlaySound( 'Item', 'OnCraftFailed' );
			}
			else
			{
				PlaySound( 'Item', 'OnCraftStarted' );
			}
		}
	}

	protected event OnItemSelect( previous : inkVirtualCompoundItemController, next : inkVirtualCompoundItemController )
	{
		UpdateItemPreview( ( ( CraftableItemLogicController )( next ) ) );
		PlaySound( 'Button', 'OnPress' );
	}

	protected virtual function UpdateItemPreview( craftableController : CraftableItemLogicController ) {}

	protected event OnUninitialize()
	{
		m_virtualListController.SetSource( NULL );
		m_virtualListController.SetClassifier( NULL );
		m_dataView.SetSource( NULL );
		m_dataView = NULL;
		m_dataSource = NULL;
		m_classifier = NULL;
		m_virtualListController.UnregisterFromCallback( 'OnItemSelected', this, 'OnItemSelect' );
		m_progressButtonController.ButtonController.UnregisterFromCallback( 'OnPress', this, 'OnButtonClick' );
		m_progressButtonController.ButtonController.UnregisterFromCallback( 'OnHoverOver', this, 'SetItemButtonHintsHoverOver' );
		m_progressButtonController.ButtonController.UnregisterFromCallback( 'OnHoverOut', this, 'SetItemButtonHintsHoverOut' );
		m_doPlayFilterSounds = false;
	}

	protected virtual function SetItemButtonHintsHoverOver( evt : inkPointerEvent ) {}

	protected function SetItemButtonHintsHoverOut( evt : inkPointerEvent )
	{
		m_buttonHintsController.RemoveButtonHint( 'craft_item' );
	}

	public static function IsWeapon( type : gamedataEquipmentArea ) : Bool
	{
		return ( ( type == gamedataEquipmentArea.Weapon || type == gamedataEquipmentArea.WeaponHeavy ) || type == gamedataEquipmentArea.WeaponWheel ) || type == gamedataEquipmentArea.WeaponLeft;
	}

	public static function GetDropdownOption( identifier : ItemSortMode ) : DropdownItemData
	{
		var options : array< DropdownItemData >;
		var i : Int32;
		options = SortingDropdownData.GetDefaultDropdownOptions();
		for( i = 0; i < options.Size(); i += 1 )
		{
			if( ( ( ItemSortMode )options[ i ].identifier ) == identifier )
			{
				return options[ i ];
			}
		}
		return NULL;
	}

}

