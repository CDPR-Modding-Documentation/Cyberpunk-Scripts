class MessangerReplyItemRenderer extends JournalEntryListItemController
{
	private editable var m_textRoot : inkWidgetRef;
	private editable var m_background : inkWidgetRef;
	private var m_animSelectionBackground : inkAnimProxy;
	private var m_animSelectionText : inkAnimProxy;
	private var m_selectedState : Bool;
	private var m_animationDuration : Float;
	default m_animationDuration = 0.3f;

	protected event OnInitialize()
	{
		RegisterToCallback( 'OnSelected', this, 'OnSelected' );
		RegisterToCallback( 'OnDeselected', this, 'OnDeselected' );
		RegisterToCallback( 'OnButtonStateChanged', this, 'OnButtonStateChanged' );
	}

	protected event OnUninitialize()
	{
		UnregisterFromCallback( 'OnSelected', this, 'OnSelected' );
		UnregisterFromCallback( 'OnDeselected', this, 'OnDeselected' );
		UnregisterFromCallback( 'OnButtonStateChanged', this, 'OnButtonStateChanged' );
	}

	protected event OnButtonStateChanged( controller : weak< inkButtonController >, oldState : inkEButtonState, newState : inkEButtonState )
	{
		if( oldState == inkEButtonState.Normal && newState == inkEButtonState.Hover )
		{
			SetSelected( true );
		}
		else if( oldState == inkEButtonState.Hover && newState != inkEButtonState.Hover )
		{
			SetSelected( false );
		}
	}

	protected event OnSelected( parent : weak< ListItemController > )
	{
		if( !( m_selectedState ) )
		{
			m_selectedState = !( m_selectedState );
			AnimateSelection();
		}
	}

	protected event OnDeselected( parent : weak< ListItemController > )
	{
		if( m_selectedState )
		{
			m_selectedState = !( m_selectedState );
			AnimateSelection();
		}
	}

	protected override function OnJournalEntryUpdated( entry : weak< JournalEntry >, extraData : IScriptable )
	{
		var choiceEntry : weak< JournalPhoneChoiceEntry >;
		choiceEntry = ( ( JournalPhoneChoiceEntry )( entry ) );
		inkTextRef.SetText( m_labelPathRef, choiceEntry.GetText() );
		if( choiceEntry.IsQuestImportant() )
		{
			GetRootWidget().SetState( 'Quest' );
		}
	}

	public function AnimateSelection()
	{
		var animSelect, animSelectBg : inkAnimDef;
		var animEffectInterp, animBgEffectInterp : inkAnimEffect;
		var startValue, endValue : Float;
		var adjustedTime : Float;
		startValue = inkWidgetRef.Get( m_textRoot ).GetEffectParamValue( inkEffectType.LinearWipe, 'LinearWipe_0', 'transition' );
		endValue = ( ( m_selectedState ) ? ( 1.0 ) : ( 0.0 ) );
		if( m_selectedState )
		{
			inkTextRef.SetState( m_labelPathRef, 'Black' );
		}
		else
		{
			inkTextRef.SetState( m_labelPathRef, 'Default' );
		}
		adjustedTime = AbsF( endValue - startValue ) * m_animationDuration;
		if( m_animSelectionText && m_animSelectionText.IsPlaying() )
		{
			m_animSelectionText.Stop();
		}
		animSelect = new inkAnimDef;
		animEffectInterp = new inkAnimEffect;
		animEffectInterp.SetStartDelay( 0.0 );
		animEffectInterp.SetEffectType( inkEffectType.LinearWipe );
		animEffectInterp.SetEffectName( 'LinearWipe_0' );
		animEffectInterp.SetParamName( 'transition' );
		animEffectInterp.SetStartValue( startValue );
		animEffectInterp.SetEndValue( endValue );
		animEffectInterp.SetDuration( adjustedTime );
		animSelect.AddInterpolator( animEffectInterp );
		inkWidgetRef.Get( m_textRoot ).SetEffectEnabled( inkEffectType.LinearWipe, 'LinearWipe_0', true );
		m_animSelectionText = inkWidgetRef.PlayAnimation( m_textRoot, animSelect );
		if( m_animSelectionBackground && m_animSelectionBackground.IsPlaying() )
		{
			m_animSelectionBackground.Stop();
		}
		animSelectBg = new inkAnimDef;
		animBgEffectInterp = new inkAnimEffect;
		animBgEffectInterp.SetStartDelay( 0.0 );
		animBgEffectInterp.SetEffectType( inkEffectType.LinearWipe );
		animBgEffectInterp.SetEffectName( 'LinearWipe_0' );
		animBgEffectInterp.SetParamName( 'transition' );
		animBgEffectInterp.SetStartValue( startValue );
		animBgEffectInterp.SetEndValue( endValue );
		animBgEffectInterp.SetDuration( adjustedTime );
		animSelectBg.AddInterpolator( animBgEffectInterp );
		inkWidgetRef.Get( m_background ).SetEffectEnabled( inkEffectType.LinearWipe, 'LinearWipe_0', true );
		m_animSelectionBackground = inkWidgetRef.PlayAnimation( m_background, animSelectBg );
	}

}

class MessangerItemRenderer extends JournalEntryListItemController
{
	private editable var m_image : inkImageRef;
	private editable var m_container : inkWidgetRef;
	private editable var m_fluffText : inkTextRef;
	private var m_stateMessage : CName;
	default m_stateMessage = 'Default';
	private var m_statePlayerReply : CName;
	default m_statePlayerReply = 'Player';
	private var m_imageId : TweakDBID;

	protected override function OnJournalEntryUpdated( entry : weak< JournalEntry >, extraData : IScriptable )
	{
		var message : weak< JournalPhoneMessage >;
		var choiceEntry : weak< JournalPhoneChoiceEntry >;
		var type : MessageViewType;
		var contact : ContactData;
		var txt : String;
		inkImageRef.SetVisible( m_image, false );
		message = ( ( JournalPhoneMessage )( entry ) );
		contact = ( ( ContactData )( extraData ) );
		if( message )
		{
			txt = message.GetText();
			type = ( ( message.GetSender() == gameMessageSender.NPC ) ? ( MessageViewType.Received ) : ( MessageViewType.Sent ) );
			SetMessageView( txt, type, contact.localizedName );
			m_imageId = message.GetImageID();
			if( TDBID.IsValid( m_imageId ) )
			{
				inkImageRef.SetVisible( m_image, true );
				InkImageUtils.RequestSetImage( this, m_image, m_imageId );
			}
			else
			{
				inkImageRef.SetVisible( m_image, false );
			}
		}
		else
		{
			choiceEntry = ( ( JournalPhoneChoiceEntry )( entry ) );
			if( choiceEntry )
			{
				txt = choiceEntry.GetText();
				SetMessageView( txt, MessageViewType.Sent, "" );
				if( choiceEntry.IsQuestImportant() )
				{
					GetRootWidget().SetState( 'Quest' );
				}
			}
			else
			{
				LogError( ( "[MessangerItemRenderer] JournalEntry '" + entry.GetEditorName() ) + "' should have JournalPhoneMessage or JournalPhoneChoiceEntry type" );
			}
		}
		inkTextRef.SetText( m_fluffText, "CHKSUM_" + IntToString( contact.hash ) );
	}

	private function SetMessageView( txt : String, type : MessageViewType, contactName : String )
	{
		inkTextRef.SetText( m_labelPathRef, txt );
		if( type == MessageViewType.Received )
		{
			GetRootWidget().SetState( m_stateMessage );
			inkWidgetRef.SetHAlign( m_container, inkEHorizontalAlign.Left );
		}
		else
		{
			GetRootWidget().SetState( m_statePlayerReply );
			inkWidgetRef.SetHAlign( m_container, inkEHorizontalAlign.Right );
		}
	}

}

enum MessageViewType
{
	Sent = 0,
	Received = 1,
}

