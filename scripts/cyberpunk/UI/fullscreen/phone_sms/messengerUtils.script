class MessengerUtils
{

	public static function GetContactDataArray( journal : JournalManager, includeUnknown : Bool, skipEmpty : Bool, activeDataSync : weak< MessengerContactSyncData > ) : array< VirutalNestedListData >
	{
		var i, j, conversationsCount : Int32;
		var context : JournalRequestContext;
		var entries : array< weak< JournalEntry > >;
		var contactEntry : weak< JournalContact >;
		var conversationEntry : weak< JournalPhoneConversation >;
		var conversations : array< weak< JournalEntry > >;
		var messagesReceived : array< weak< JournalEntry > >;
		var playerReplies : array< weak< JournalEntry > >;
		var contactData : ContactData;
		var threadData : ContactData;
		var contactVirtualListData : VirutalNestedListData;
		var threadVirtualListData : VirutalNestedListData;
		var virtualDataList : array< VirutalNestedListData >;
		context.stateFilter.active = true;
		journal.GetContacts( context, entries );
		for( i = 0; i < entries.Size(); i += 1 )
		{
			contactEntry = ( ( JournalContact )( entries[ i ] ) );
			if( includeUnknown || contactEntry.IsKnown( journal ) )
			{
				messagesReceived.Clear();
				playerReplies.Clear();
				journal.GetConversations( contactEntry, conversations );
				journal.GetFlattenedMessagesAndChoices( contactEntry, messagesReceived, playerReplies );
				if( ( skipEmpty && ( messagesReceived.Size() <= 0 ) ) && ( playerReplies.Size() <= 0 ) )
				{
					continue;
				}
				contactData = new ContactData;
				contactData.id = contactEntry.GetId();
				contactData.hash = journal.GetEntryHash( contactEntry );
				contactData.localizedName = contactEntry.GetLocalizedName( journal );
				contactData.avatarID = contactEntry.GetAvatarID( journal );
				contactData.timeStamp = journal.GetEntryTimestamp( contactEntry );
				contactData.activeDataSync = activeDataSync;
				GetContactMessageData( contactData, journal, messagesReceived, playerReplies );
				contactVirtualListData = new VirutalNestedListData;
				contactVirtualListData.m_level = contactData.hash;
				contactVirtualListData.m_widgetType = 0;
				contactVirtualListData.m_isHeader = true;
				contactVirtualListData.m_data = contactData;
				conversationsCount = conversations.Size();
				if( conversationsCount > 1 )
				{
					contactVirtualListData.m_collapsable = true;
					for( j = 0; j < conversationsCount; j += 1 )
					{
						messagesReceived.Clear();
						playerReplies.Clear();
						conversationEntry = ( ( JournalPhoneConversation )( conversations[ j ] ) );
						journal.GetMessagesAndChoices( conversationEntry, messagesReceived, playerReplies );
						threadData = new ContactData;
						threadData.id = conversationEntry.GetId();
						threadData.hash = journal.GetEntryHash( conversationEntry );
						threadData.localizedName = conversationEntry.GetTitle();
						threadData.timeStamp = journal.GetEntryTimestamp( conversationEntry );
						threadData.activeDataSync = activeDataSync;
						GetContactMessageData( threadData, journal, messagesReceived, playerReplies );
						threadVirtualListData = new VirutalNestedListData;
						threadVirtualListData.m_collapsable = false;
						threadVirtualListData.m_isHeader = false;
						threadVirtualListData.m_level = contactData.hash;
						threadVirtualListData.m_widgetType = 1;
						threadVirtualListData.m_data = threadData;
						virtualDataList.PushBack( threadVirtualListData );
					}
				}
				else
				{
					contactVirtualListData.m_collapsable = false;
				}
				virtualDataList.PushBack( contactVirtualListData );
			}
		}
		return virtualDataList;
	}

	public static function GetContactMessageData( out contactData : ContactData, journal : JournalManager, messagesReceived : array< weak< JournalEntry > >, playerReplies : array< weak< JournalEntry > > )
	{
		var lastMessegeRecived : weak< JournalPhoneMessage >;
		var lastMessegeSent : weak< JournalPhoneChoiceEntry >;
		var j : Int32;
		contactData.playerCanReply = playerReplies.Size() > 0;
		for( j = 0; j < messagesReceived.Size(); j += 1 )
		{
			if( !( journal.IsEntryVisited( messagesReceived[ j ] ) ) )
			{
				contactData.unreadMessages.PushBack( journal.GetEntryHash( messagesReceived[ j ] ) );
			}
		}
		if( messagesReceived.Size() > 0 )
		{
			lastMessegeRecived = ( ( JournalPhoneMessage )( messagesReceived.Last() ) );
			if( lastMessegeRecived )
			{
				contactData.lastMesssagePreview = lastMessegeRecived.GetText();
				contactData.playerIsLastSender = false;
			}
			else
			{
				lastMessegeSent = ( ( JournalPhoneChoiceEntry )( messagesReceived.Last() ) );
				contactData.lastMesssagePreview = lastMessegeSent.GetText();
				contactData.playerIsLastSender = true;
			}
		}
	}

	public constexpr static function HasPhoneObjective( journal : JournalManager ) : Bool
	{
		return false;
	}

	public static function GetUnreadMessagesCount( journal : JournalManager, contactEntry : weak< JournalContact > ) : Int32
	{
		var messagesReceived : array< weak< JournalEntry > >;
		var playerReplies : array< weak< JournalEntry > >;
		journal.GetFlattenedMessagesAndChoices( contactEntry, messagesReceived, playerReplies );
		return messagesReceived.Size();
	}

}

