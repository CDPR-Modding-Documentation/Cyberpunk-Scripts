class MessengerContactDataView extends VirtualNestedListDataView
{

	protected override function SortItems( compareBuilder : CompareBuilder, left : VirutalNestedListData, right : VirutalNestedListData )
	{
		var leftData, rightData : ContactData;
		leftData = ( ( ContactData )( left.m_data ) );
		rightData = ( ( ContactData )( right.m_data ) );
		if( leftData && rightData )
		{
			compareBuilder.BoolTrue( leftData.unreadMessages.Size() > 0, rightData.unreadMessages.Size() > 0 ).GameTimeDesc( leftData.timeStamp, rightData.timeStamp );
		}
	}

}

class MessengerContactItemVirtualController extends inkVirtualCompoundItemController
{
	private editable var m_label : inkTextRef;
	private editable var m_msgPreview : inkTextRef;
	private editable var m_msgCounter : inkTextRef;
	private editable var m_msgIndicator : inkWidgetRef;
	private editable var m_replyAlertIcon : inkWidgetRef;
	private editable var m_collapseIcon : inkWidgetRef;
	private editable var m_image : inkImageRef;
	private var m_contactData : ContactData;
	private var m_nestedListData : VirutalNestedListData;
	private var m_type : MessengerContactType;
	private var m_activeItemSync : weak< MessengerContactSyncData >;
	private var m_isContactActive : Bool;
	private var m_isItemHovered : Bool;
	private var m_isItemToggled : Bool;

	protected event OnInitialize()
	{
		RegisterToCallback( 'OnToggledOn', this, 'OnToggledOn' );
		RegisterToCallback( 'OnToggledOff', this, 'OnToggledOff' );
		RegisterToCallback( 'OnSelected', this, 'OnSelected' );
		RegisterToCallback( 'OnDeselected', this, 'OnDeselected' );
	}

	public function OnDataChanged( value : Variant )
	{
		m_nestedListData = ( ( VirutalNestedListData )( ( ( IScriptable )value ) ) );
		m_contactData = ( ( ContactData )( m_nestedListData.m_data ) );
		m_activeItemSync = m_contactData.activeDataSync;
		if( m_nestedListData.m_collapsable )
		{
			m_type = MessengerContactType.Group;
		}
		else if( m_nestedListData.m_widgetType == ( ( Uint32 )( 1 ) ) )
		{
			m_type = MessengerContactType.Thread;
		}
		else
		{
			m_type = MessengerContactType.Contact;
		}
		if( m_contactData.unreadMessages.Size() > 0 )
		{
			inkTextRef.SetVisible( m_msgCounter, true );
			inkTextRef.SetText( m_msgCounter, ( ( String )( m_contactData.unreadMessages.Size() ) ) );
		}
		else
		{
			inkTextRef.SetVisible( m_msgCounter, false );
		}
		if( m_contactData.playerIsLastSender )
		{
			inkTextRef.SetText( m_msgPreview, GetLocalizedTextByKey( 'UI-Phone-LabelYou' ) + m_contactData.lastMesssagePreview );
		}
		else
		{
			inkTextRef.SetText( m_msgPreview, m_contactData.lastMesssagePreview );
		}
		inkWidgetRef.SetVisible( m_replyAlertIcon, m_contactData.playerCanReply && m_type != MessengerContactType.Group );
		inkTextRef.SetText( m_label, m_contactData.localizedName );
		if( TDBID.IsValid( m_contactData.avatarID ) )
		{
			inkImageRef.SetVisible( m_image, true );
			InkImageUtils.RequestSetImage( this, m_image, m_contactData.avatarID );
		}
		if( inkWidgetRef.IsValid( m_collapseIcon ) )
		{
			inkWidgetRef.SetVisible( m_collapseIcon, m_nestedListData.m_collapsable );
		}
		UpdateState();
	}

	protected event OnContactSyncData( evt : MessengerContactSyncBackEvent )
	{
		UpdateState();
	}

	protected event OnMessengerThreadSelectedEvent( evt : MessengerThreadSelectedEvent )
	{
		m_contactData.unreadMessages.Remove( ( ( Int32 )( evt.m_hash ) ) );
		if( m_contactData.unreadMessages.Size() > 0 )
		{
			inkTextRef.SetVisible( m_msgCounter, true );
			inkTextRef.SetText( m_msgCounter, ( ( String )( m_contactData.unreadMessages.Size() ) ) );
		}
		else
		{
			inkTextRef.SetVisible( m_msgCounter, false );
		}
	}

	protected event OnToggledOn( itemController : weak< inkVirtualCompoundItemController > )
	{
		var evt : MessengerContactSelectedEvent;
		evt = new MessengerContactSelectedEvent;
		evt.m_entryHash = m_contactData.hash;
		evt.m_level = m_nestedListData.m_level;
		evt.m_type = m_type;
		QueueEvent( evt );
		m_isItemToggled = true;
	}

	protected event OnToggledOff( itemController : weak< inkVirtualCompoundItemController > )
	{
		m_isItemToggled = false;
		UpdateState();
	}

	protected event OnSelected( itemController : weak< inkVirtualCompoundItemController >, discreteNav : Bool )
	{
		m_isItemHovered = true;
		UpdateState();
		if( discreteNav )
		{
			SetCursorOverWidget( GetRootWidget() );
		}
	}

	protected event OnDeselected( itemController : weak< inkVirtualCompoundItemController > )
	{
		m_isItemHovered = false;
		UpdateState();
	}

	private function UpdateState()
	{
		if( m_activeItemSync.m_entryHash == m_contactData.hash )
		{
			GetRootWidget().SetState( 'Active' );
		}
		else if( ( m_activeItemSync.m_level == m_nestedListData.m_level ) && m_type == MessengerContactType.Group )
		{
			GetRootWidget().SetState( 'SubActive' );
		}
		else if( m_isItemHovered )
		{
			GetRootWidget().SetState( 'Hover' );
		}
		else
		{
			GetRootWidget().SetState( 'Default' );
		}
	}

}

