class DelayedJournalUpdate extends Event
{
	var m_newMessageSpawned : Bool;
}

class MessageThreadReadEvent extends Event
{
	var m_parentHash : Int32;
}

class MessengerDialogViewController extends inkLogicController
{
	private editable var m_messagesList : inkCompoundRef;
	private editable var m_choicesList : inkCompoundRef;
	private editable var m_replayFluff : inkCompoundRef;
	private var m_messagesListController : weak< JournalEntriesListController >;
	private var m_choicesListController : weak< JournalEntriesListController >;
	private var m_scrollController : weak< inkScrollController >;
	private var m_journalManager : weak< JournalManager >;
	private var m_replyOptions : array< weak< JournalEntry > >;
	private var m_messages : array< weak< JournalEntry > >;
	private var m_parentEntry : weak< JournalEntry >;
	private var m_singleThreadMode : Bool;
	private var m_newMessageAninmProxy : inkAnimProxy;

	protected event OnInitialize()
	{
		m_messagesListController = ( ( JournalEntriesListController )( inkCompoundRef.GetController( m_messagesList ) ) );
		m_choicesListController = ( ( JournalEntriesListController )( inkCompoundRef.GetController( m_choicesList ) ) );
		m_scrollController = ( ( inkScrollController )( GetRootWidget().GetControllerByType( 'inkScrollController' ) ) );
		m_choicesListController.RegisterToCallback( 'OnItemActivated', this, 'OnPlayerReplyActivated' );
	}

	protected event OnUninitialize()
	{
		DetachJournalManager();
	}

	public function AttachJournalManager( journalManager : weak< JournalManager > )
	{
		m_journalManager = journalManager;
		m_journalManager.RegisterScriptCallback( this, 'OnJournalUpdate', gameJournalListenerType.State );
	}

	public function DetachJournalManager()
	{
		if( m_journalManager )
		{
			m_journalManager.UnregisterScriptCallback( this, 'OnJournalUpdate' );
			m_journalManager = NULL;
		}
	}

	public function ShowDialog( contact : weak< JournalEntry > )
	{
		m_singleThreadMode = false;
		m_parentEntry = contact;
		m_replyOptions.Clear();
		m_messages.Clear();
		UpdateData();
	}

	public function ShowThread( thread : weak< JournalEntry > )
	{
		m_singleThreadMode = true;
		m_parentEntry = thread;
		m_replyOptions.Clear();
		m_messages.Clear();
		UpdateData();
	}

	public function UpdateData( optional animateLastMessage : Bool )
	{
		var countMessages : Int32;
		var lastMessageWidget : weak< inkWidget >;
		if( m_singleThreadMode )
		{
			m_journalManager.GetMessagesAndChoices( m_parentEntry, m_messages, m_replyOptions );
		}
		else
		{
			m_journalManager.GetFlattenedMessagesAndChoices( m_parentEntry, m_messages, m_replyOptions );
		}
		inkCompoundRef.SetVisible( m_replayFluff, m_replyOptions.Size() > 0 );
		SetVisited( m_messages );
		m_messagesListController.Clear();
		m_messagesListController.PushEntries( m_messages );
		m_choicesListController.Clear();
		m_choicesListController.PushEntries( m_replyOptions );
		if( m_replyOptions.Size() > 0 )
		{
			m_choicesListController.SetSelectedIndex( 0 );
		}
		if( m_newMessageAninmProxy )
		{
			m_newMessageAninmProxy.Stop();
			m_newMessageAninmProxy = NULL;
		}
		countMessages = m_messagesListController.Size();
		if( animateLastMessage && ( countMessages > 0 ) )
		{
			lastMessageWidget = m_messagesListController.GetItemAt( countMessages - 1 );
			if( lastMessageWidget )
			{
				m_newMessageAninmProxy = PlayLibraryAnimationOnAutoSelectedTargets( 'new_message', lastMessageWidget );
			}
		}
		m_scrollController.SetScrollPosition( 1.0 );
	}

	protected event OnJournalUpdate( entryHash : Uint32, className : CName, notifyOption : JournalNotifyOption, changeType : JournalChangeType )
	{
		var updateEvent : DelayedJournalUpdate;
		if( ( className == 'gameJournalPhoneMessage' || className == 'gameJournalPhoneChoiceGroup' ) || className == 'gameJournalPhoneChoiceEntry' )
		{
			updateEvent = new DelayedJournalUpdate;
			updateEvent.m_newMessageSpawned = className == 'gameJournalPhoneMessage' || className == 'gameJournalPhoneChoiceEntry';
			QueueEvent( updateEvent );
		}
	}

	protected event OnDelayedJournalUpdate( evt : DelayedJournalUpdate )
	{
		UpdateData( evt.m_newMessageSpawned );
	}

	protected event OnPlayerReplyActivated( index : Int32, target : ListItemController )
	{
		ActivateReply( target );
	}

	public function ActivateSelectedReplyOption()
	{
		var itemWidget : weak< inkWidget >;
		var target : weak< ListItemController >;
		if( m_choicesListController.Size() > 0 )
		{
			itemWidget = m_choicesListController.GetItemAt( m_choicesListController.GetSelectedIndex() );
			target = ( ( ListItemController )( itemWidget.GetController() ) );
			ActivateReply( target );
		}
	}

	public function NavigateReplyOptions( isUp : Bool )
	{
		if( m_choicesListController.Size() > 0 )
		{
			if( isUp )
			{
				m_choicesListController.Prior();
			}
			else
			{
				m_choicesListController.Next();
			}
		}
	}

	public function HasReplyOptions() : Bool
	{
		return m_replyOptions.Size() > 0;
	}

	private function ActivateReply( target : ListItemController )
	{
		var data : JournalEntryListItemData;
		var i, count : Int32;
		data = ( ( JournalEntryListItemData )( target.GetData() ) );
		count = m_replyOptions.Size();
		inkCompoundRef.SetVisible( m_replayFluff, count > 0 );
		for( i = 0; i < count; i += 1 )
		{
			if( m_replyOptions[ i ].GetId() != data.m_entry.GetId() )
			{
				m_journalManager.SetEntryVisited( m_replyOptions[ i ], true );
				m_journalManager.ChangeEntryStateByHash( ( ( Uint32 )( m_journalManager.GetEntryHash( m_replyOptions[ i ] ) ) ), gameJournalEntryState.Inactive, JournalNotifyOption.Notify );
			}
		}
		m_journalManager.SetEntryVisited( data.m_entry, true );
		m_journalManager.ChangeEntryStateByHash( ( ( Uint32 )( m_journalManager.GetEntryHash( data.m_entry ) ) ), gameJournalEntryState.Succeeded, JournalNotifyOption.Notify );
	}

	private function SetVisited( records : array< weak< JournalEntry > > )
	{
		var threadReadEvent : MessageThreadReadEvent;
		var entry : weak< JournalEntry >;
		var needEvent : Bool;
		var i, count : Int32;
		count = records.Size();
		for( i = 0; i < count; i += 1 )
		{
			entry = records[ i ];
			if( !( m_journalManager.IsEntryVisited( entry ) ) )
			{
				m_journalManager.SetEntryVisited( entry, true );
				needEvent = true;
			}
		}
		if( needEvent )
		{
			threadReadEvent = new MessageThreadReadEvent;
			threadReadEvent.m_parentHash = m_journalManager.GetEntryHash( m_parentEntry );
			QueueEvent( threadReadEvent );
		}
	}

}

