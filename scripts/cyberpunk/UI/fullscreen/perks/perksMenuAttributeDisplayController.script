class PerksMenuAttributeDisplayController extends BaseButtonView
{
	protected editable var m_widgetWrapper : inkWidgetRef;
	protected editable var m_foregroundWrapper : inkWidgetRef;
	protected editable var m_attributeName : inkTextRef;
	protected editable var m_attributeIcon : inkImageRef;
	protected editable var m_attributeLevel : inkTextRef;
	protected editable var m_frameHovered : inkWidgetRef;
	protected editable var m_accent1Hovered : inkWidgetRef;
	protected editable var m_accent1BGHovered : inkWidgetRef;
	protected editable var m_accent2Hovered : inkWidgetRef;
	protected editable var m_accent2BGHovered : inkWidgetRef;
	protected editable var m_topConnectionContainer : inkWidgetRef;
	protected editable var m_bottomConnectionContainer : inkWidgetRef;
	protected var m_dataManager : PlayerDevelopmentDataManager;
	protected var m_attribute : PerkMenuAttribute;
	protected var m_attributeData : AttributeData;

	protected event OnInitialize()
	{
		ResetHoverOpacity();
		super.OnInitialize();
	}

	public function Setup( attribute : PerkMenuAttribute, dataManager : PlayerDevelopmentDataManager )
	{
		m_dataManager = dataManager;
		m_attribute = attribute;
		m_attributeData = dataManager.GetAttribute( m_dataManager.GetAttributeRecordIDFromEnum( attribute ) );
		ResetHoverOpacity();
		Update();
	}

	public function UpdateData( attributeData : AttributeData )
	{
		m_attributeData = attributeData;
		Update();
	}

	public function GetStatType() : gamedataStatType
	{
		return m_attributeData.type;
	}

	public function SetHovered( value : Bool )
	{
		PlayHoverAnimation( value );
		inkWidgetRef.SetState( m_widgetWrapper, ( ( value ) ? ( 'Hovered' ) : ( 'Default' ) ) );
		if( m_attribute == PerkMenuAttribute.Johnny )
		{
			inkWidgetRef.Get( m_widgetWrapper ).SetEffectEnabled( inkEffectType.Glitch, 'Glitch_0', value );
		}
	}

	public function GetAttributeData() : AttributeData
	{
		return m_attributeData;
	}

	protected function Update()
	{
		UpdateConnections();
		if( m_attribute == PerkMenuAttribute.Johnny )
		{
			return;
		}
		UpdateIcon();
		UpdateName();
		UpdateLevel();
	}

	protected function UpdateIcon()
	{
		inkImageRef.SetTexturePart( m_attributeIcon, GetIconAtlasPart( m_attribute ) );
	}

	protected function UpdateName()
	{
		inkTextRef.SetText( m_attributeName, m_attributeData.label );
	}

	protected function UpdateLevel()
	{
		inkTextRef.SetText( m_attributeLevel, IntToString( m_attributeData.value ) );
	}

	protected function UpdateConnections()
	{
		inkWidgetRef.SetState( m_topConnectionContainer, GetTopConnectionState( m_attribute ) );
		inkWidgetRef.SetState( m_bottomConnectionContainer, GetBottomConnectionState( m_attribute ) );
	}

	protected function GetTopConnectionState( attribute : PerkMenuAttribute ) : CName
	{
		switch( attribute )
		{
			case PerkMenuAttribute.Body:
			case PerkMenuAttribute.Reflex:
			case PerkMenuAttribute.Technical_Ability:
				return 'Text';
			case PerkMenuAttribute.Cool:
			case PerkMenuAttribute.Intelligence:
			case PerkMenuAttribute.Johnny:
				return 'Image';
		}
		return 'Default';
	}

	protected function GetBottomConnectionState( attribute : PerkMenuAttribute ) : CName
	{
		switch( attribute )
		{
			case PerkMenuAttribute.Body:
			case PerkMenuAttribute.Reflex:
			case PerkMenuAttribute.Technical_Ability:
				return 'Image';
			case PerkMenuAttribute.Cool:
			case PerkMenuAttribute.Intelligence:
			case PerkMenuAttribute.Johnny:
				return 'Text';
		}
		return 'Default';
	}

	protected function GetName( attribute : PerkMenuAttribute ) : String
	{
		switch( attribute )
		{
			case PerkMenuAttribute.Body:
				return "Body";
			case PerkMenuAttribute.Reflex:
				return "Reflex";
			case PerkMenuAttribute.Technical_Ability:
				return "Technical Ability";
			case PerkMenuAttribute.Cool:
				return "Cool";
			case PerkMenuAttribute.Intelligence:
				return "Intelligence";
		}
		return "";
	}

	protected function GetIconAtlasPart( attribute : PerkMenuAttribute ) : CName
	{
		switch( attribute )
		{
			case PerkMenuAttribute.Body:
				return 'ico_body';
			case PerkMenuAttribute.Reflex:
				return 'ico_ref';
			case PerkMenuAttribute.Technical_Ability:
				return 'ico_tech';
			case PerkMenuAttribute.Cool:
				return 'ico_cool';
			case PerkMenuAttribute.Intelligence:
				return 'ico_int';
		}
		return 'undiscovered';
	}

	protected function PlayHoverAnimation( value : Bool )
	{
		var transparencyAnimation : inkAnimDef;
		var transparencyInterpolator : inkAnimTransparency;
		var transparencyAnimation2 : inkAnimDef;
		var transparencyInterpolator2 : inkAnimTransparency;
		transparencyAnimation = new inkAnimDef;
		transparencyAnimation2 = new inkAnimDef;
		transparencyInterpolator = new inkAnimTransparency;
		transparencyInterpolator.SetDuration( 0.34999999 );
		transparencyInterpolator.SetDirection( inkanimInterpolationDirection.To );
		transparencyInterpolator.SetType( inkanimInterpolationType.Linear );
		transparencyInterpolator.SetMode( inkanimInterpolationMode.EasyIn );
		transparencyInterpolator.SetEndTransparency( ( ( value ) ? ( 1.0 ) : ( 0.002 ) ) );
		transparencyInterpolator2 = new inkAnimTransparency;
		transparencyInterpolator2.SetDuration( 0.34999999 );
		transparencyInterpolator2.SetDirection( inkanimInterpolationDirection.To );
		transparencyInterpolator2.SetType( inkanimInterpolationType.Linear );
		transparencyInterpolator2.SetMode( inkanimInterpolationMode.EasyIn );
		transparencyInterpolator2.SetEndTransparency( ( ( value ) ? ( 0.133 ) : ( 0.002 ) ) );
		transparencyAnimation.AddInterpolator( transparencyInterpolator );
		transparencyAnimation2.AddInterpolator( transparencyInterpolator2 );
		inkWidgetRef.PlayAnimation( m_frameHovered, transparencyAnimation );
		inkWidgetRef.PlayAnimation( m_accent1Hovered, transparencyAnimation );
		inkWidgetRef.PlayAnimation( m_accent2Hovered, transparencyAnimation );
		inkWidgetRef.PlayAnimation( m_accent1BGHovered, transparencyAnimation2 );
		inkWidgetRef.PlayAnimation( m_accent2BGHovered, transparencyAnimation2 );
	}

	public function PlayAnimation( animation : CName ) : inkAnimProxy
	{
		return PlayLibraryAnimation( animation );
	}

	private function ResetHoverOpacity()
	{
		inkWidgetRef.SetOpacity( m_frameHovered, 0.0 );
		inkWidgetRef.SetOpacity( m_accent1Hovered, 0.0 );
		inkWidgetRef.SetOpacity( m_accent2Hovered, 0.0 );
		inkWidgetRef.SetOpacity( m_accent1BGHovered, 0.0 );
		inkWidgetRef.SetOpacity( m_accent2BGHovered, 0.0 );
	}

}

