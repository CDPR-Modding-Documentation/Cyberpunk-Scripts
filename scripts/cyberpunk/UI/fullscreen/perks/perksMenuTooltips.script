class BasePerksMenuTooltipData extends ATooltipData
{
	var manager : PlayerDevelopmentDataManager;

	public virtual function RefreshRuntimeData() {}
}

class AttributeTooltipData extends BasePerksMenuTooltipData
{
	var attributeId : TweakDBID;
	var attributeType : PerkMenuAttribute;
	var attributeData : AttributeData;
	var displayData : AttributeDisplayData;

	public override function RefreshRuntimeData()
	{
		attributeData = manager.GetAttribute( attributeId );
		displayData = manager.GetAttributeData( attributeId );
	}

}

class SkillTooltipData extends BasePerksMenuTooltipData
{
	var proficiencyType : gamedataProficiencyType;
	var attributeRecord : Attribute_Record;
	var skillData : ProficiencyDisplayData;

	public override function RefreshRuntimeData()
	{
		skillData = manager.GetProficiencyDisplayData( proficiencyType, attributeRecord );
	}

}

class PerkTooltipData extends BasePerksMenuTooltipData
{
	var perkType : gamedataPerkType;
	var perkArea : gamedataPerkArea;
	var attributeId : TweakDBID;
	var proficiency : gamedataProficiencyType;
	var perkData : PerkDisplayData;
	var attributeData : AttributeData;

	public override function RefreshRuntimeData()
	{
		attributeData = manager.GetAttribute( attributeId );
		perkData = manager.GetPerkDisplayData( perkType, perkArea, proficiency, attributeId );
	}

}

class TraitTooltipData extends BasePerksMenuTooltipData
{
	var traitType : gamedataTraitType;
	var attributeId : TweakDBID;
	var proficiency : gamedataProficiencyType;
	var traitData : TraitDisplayData;
	var attributeData : AttributeData;

	public override function RefreshRuntimeData()
	{
		attributeData = manager.GetAttribute( attributeId );
		traitData = manager.GetTraitDisplayData( traitType, attributeId, proficiency );
	}

}

class PerkDisplayTooltipController extends AGenericTooltipController
{
	private editable var m_root : inkWidgetRef;
	private editable var m_perkNameText : inkTextRef;
	private editable var m_videoWrapper : inkWidgetRef;
	private editable var m_videoWidget : inkVideoRef;
	private editable var m_unlockStateText : inkTextRef;
	private editable var m_perkTypeText : inkTextRef;
	private editable var m_perkTypeWrapper : inkWidgetRef;
	private editable var m_unlockInfoWrapper : inkWidgetRef;
	private editable var m_unlockPointsText : inkTextRef;
	private editable var m_unlockPointsDesc : inkTextRef;
	private editable var m_unlockPerkWrapper : inkWidgetRef;
	private editable var m_levelText : inkTextRef;
	private editable var m_levelDescriptionText : inkTextRef;
	private editable var m_nextLevelWrapper : inkWidgetRef;
	private editable var m_nextLevelText : inkTextRef;
	private editable var m_nextLevelDescriptionText : inkTextRef;
	private editable var m_traitLevelGrowthText : inkTextRef;
	private editable var m_unlockTraitPointsText : inkTextRef;
	private editable var m_unlockTraitWrapper : inkWidgetRef;
	private editable var m_holdToUpgradeHint : inkWidgetRef;
	private var m_data : BasePerksMenuTooltipData;

	public override function Refresh()
	{
		SetData( m_data );
	}

	public override function SetData( tooltipData : ATooltipData )
	{
		m_data = ( ( BasePerksMenuTooltipData )( tooltipData ) );
		if( m_data == NULL )
		{
			return;
		}
		m_data.RefreshRuntimeData();
		if( tooltipData.IsA( 'PerkTooltipData' ) )
		{
			RefreshTooltip( ( ( PerkTooltipData )( m_data ) ) );
		}
		else if( tooltipData.IsA( 'TraitTooltipData' ) )
		{
			RefreshTooltip( ( ( TraitTooltipData )( m_data ) ) );
		}
	}

	private function GetUiLocalizationData( levelDataRecord : weak< PerkLevelData_Record > ) : UILocalizationDataPackage
	{
		return UILocalizationDataPackage.FromPerkUIDataPackage( levelDataRecord.UiData() );
	}

	private function GetLevelDescription( perkData : PerkDisplayData, levelDataRecord : weak< PerkLevelData_Record > ) : String
	{
		var perkModifiers : array< weak< StatModifier_Record > >;
		var perkStat : weak< Stat_Record >;
		var constPerkModifier : weak< ConstantStatModifier_Record >;
		var resultString, stringToReplace : String;
		var statValue : Float;
		var i : Int32;
		perkModifiers.Clear();
		levelDataRecord.DataPackage().Stats( perkModifiers );
		resultString = perkData.m_localizedDescription;
		for( i = 0; i < perkModifiers.Size(); i += 1 )
		{
			perkStat = perkModifiers[ i ].StatType();
			constPerkModifier = ( ( ConstantStatModifier_Record )( perkModifiers[ i ] ) );
			stringToReplace = ( "<BaseStats." + EnumValueToString( "gamedataStatType", ( ( Int64 )( perkStat.StatType() ) ) ) ) + ">";
			statValue = constPerkModifier.Value();
			resultString = StrReplaceAll( resultString, stringToReplace, IntToString( RoundF( statValue ) ) );
		}
		return resultString;
	}

	private function RefreshTooltip( data : PerkTooltipData )
	{
		var playerDevelopmentData : weak< PlayerDevelopmentData >;
		var perkRecord : weak< Perk_Record >;
		var perkPackages : array< weak< PerkLevelData_Record > >;
		playerDevelopmentData = m_data.manager.GetPlayerDevelopmentData();
		perkRecord = playerDevelopmentData.GetPerkRecord( data.perkData.m_type );
		perkRecord.Levels( perkPackages );
		UpdateState( data.perkData );
		UpdatePerkDescriptions( data, perkPackages );
		UpdateVideo( data );
		UpdateName( data.perkData );
		UpdateType( perkRecord );
		UpdateTooltipHints( data, data.perkData );
		UpdateRequirements( playerDevelopmentData, data );
	}

	private function RefreshTooltip( data : TraitTooltipData )
	{
		var playerDevelopmentData : weak< PlayerDevelopmentData >;
		playerDevelopmentData = m_data.manager.GetPlayerDevelopmentData();
		UpdateState( data.traitData );
		UpdateTraitDescriptions( data );
		UpdateVideo( data );
		UpdateName( data.traitData );
		UpdateType();
		UpdateTooltipHints( data, data.traitData );
		UpdateRequirements( playerDevelopmentData, data );
	}

	private function UpdateType( optional perkRecord : weak< Perk_Record > )
	{
		var perkUtility : weak< PerkUtility_Record >;
		if( perkRecord )
		{
			perkUtility = perkRecord.Utility();
			if( perkUtility )
			{
				inkTextRef.SetText( m_perkTypeText, PlayerDevelopmentDataManager.PerkUtilityToString( perkUtility.UtilityType() ) );
				inkWidgetRef.SetVisible( m_perkTypeWrapper, true );
				return;
			}
		}
		inkWidgetRef.SetVisible( m_perkTypeWrapper, false );
	}

	private function UpdateState( basePerkData : BasePerkDisplayData )
	{
		if( basePerkData.m_locked )
		{
			inkTextRef.SetText( m_unlockStateText, GetLocalizedText( "UI-Cyberpunk-Fullscreen-PlayerDevelopment-Perks-Locked" ) );
			inkWidgetRef.SetState( m_root, 'Locked' );
		}
		else
		{
			if( basePerkData.m_level == 0 )
			{
				inkTextRef.SetText( m_unlockStateText, GetLocalizedText( "UI-Cyberpunk-Fullscreen-PlayerDevelopment-Perks-NotPurchased" ) );
				inkWidgetRef.SetState( m_root, 'NotPurchased' );
			}
			else if( basePerkData.m_level == basePerkData.m_maxLevel )
			{
				inkTextRef.SetText( m_unlockStateText, GetLocalizedText( "UI-Menus-Perks-MaxedOut" ) );
				inkWidgetRef.SetState( m_root, 'MaxedOut' );
			}
			else
			{
				inkTextRef.SetText( m_unlockStateText, GetLocalizedText( "UI-Menus-Perks-Purchased" ) );
				inkWidgetRef.SetState( m_root, 'Purchased' );
			}
		}
	}

	private function UpdatePerkDescriptions( data : PerkTooltipData, perkPackages : ref< array< weak< PerkLevelData_Record > > > )
	{
		var levelTextParams : inkTextParams;
		var levelLocalizationData : UILocalizationDataPackage;
		var levelPerkPackage : weak< PerkLevelData_Record >;
		var nextLevelTextParams : inkTextParams;
		var nextLevelLocalizationData : UILocalizationDataPackage;
		var nextLevelPerkPackage : weak< PerkLevelData_Record >;
		var currentLevel : Int32;
		currentLevel = Max( 0, data.perkData.m_level - 1 );
		levelTextParams = new inkTextParams;
		levelPerkPackage = perkPackages[ currentLevel ];
		if( ( data.perkData.m_locked || ( data.perkData.m_level == 0 ) ) || ( data.perkData.m_level == data.perkData.m_maxLevel ) )
		{
			inkTextRef.SetText( m_levelText, "UI-Tooltips-Perks-Level" );
			levelTextParams.AddNumber( "level", currentLevel + 1 );
		}
		else
		{
			inkTextRef.SetText( m_levelText, "UI-Tooltips-Perks-CurrentLevel" );
			levelTextParams.AddNumber( "level", currentLevel + 1 );
		}
		inkTextRef.SetTextParameters( m_levelText, levelTextParams );
		inkTextRef.SetText( m_levelDescriptionText, GetLevelDescription( data.perkData, levelPerkPackage ) );
		levelLocalizationData = GetUiLocalizationData( levelPerkPackage );
		if( levelLocalizationData.GetParamsCount() > 0 )
		{
			inkTextRef.SetTextParameters( m_levelDescriptionText, levelLocalizationData.GetTextParams() );
		}
		if( ( data.perkData.m_level > 0 ) && ( data.perkData.m_level < data.perkData.m_maxLevel ) )
		{
			nextLevelTextParams = new inkTextParams;
			nextLevelPerkPackage = perkPackages[ currentLevel + 1 ];
			inkWidgetRef.SetVisible( m_nextLevelWrapper, true );
			inkTextRef.SetText( m_nextLevelText, "UI-Tooltips-Perks-NextLevel" );
			nextLevelTextParams.AddNumber( "level", data.perkData.m_level + 1 );
			inkTextRef.SetTextParameters( m_nextLevelText, nextLevelTextParams );
			inkTextRef.SetText( m_nextLevelDescriptionText, GetLevelDescription( data.perkData, nextLevelPerkPackage ) );
			nextLevelLocalizationData = GetUiLocalizationData( nextLevelPerkPackage );
			if( nextLevelLocalizationData.GetParamsCount() > 0 )
			{
				inkTextRef.SetTextParameters( m_nextLevelDescriptionText, nextLevelLocalizationData.GetTextParams() );
			}
		}
		else
		{
			inkWidgetRef.SetVisible( m_nextLevelWrapper, false );
		}
		inkTextRef.SetVisible( m_traitLevelGrowthText, false );
	}

	private function UpdateTraitDescriptions( data : TraitTooltipData )
	{
		var levelTextParams : inkTextParams;
		var traitRecord : weak< Trait_Record >;
		var uiLocalizationData, uiLocalizationInfiniteData : UILocalizationDataPackage;
		inkWidgetRef.SetVisible( m_nextLevelWrapper, false );
		levelTextParams = new inkTextParams;
		traitRecord = RPGManager.GetTraitRecord( data.traitData.m_type );
		inkTextRef.SetText( m_levelText, ( GetLocalizedText( "UI-Statistic-Level" ) + ": " ) + NameToString( '<Rich size="45" style="Bold">{level,number}</>' ) );
		levelTextParams.AddNumber( "level", data.traitData.m_level + 1 );
		inkTextRef.SetTextParameters( m_levelText, levelTextParams );
		inkTextRef.SetText( m_levelDescriptionText, data.traitData.m_localizedDescription );
		inkTextRef.SetText( m_traitLevelGrowthText, GetLocalizedText( traitRecord.InfiniteTraitData().Loc_desc_key() ) );
		uiLocalizationData = UILocalizationDataPackage.FromLogicUIDataPackage( traitRecord.BaseTraitData().DataPackage().UIData() );
		uiLocalizationInfiniteData = UILocalizationDataPackage.FromLogicUIDataPackage( traitRecord.InfiniteTraitData().DataPackage().UIData() );
		if( uiLocalizationData.GetParamsCount() > 0 )
		{
			inkTextRef.SetTextParameters( m_levelDescriptionText, uiLocalizationData.GetTextParams() );
		}
		if( uiLocalizationInfiniteData.GetParamsCount() > 0 )
		{
			inkTextRef.SetTextParameters( m_traitLevelGrowthText, uiLocalizationInfiniteData.GetTextParams() );
		}
		inkTextRef.SetVisible( m_traitLevelGrowthText, true );
	}

	private function UpdateName( data : BasePerkDisplayData )
	{
		inkTextRef.SetText( m_perkNameText, data.m_localizedName );
	}

	private function UpdateVideo( data : PerkTooltipData )
	{
		data.RefreshRuntimeData();
		CommonUpdateVideo( data.perkData );
	}

	private function UpdateVideo( data : TraitTooltipData )
	{
		data.RefreshRuntimeData();
		CommonUpdateVideo( data.traitData );
	}

	private function CommonUpdateVideo( data : BasePerkDisplayData )
	{
		if( data && ResRef.IsValid( data.m_binkRef ) )
		{
			inkVideoRef.Stop( m_videoWidget );
			inkVideoRef.SetVideoPath( m_videoWidget, data.m_binkRef );
			inkVideoRef.SetLoop( m_videoWidget, true );
			inkVideoRef.Play( m_videoWidget );
			inkWidgetRef.SetVisible( m_videoWrapper, true );
		}
		else
		{
			inkWidgetRef.SetVisible( m_videoWrapper, false );
		}
	}

	private function UpdateTooltipHints( data : BasePerksMenuTooltipData, perkData : BasePerkDisplayData )
	{
		inkWidgetRef.SetVisible( m_holdToUpgradeHint, data.manager.IsPerkUpgradeable( perkData ) );
	}

	private function UpdateRequirements( playerDevelopmentData : weak< PlayerDevelopmentData >, data : PerkTooltipData )
	{
		var areaRecord : weak< PerkArea_Record >;
		var statCastPrereqRecord : weak< StatPrereq_Record >;
		areaRecord = playerDevelopmentData.GetPerkAreaRecord( data.perkData.m_area );
		statCastPrereqRecord = ( ( StatPrereq_Record )( areaRecord.Requirement() ) );
		inkWidgetRef.SetVisible( m_unlockInfoWrapper, data.perkData.m_locked );
		inkWidgetRef.SetVisible( m_unlockPerkWrapper, true );
		inkWidgetRef.SetVisible( m_unlockTraitWrapper, false );
		inkTextRef.SetText( m_unlockPointsText, IntToString( RoundF( statCastPrereqRecord.ValueToCheck() ) ) );
		inkTextRef.SetText( m_unlockPointsDesc, "UI-Tooltips-Perks-UnlockInfoText" );
	}

	private function UpdateRequirements( playerDevelopmentData : weak< PlayerDevelopmentData >, data : TraitTooltipData )
	{
		var unlockTraitTextParams : inkTextParams;
		var traitRecord : weak< Trait_Record >;
		var statPrereqRecord : weak< StatPrereq_Record >;
		var type : CName;
		var proficiencyType : gamedataProficiencyType;
		var profString : String;
		unlockTraitTextParams = new inkTextParams;
		traitRecord = RPGManager.GetTraitRecord( data.traitData.m_type );
		statPrereqRecord = ( ( StatPrereq_Record )( traitRecord.Requirement() ) );
		type = statPrereqRecord.StatType();
		proficiencyType = ( ( gamedataProficiencyType )( ( ( Int32 )( EnumValueFromName( 'gamedataProficiencyType', type ) ) ) ) );
		profString = RPGManager.GetProficiencyRecord( proficiencyType ).Loc_name_key();
		inkWidgetRef.SetVisible( m_unlockInfoWrapper, data.traitData.m_locked );
		inkWidgetRef.SetVisible( m_unlockPerkWrapper, false );
		inkWidgetRef.SetVisible( m_unlockTraitWrapper, true );
		unlockTraitTextParams.AddNumber( "points", ( ( Int32 )( statPrereqRecord.ValueToCheck() ) ) );
		unlockTraitTextParams.AddString( "attribute", GetLocalizedText( profString ) );
		inkTextRef.SetTextParameters( m_unlockTraitPointsText, unlockTraitTextParams );
	}

}

class PerkMenuTooltipController extends AGenericTooltipController
{
	protected editable var m_titleContainer : inkWidgetRef;
	protected editable var m_titleText : inkTextRef;
	protected editable var m_typeContainer : inkWidgetRef;
	protected editable var m_typeText : inkTextRef;
	protected editable var m_desc1Container : inkWidgetRef;
	protected editable var m_desc1Text : inkTextRef;
	protected editable var m_desc2Container : inkWidgetRef;
	protected editable var m_desc2Text : inkTextRef;
	protected editable var m_desc2TextNextLevel : inkTextRef;
	protected editable var m_desc2TextNextLevelDesc : inkTextRef;
	protected editable var m_holdToUpgrade : inkWidgetRef;
	protected editable var m_openPerkScreen : inkWidgetRef;
	protected editable var m_videoContainerWidget : inkWidgetRef;
	protected editable var m_videoWidget : inkVideoRef;
	private var m_data : BasePerksMenuTooltipData;
	const var m_maxProficiencyLevel : Int32;
	default m_maxProficiencyLevel = 20;

	public override function Refresh()
	{
		SetData( m_data );
	}

	public override function SetData( tooltipData : ATooltipData )
	{
		m_data = ( ( BasePerksMenuTooltipData )( tooltipData ) );
		if( m_data == NULL )
		{
			return;
		}
		m_data.RefreshRuntimeData();
		SetupShared( m_data );
		if( tooltipData.IsA( 'AttributeTooltipData' ) )
		{
			SetupCustom( ( ( AttributeTooltipData )( m_data ) ) );
		}
		else if( tooltipData.IsA( 'SkillTooltipData' ) )
		{
			SetupCustom( ( ( SkillTooltipData )( m_data ) ) );
		}
	}

	private function SetupShared( data : BasePerksMenuTooltipData )
	{
		SetTitle( "" );
		SetType( "" );
		SetDesc1( "" );
		SetDesc2( "" );
		inkTextRef.SetVisible( m_desc2TextNextLevel, false );
		inkTextRef.SetVisible( m_desc2TextNextLevelDesc, false );
		SetCanUpgrade( false );
		SetCanOpenPerks( false );
		PlayVideo( data );
	}

	private function PlayVideo( data : BasePerksMenuTooltipData )
	{
		var perkData : PerkTooltipData;
		perkData = ( ( PerkTooltipData )( data ) );
		perkData.RefreshRuntimeData();
		if( perkData && ResRef.IsValid( perkData.perkData.m_binkRef ) )
		{
			inkVideoRef.Stop( m_videoWidget );
			inkVideoRef.SetVideoPath( m_videoWidget, perkData.perkData.m_binkRef );
			inkVideoRef.SetLoop( m_videoWidget, true );
			inkVideoRef.Play( m_videoWidget );
			inkWidgetRef.SetVisible( m_videoContainerWidget, true );
		}
		else
		{
			inkWidgetRef.SetVisible( m_videoContainerWidget, false );
		}
	}

	private function SetupCustom( data : AttributeTooltipData )
	{
		var title : String;
		var desc1 : String;
		var desc2 : String;
		var levelStr : String;
		var skillsStr : String;
		var skillData : ProficiencyDisplayData;
		var i, total : Int32;
		var isUpgradable : Bool;
		var desc1Params : inkTextParams;
		switch( data.attributeType )
		{
			case PerkMenuAttribute.Johnny:
				title = "LocKey#1353";
			break;
			default:
				title = data.attributeData.label;
			desc1Params = new inkTextParams;
			desc1Params.AddNumber( "level", data.attributeData.value );
			desc1Params.AddNumber( "total", m_maxProficiencyLevel );
			levelStr += GetLocalizedText( "UI-Tooltips-LVL" );
			AppendLine( desc1, levelStr );
			if( data.attributeData.description != "" )
			{
				AppendLine( desc2, data.attributeData.description );
			}
			else
			{
				AppendLine( desc2, "MISSING DESCRIPTION" );
			}
			total = data.displayData.m_proficiencies.Size();
			for( i = 0; i < total; i += 1 )
			{
				skillData = data.displayData.m_proficiencies[ i ];
				skillsStr += skillData.m_localizedName;
				if( i != ( total - 1 ) )
				{
					skillsStr += ", ";
				}
			}
			AppendLine( desc2, skillsStr );
			break;
		}
		SetTitle( title );
		SetDesc1( desc1 );
		SetDesc2( desc2 );
		if( desc1Params )
		{
			inkTextRef.SetTextParameters( m_desc1Text, desc1Params );
		}
		isUpgradable = data.attributeData.availableToUpgrade && data.manager.HasAvailableAttributePoints();
		SetCanUpgrade( isUpgradable );
		SetCanOpenPerks( true );
	}

	private function SetupCustom( data : SkillTooltipData )
	{
		var desc1 : String;
		var desc2 : String;
		var desc1Params : inkTextParams;
		desc1Params = new inkTextParams;
		desc1Params.AddNumber( "level", data.skillData.m_level );
		desc1Params.AddNumber( "total", data.skillData.m_maxLevel );
		AppendLine( desc1, GetLocalizedText( "UI-Tooltips-LVL" ) );
		if( data.skillData.m_level != data.skillData.m_maxLevel )
		{
			desc1Params.AddNumber( "exp", data.skillData.m_expPoints );
			desc1Params.AddNumber( "maxExp", data.skillData.m_maxExpPoints );
			AppendLine( desc1, GetLocalizedText( "UI-Tooltips-EXP" ) );
		}
		AppendLine( desc2, data.skillData.m_localizedDescription );
		SetTitle( data.skillData.m_localizedName );
		SetDesc1( desc1 );
		SetDesc2( desc2 );
		if( desc1Params )
		{
			inkTextRef.SetTextParameters( m_desc1Text, desc1Params );
		}
	}

	private function SetTitle( value : String )
	{
		inkWidgetRef.SetVisible( m_titleContainer, value != "" );
		inkTextRef.SetText( m_titleText, value );
	}

	private function SetType( value : String )
	{
		inkWidgetRef.SetVisible( m_typeContainer, value != "" );
		inkTextRef.SetText( m_typeText, value );
	}

	private function SetDesc1( value : String )
	{
		inkWidgetRef.SetVisible( m_desc1Container, value != "" );
		inkTextRef.SetText( m_desc1Text, value );
	}

	private function SetDesc2( value : String )
	{
		inkWidgetRef.SetVisible( m_desc2Container, value != "" );
		inkTextRef.SetText( m_desc2Text, value );
	}

	private function SetCanUpgrade( value : Bool )
	{
		inkWidgetRef.SetVisible( m_holdToUpgrade, value );
	}

	private function SetCanOpenPerks( value : Bool )
	{
		if( inkWidgetRef.IsValid( m_openPerkScreen ) )
		{
			inkWidgetRef.SetVisible( m_openPerkScreen, value );
		}
	}

	private function AppendLine( out outString : String, line : String )
	{
		if( line != "" )
		{
			outString += line;
			AppendNewLine( outString );
		}
	}

	private function AppendNewLine( out outString : String )
	{
		outString += " \n";
	}

}

