class MenuDataBuilder
{
	var m_data : array< MenuData >;

	public static function Make() : MenuDataBuilder
	{
		var instance : MenuDataBuilder;
		instance = new MenuDataBuilder;
		return instance;
	}

	public function AddIf( condition : Bool, identifier : Int32, fullscreenName : CName, icon : CName, labelKey : CName, optional userData : IScriptable ) : MenuDataBuilder
	{
		if( condition )
		{
			return Add( identifier, fullscreenName, icon, labelKey, userData );
		}
		return this;
	}

	public function Add( identifier : Int32, fullscreenName : CName, icon : CName, labelKey : CName, optional userData : IScriptable ) : MenuDataBuilder
	{
		var data : MenuData;
		data.label = GetLocalizedTextByKey( labelKey );
		data.icon = icon;
		data.fullscreenName = fullscreenName;
		data.identifier = identifier;
		data.userData = userData;
		m_data.PushBack( data );
		return this;
	}

	public function Add( identifier : HubMenuItems, parentIdentifier : HubMenuItems, fullscreenName : CName, icon : CName, labelKey : CName, optional userData : IScriptable, optional disabled : Bool ) : MenuDataBuilder
	{
		var data : MenuData;
		data.label = GetLocalizedTextByKey( labelKey );
		data.icon = icon;
		data.fullscreenName = fullscreenName;
		data.identifier = ( ( Int32 )( identifier ) );
		data.parentIdentifier = ( ( Int32 )( parentIdentifier ) );
		data.userData = userData;
		data.disabled = disabled;
		m_data.PushBack( data );
		return this;
	}

	public function AddWithSubmenu( identifier : Int32, fullscreenName : CName, icon : CName, labelKey : CName, optional userData : IScriptable, optional disabled : Bool ) : SubmenuDataBuilder
	{
		var data : MenuData;
		data.label = GetLocalizedTextByKey( labelKey );
		data.icon = icon;
		data.fullscreenName = fullscreenName;
		data.identifier = identifier;
		data.userData = userData;
		data.disabled = disabled;
		m_data.PushBack( data );
		return SubmenuDataBuilder.Make( this, m_data.Size() - 1 );
	}

	public function Get() : array< MenuData >
	{
		return m_data;
	}

	public function GetMainMenus() : array< MenuData >
	{
		var i, count : Int32;
		var res : array< MenuData >;
		var currentData : MenuData;
		count = m_data.Size();
		for( i = 0; i < count; i = i + 1 )
		{
			currentData = m_data[ i ];
			if( currentData.parentIdentifier == ( ( Int32 )( HubMenuItems.None ) ) )
			{
				res.PushBack( currentData );
			}
		}
		return res;
	}

	public function GetData( identifier : Int32 ) : MenuData
	{
		var i, count : Int32;
		var res : MenuData;
		count = m_data.Size();
		for( i = 0; i < count; i = i + 1 )
		{
			res = m_data[ i ];
			if( res.identifier == identifier )
			{
				return res;
			}
		}
		res.identifier = ( ( Int32 )( HubMenuItems.None ) );
		return res;
	}

	public function GetData( fullscreenName : CName ) : MenuData
	{
		var i, count : Int32;
		var res : MenuData;
		count = m_data.Size();
		for( i = 0; i < count; i = i + 1 )
		{
			res = m_data[ i ];
			if( res.fullscreenName == fullscreenName )
			{
				return res;
			}
		}
		res.identifier = ( ( Int32 )( HubMenuItems.None ) );
		return res;
	}

}

class SubmenuDataBuilder
{
	private var m_menuBuilder : MenuDataBuilder;
	private var m_menuDataIndex : Int32;

	public static function Make( menuBuilder : MenuDataBuilder, menuDataIndex : Int32 ) : SubmenuDataBuilder
	{
		var instance : SubmenuDataBuilder;
		instance = new SubmenuDataBuilder;
		instance.m_menuDataIndex = menuDataIndex;
		instance.m_menuBuilder = menuBuilder;
		return instance;
	}

	public function AddSubmenu( identifier : Int32, fullscreenName : CName, labelKey : CName, optional userData : IScriptable ) : SubmenuDataBuilder
	{
		var data : MenuData;
		data.label = GetLocalizedTextByKey( labelKey );
		data.fullscreenName = fullscreenName;
		data.identifier = identifier;
		data.userData = userData;
		m_menuBuilder.m_data[ m_menuDataIndex ].subMenus.PushBack( data );
		return this;
	}

	public function AddSubmenuIf( condition : Bool, identifier : Int32, fullscreenName : CName, labelKey : CName, optional userData : IScriptable ) : SubmenuDataBuilder
	{
		if( condition )
		{
			return AddSubmenu( identifier, fullscreenName, labelKey, userData );
		}
		return this;
	}

	public function GetMenuBuilder() : MenuDataBuilder
	{
		return m_menuBuilder;
	}

}

struct MenuData
{
	var identifier : Int32;
	default identifier = -1;
	var label : String;
	var icon : CName;
	var subMenus : array< MenuData >;
	var eventName : CName;
	var fullscreenName : CName;
	var userData : IScriptable;
	var disabled : Bool;
	var parentIdentifier : Int32;
	var attrFlag : Bool;
	var attrText : Int32;
	var perkFlag : Bool;
	var perkText : Int32;
	var m_overrideDefaultUserData : Bool;
	var m_overrideSubMenuUserData : Bool;
}

enum HubMenuItems
{
	None = -1,
	Default = 0,
	Crafting = 1,
	Character = 2,
	Inventory = 3,
	Map = 4,
	Journal = 5,
	Phone = 6,
	Database = 7,
	Stats = 8,
	Backpack = 9,
	HubMenuItems = 10,
	Codex = 11,
	Shards = 12,
	Tarot = 13,
	Gear = 14,
	Cyberware = 15,
	VisualSets = 16,
	Count = 17,
}

enum HubMenuCraftingItems
{
	Crafting = 0,
	Upgrade = 1,
}

enum HubMenuInventoryItems
{
	Gear = 0,
	Cyberware = 1,
	Backpack = 2,
}

enum HubMenuCharacterItems
{
	Skills = 0,
	Stats = 1,
}

enum HubMenuDatabaseItems
{
	Codex = 0,
	Tarot = 1,
	Shards = 2,
}

enum HubVendorMenuItems
{
	Trade = 0,
	Cyberware = 1,
}

