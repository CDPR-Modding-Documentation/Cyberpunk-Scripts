class GodModeStatListener extends ScriptStatsListener
{
	var m_healthbar : weak< healthbarWidgetGameController >;

	public export override function OnGodModeChanged( ownerID : EntityID, newType : gameGodModeType )
	{
		if( m_healthbar != NULL )
		{
			m_healthbar.UpdateGodModeVisibility();
		}
	}

}

class healthbarWidgetGameController extends inkHUDGameController
{
	private var m_bbPlayerStats : weak< IBlackboard >;
	private var m_bbPlayerEventId : CallbackHandle;
	private var m_bbMuppetStats : weak< IBlackboard >;
	private var m_bbMuppetEventId : CallbackHandle;
	private var m_bbRightWeaponInfo : weak< IBlackboard >;
	private var m_bbRightWeaponEventId : CallbackHandle;
	private var m_bbLeftWeaponInfo : weak< IBlackboard >;
	private var m_bbLeftWeaponEventId : CallbackHandle;
	private var m_bbPSceneTierEventId : CallbackHandle;
	private var m_visionStateBlackboardId : CallbackHandle;
	private var m_combatModeBlackboardId : CallbackHandle;
	private var m_bbQuickhacksMemeoryEventId : CallbackHandle;
	private editable var m_healthPath : inkWidgetPath;
	private editable var m_healthBarPath : inkWidgetPath;
	private editable var m_armorPath : inkWidgetPath;
	private editable var m_armorBarPath : inkWidgetPath;
	private editable var m_expBar : inkWidgetRef;
	private editable var m_expBarSpacer : inkWidgetRef;
	private editable var m_levelUpArrow : inkWidgetRef;
	private editable var m_levelUpFrame : inkWidgetRef;
	private editable var m_barsLayoutPath : inkCompoundRef;
	private editable var m_buffsHolder : inkCompoundRef;
	private editable var m_invulnerableTextPath : inkTextRef;
	private editable var m_levelTextPath : inkTextRef;
	private editable var m_nextLevelTextPath : inkTextRef;
	private editable var m_healthTextPath : inkTextRef;
	private editable var m_maxHealthTextPath : inkTextRef;
	private editable var m_quickhacksContainer : inkCompoundRef;
	private editable var m_expText : inkTextRef;
	private editable var m_expTextLabel : inkTextRef;
	private editable var m_lostHealthAggregationBar : inkWidgetRef;
	private editable var m_levelUpRectangle : inkWidgetRef;
	private var m_healthController : weak< NameplateBarLogicController >;
	private var m_armorController : weak< ProgressBarSimpleWidgetLogicController >;
	private var m_RootWidget : weak< inkWidget >;
	private var m_buffWidget : weak< inkWidget >;
	private var m_HPBar : weak< inkWidget >;
	private var m_armorBar : weak< inkWidget >;
	private var m_invulnerableText : weak< inkText >;
	private var m_animHideTemp : inkAnimDef;
	private var m_animShortFade : inkAnimDef;
	private var m_animLongFade : inkAnimDef;
	private var m_animHideHPProxy : inkAnimProxy;
	var delayAnimation : inkAnimDef;
	var animCreated : Bool;
	var aggregatingActive : Bool;
	var countingStartHealth : Int32;
	private var m_currentHealth : Int32;
	private var m_previousHealth : Int32;
	private var m_maximumHealth : Int32;
	private var m_quickhacksMemoryPercent : Float;
	private var m_currentArmor : Int32;
	default m_currentArmor = 0;
	private var m_maximumArmor : Int32;
	default m_maximumArmor = 0;
	private var m_quickhackBarArray : array< weak< inkWidget > >;
	private var m_spawnedMemoryCells : Int32;
	private var m_usedQuickhacks : Int32;
	private var m_buffsVisible : Bool;
	private var m_isUnarmedRightHand : Bool;
	default m_isUnarmedRightHand = true;
	private var m_isUnarmedLeftHand : Bool;
	default m_isUnarmedLeftHand = true;
	private var m_currentVisionPSM : gamePSMVision;
	private var m_combatModePSM : gamePSMCombat;
	private var m_sceneTier : GameplayTier;
	private var m_godModeStatListener : GodModeStatListener;
	private var m_playerStatsBlackboard : weak< IBlackboard >;
	private var characterCurrentXPListener : CallbackHandle;
	private var m_levelUpBlackboard : weak< IBlackboard >;
	private var playerLevelUpListener : CallbackHandle;
	private var m_currentLevel : Int32;
	private var m_playerObject : weak< GameObject >;
	private var m_playerDevelopmentSystem : PlayerDevelopmentSystem;
	private var m_gameInstance : GameInstance;
	private var m_foldingAnimProxy : inkAnimProxy;
	private var m_memoryFillCells : Float;
	private var m_memoryMaxCells : Int32;
	private var m_pendingRequests : Int32;
	private var m_spawnTokens : array< weak< inkAsyncSpawnRequest > >;

	protected event OnInitialize()
	{
		var requestStatsEvent : RequestStatsBB;
		m_playerObject = ( ( GameObject )( GetOwnerEntity() ) );
		m_RootWidget = ( ( inkWidget )( GetRootWidget() ) );
		m_buffWidget = ( ( inkWidget )( SpawnFromExternal( inkCompoundRef.Get( m_buffsHolder ), R"base\gameplay\gui\widgets\healthbar\playerbuffbar.inkwidget", 'VertRoot' ) ) );
		m_currentHealth = CeilF( GameInstance.GetStatPoolsSystem( m_playerObject.GetGame() ).GetStatPoolValue( GetPlayer( m_playerObject.GetGame() ).GetEntityID(), gamedataStatPoolType.Health, false ) );
		m_playerDevelopmentSystem = ( ( PlayerDevelopmentSystem )( GameInstance.GetScriptableSystemsContainer( m_playerObject.GetGame() ).Get( 'PlayerDevelopmentSystem' ) ) );
		m_HPBar = ( ( inkWidget )( GetWidget( m_healthPath ) ) );
		m_armorBar = ( ( inkWidget )( GetWidget( m_armorPath ) ) );
		m_healthController = ( ( NameplateBarLogicController )( GetController( m_healthBarPath ) ) );
		m_armorController = ( ( ProgressBarSimpleWidgetLogicController )( GetController( m_armorBarPath ) ) );
		m_bbPlayerStats = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_PlayerBioMonitor );
		m_bbPlayerEventId = m_bbPlayerStats.RegisterListenerVariant( GetAllBlackboardDefs().UI_PlayerBioMonitor.PlayerStatsInfo, this, 'OnStatsChanged' );
		if( IsPlayingMultiplayer() )
		{
			m_bbMuppetStats = GetBlackboardSystem().Get( GetAllBlackboardDefs().UIGameData );
			m_bbMuppetEventId = m_bbMuppetStats.RegisterListenerVariant( GetAllBlackboardDefs().UIGameData.MuppetStats, this, 'OnMuppetUpdate' );
		}
		m_bbPlayerStats.SignalVariant( GetAllBlackboardDefs().UI_PlayerBioMonitor.PlayerStatsInfo );
		m_bbQuickhacksMemeoryEventId = m_bbPlayerStats.RegisterDelayedListenerFloat( GetAllBlackboardDefs().UI_PlayerBioMonitor.MemoryPercent, this, 'OnQuickhacksMemoryPercentUpdate' );
		m_bbRightWeaponInfo = GetBlackboardSystem().Get( GetAllBlackboardDefs().UIGameData );
		m_bbRightWeaponEventId = m_bbRightWeaponInfo.RegisterListenerVariant( GetAllBlackboardDefs().UIGameData.RightWeaponRecordID, this, 'OnRightWeaponSwap' );
		m_bbLeftWeaponInfo = GetBlackboardSystem().Get( GetAllBlackboardDefs().UIGameData );
		m_bbLeftWeaponEventId = m_bbLeftWeaponInfo.RegisterListenerVariant( GetAllBlackboardDefs().UIGameData.LeftWeaponRecordID, this, 'OnLeftWeaponSwap' );
		m_playerStatsBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_PlayerStats );
		characterCurrentXPListener = m_playerStatsBlackboard.RegisterListenerInt( GetAllBlackboardDefs().UI_PlayerStats.CurrentXP, this, 'OnCharacterLevelCurrentXPUpdated' );
		m_playerStatsBlackboard.SignalInt( GetAllBlackboardDefs().UI_PlayerStats.CurrentXP );
		AnimateCharacterLevelUpdated( m_playerStatsBlackboard.GetInt( GetAllBlackboardDefs().UI_PlayerStats.Level ), true );
		m_levelUpBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_PlayerStats );
		playerLevelUpListener = m_levelUpBlackboard.RegisterDelayedListenerInt( GetAllBlackboardDefs().UI_PlayerStats.Level, this, 'OnCharacterLevelUpdated' );
		m_levelUpBlackboard.SignalInt( GetAllBlackboardDefs().UI_PlayerStats.Level );
		CreateAnimations();
		ComputeHealthBarVisibility();
		SetupQuickhacksMemoryBar();
		requestStatsEvent = new RequestStatsBB;
		requestStatsEvent.Set( m_playerObject );
		m_playerDevelopmentSystem.QueueRequest( requestStatsEvent );
		m_gameInstance = GetPlayerControlledObject().GetGame();
	}

	protected event OnUninitialize()
	{
		if( m_bbPlayerStats )
		{
			m_bbPlayerStats.UnregisterListenerVariant( GetAllBlackboardDefs().UI_PlayerBioMonitor.PlayerStatsInfo, m_bbPlayerEventId );
			m_bbPlayerStats.UnregisterDelayedListener( GetAllBlackboardDefs().UI_PlayerBioMonitor.MemoryPercent, m_bbQuickhacksMemeoryEventId );
		}
		if( IsPlayingMultiplayer() && m_bbMuppetStats )
		{
			m_bbMuppetStats.UnregisterListenerVariant( GetAllBlackboardDefs().UIGameData.MuppetStats, m_bbMuppetEventId );
		}
		if( m_bbRightWeaponInfo )
		{
			m_bbRightWeaponInfo.UnregisterListenerVariant( GetAllBlackboardDefs().UIGameData.RightWeaponRecordID, m_bbRightWeaponEventId );
		}
		if( m_bbLeftWeaponInfo )
		{
			m_bbLeftWeaponInfo.UnregisterListenerVariant( GetAllBlackboardDefs().UIGameData.LeftWeaponRecordID, m_bbLeftWeaponEventId );
		}
		if( m_playerStatsBlackboard )
		{
			m_playerStatsBlackboard.UnregisterListenerInt( GetAllBlackboardDefs().UI_PlayerStats.CurrentXP, characterCurrentXPListener );
		}
	}

	protected event OnPlayerAttach( playerGameObject : GameObject )
	{
		var controlledPuppetRecordID : TweakDBID;
		var controlledPuppet : weak< gamePuppetBase >;
		RegisterPSMListeners( playerGameObject );
		m_playerObject = playerGameObject;
		if( m_foldingAnimProxy )
		{
			m_foldingAnimProxy.Stop();
		}
		m_foldingAnimProxy = PlayLibraryAnimation( 'unfold' );
		controlledPuppet = ( ( gamePuppetBase )( GetPlayer( m_gameInstance ) ) );
		if( controlledPuppet != NULL )
		{
			controlledPuppetRecordID = controlledPuppet.GetRecordID();
			if( controlledPuppetRecordID == T"Character.johnny_replacer" )
			{
				inkWidgetRef.SetVisible( m_levelUpRectangle, false );
			}
			else
			{
				inkWidgetRef.SetVisible( m_levelUpRectangle, true );
			}
		}
		else
		{
			inkWidgetRef.SetVisible( m_levelUpRectangle, true );
		}
	}

	protected event OnPlayerDetach( playerGameObject : GameObject )
	{
		UnregisterPSMListeners( playerGameObject );
		if( m_foldingAnimProxy )
		{
			m_foldingAnimProxy.Stop();
		}
		m_foldingAnimProxy = PlayLibraryAnimation( 'fold' );
	}

	protected function RegisterPSMListeners( playerObject : GameObject )
	{
		var playerStateMachineBlackboard : IBlackboard;
		var playerSMDef : PlayerStateMachineDef;
		playerSMDef = GetAllBlackboardDefs().PlayerStateMachine;
		if( playerSMDef )
		{
			playerStateMachineBlackboard = GetPSMBlackboard( playerObject );
			if( playerStateMachineBlackboard )
			{
				m_visionStateBlackboardId = playerStateMachineBlackboard.RegisterListenerInt( playerSMDef.Vision, this, 'OnPSMVisionStateChanged' );
				m_bbPSceneTierEventId = playerStateMachineBlackboard.RegisterListenerInt( playerSMDef.SceneTier, this, 'OnSceneTierChange' );
				m_combatModeBlackboardId = playerStateMachineBlackboard.RegisterListenerInt( playerSMDef.Combat, this, 'OnCombatStateChanged' );
			}
			m_godModeStatListener = new GodModeStatListener;
			m_godModeStatListener.m_healthbar = this;
			GameInstance.GetStatsSystem( playerObject.GetGame() ).RegisterListener( playerObject.GetEntityID(), m_godModeStatListener );
		}
	}

	protected function UnregisterPSMListeners( playerObject : GameObject )
	{
		var playerStateMachineBlackboard : IBlackboard;
		var playerSMDef : PlayerStateMachineDef;
		playerSMDef = GetAllBlackboardDefs().PlayerStateMachine;
		if( playerSMDef )
		{
			playerStateMachineBlackboard = GetPSMBlackboard( playerObject );
			if( playerStateMachineBlackboard )
			{
				playerStateMachineBlackboard.UnregisterDelayedListener( playerSMDef.Vision, m_visionStateBlackboardId );
				playerStateMachineBlackboard.UnregisterDelayedListener( playerSMDef.SceneTier, m_bbPSceneTierEventId );
				playerStateMachineBlackboard.UnregisterDelayedListener( playerSMDef.Combat, m_combatModeBlackboardId );
				GameInstance.GetStatsSystem( playerObject.GetGame() ).UnregisterListener( playerObject.GetEntityID(), m_godModeStatListener );
				m_godModeStatListener = NULL;
			}
		}
	}

	private function StartDamageFallDelay()
	{
		var delayProxy : inkAnimProxy;
		var delayInterpolator : inkAnimScale;
		var size, selfSize : Vector2;
		var width : Float;
		if( !( delayAnimation ) )
		{
			delayAnimation = new inkAnimDef;
			delayInterpolator = new inkAnimScale;
			delayInterpolator.SetStartDelay( 1.0 );
			delayInterpolator.SetDuration( 0.0 );
			delayInterpolator.SetDirection( inkanimInterpolationDirection.From );
			delayInterpolator.SetType( inkanimInterpolationType.Linear );
			delayInterpolator.SetMode( inkanimInterpolationMode.EasyIn );
			delayInterpolator.SetStartScale( Vector2( 1.0, 1.0 ) );
			delayAnimation.AddInterpolator( delayInterpolator );
		}
		if( !( aggregatingActive ) )
		{
			delayProxy = inkTextRef.PlayAnimation( m_expText, delayAnimation );
			delayProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnDamageAggregationFinished' );
			aggregatingActive = true;
			countingStartHealth = m_previousHealth;
			inkWidgetRef.SetScale( m_lostHealthAggregationBar, Vector2( 1.0, 1.0 ) );
		}
		size = m_healthController.GetFullSize();
		selfSize = inkWidgetRef.GetSize( m_lostHealthAggregationBar );
		width = ( ( ( Float )( ( countingStartHealth - m_currentHealth ) ) ) / ( ( Float )( m_maximumHealth ) ) ) * size.X;
		inkWidgetRef.SetSize( m_lostHealthAggregationBar, Vector2( width, selfSize.Y ) );
	}

	protected event OnDamageAggregationFinished( anim : inkAnimProxy )
	{
		aggregatingActive = false;
		PlayLibraryAnimation( 'hide_delay_bar' );
	}

	private function SetHealthProgress( value : Float )
	{
		var percentHP : Float;
		value = ClampF( value, 0.01, 1.0 );
		percentHP = 100.0 * ( ( ( Float )( m_currentHealth ) ) / ( ( Float )( m_maximumHealth ) ) );
		percentHP = ClampF( percentHP, 1.0, 100.0 );
		m_healthController.SetNameplateBarProgress( value, m_previousHealth == m_currentHealth );
		inkTextRef.SetText( m_healthTextPath, IntToString( m_currentHealth ) );
		inkTextRef.SetText( m_maxHealthTextPath, IntToString( m_maximumHealth ) );
		if( m_previousHealth > m_currentHealth )
		{
			StartDamageFallDelay();
		}
	}

	protected event OnCharacterLevelUpdated( value : Int32 )
	{
		AnimateCharacterLevelUpdated( value );
	}

	private function AnimateCharacterLevelUpdated( value : Int32, optional skipAnimation : Bool )
	{
		var levelUpProxy : inkAnimProxy;
		if( m_currentLevel != value )
		{
			m_currentLevel = value;
			inkTextRef.SetText( m_nextLevelTextPath, IntToString( m_currentLevel ) );
			if( !( skipAnimation ) )
			{
				levelUpProxy = PlayLibraryAnimation( 'levelup_animation' );
				levelUpProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnLevelUpAnimationFinished' );
			}
			else
			{
				inkWidgetRef.SetOpacity( m_levelUpArrow, 0.0 );
				inkWidgetRef.SetOpacity( m_levelUpFrame, 0.0 );
				OnLevelUpAnimationFinished( levelUpProxy );
			}
			ComputeHealthBarVisibility();
		}
	}

	protected event OnLevelUpAnimationFinished( anim : inkAnimProxy )
	{
		inkTextRef.SetText( m_levelTextPath, IntToString( m_currentLevel ) );
		ComputeHealthBarVisibility();
	}

	protected event OnCharacterLevelCurrentXPUpdated( value : Int32 )
	{
		var remainingXP : Int32;
		var expSum : Int32;
		var progressFloat : Float;
		remainingXP = m_playerDevelopmentSystem.GetRemainingExpForLevelUp( m_playerObject, gamedataProficiencyType.Level );
		expSum = remainingXP + value;
		progressFloat = ( ( Float )( value ) ) / ( ( Float )( expSum ) );
		inkTextRef.SetText( m_expText, IntToString( value ) );
		inkTextRef.SetText( m_expTextLabel, "LocKey#23263" );
		inkWidgetRef.SetSizeCoefficient( m_expBar, progressFloat );
		inkWidgetRef.SetSizeCoefficient( m_expBarSpacer, 1.0 - progressFloat );
	}

	private function AdjustRequest() {}

	private function SetupQuickhacksMemoryBar()
	{
		inkCompoundRef.RemoveAllChildren( m_quickhacksContainer );
		m_spawnedMemoryCells = 0;
		m_memoryMaxCells = FloorF( GameInstance.GetStatsSystem( ( ( PlayerPuppet )( GetOwnerEntity() ) ).GetGame() ).GetStatValue( GetPlayerControlledObject().GetEntityID(), gamedataStatType.Memory ) );
		m_memoryFillCells = ( ( Float )( m_memoryMaxCells ) );
		UpdateQuickhacksMemoryBarSize( m_memoryMaxCells );
	}

	private function UpdateQuickhacksMemoryBarSize( size : Int32 )
	{
		var i : Int32;
		var requestToken : weak< inkAsyncSpawnRequest >;
		if( size > m_spawnedMemoryCells )
		{
			for( i = m_spawnedMemoryCells + m_pendingRequests; i < size; i += 1 )
			{
				requestToken = AsyncSpawnFromLocal( inkCompoundRef.Get( m_quickhacksContainer ), 'quickhackBar', this, 'OnMemoryBarSpawned' );
				m_spawnTokens.PushBack( requestToken );
				m_pendingRequests += 1;
			}
		}
		else
		{
			UpdateMemoryBarData();
		}
	}

	protected event OnMuppetUpdate( value : Variant )
	{
		var incomingData : PlayerBioMonitor;
		incomingData = ( ( PlayerBioMonitor )value );
		m_previousHealth = m_currentHealth;
		m_maximumHealth = incomingData.maximumHealth;
		m_currentHealth = incomingData.currentHealth;
		m_currentHealth = Clamp( m_currentHealth, 0, m_maximumHealth );
		m_currentArmor = incomingData.currentArmor;
		m_maximumArmor = incomingData.maximumArmor;
		SetHealthProgress( ( ( Float )( m_currentHealth ) ) / ( ( Float )( m_maximumHealth ) ) );
		SetArmorProgress( ( ( Float )( m_currentArmor ) ) / ( ( Float )( m_maximumArmor ) ), false );
		ComputeHealthBarVisibility();
	}

	protected event OnMemoryBarSpawned( widget : inkWidget, userData : IScriptable )
	{
		m_spawnedMemoryCells += 1;
		m_pendingRequests -= 1;
		m_quickhackBarArray.PushBack( widget );
		if( m_pendingRequests <= 0 )
		{
			m_spawnTokens.Clear();
			UpdateMemoryBarData();
		}
	}

	private function UpdateMemoryBarData()
	{
		var i : Int32;
		var fillCellsInt : Int32;
		var quickhackBar : weak< inkWidget >;
		var quickhackBarController : weak< QuickhackBarController >;
		fillCellsInt = FloorF( m_memoryFillCells );
		for( i = 0; i < m_quickhackBarArray.Size(); i += 1 )
		{
			if( i >= m_memoryMaxCells )
			{
				m_quickhackBarArray[ i ].SetVisible( false );
			}
			else
			{
				quickhackBar = m_quickhackBarArray[ i ];
				quickhackBarController = ( ( QuickhackBarController )( quickhackBar.GetController() ) );
				if( fillCellsInt < m_memoryMaxCells )
				{
					if( i < fillCellsInt )
					{
						quickhackBarController.SetStatus( 1.0 );
					}
					else if( i == fillCellsInt )
					{
						quickhackBarController.SetStatus( m_memoryFillCells - ( ( Float )( fillCellsInt ) ) );
					}
					else
					{
						quickhackBarController.SetStatus( 0.0 );
					}
				}
				else
				{
					quickhackBarController.SetStatus( 1.0 );
				}
				quickhackBar.SetVisible( true );
			}
		}
		ComputeHealthBarVisibility();
	}

	protected event OnQuickhacksMemoryPercentUpdate( value : Float )
	{
		m_memoryMaxCells = FloorF( GameInstance.GetStatsSystem( ( ( PlayerPuppet )( GetOwnerEntity() ) ).GetGame() ).GetStatValue( GetPlayerControlledObject().GetEntityID(), gamedataStatType.Memory ) );
		m_memoryFillCells = ( ( ( Float )( m_memoryMaxCells ) ) * value ) * 0.01;
		m_usedQuickhacks = m_memoryMaxCells - FloorF( m_memoryFillCells );
		m_quickhacksMemoryPercent = value;
		UpdateQuickhacksMemoryBarSize( m_memoryMaxCells );
	}

	private function IsCyberdeckEquipped() : Bool
	{
		var itemTags : array< CName >;
		var itemRecord : weak< Item_Record >;
		var systemReplacementID : ItemID;
		systemReplacementID = EquipmentSystem.GetData( GetPlayerControlledObject() ).GetActiveItem( gamedataEquipmentArea.SystemReplacementCW );
		itemRecord = RPGManager.GetItemRecord( systemReplacementID );
		if( itemRecord )
		{
			itemTags = itemRecord.Tags();
		}
		return itemTags.Contains( 'Cyberdeck' );
	}

	private function SetArmorProgress( normalizedValue : Float, silent : Bool ) {}

	protected event OnStatsChanged( value : Variant )
	{
		var incomingData : PlayerBioMonitor;
		incomingData = ( ( PlayerBioMonitor )value );
		m_previousHealth = m_currentHealth;
		m_maximumHealth = CeilF( GameInstance.GetStatsSystem( m_playerObject.GetGame() ).GetStatValue( GetPlayer( m_playerObject.GetGame() ).GetEntityID(), gamedataStatType.Health ) );
		m_currentHealth = CeilF( GameInstance.GetStatPoolsSystem( m_playerObject.GetGame() ).GetStatPoolValue( GetPlayer( m_playerObject.GetGame() ).GetEntityID(), gamedataStatPoolType.Health, false ) );
		m_currentHealth = Clamp( m_currentHealth, 0, m_maximumHealth );
		m_currentArmor = incomingData.currentArmor;
		m_maximumArmor = incomingData.maximumArmor;
		SetHealthProgress( ( ( Float )( m_currentHealth ) ) / ( ( Float )( m_maximumHealth ) ) );
		SetArmorProgress( ( ( Float )( m_currentArmor ) ) / ( ( Float )( m_maximumArmor ) ), false );
		ComputeHealthBarVisibility();
	}

	protected event OnRightWeaponSwap( value : Variant )
	{
		m_isUnarmedRightHand = ( ( TweakDBID )value ) == TDBID.None();
		ComputeHealthBarVisibility();
	}

	protected event OnLeftWeaponSwap( value : Variant )
	{
		m_isUnarmedLeftHand = ( ( TweakDBID )value ) == TDBID.None();
		ComputeHealthBarVisibility();
	}

	private const function IsUnarmed() : Bool
	{
		return m_isUnarmedRightHand && m_isUnarmedLeftHand;
	}

	public function UpdateGodModeVisibility()
	{
		inkTextRef.SetVisible( m_invulnerableTextPath, HelperHasGodMode() );
	}

	private function ComputeHealthBarVisibility()
	{
		var isMaxHP, areQuickhacksUsed, isMultiplayer : Bool;
		isMaxHP = m_currentHealth == m_maximumHealth;
		isMultiplayer = IsPlayingMultiplayer();
		areQuickhacksUsed = m_usedQuickhacks > 0;
		m_armorBar.SetVisible( isMultiplayer );
		UpdateGodModeVisibility();
		inkCompoundRef.SetVisible( m_quickhacksContainer, IsCyberdeckEquipped() );
		if( m_currentVisionPSM != gamePSMVision.Default )
		{
			HideRequest();
			return;
		}
		if( ( ( ( ( !( isMaxHP ) || areQuickhacksUsed ) || isMultiplayer ) || m_combatModePSM == gamePSMCombat.InCombat ) || ( m_quickhacksMemoryPercent < 100.0 ) ) || m_buffsVisible )
		{
			ShowRequest();
		}
		else
		{
			HideRequest();
		}
	}

	protected event OnHPHideAnimationFinished( anim : inkAnimProxy )
	{
		m_HPBar.SetVisible( false );
		inkTextRef.SetVisible( m_healthTextPath, false );
		inkCompoundRef.SetVisible( m_buffsHolder, false );
	}

	private function HelperHasGodMode() : Bool
	{
		var godMode : GodModeSystem;
		var playerObject : GameObject;
		playerObject = ( ( GameObject )( GetOwnerEntity() ) );
		godMode = GameInstance.GetGodModeSystem( playerObject.GetGame() );
		return godMode.HasGodMode( playerObject.GetEntityID(), gameGodModeType.Invulnerable );
	}

	private function CreateAnimations()
	{
		var fadeInterp : inkAnimTransparency;
		var animStartDelay : Float;
		animStartDelay = 1.0;
		m_animShortFade = new inkAnimDef;
		fadeInterp = new inkAnimTransparency;
		fadeInterp.SetStartDelay( 2.0 );
		fadeInterp.SetStartTransparency( 1.0 );
		fadeInterp.SetEndTransparency( 0.0 );
		fadeInterp.SetDuration( 0.34999999 );
		m_animShortFade.AddInterpolator( fadeInterp );
		m_animLongFade = new inkAnimDef;
		fadeInterp = new inkAnimTransparency;
		fadeInterp.SetStartDelay( 10.0 );
		fadeInterp.SetStartTransparency( 1.0 );
		fadeInterp.SetEndTransparency( 0.0 );
		fadeInterp.SetDuration( 0.34999999 );
		m_animLongFade.AddInterpolator( fadeInterp );
		m_animHideTemp = new inkAnimDef;
		fadeInterp = new inkAnimTransparency;
		fadeInterp.SetStartDelay( animStartDelay + 0.25999999 );
		fadeInterp.SetStartTransparency( 1.0 );
		fadeInterp.SetEndTransparency( 0.0 );
		fadeInterp.SetDuration( 0.22 );
		m_animHideTemp.AddInterpolator( fadeInterp );
	}

	protected event OnCombatStateChanged( value : Int32 )
	{
		m_combatModePSM = ( ( gamePSMCombat )( value ) );
		ComputeHealthBarVisibility();
	}

	protected event OnPSMVisionStateChanged( value : Int32 )
	{
		m_currentVisionPSM = ( ( gamePSMVision )( value ) );
		ComputeHealthBarVisibility();
	}

	protected event OnSceneTierChange( argTier : Int32 )
	{
		m_sceneTier = ( ( GameplayTier )( argTier ) );
		ComputeHealthBarVisibility();
	}

	protected event OnBuffListVisibilityChanged( evt : BuffListVisibilityChangedEvent )
	{
		m_buffsVisible = evt.m_hasBuffs;
		ComputeHealthBarVisibility();
	}

	protected event OnForceHide()
	{
		ComputeHealthBarVisibility();
	}

	protected event OnForceTierVisibility( tierVisibility : Bool )
	{
		ComputeHealthBarVisibility();
	}

}

class QuickhackBarController extends inkLogicController
{
	private editable var m_emptyMask : inkWidgetRef;
	private editable var m_empty : inkWidgetRef;
	private editable var m_full : inkWidgetRef;

	public function SetStatus( value : Float )
	{
		if( value <= 0.0 )
		{
			inkWidgetRef.SetVisible( m_full, false );
			inkWidgetRef.SetVisible( m_empty, true );
			inkWidgetRef.SetScale( m_emptyMask, Vector2( 1.0, 1.0 ) );
		}
		else if( value >= 1.0 )
		{
			inkWidgetRef.SetVisible( m_empty, false );
			inkWidgetRef.SetVisible( m_full, true );
		}
		else
		{
			inkWidgetRef.SetVisible( m_full, true );
			inkWidgetRef.SetVisible( m_empty, true );
			inkWidgetRef.SetScale( m_emptyMask, Vector2( 1.0, 1.0 - value ) );
		}
	}

}

