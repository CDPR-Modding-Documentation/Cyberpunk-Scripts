class buffListGameController extends inkHUDGameController
{
	private editable var m_buffsList : inkHorizontalPanelRef;
	private var m_bbBuffList : CallbackHandle;
	private var m_bbDeBuffList : CallbackHandle;
	private var m_uiBlackboard : weak< IBlackboard >;
	private var m_buffDataList : array< BuffInfo >;
	private var m_debuffDataList : array< BuffInfo >;
	private var m_buffWidgets : array< weak< inkWidget > >;
	private var m_UISystem : weak< UISystem >;
	private var m_pendingRequests : Int32;

	protected event OnInitialize()
	{
		m_uiBlackboard = GetBlackboardSystem().Get( GetAllBlackboardDefs().UI_PlayerBioMonitor );
		if( m_uiBlackboard )
		{
			m_bbBuffList = m_uiBlackboard.RegisterListenerVariant( GetAllBlackboardDefs().UI_PlayerBioMonitor.BuffsList, this, 'OnBuffDataChanged' );
			m_bbDeBuffList = m_uiBlackboard.RegisterListenerVariant( GetAllBlackboardDefs().UI_PlayerBioMonitor.DebuffsList, this, 'OnDeBuffDataChanged' );
			m_uiBlackboard.SignalVariant( GetAllBlackboardDefs().UI_PlayerBioMonitor.BuffsList );
			m_uiBlackboard.SignalVariant( GetAllBlackboardDefs().UI_PlayerBioMonitor.DebuffsList );
		}
		inkHorizontalPanelRef.SetVisible( m_buffsList, false );
	}

	protected event OnUninitialize()
	{
		if( m_uiBlackboard )
		{
			m_uiBlackboard.UnregisterListenerVariant( GetAllBlackboardDefs().UI_PlayerBioMonitor.BuffsList, m_bbBuffList );
			m_uiBlackboard.UnregisterListenerVariant( GetAllBlackboardDefs().UI_PlayerBioMonitor.DebuffsList, m_bbDeBuffList );
		}
	}

	protected event OnPlayerAttach( playerGameObject : GameObject )
	{
		m_UISystem = GameInstance.GetUISystem( playerGameObject.GetGame() );
	}

	protected event OnBuffDataChanged( value : Variant )
	{
		m_buffDataList = ( ( array< BuffInfo > )value );
		UpdateBuffs();
	}

	protected event OnDeBuffDataChanged( value : Variant )
	{
		m_debuffDataList = ( ( array< BuffInfo > )value );
		MergeKnockdowns();
		UpdateBuffs();
	}

	private function UpdateBuffs()
	{
		var currentBuffsAndRequests : Int32;
		var incomingBuffsCount : Int32;
		var i : Int32;
		var requestsToSpawn : Int32;
		incomingBuffsCount = m_debuffDataList.Size() + m_buffDataList.Size();
		currentBuffsAndRequests = inkHorizontalPanelRef.GetNumChildren( m_buffsList ) + m_pendingRequests;
		if( currentBuffsAndRequests < incomingBuffsCount )
		{
			m_pendingRequests = incomingBuffsCount - currentBuffsAndRequests;
			requestsToSpawn = m_pendingRequests;
			for( i = 0; i < requestsToSpawn; i = i + 1 )
			{
				AsyncSpawnFromLocal( inkHorizontalPanelRef.Get( m_buffsList ), 'Buff', this, 'OnBuffSpawned' );
			}
		}
		if( m_pendingRequests <= 0 )
		{
			UpdateBuffDebuffList();
			UpdateVisibility();
		}
	}

	private function MergeKnockdowns()
	{
		var i : Int32;
		var biggestTimeRemaining : Float;
		var toRemain : Int32;
		var toRemove : array< Int32 >;
		var effectType : gamedataStatusEffectType;
		biggestTimeRemaining = 0.0;
		for( i = 0; i < m_debuffDataList.Size(); i = i + 1 )
		{
			effectType = TDB.GetStatusEffectRecord( m_debuffDataList[ i ].buffID ).StatusEffectType().Type();
			if( effectType == gamedataStatusEffectType.Knockdown || effectType == gamedataStatusEffectType.VehicleKnockdown )
			{
				if( biggestTimeRemaining > 0.0 )
				{
					toRemove.PushBack( i );
				}
				else
				{
					toRemain = i;
				}
				biggestTimeRemaining = MaxF( biggestTimeRemaining, m_debuffDataList[ i ].timeRemaining );
			}
		}
		if( toRemove.Size() == 0 )
		{
			return;
		}
		for( i = 0; i < toRemove.Size(); i = i + 1 )
		{
			m_debuffDataList.Erase( toRemove[ i ] - i );
		}
		m_debuffDataList[ toRemain ].timeRemaining = biggestTimeRemaining;
	}

	protected event OnBuffSpawned( newItem : inkWidget, userData : IScriptable )
	{
		newItem.SetVisible( false );
		m_buffWidgets.PushBack( newItem );
		m_pendingRequests -= 1;
		if( m_pendingRequests <= 0 )
		{
			UpdateBuffDebuffList();
			UpdateVisibility();
		}
	}

	private function UpdateVisibility()
	{
		GetRootWidget().SetVisible( false );
		GetRootWidget().SetVisible( true );
		GetRootWidget().SetVisible( inkHorizontalPanelRef.IsVisible( m_buffsList ) );
	}

	private function UpdateBuffDebuffList()
	{
		var data : StatusEffect_Record;
		var buffList : array< BuffInfo >;
		var onScreenBuffsCount : Int32;
		var incomingBuffsCount : Int32;
		var i : Int32;
		var currBuffWidget : weak< inkWidget >;
		var currBuffLoc : weak< buffListItemLogicController >;
		var buffTimeRemaining : Float;
		var stackCount : Int32;
		for( i = 0; i < m_buffDataList.Size(); i = i + 1 )
		{
			buffList.PushBack( m_buffDataList[ i ] );
		}
		for( i = 0; i < m_debuffDataList.Size(); i = i + 1 )
		{
			buffList.PushBack( m_debuffDataList[ i ] );
		}
		incomingBuffsCount = buffList.Size();
		onScreenBuffsCount = inkHorizontalPanelRef.GetNumChildren( m_buffsList );
		SendVisibilityUpdate( inkHorizontalPanelRef.IsVisible( m_buffsList ), incomingBuffsCount > 0 );
		inkHorizontalPanelRef.SetVisible( m_buffsList, incomingBuffsCount > 0 );
		if( incomingBuffsCount != 0 )
		{
			if( onScreenBuffsCount > incomingBuffsCount )
			{
				for( i = incomingBuffsCount - 1; i < onScreenBuffsCount; i = i + 1 )
				{
					currBuffWidget = m_buffWidgets[ i ];
					currBuffWidget.SetVisible( false );
				}
			}
		}
		for( i = 0; i < incomingBuffsCount; i = i + 1 )
		{
			data = TDB.GetStatusEffectRecord( buffList[ i ].buffID );
			buffTimeRemaining = buffList[ i ].timeRemaining;
			if( ( !( data ) || !( data.UiData() ) ) || data.UiData().IconPath() == "" )
			{
				continue;
			}
			currBuffWidget = m_buffWidgets[ i ];
			currBuffWidget.SetVisible( true );
			currBuffLoc = ( ( buffListItemLogicController )( currBuffWidget.GetController() ) );
			stackCount = ( ( Int32 )( StatusEffectHelper.GetStatusEffectByID( GetPlayerControlledObject(), buffList[ i ].buffID ).GetStackCount() ) );
			currBuffLoc.SetData( StringToName( data.UiData().IconPath() ), buffTimeRemaining, stackCount );
		}
	}

	private function SendVisibilityUpdate( oldVisible : Bool, nowVisible : Bool )
	{
		var evt : BuffListVisibilityChangedEvent;
		if( oldVisible != nowVisible )
		{
			evt = new BuffListVisibilityChangedEvent;
			evt.m_hasBuffs = nowVisible;
			m_UISystem.QueueEvent( evt );
		}
	}

}

class buffListItemLogicController extends inkLogicController
{
	private editable var m_icon : inkImageRef;
	private editable var m_label : inkTextRef;
	private editable var m_stackCounter : inkTextRef;

	protected event OnInitialize() {}

	public function SetData( icon : CName, time : Float, optional stackCount : Int32 )
	{
		if( stackCount > 1 )
		{
			inkTextRef.SetVisible( m_stackCounter, true );
			inkTextRef.SetText( m_stackCounter, "x" + IntToString( stackCount ) );
		}
		else
		{
			inkTextRef.SetVisible( m_stackCounter, false );
		}
		SetTimeText( time );
		InkImageUtils.RequestSetImage( this, m_icon, "UIIcon." + NameToString( icon ) );
	}

	private function SetTimeText( f : Float )
	{
		var textParams : inkTextParams;
		var time : GameTime;
		var minutes : Int32;
		var seconds : Int32;
		textParams = new inkTextParams;
		time = GameTime.MakeGameTime( 0, 0, 0, ( ( Int32 )( f ) ) );
		minutes = GameTime.Minutes( time );
		seconds = GameTime.Seconds( time );
		if( f >= 0.0 )
		{
			if( minutes > 0 )
			{
				inkTextRef.SetText( m_label, "{TIME,time,mm:ss}" );
				textParams.AddTime( "TIME", time );
				inkTextRef.SetTextParameters( m_label, textParams );
			}
			else
			{
				inkTextRef.SetText( m_label, ( ( String )( seconds ) ) );
			}
		}
		else
		{
			inkTextRef.SetText( m_label, "" );
		}
	}

	public function SetData( icon : TweakDBID, time : Float )
	{
		SetTimeText( time );
		InkImageUtils.RequestSetImage( this, m_icon, icon );
	}

	public function SetData( icon : CName, stackCount : Int32 )
	{
		if( stackCount > 1 )
		{
			inkTextRef.SetText( m_label, "x" + ( ( String )( stackCount ) ) );
		}
		else
		{
			inkTextRef.SetText( m_label, "" );
		}
		InkImageUtils.RequestSetImage( this, m_icon, "UIIcon." + NameToString( icon ) );
	}

}

class BuffListVisibilityChangedEvent extends Event
{
	var m_hasBuffs : Bool;
}

