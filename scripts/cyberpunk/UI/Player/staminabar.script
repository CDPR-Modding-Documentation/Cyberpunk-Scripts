class StaminabarWidgetGameController extends inkHUDGameController
{
	private editable var m_staminaControllerRef : inkWidgetRef;
	private editable var m_staminaPercTextPath : inkTextRef;
	private editable var m_staminaStatusTextPath : inkTextRef;
	private var m_bbPSceneTierEventId : CallbackHandle;
	private var m_bbPStaminaPSMEventId : CallbackHandle;
	private var m_staminaController : weak< NameplateBarLogicController >;
	private var m_RootWidget : weak< inkWidget >;
	private var m_animLongFade : inkAnimDef;
	private var m_animHideStaminaProxy : inkAnimProxy;
	private var m_currentStamina : Float;
	default m_currentStamina = 100.f;
	private var m_sceneTier : GameplayTier;
	default m_sceneTier = GameplayTier.Tier1_FullGameplay;
	private var m_staminaState : gamePSMStamina;
	default m_staminaState = gamePSMStamina.Rested;
	private var m_staminaPoolListener : StaminaPoolListener;

	protected event OnInitialize()
	{
		m_RootWidget = ( ( inkWidget )( GetRootWidget() ) );
		m_RootWidget.SetVisible( false );
		m_staminaController = ( ( NameplateBarLogicController )( inkWidgetRef.GetController( m_staminaControllerRef ) ) );
		m_staminaPoolListener = new StaminaPoolListener;
		m_staminaPoolListener.BindStaminaBar( this );
		CreateAnimations();
		EvaluateStaminaBarVisibility();
	}

	protected event OnUninitialize()
	{
		if( m_staminaPoolListener )
		{
			m_staminaPoolListener = NULL;
		}
	}

	protected event OnPlayerAttach( playerGameObject : GameObject )
	{
		RegisterPSMListeners( playerGameObject );
		m_staminaPoolListener = new StaminaPoolListener;
		m_staminaPoolListener.BindStaminaBar( this );
		GameInstance.GetStatPoolsSystem( playerGameObject.GetGame() ).RequestRegisteringListener( playerGameObject.GetEntityID(), gamedataStatPoolType.Stamina, m_staminaPoolListener );
	}

	protected event OnPlayerDetach( playerGameObject : GameObject )
	{
		if( m_staminaPoolListener )
		{
			GameInstance.GetStatPoolsSystem( playerGameObject.GetGame() ).RequestUnregisteringListener( playerGameObject.GetEntityID(), gamedataStatPoolType.Stamina, m_staminaPoolListener );
			m_staminaPoolListener = NULL;
		}
		UnregisterPSMListeners( playerGameObject );
	}

	protected function RegisterPSMListeners( playerPuppet : GameObject )
	{
		var playerStateMachineBlackboard : IBlackboard;
		var playerSMDef : PlayerStateMachineDef;
		playerSMDef = GetAllBlackboardDefs().PlayerStateMachine;
		if( playerPuppet.IsControlledByLocalPeer() )
		{
			playerStateMachineBlackboard = GetPSMBlackboard( playerPuppet );
			if( playerStateMachineBlackboard )
			{
				m_sceneTier = ( ( GameplayTier )( playerStateMachineBlackboard.GetInt( playerSMDef.SceneTier ) ) );
				m_staminaState = ( ( gamePSMStamina )( playerStateMachineBlackboard.GetInt( playerSMDef.Stamina ) ) );
				m_bbPSceneTierEventId = playerStateMachineBlackboard.RegisterListenerInt( playerSMDef.SceneTier, this, 'OnSceneTierChange' );
				m_bbPStaminaPSMEventId = playerStateMachineBlackboard.RegisterListenerInt( playerSMDef.Stamina, this, 'OnStaminaPSMChange' );
			}
		}
	}

	protected function UnregisterPSMListeners( playerPuppet : GameObject )
	{
		var playerStateMachineBlackboard : IBlackboard;
		var playerSMDef : PlayerStateMachineDef;
		playerSMDef = GetAllBlackboardDefs().PlayerStateMachine;
		if( playerPuppet.IsControlledByLocalPeer() )
		{
			playerStateMachineBlackboard = GetPSMBlackboard( playerPuppet );
			if( playerStateMachineBlackboard )
			{
				playerStateMachineBlackboard.UnregisterDelayedListener( playerSMDef.SceneTier, m_bbPSceneTierEventId );
				playerStateMachineBlackboard.UnregisterDelayedListener( playerSMDef.Stamina, m_bbPStaminaPSMEventId );
			}
		}
	}

	public function UpdateStaminaValue( oldValue : Float, newValue : Float, percToPoints : Float )
	{
		m_currentStamina = newValue;
		if( m_staminaState == gamePSMStamina.Exhausted )
		{
			inkWidgetRef.SetOpacity( m_staminaControllerRef, 0.5 );
		}
		else
		{
			inkWidgetRef.SetOpacity( m_staminaControllerRef, 1.0 );
		}
		m_staminaController.SetNameplateBarProgress( newValue / 100.0, false );
		inkTextRef.SetTextFromParts( m_staminaPercTextPath, IntToString( ( ( Int32 )( newValue ) ) ), "Common-Characters-Percetage", "" );
		UpdateStaminaLevelWarningFluffTexts( m_staminaState );
	}

	public function UpdateStaminaLevelWarningFluffTexts( staminaState : gamePSMStamina )
	{
		if( staminaState == gamePSMStamina.Exhausted )
		{
			inkTextRef.SetText( m_staminaStatusTextPath, "LocKey#40314" );
		}
		else
		{
			inkTextRef.SetText( m_staminaStatusTextPath, "LocKey#40311" );
		}
	}

	public function EvaluateStaminaBarVisibility()
	{
		var animFade : inkAnimDef;
		switch( m_sceneTier )
		{
			case GameplayTier.Tier1_FullGameplay:
				m_RootWidget.SetVisible( true );
			break;
			default:
				m_RootWidget.SetVisible( false );
			break;
		}
		if( ShouldHide() )
		{
			animFade = m_animLongFade;
			m_RootWidget.SetVisible( false );
			if( m_RootWidget.IsVisible() && ( !( m_animHideStaminaProxy ) || !( m_animHideStaminaProxy.IsPlaying() ) ) )
			{
				m_animHideStaminaProxy = m_RootWidget.PlayAnimation( animFade );
				m_animHideStaminaProxy.RegisterToCallback( inkanimEventType.OnFinish, this, 'OnStaminaHideAnimationFinished' );
			}
		}
		else
		{
			if( m_animHideStaminaProxy && m_animHideStaminaProxy.IsPlaying() )
			{
				m_animHideStaminaProxy.UnregisterFromCallback( inkanimEventType.OnFinish, this, 'OnStaminaHideAnimationFinished' );
				m_animHideStaminaProxy.Stop();
			}
			m_RootWidget.SetOpacity( 1.0 );
			m_RootWidget.SetVisible( true );
		}
	}

	private function ShouldHide() : Bool
	{
		var isMaxStamina : Bool;
		var isMultiplayer : Bool;
		isMaxStamina = m_currentStamina >= 100.0;
		isMultiplayer = IsPlayingMultiplayer();
		return ( isMaxStamina && !( isMultiplayer ) ) || ( m_sceneTier == GameplayTier.Tier4_FPPCinematic || m_sceneTier == GameplayTier.Tier5_Cinematic );
	}

	protected event OnStaminaHideAnimationFinished( anim : inkAnimProxy )
	{
		m_RootWidget.SetVisible( false );
	}

	private function CreateAnimations()
	{
		var fadeInterp : inkAnimTransparency;
		m_animLongFade = new inkAnimDef;
		fadeInterp = new inkAnimTransparency;
		fadeInterp.SetStartDelay( 10.0 );
		fadeInterp.SetStartTransparency( 1.0 );
		fadeInterp.SetEndTransparency( 0.0 );
		fadeInterp.SetDuration( 0.34999999 );
		m_animLongFade.AddInterpolator( fadeInterp );
	}

	protected event OnSceneTierChange( argTier : Int32 )
	{
		m_sceneTier = ( ( GameplayTier )( argTier ) );
		EvaluateStaminaBarVisibility();
	}

	protected event OnStaminaPSMChange( arg : Int32 )
	{
		m_staminaState = ( ( gamePSMStamina )( arg ) );
	}

	protected event OnForceHide()
	{
		EvaluateStaminaBarVisibility();
	}

	protected event OnForceTierVisibility( tierVisibility : Bool )
	{
		EvaluateStaminaBarVisibility();
	}

}

class StaminaPoolListener extends ScriptStatPoolsListener
{
	private var m_staminaBar : weak< StaminabarWidgetGameController >;

	public function BindStaminaBar( bar : weak< StaminabarWidgetGameController > )
	{
		m_staminaBar = bar;
	}

	public export override function OnStatPoolValueChanged( oldValue : Float, newValue : Float, percToPoints : Float )
	{
		m_staminaBar.UpdateStaminaValue( oldValue, newValue, percToPoints );
		m_staminaBar.EvaluateStaminaBarVisibility();
	}

}

