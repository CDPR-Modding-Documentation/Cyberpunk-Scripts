class InventoryWeaponDisplayController extends InventoryItemDisplayController
{
	protected editable var m_weaponSpecyficModsRoot : inkCompoundRef;
	protected editable var m_statsWrapper : inkWidgetRef;
	protected editable var m_dpsText : inkTextRef;
	protected editable var m_damageTypeIndicatorImage : inkImageRef;
	protected editable var m_dpsWrapper : inkWidgetRef;
	protected editable var m_dpsValue : inkTextRef;
	protected editable var m_silencerIcon : inkWidgetRef;
	protected editable var m_scopeIcon : inkWidgetRef;
	protected var weaponAttachmentsDisplay : array< weak< InventoryItemPartDisplay > >;

	protected override function NewRefreshUI( itemData : UIInventoryItem )
	{
		super.NewRefreshUI( itemData );
		NewUpdateDamage( itemData );
		NewUpdateWeaponParts( itemData );
	}

	protected virtual function NewUpdateDamage( itemData : UIInventoryItem )
	{
		var dpsValue : Float;
		inkWidgetRef.SetVisible( m_statsWrapper, itemData != NULL );
		if( itemData == NULL )
		{
			inkWidgetRef.SetVisible( m_dpsWrapper, false );
			return;
		}
		dpsValue = itemData.GetPrimaryStat().Value;
		inkTextRef.SetText( m_dpsText, FloatToStringPrec( dpsValue, 1 ) );
		inkImageRef.SetTexturePart( m_damageTypeIndicatorImage, WeaponsUtils.GetDamageTypeIcon( gamedataDamageType.Chemical ) );
		if( GetDisplayContext() == ItemDisplayContext.GearPanel )
		{
			inkWidgetRef.SetVisible( m_dpsWrapper, true );
			inkTextRef.SetText( m_dpsValue, IntToString( RoundF( dpsValue ) ) );
		}
		else
		{
			inkWidgetRef.SetVisible( m_dpsWrapper, false );
		}
	}

	protected virtual function NewUpdateWeaponParts( itemData : UIInventoryItem )
	{
		var hasScopeSlot, hasSilencerSlot, hasScopeInstalled, hasSilencerInstalled : Bool;
		if( itemData )
		{
			hasScopeSlot = itemData.HasScopeSlot();
			hasSilencerSlot = itemData.HasSilencerSlot();
			hasScopeInstalled = itemData.HasScopeInstalled();
			hasSilencerInstalled = itemData.HasSilencerInstalled();
		}
		inkWidgetRef.SetVisible( m_scopeIcon, hasScopeSlot );
		inkWidgetRef.SetState( m_scopeIcon, ( ( hasScopeInstalled ) ? ( 'Default' ) : ( 'Empty' ) ) );
		inkWidgetRef.SetVisible( m_silencerIcon, hasSilencerSlot );
		inkWidgetRef.SetState( m_silencerIcon, ( ( hasSilencerInstalled ) ? ( 'Default' ) : ( 'Empty' ) ) );
	}

	protected override function RefreshUI()
	{
		super.RefreshUI();
		UpdateDamage();
		UpdateWeaponParts();
	}

	protected virtual function UpdateWeaponParts()
	{
		var i, attachmentsSize : Int32;
		var itemData : InventoryItemData;
		var hasSilencerSlot, hasScopeSlot : Bool;
		var attachment, scopeAttachment, silencerAttachment : InventoryItemAttachments;
		itemData = GetItemData();
		attachmentsSize = InventoryItemData.GetAttachmentsSize( itemData );
		for( i = 0; i < attachmentsSize; i += 1 )
		{
			attachment = InventoryItemData.GetAttachment( itemData, i );
			if( attachment.SlotID == T"AttachmentSlots.Scope" )
			{
				scopeAttachment = attachment;
				hasScopeSlot = true;
			}
			else if( attachment.SlotID == T"AttachmentSlots.PowerModule" )
			{
				silencerAttachment = attachment;
				hasSilencerSlot = true;
			}
		}
		inkWidgetRef.SetVisible( m_scopeIcon, hasScopeSlot );
		inkWidgetRef.SetState( m_scopeIcon, ( ( InventoryItemData.IsEmpty( scopeAttachment.ItemData ) ) ? ( 'Empty' ) : ( 'Default' ) ) );
		inkWidgetRef.SetVisible( m_silencerIcon, hasSilencerSlot );
		inkWidgetRef.SetState( m_silencerIcon, ( ( InventoryItemData.IsEmpty( silencerAttachment.ItemData ) ) ? ( 'Empty' ) : ( 'Default' ) ) );
	}

	protected virtual function UpdateDamage()
	{
		var data : InventoryItemData;
		var dpsValue : Float;
		data = GetItemData();
		inkWidgetRef.SetVisible( m_statsWrapper, !( InventoryItemData.IsEmpty( data ) ) );
		dpsValue = GetDPS( data );
		inkTextRef.SetText( m_dpsText, FloatToStringPrec( dpsValue, 1 ) );
		inkImageRef.SetTexturePart( m_damageTypeIndicatorImage, WeaponsUtils.GetDamageTypeIcon( InventoryItemData.GetDamageType( data ) ) );
		if( InventoryItemData.IsEmpty( data ) )
		{
			inkWidgetRef.SetVisible( m_dpsWrapper, false );
			return;
		}
		if( GetDisplayContext() == ItemDisplayContext.GearPanel )
		{
			inkWidgetRef.SetVisible( m_dpsWrapper, true );
			inkTextRef.SetText( m_dpsValue, IntToString( RoundF( dpsValue ) ) );
		}
		else
		{
			inkWidgetRef.SetVisible( m_dpsWrapper, false );
		}
	}

	protected virtual function GetDPS( itemData : InventoryItemData ) : Float
	{
		var i, limit : Int32;
		var stat : StatViewData;
		if( !( InventoryItemData.IsEmpty( itemData ) ) )
		{
			for( i = 0, limit = InventoryItemData.GetPrimaryStatsSize( itemData ); i < limit; i += 1 )
			{
				stat = InventoryItemData.GetPrimaryStat( itemData, i );
				if( stat.type == gamedataStatType.EffectiveDPS )
				{
					return stat.valueF;
				}
			}
		}
		return 0.0;
	}

	public override function GetDisplayType() : ItemDisplayType
	{
		return ItemDisplayType.Weapon;
	}

}

