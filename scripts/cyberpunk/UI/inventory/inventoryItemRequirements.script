class UIInventoryItemRequirementsManager
{
	private var m_itemRequiredLevel : Int32;
	private var m_requiredStrength : Int32;
	private var m_requiredReflex : Int32;
	private var m_perkRequirementName : String;
	private var m_isSmartlinkRequirementMet : Bool;
	private var m_isLevelRequirementMet : Bool;
	private var m_isStrengthRequirementMet : Bool;
	private var m_isReflexRequirementMet : Bool;
	private var m_isPerkRequirementMet : Bool;
	private var m_attachedItem : weak< UIInventoryItem >;

	public static function Make( inventoryItem : weak< UIInventoryItem >, player : weak< GameObject > ) : UIInventoryItemRequirementsManager
	{
		var instance : UIInventoryItemRequirementsManager;
		var itemData : gameItemData;
		var statsSystem : StatsSystem;
		instance = new UIInventoryItemRequirementsManager;
		instance.m_attachedItem = inventoryItem;
		itemData = inventoryItem.GetItemData();
		statsSystem = GameInstance.GetStatsSystem( player.GetGame() );
		instance.m_itemRequiredLevel = ( ( Int32 )( itemData.GetStatValueByType( gamedataStatType.Level ) ) );
		instance.m_requiredStrength = ( ( Int32 )( itemData.GetStatValueByType( gamedataStatType.Strength ) ) );
		instance.m_requiredReflex = ( ( Int32 )( itemData.GetStatValueByType( gamedataStatType.Reflexes ) ) );
		instance.Update( player, statsSystem );
		return instance;
	}

	public function Update( player : weak< GameObject >, optional statsSystem : StatsSystem )
	{
		var perkRequiredName : String;
		var itemData : gameItemData;
		itemData = m_attachedItem.GetItemData();
		if( statsSystem == NULL )
		{
			statsSystem = GameInstance.GetStatsSystem( player.GetGame() );
		}
		if( RPGManager.HasSmartLinkRequirement( itemData ) )
		{
			m_isSmartlinkRequirementMet = ( ( Bool )( statsSystem.GetStatValue( player.GetEntityID(), gamedataStatType.HasSmartLink ) ) );
		}
		else
		{
			m_isSmartlinkRequirementMet = true;
		}
		if( m_itemRequiredLevel > 0 )
		{
			m_isLevelRequirementMet = m_itemRequiredLevel <= ( ( Int32 )( statsSystem.GetStatValue( player.GetEntityID(), gamedataStatType.Level ) ) );
		}
		else
		{
			m_isLevelRequirementMet = true;
		}
		if( m_requiredStrength > 0 )
		{
			m_isStrengthRequirementMet = m_requiredStrength <= ( ( Int32 )( statsSystem.GetStatValue( player.GetEntityID(), gamedataStatType.Strength ) ) );
		}
		else
		{
			m_isStrengthRequirementMet = true;
		}
		if( m_requiredReflex > 0 )
		{
			m_isReflexRequirementMet = m_requiredReflex <= ( ( Int32 )( statsSystem.GetStatValue( player.GetEntityID(), gamedataStatType.Reflexes ) ) );
		}
		else
		{
			m_isReflexRequirementMet = true;
		}
		if( RPGManager.CheckCraftedItemPerkPrereq( itemData, player, perkRequiredName ) )
		{
			m_isPerkRequirementMet = false;
			m_perkRequirementName = perkRequiredName;
		}
		else
		{
			m_isPerkRequirementMet = true;
		}
	}

	public function IsSmartlinkRequirementMet() : Bool
	{
		return m_isSmartlinkRequirementMet;
	}

	public function IsLevelRequirementMet() : Bool
	{
		return m_isLevelRequirementMet;
	}

	public function IsStrengthRequirementMet() : Bool
	{
		return m_isStrengthRequirementMet;
	}

	public function IsReflexRequirementMet() : Bool
	{
		return m_isReflexRequirementMet;
	}

	public function IsPerkRequirementMet() : Bool
	{
		return m_isPerkRequirementMet;
	}

	public function IsRarityRequirementMet( parentItem : weak< UIInventoryItem > ) : Bool
	{
		if( m_attachedItem.IsPart() && parentItem.IsClothing() )
		{
			return parentItem.GetQualityInt() <= m_attachedItem.GetQualityInt();
		}
		return true;
	}

	public function IsAnyRequirementNotMet() : Bool
	{
		return !( IsSmartlinkRequirementMet() ) || IsAnyItemDisplayRequirementNotMet();
	}

	public function IsAnyItemDisplayRequirementNotMet() : Bool
	{
		return ( ( !( IsLevelRequirementMet() ) || !( IsStrengthRequirementMet() ) ) || !( IsReflexRequirementMet() ) ) || !( IsPerkRequirementMet() );
	}

	public function GetLevelRequirementValue() : Int32
	{
		return m_itemRequiredLevel;
	}

	public function GetStrengthRequirementValue() : Int32
	{
		return m_requiredStrength;
	}

	public function GetReflexRequirementValue() : Int32
	{
		return m_requiredReflex;
	}

	public function GetPerkRequirementValue() : String
	{
		return m_perkRequirementName;
	}

}

