class InventoryItemsList extends inkLogicController
{
	protected editable var m_InventoryItemName : CName;
	protected editable var m_ItemsLayoutRef : inkCompoundRef;
	protected var m_TooltipsData : array< ATooltipData >;
	protected var m_ItemsOwner : weak< GameObject >;
	protected var m_ItemsLayout : weak< inkCompoundWidget >;
	protected var m_InventoryItems : array< weak< inkWidget > >;
	protected var m_IsDevice : Bool;
	default m_IsDevice = false;
	protected var m_InventoryManager : InventoryDataManagerV2;

	protected event OnInitialize()
	{
		m_ItemsLayout = ( ( inkCompoundWidget )( inkCompoundRef.Get( m_ItemsLayoutRef ) ) );
	}

	protected event OnUninitialize()
	{
		while( m_InventoryItems.Size() > 0 )
		{
			DeleteItemDisplay( m_InventoryItems.PopBack() );
		}
		m_InventoryItems.Clear();
		if( !( m_InventoryManager ) )
		{
			m_InventoryManager.UnInitialize();
		}
	}

	public function PrepareInventory( player : PlayerPuppet )
	{
		if( !( m_InventoryManager ) )
		{
			m_InventoryManager = new InventoryDataManagerV2;
			m_InventoryManager.Initialize( player );
		}
		m_ItemsOwner = ( ( GameObject )( player ) );
	}

	public function PrepareInventory( player : PlayerPuppet, owner : GameObject )
	{
		if( !( m_InventoryManager ) )
		{
			m_InventoryManager = new InventoryDataManagerV2;
			m_InventoryManager.Initialize( player );
		}
		m_ItemsOwner = owner;
	}

	public function ShowInventory( const items : ref< array< weak< gameItemData > > > )
	{
		var i, limit, sizeItems, sizeWidgets : Int32;
		var currObject : weak< inkWidget >;
		for( i = 0, sizeItems = items.Size(), sizeWidgets = m_InventoryItems.Size(), limit = Max( sizeItems, sizeWidgets ); i < limit; i += 1 )
		{
			if( i < sizeItems )
			{
				if( i < sizeWidgets )
				{
					currObject = m_InventoryItems[ i ];
				}
				else
				{
					currObject = CreateInventoryDisplay();
				}
				SetupItemDisplay( currObject, items[ i ] );
			}
			else
			{
				DeleteItemDisplay( m_InventoryItems.PopBack() );
			}
		}
	}

	protected virtual function CreateInventoryDisplay() : weak< inkWidget >
	{
		var newObject : weak< inkWidget >;
		var button : weak< inkButtonController >;
		newObject = ( ( inkWidget )( SpawnFromLocal( m_ItemsLayout, m_InventoryItemName ) ) );
		button = ( ( inkButtonController )( newObject.GetControllerByType( 'inkButtonController' ) ) );
		if( button )
		{
			button.RegisterToCallback( 'OnButtonClick', this, 'OnButtonClick' );
		}
		newObject.RegisterToCallback( 'OnRequestTooltip', this, 'OnInventoryItemEnter' );
		newObject.RegisterToCallback( 'OnDismissTooltip', this, 'OnInventoryItemExit' );
		m_InventoryItems.PushBack( newObject );
		return newObject;
	}

	protected virtual function SetupItemDisplay( itemDisplay : weak< inkWidget >, itemData : weak< gameItemData > )
	{
		var currLogic : weak< InventoryItemDisplay >;
		currLogic = ( ( InventoryItemDisplay )( itemDisplay.GetController() ) );
		if( currLogic )
		{
			currLogic.Setup( m_InventoryManager.GetInventoryItemData( m_ItemsOwner, itemData ) );
		}
	}

	protected virtual function DeleteItemDisplay( itemDisplay : weak< inkWidget > )
	{
		var button : weak< inkButtonController >;
		button = ( ( inkButtonController )( itemDisplay.GetControllerByType( 'inkButtonController' ) ) );
		if( button )
		{
			button.RegisterToCallback( 'OnButtonClick', this, 'OnButtonClick' );
		}
		itemDisplay.UnregisterFromCallback( 'OnRequestTooltip', this, 'OnInventoryItemEnter' );
		itemDisplay.UnregisterFromCallback( 'OnDismissTooltip', this, 'OnInventoryItemExit' );
		m_ItemsLayout.RemoveChild( itemDisplay );
	}

	protected event OnButtonClick( controller : weak< inkButtonController > )
	{
		OnItemClicked( controller.GetRootWidget() );
	}

	protected virtual function OnItemClicked( e : weak< inkWidget > ) {}

	public function GetTooltipsData() : array< ATooltipData >
	{
		return m_TooltipsData;
	}

	protected event OnInventoryItemEnter( e : weak< inkWidget > )
	{
		var equippedData, inspectedData : InventoryItemData;
		var controller : weak< InventoryItemDisplay >;
		controller = ( ( InventoryItemDisplay )( e.GetController() ) );
		if( controller )
		{
			inspectedData = controller.GetItemData();
			equippedData = m_InventoryManager.GetEquippedCounterpartForInventroyItem( inspectedData );
			RefreshTooltips( inspectedData, equippedData );
		}
	}

	private function RefreshTooltips( const tooltipItemData : ref< InventoryItemData >, const equippedItemData : ref< InventoryItemData > )
	{
		var inspectedTooltip : InventoryTooltipData;
		m_TooltipsData.Clear();
		if( !( InventoryItemData.IsEmpty( tooltipItemData ) ) )
		{
			inspectedTooltip = m_InventoryManager.GetComparisonTooltipsData( equippedItemData, tooltipItemData );
			m_TooltipsData.PushBack( inspectedTooltip );
			if( !( InventoryItemData.IsEmpty( equippedItemData ) ) )
			{
				m_TooltipsData.PushBack( m_InventoryManager.GetTooltipDataForInventoryItem( equippedItemData, true ) );
			}
		}
		TooltipDataPostProcess();
		CallCustomCallback( 'OnRequestTooltip' );
	}

	protected virtual function TooltipDataPostProcess() {}

	protected event OnInventoryItemExit( e : weak< inkWidget > )
	{
		CallCustomCallback( 'OnDismissTooltip' );
	}

}

