class ProgressBarButton extends inkLogicController
{
	protected editable var m_craftingFill : inkWidgetRef;
	protected editable var m_craftingLabel : inkTextRef;
	var ButtonController : weak< inkButtonController >;
	private var m_progressController : weak< ProgressBarsController >;
	private var m_available : Bool;
	private var m_progress : Float;

	protected event OnInitialize()
	{
		ButtonController = ( ( inkButtonController )( GetControllerByBaseType( 'inkButtonController' ) ) );
		inkWidgetRef.SetScale( m_craftingFill, Vector2( 0.0, 1.0 ) );
		if( ButtonController )
		{
			ButtonController.RegisterToCallback( 'OnHold', this, 'OnCraftingHoldButton' );
			ButtonController.RegisterToCallback( 'OnRelease', this, 'OnReleaseButton' );
		}
		m_progress = 0.0;
	}

	protected event OnCraftingHoldButton( evt : inkPointerEvent )
	{
		var finishedProccess : ProgressBarFinishedProccess;
		if( evt.IsAction( 'craft_item' ) && m_available )
		{
			m_progress = evt.GetHoldProgress();
			m_progressController.SetBarProgress( m_progress );
			inkWidgetRef.SetScale( m_craftingFill, Vector2( m_progress, 1.0 ) );
			inkWidgetRef.SetOpacity( m_craftingFill, m_progress / 2.0 );
			if( m_progress >= 1.0 )
			{
				inkWidgetRef.SetScale( m_craftingFill, Vector2( 0.0, 1.0 ) );
				m_progressController.SetBarProgress( 0.0 );
				finishedProccess = new ProgressBarFinishedProccess;
				QueueEvent( finishedProccess );
				PlaySound( 'Item', 'OnCrafted' );
			}
		}
	}

	protected event OnReleaseButton( evt : inkPointerEvent )
	{
		if( evt.IsAction( 'click' ) )
		{
			inkWidgetRef.SetScale( m_craftingFill, Vector2( 0.0, 1.0 ) );
			m_progressController.SetBarProgress( 0.0 );
			if( ( m_progress > 0.0 ) && ( m_progress < 1.0 ) )
			{
				PlaySound( 'Item', 'OnCraftFailed' );
			}
			m_progress = 0.0;
		}
	}

	public function SetupProgressButton( label : String, progressController : weak< ProgressBarsController > )
	{
		m_progressController = progressController;
		m_progressController.SetBarProgress( 0.0 );
		inkTextRef.SetText( m_craftingLabel, label );
	}

	public function SetAvaibility( available : Bool )
	{
		var state : CName;
		state = ( ( available ) ? ( 'Default' ) : ( 'Blocked' ) );
		GetRootWidget().SetState( state );
		m_available = available;
	}

	protected event OnUnitialize()
	{
		ButtonController.UnregisterFromCallback( 'OnHold', this, 'OnCraftingHoldButton' );
		ButtonController.UnregisterFromCallback( 'OnRelease', this, 'OnReleaseButton' );
	}

}

class ProgressBarFinishedProccess extends Event
{
}

