class UIInventoryItemsManager
{
	private var m_iconsNameResolver : IconsNameResolver;
	private var m_useMaleIcons : Bool;
	private var m_ammoTypeCache : inkIntHashMap;
	private var m_statsMapCache : inkWeakHashMap;
	private var m_statsPropertiesCache : inkHashMap;
	private var m_player : weak< PlayerPuppet >;
	private var m_transactionSystem : TransactionSystem;
	private var m_uiScriptableSystem : weak< UIScriptableSystem >;
	private var m_equippedItemsFetched : Bool;
	private var m_equippedItems : array< ItemID >;
	private var m_transmogItemsFetched : Bool;
	private var m_transmogItems : array< ItemID >;

	public static function Make( player : weak< PlayerPuppet >, transactionSystem : TransactionSystem, uiScriptableSystem : weak< UIScriptableSystem > ) : UIInventoryItemsManager
	{
		var instance : UIInventoryItemsManager;
		instance = new UIInventoryItemsManager;
		instance.m_transactionSystem = transactionSystem;
		instance.m_uiScriptableSystem = uiScriptableSystem;
		instance.m_iconsNameResolver = IconsNameResolver.GetIconsNameResolver();
		instance.m_useMaleIcons = UIGenderHelper.GetIconGender( player ) == ItemIconGender.Male;
		instance.AttachPlayer( player );
		instance.m_ammoTypeCache = new inkIntHashMap;
		instance.m_statsMapCache = new inkWeakHashMap;
		instance.m_statsPropertiesCache = new inkHashMap;
		return instance;
	}

	public function AttachPlayer( player : weak< PlayerPuppet > )
	{
		this.m_player = player;
	}

	public function GetAttachedPlayer() : weak< PlayerPuppet >
	{
		return m_player;
	}

	public function GetTransactionSystem() : weak< TransactionSystem >
	{
		return m_transactionSystem;
	}

	public static function ResolveItemIconName( itemTweakID : TweakDBID, itemRecord : weak< Item_Record >, manager : weak< UIInventoryItemsManager > ) : String
	{
		var result : String;
		var resolver : weak< IconsNameResolver >;
		var useMaleIcons : Bool;
		result = itemRecord.IconPath();
		if( IsStringValid( result ) )
		{
			return "UIIcon." + result;
		}
		resolver = ( ( manager ) ? ( manager.m_iconsNameResolver ) : ( IconsNameResolver.GetIconsNameResolver() ) );
		useMaleIcons = ( ( manager ) ? ( manager.m_useMaleIcons ) : ( false ) );
		result = NameToString( resolver.TranslateItemToIconName( itemTweakID, useMaleIcons ) );
		if( IsStringValid( result ) )
		{
			return "UIIcon." + result;
		}
		return result;
	}

	public static function ResolveItemIconName( itemTweakID : TweakDBID, itemRecord : weak< Item_Record >, useMaleIcon : Bool ) : String
	{
		var result : String;
		var useMaleIcons : Bool;
		result = itemRecord.IconPath();
		if( IsStringValid( result ) )
		{
			return "UIIcon." + result;
		}
		result = NameToString( IconsNameResolver.GetIconsNameResolver().TranslateItemToIconName( itemTweakID, useMaleIcons ) );
		if( IsStringValid( result ) )
		{
			return "UIIcon." + result;
		}
		return result;
	}

	public static function ResolveItemIconName( itemTweakID : TweakDBID, itemRecord : weak< Item_Record >, player : weak< PlayerPuppet > ) : String
	{
		return ResolveItemIconName( itemTweakID, itemRecord, ( ( player ) ? ( UIGenderHelper.GetIconGender( player ) == ItemIconGender.Male ) : ( false ) ) );
	}

	public static function GetAmmo( itemRecord : weak< Item_Record >, optional force : Bool, manager : weak< UIInventoryItemsManager > ) : Int32
	{
		var ammoId : ItemID;
		var ammoHash : Uint64;
		var weaponRecord : WeaponItem_Record;
		var category : gamedataItemCategory;
		var ammoCount : Int32;
		if( manager && ( manager.m_player != NULL ) )
		{
			category = itemRecord.ItemCategory().Type();
			if( category == gamedataItemCategory.Weapon )
			{
				weaponRecord = ( ( WeaponItem_Record )( itemRecord ) );
				ammoId = ItemID.CreateQuery( weaponRecord.Ammo().GetID() );
				if( force )
				{
					return manager.m_transactionSystem.GetItemQuantity( manager.m_player, ammoId );
				}
				ammoHash = ItemID.GetCombinedHash( ammoId );
				ammoCount = manager.m_ammoTypeCache.Get( ammoHash );
				if( ammoCount >= 0 )
				{
					return ammoCount;
				}
				ammoCount = manager.m_transactionSystem.GetItemQuantity( manager.m_player, ammoId );
				manager.m_ammoTypeCache.Insert( ammoHash, ammoCount );
				return ammoCount;
			}
		}
		return -1;
	}

	public function FlushAmmoCache()
	{
		m_ammoTypeCache.Clear();
	}

	public static function GetUIStatsMap( itemType : gamedataItemType, optional manager : weak< UIInventoryItemsManager > ) : weak< UIStatsMap_Record >
	{
		var numericItemType : Uint64;
		var record : weak< UIStatsMap_Record >;
		numericItemType = ( ( Uint64 )( itemType ) );
		if( manager )
		{
			record = ( ( weak< weak< UIStatsMap_Record > > )( manager.m_statsMapCache.Get( numericItemType ) ) );
			if( record )
			{
				return record;
			}
		}
		record = TDB.GetUIStatsMapRecord( TDBID.Create( "UIMaps." + EnumValueToString( "gamedataItemType", ( ( Int32 )( numericItemType ) ) ) ) );
		if( manager )
		{
			manager.m_statsMapCache.Insert( numericItemType, record );
		}
		return record;
	}

	public static function GetUIStatProperties( statType : gamedataStatType ) : UIItemStatProperties
	{
		var statId : TweakDBID;
		statId = TDBID.Create( "BaseStats." + EnumValueToString( "gamedataStatType", ( ( Int32 )( statType ) ) ) );
		return UIInventoryItemsManager.GetUIStatProperties( statId );
	}

	public static function GetUIStatProperties( statId : TweakDBID ) : UIItemStatProperties
	{
		var instance : UIItemStatProperties;
		instance = new UIItemStatProperties;
		instance = UIItemStatProperties.Make( TweakDBInterface.GetString( statId + T".localizedName", "" ), TweakDBInterface.GetBool( statId + T".roundValue", false ), TweakDBInterface.GetBool( statId + T".isPercentage", false ), TweakDBInterface.GetBool( statId + T".displayPlus", false ), TweakDBInterface.GetBool( statId + T".inMeters", false ), TweakDBInterface.GetBool( statId + T".inSeconds", false ), TweakDBInterface.GetBool( statId + T".inSpeed", false ) );
		return instance;
	}

	public static function GetUIStatProperties( statType : gamedataStatType, roundValue : Bool ) : UIItemStatProperties
	{
		var statId : TweakDBID;
		statId = TDBID.Create( "BaseStats." + EnumValueToString( "gamedataStatType", ( ( Int32 )( statType ) ) ) );
		return UIInventoryItemsManager.GetUIStatProperties( statId );
	}

	public static function GetUIStatProperties( statId : TweakDBID, roundValue : Bool ) : UIItemStatProperties
	{
		var instance : UIItemStatProperties;
		instance = new UIItemStatProperties;
		instance = UIItemStatProperties.Make( TweakDBInterface.GetString( statId + T".localizedName", "" ), roundValue, TweakDBInterface.GetBool( statId + T".isPercentage", false ), TweakDBInterface.GetBool( statId + T".displayPlus", false ), TweakDBInterface.GetBool( statId + T".inMeters", false ), TweakDBInterface.GetBool( statId + T".inSeconds", false ), TweakDBInterface.GetBool( statId + T".inSpeed", false ) );
		return instance;
	}

	public function GetCachedUIStatProperties( statType : gamedataStatType ) : weak< UIItemStatProperties >
	{
		var instance : UIItemStatProperties;
		instance = ( ( weak< weak< UIItemStatProperties > > )( m_statsPropertiesCache.Get( ( ( Uint64 )( statType ) ) ) ) );
		if( instance )
		{
			return instance;
		}
		instance = UIInventoryItemsManager.GetUIStatProperties( statType );
		m_statsPropertiesCache.Insert( ( ( Uint64 )( statType ) ), instance );
		return instance;
	}

	public function GetCachedUIStatProperties( statType : gamedataStatType, roundValue : Bool ) : weak< UIItemStatProperties >
	{
		var instance : UIItemStatProperties;
		instance = ( ( weak< weak< UIItemStatProperties > > )( m_statsPropertiesCache.Get( ( ( Uint64 )( statType ) ) ) ) );
		if( instance )
		{
			return instance;
		}
		instance = UIInventoryItemsManager.GetUIStatProperties( statType, roundValue );
		m_statsPropertiesCache.Insert( ( ( Uint64 )( statType ) ), instance );
		return instance;
	}

	public function FlushStatMaps()
	{
		m_statsMapCache.Clear();
	}

	public function GetCachedEquippedItems() : array< ItemID >
	{
		var equipmentSystem : EquipmentSystem;
		var playerData : EquipmentSystemPlayerData;
		if( m_equippedItemsFetched )
		{
			return m_equippedItems;
		}
		equipmentSystem = EquipmentSystem.GetInstance( m_player );
		playerData = equipmentSystem.GetPlayerData( m_player );
		m_equippedItems.PushBack( playerData.GetItemInEquipSlot( gamedataEquipmentArea.Head, 0 ) );
		m_equippedItems.PushBack( playerData.GetItemInEquipSlot( gamedataEquipmentArea.Face, 0 ) );
		m_equippedItems.PushBack( playerData.GetItemInEquipSlot( gamedataEquipmentArea.OuterChest, 0 ) );
		m_equippedItems.PushBack( playerData.GetItemInEquipSlot( gamedataEquipmentArea.InnerChest, 0 ) );
		m_equippedItems.PushBack( playerData.GetItemInEquipSlot( gamedataEquipmentArea.Legs, 0 ) );
		m_equippedItems.PushBack( playerData.GetItemInEquipSlot( gamedataEquipmentArea.Feet, 0 ) );
		m_equippedItems.PushBack( playerData.GetItemInEquipSlot( gamedataEquipmentArea.Outfit, 0 ) );
		m_equippedItems.PushBack( playerData.GetItemInEquipSlot( gamedataEquipmentArea.Weapon, 0 ) );
		m_equippedItems.PushBack( playerData.GetItemInEquipSlot( gamedataEquipmentArea.Weapon, 1 ) );
		m_equippedItems.PushBack( playerData.GetItemInEquipSlot( gamedataEquipmentArea.Weapon, 2 ) );
		m_equippedItems.PushBack( playerData.GetItemInEquipSlot( gamedataEquipmentArea.QuickSlot, 0 ) );
		m_equippedItemsFetched = true;
		return m_equippedItems;
	}

	public function IsItemNew( item : ItemID ) : Bool
	{
		return m_uiScriptableSystem.IsInventoryItemNew( item );
	}

	public function IsItemEquipped( itemID : ItemID ) : Bool
	{
		if( m_equippedItemsFetched )
		{
			return m_equippedItems.Contains( itemID );
		}
		GetCachedEquippedItems();
		return m_equippedItems.Contains( itemID );
	}

	public function FlushEquippedItems()
	{
		m_equippedItems.Clear();
		m_equippedItemsFetched = false;
	}

	public function GetRawEquippedItems( equipmentArea : gamedataEquipmentArea ) : array< ItemID >
	{
		var equipmentSystem : EquipmentSystem;
		var playerData : EquipmentSystemPlayerData;
		var result : array< ItemID >;
		equipmentSystem = EquipmentSystem.GetInstance( m_player );
		playerData = equipmentSystem.GetPlayerData( m_player );
		result.PushBack( playerData.GetItemInEquipSlot( equipmentArea, 0 ) );
		if( equipmentArea == gamedataEquipmentArea.Weapon )
		{
			result.PushBack( playerData.GetItemInEquipSlot( equipmentArea, 1 ) );
			result.PushBack( playerData.GetItemInEquipSlot( equipmentArea, 2 ) );
		}
		return result;
	}

	private function AddTransmogIfNotEmpty( itemID : ItemID )
	{
		if( ItemID.IsValid( itemID ) )
		{
			m_transmogItems.PushBack( itemID );
		}
	}

	public function GetCachedTransmogItems() : array< ItemID >
	{
		var equipmentSystem : EquipmentSystem;
		var playerData : EquipmentSystemPlayerData;
		if( m_transmogItemsFetched )
		{
			return m_transmogItems;
		}
		equipmentSystem = EquipmentSystem.GetInstance( m_player );
		playerData = equipmentSystem.GetPlayerData( m_player );
		AddTransmogIfNotEmpty( playerData.GetSlotOverridenVisualItem( gamedataEquipmentArea.Head ) );
		AddTransmogIfNotEmpty( playerData.GetSlotOverridenVisualItem( gamedataEquipmentArea.Face ) );
		AddTransmogIfNotEmpty( playerData.GetSlotOverridenVisualItem( gamedataEquipmentArea.OuterChest ) );
		AddTransmogIfNotEmpty( playerData.GetSlotOverridenVisualItem( gamedataEquipmentArea.InnerChest ) );
		AddTransmogIfNotEmpty( playerData.GetSlotOverridenVisualItem( gamedataEquipmentArea.Legs ) );
		AddTransmogIfNotEmpty( playerData.GetSlotOverridenVisualItem( gamedataEquipmentArea.Feet ) );
		m_transmogItemsFetched = true;
		return m_transmogItems;
	}

	public function IsItemTransmog( itemID : ItemID ) : Bool
	{
		if( m_transmogItemsFetched )
		{
			return m_transmogItems.Contains( itemID );
		}
		GetCachedTransmogItems();
		return m_transmogItems.Contains( itemID );
	}

	public function FlushTransmogItems()
	{
		m_transmogItems.Clear();
		m_transmogItemsFetched = false;
	}

	public static function IsItemTypeWeapon( itemType : gamedataItemType ) : Bool
	{
		return UIInventoryItemsManager.GetItemTypeWeapon( itemType ) != WeaponType.Invalid;
	}

	public static function GetItemTypeWeapon( itemType : gamedataItemType ) : WeaponType
	{
		if( UIInventoryItemsManager.IsItemTypeRangedWeapon( itemType ) )
		{
			return WeaponType.Ranged;
		}
		if( UIInventoryItemsManager.IsItemTypeMeleeWeapon( itemType ) )
		{
			return WeaponType.Melee;
		}
		return WeaponType.Invalid;
	}

	public static function GetBlacklistedTags() : array< CName >
	{
		var tags : array< CName >;
		tags.PushBack( 'HideInBackpackUI' );
		tags.PushBack( 'SoftwareShsard' );
		tags.PushBack( 'TppHead' );
		tags.PushBack( 'HideInUI' );
		tags.PushBack( 'Currency' );
		tags.PushBack( 'Ammo' );
		tags.PushBack( 'base_fists' );
		return tags;
	}

	public static function IsItemTypeCloting( itemType : gamedataItemType ) : Bool
	{
		return ( ( ( ( ( itemType == gamedataItemType.Clo_Face || itemType == gamedataItemType.Clo_Feet ) || itemType == gamedataItemType.Clo_Head ) || itemType == gamedataItemType.Clo_InnerChest ) || itemType == gamedataItemType.Clo_Legs ) || itemType == gamedataItemType.Clo_OuterChest ) || itemType == gamedataItemType.Clo_Outfit;
	}

	public static function IsItemTypeMeleeWeapon( itemType : gamedataItemType ) : Bool
	{
		return ( ( ( ( ( ( ( ( ( ( itemType == gamedataItemType.Wea_TwoHandedClub || itemType == gamedataItemType.Wea_ShortBlade ) || itemType == gamedataItemType.Wea_OneHandedClub ) || itemType == gamedataItemType.Wea_Melee ) || itemType == gamedataItemType.Wea_LongBlade ) || itemType == gamedataItemType.Wea_Katana ) || itemType == gamedataItemType.Wea_Knife ) || itemType == gamedataItemType.Wea_Axe ) || itemType == gamedataItemType.Wea_Chainsword ) || itemType == gamedataItemType.Wea_Machete ) || itemType == gamedataItemType.Wea_Fists ) || itemType == gamedataItemType.Wea_Hammer;
	}

	public static function IsItemTypeRangedWeapon( itemType : gamedataItemType ) : Bool
	{
		return ( ( ( ( ( ( ( ( ( itemType == gamedataItemType.Wea_AssaultRifle || itemType == gamedataItemType.Wea_Handgun ) || itemType == gamedataItemType.Wea_HeavyMachineGun ) || itemType == gamedataItemType.Wea_LightMachineGun ) || itemType == gamedataItemType.Wea_PrecisionRifle ) || itemType == gamedataItemType.Wea_Revolver ) || itemType == gamedataItemType.Wea_Rifle ) || itemType == gamedataItemType.Wea_Shotgun ) || itemType == gamedataItemType.Wea_ShotgunDual ) || itemType == gamedataItemType.Wea_SniperRifle ) || itemType == gamedataItemType.Wea_SubmachineGun;
	}

	public static function QualityToInt( quality : gamedataQuality ) : Int32
	{
		return UIItemsHelper.QualityEnumToInt( quality );
	}

	public static function QualityToName( quality : gamedataQuality ) : CName
	{
		return UIItemsHelper.QualityEnumToName( quality );
	}

	public static function QualityFromInt( quality : Int32 ) : gamedataQuality
	{
		switch( quality )
		{
			case 0:
				return gamedataQuality.Common;
			case 1:
				return gamedataQuality.Uncommon;
			case 2:
				return gamedataQuality.Rare;
			case 3:
				return gamedataQuality.Epic;
			case 4:
				return gamedataQuality.Legendary;
			case 5:
				return gamedataQuality.Iconic;
		}
		return gamedataQuality.Invalid;
	}

}

