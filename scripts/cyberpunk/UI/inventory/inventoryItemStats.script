class UIInventoryItemStatsManager
{
	var Stats : array< UIInventoryItemStat >;
	private var m_manager : weak< UIInventoryItemsManager >;

	public static function Make( itemData : gameItemData, statMap : weak< UIStatsMap_Record >, optional manager : weak< UIInventoryItemsManager > ) : UIInventoryItemStatsManager
	{
		var instance : UIInventoryItemStatsManager;
		var i, limit : Int32;
		var secondaryStats : array< weak< Stat_Record > >;
		var itemStat : UIInventoryItemStat;
		var roundValue : Bool;
		var type : gamedataStatType;
		var value, absValue : Float;
		var isClothing : Bool;
		isClothing = UIInventoryItemsManager.IsItemTypeCloting( itemData.GetItemType() );
		instance = new UIInventoryItemStatsManager;
		instance.m_manager = manager;
		statMap.SecondaryStats( secondaryStats );
		for( i = 0, limit = secondaryStats.Size(); i < limit; i += 1 )
		{
			type = secondaryStats[ i ].StatType();
			if( isClothing && type == gamedataStatType.Armor )
			{
				continue;
			}
			value = itemData.GetStatValueByType( type );
			roundValue = TweakDBInterface.GetBool( secondaryStats[ i ].GetID() + T".isPercentage", false );
			absValue = AbsF( value );
			if( ( ( roundValue ) ? ( RoundF( absValue ) <= 0 ) : ( absValue <= 0.01 ) ) )
			{
				continue;
			}
			itemStat = new UIInventoryItemStat;
			itemStat.Type = type;
			itemStat.Value = value;
			if( instance.m_manager )
			{
				itemStat.Properties = instance.m_manager.GetCachedUIStatProperties( itemStat.Type );
			}
			else
			{
				itemStat.Properties = UIInventoryItemsManager.GetUIStatProperties( itemStat.Type );
			}
			instance.Stats.PushBack( itemStat );
		}
		return instance;
	}

	public static function FromMinimalItemTooltipData( data : MinimalItemTooltipData, optional manager : weak< UIInventoryItemsManager > ) : UIInventoryItemStatsManager
	{
		var instance : UIInventoryItemStatsManager;
		var i, limit : Int32;
		var itemStat : UIInventoryItemStat;
		instance = new UIInventoryItemStatsManager;
		instance.m_manager = manager;
		for( i = 0, limit = data.stats.Size(); i < limit; i += 1 )
		{
			itemStat = new UIInventoryItemStat;
			itemStat.Type = data.stats[ i ].type;
			itemStat.Value = data.stats[ i ].value;
			itemStat.Properties = UIItemStatProperties.Make( data.stats[ i ].statName, data.stats[ i ].roundValue, data.stats[ i ].isPercentage, data.stats[ i ].displayPlus, data.stats[ i ].inMeters, data.stats[ i ].inSeconds, data.stats[ i ].inSpeed );
			instance.Stats.PushBack( itemStat );
		}
		return instance;
	}

	public function Size() : Int32
	{
		return Stats.Size();
	}

	public function Get( index : Int32 ) : weak< UIInventoryItemStat >
	{
		return Stats[ index ];
	}

	public function GetByType( type : gamedataStatType ) : weak< UIInventoryItemStat >
	{
		var i, limit : Int32;
		for( i = 0, limit = Stats.Size(); i < limit; i += 1 )
		{
			if( Stats[ i ].Type == type )
			{
				return Stats[ i ];
			}
		}
		return NULL;
	}

}

class UIItemStatProperties
{
	private var localizedName : String;
	private var roundValue : Bool;
	private var isPercentage : Bool;
	private var displayPlus : Bool;
	private var inMeters : Bool;
	private var inSeconds : Bool;
	private var inSpeed : Bool;

	public static function Make( localizedName : String, roundValue : Bool, isPercentage : Bool, displayPlus : Bool, inMeters : Bool, inSeconds : Bool, inSpeed : Bool ) : UIItemStatProperties
	{
		var instance : UIItemStatProperties;
		instance = new UIItemStatProperties;
		instance.localizedName = localizedName;
		instance.roundValue = roundValue;
		instance.isPercentage = isPercentage;
		instance.displayPlus = displayPlus;
		instance.inMeters = inMeters;
		instance.inSeconds = inSeconds;
		instance.inSpeed = inSpeed;
		return instance;
	}

	public function GetName() : String
	{
		return localizedName;
	}

	public function RoundValue() : Bool
	{
		return roundValue;
	}

	public function IsPercentage() : Bool
	{
		return isPercentage;
	}

	public function DisplayPlus() : Bool
	{
		return displayPlus;
	}

	public function InMeters() : Bool
	{
		return inMeters;
	}

	public function InSeconds() : Bool
	{
		return inSeconds;
	}

	public function InSpeed() : Bool
	{
		return inSpeed;
	}

}

class UIInventoryItemStat
{
	var Type : gamedataStatType;
	var Value : Float;
	var Properties : UIItemStatProperties;
}

