class ColorTemplatePreviewVirtualController extends inkVirtualCompoundItemController
{
	private editable var m_widgetToSpawn : CName;
	private var m_wrappedData : WrappedTemplateData;
	private var m_spawnedWidget : weak< inkWidget >;
	private var m_templatePreview : weak< ColorTemplatePreviewDisplayController >;
	private var m_templateToggled : Bool;
	private var m_templateSelected : Bool;
	private var m_canNavigate : Bool;
	default m_canNavigate = true;
	private var m_colorCorrectionEnabled : Bool;
	default m_colorCorrectionEnabled = false;

	public function GetCurrentData() : WrappedTemplateData
	{
		return m_wrappedData;
	}

	protected event OnInitialize()
	{
		GetRootWidget().SetVAlign( inkEVerticalAlign.Top );
		GetRootWidget().SetHAlign( inkEHorizontalAlign.Left );
		AsyncSpawnFromLocal( GetRootCompoundWidget(), m_widgetToSpawn, this, 'OnWidgetSpawned' );
		RegisterToCallback( 'OnSelected', this, 'OnSelected' );
		RegisterToCallback( 'OnDeselected', this, 'OnDeselected' );
		RegisterToCallback( 'OnToggledOn', this, 'OnToggledOn' );
		RegisterToCallback( 'OnToggledOff', this, 'OnToggledOff' );
		SetEnabled( false );
		SetSelectable( false );
		SetVisualSelected( false );
		SetVisualToggled( false );
	}

	protected event OnUninitialize()
	{
		UnregisterFromCallback( 'OnSelected', this, 'OnSelected' );
		UnregisterFromCallback( 'OnDeselected', this, 'OnDeselected' );
		UnregisterFromCallback( 'OnToggledOn', this, 'OnToggledOn' );
		UnregisterFromCallback( 'OnToggledOff', this, 'OnToggledOff' );
		UnregisterFromCallbacks();
	}

	protected event OnWidgetSpawned( widget : inkWidget, userData : IScriptable )
	{
		m_spawnedWidget = widget;
		SetupData();
	}

	protected event OnDataChanged( value : Variant )
	{
		m_wrappedData = ( ( WrappedTemplateData )( ( ( IScriptable )value ) ) );
		RegisterToCallbacks();
		SetupData();
	}

	private function SetupData()
	{
		if( !( m_wrappedData ) || !( m_spawnedWidget ) )
		{
			return;
		}
		m_templatePreview = ( ( ColorTemplatePreviewDisplayController )( m_spawnedWidget.GetController() ) );
		m_templatePreview.SetTemplate( m_wrappedData.m_template );
		SetVisualToggled( m_templateToggled );
		SetVisualSelected( m_templateSelected );
		UpdateNavigationState();
		m_templatePreview.SetToggleable( VehicleVisualCustomizationTemplate.IsValid( m_wrappedData.m_template ) );
		m_templatePreview.SetCanAdd( m_wrappedData.m_canAcceptSave );
		m_templatePreview.SetColorCorrectionEnabled( m_colorCorrectionEnabled );
	}

	public function UpdateData( wrappedData : WrappedTemplateData )
	{
		UnregisterFromCallbacks();
		m_wrappedData = wrappedData;
		RegisterToCallbacks();
		SetupData();
	}

	protected event OnSelected( itemController : weak< inkVirtualCompoundItemController >, discreteNav : Bool )
	{
		if( !( m_canNavigate ) || !( VehicleVisualCustomizationTemplate.IsValid( m_wrappedData.m_template ) ) )
		{
			return false;
		}
		if( discreteNav )
		{
			m_wrappedData.SelectInParentGrid();
		}
		SetVisualSelected( true );
		m_templateSelected = true;
		if( m_wrappedData.m_parentGridController )
		{
			m_wrappedData.m_parentGridController.SetSelectedController( this );
		}
	}

	protected event OnDeselected( itemController : weak< inkVirtualCompoundItemController > )
	{
		if( !( m_canNavigate ) )
		{
			return false;
		}
		SetVisualSelected( false );
		m_templateSelected = false;
		if( m_wrappedData.m_parentGridController && ( m_wrappedData.m_parentGridController.GetSelectedController() == this ) )
		{
			m_wrappedData.m_parentGridController.SetSelectedController( NULL );
		}
	}

	protected event OnToggledOn( itemController : weak< inkVirtualCompoundItemController > )
	{
		if( !( m_canNavigate ) )
		{
			return false;
		}
		if( !( VehicleVisualCustomizationTemplate.IsValid( m_wrappedData.m_template ) ) )
		{
			return false;
		}
		HandleToggleOn();
	}

	public function HandleToggleOn()
	{
		SetVisualToggled( true );
		m_templateToggled = true;
		if( m_wrappedData.m_parentGridController )
		{
			m_wrappedData.m_parentGridController.SetToggledController( this );
		}
	}

	protected event OnTemplateToggled( widget : weak< inkWidget > )
	{
		if( !( m_wrappedData.m_parentGridController ) )
		{
			return false;
		}
		if( !( m_wrappedData.m_parentGridController.GetToggledController() ) || !( VehicleVisualCustomizationTemplate.Equals( m_wrappedData.m_parentGridController.GetToggledController().GetCurrentData().m_template, m_wrappedData.m_template ) ) )
		{
			HandleToggleOff();
		}
	}

	protected event OnToggledOff( itemController : weak< inkVirtualCompoundItemController > )
	{
		if( !( VehicleVisualCustomizationTemplate.IsValid( m_wrappedData.m_template ) ) )
		{
			return false;
		}
		HandleToggleOff();
	}

	public function HandleToggleOff()
	{
		SetVisualToggled( false );
		m_templateToggled = false;
	}

	protected event OnNavigationEnabled( widget : weak< inkWidget > )
	{
		m_canNavigate = true;
		UpdateNavigationState();
	}

	protected event OnNavigationDisabled( widget : weak< inkWidget > )
	{
		m_canNavigate = false;
		UpdateNavigationState();
	}

	protected event OnColorCorrectionEnabled( widget : weak< inkWidget > )
	{
		m_templatePreview.SetColorCorrectionEnabled( true );
		m_colorCorrectionEnabled = true;
	}

	protected event OnColorCorrectionDisabled( widget : weak< inkWidget > )
	{
		m_templatePreview.SetColorCorrectionEnabled( false );
		m_colorCorrectionEnabled = false;
	}

	public function SetVisualSelected( value : Bool )
	{
		if( m_templatePreview )
		{
			m_templatePreview.SetSelected( value );
		}
	}

	public function SetVisualToggled( value : Bool )
	{
		if( m_templatePreview )
		{
			m_templatePreview.SetToggled( value );
		}
	}

	private function RegisterToCallbacks()
	{
		if( m_wrappedData.m_parentGridController )
		{
			m_wrappedData.m_parentGridController.RegisterToCallback( 'OnTemplateToggled', this, 'OnTemplateToggled' );
			m_wrappedData.m_parentGridController.RegisterToCallback( 'OnNavigationEnabled', this, 'OnNavigationEnabled' );
			m_wrappedData.m_parentGridController.RegisterToCallback( 'OnNavigationDisabled', this, 'OnNavigationDisabled' );
			m_wrappedData.m_parentGridController.RegisterToCallback( 'OnColorCorrectionEnabled', this, 'OnColorCorrectionEnabled' );
			m_wrappedData.m_parentGridController.RegisterToCallback( 'OnColorCorrectionDisabled', this, 'OnColorCorrectionDisabled' );
		}
	}

	private function UnregisterFromCallbacks()
	{
		if( m_wrappedData.m_parentGridController )
		{
			m_wrappedData.m_parentGridController.UnregisterFromCallback( 'OnTemplateToggled', this, 'OnTemplateToggled' );
			m_wrappedData.m_parentGridController.UnregisterFromCallback( 'OnNavigationEnabled', this, 'OnNavigationEnabled' );
			m_wrappedData.m_parentGridController.UnregisterFromCallback( 'OnNavigationDisabled', this, 'OnNavigationDisabled' );
			m_wrappedData.m_parentGridController.UnregisterFromCallback( 'OnColorCorrectionEnabled', this, 'OnColorCorrectionEnabled' );
			m_wrappedData.m_parentGridController.UnregisterFromCallback( 'OnColorCorrectionDisabled', this, 'OnColorCorrectionDisabled' );
		}
	}

	private function UpdateNavigationState()
	{
		SetEnabled( m_canNavigate && VehicleVisualCustomizationTemplate.IsValid( m_wrappedData.m_template ) );
		SetSelectable( m_canNavigate && VehicleVisualCustomizationTemplate.IsValid( m_wrappedData.m_template ) );
	}

}

class ColorTemplatePreviewDisplayController extends BaseButtonView
{
	private editable var m_primaryColorMask : inkImageRef;
	private editable var m_primaryColorMaskGroup : inkWidgetRef;
	private editable var m_secondaryColorMask : inkImageRef;
	private editable var m_secondaryColorMaskGroup : inkWidgetRef;
	private editable var m_lightColorMask : inkImageRef;
	private editable var m_lightColorMaskGroup : inkWidgetRef;
	private editable var m_frame : inkFlexRef;
	private editable var m_noTemplate : inkFlexRef;
	private editable var m_checkbox : inkFlexRef;
	private editable var m_templateType : inkImageRef;
	private editable var m_checkboxSquare : inkRectangleRef;
	private editable var m_addIcon : inkImageRef;
	private editable var m_uniqueTemplateImage : inkImageRef;
	private editable var m_frameSelected : inkImageRef;
	private editable var m_genericColor : HDRColor;
	private editable var m_uniqueColor : HDRColor;
	private var m_currentTemplate : VehicleVisualCustomizationTemplate;
	private var m_canAdd : Bool;

	public function SetToggleable( selectable : Bool )
	{
		inkFlexRef.SetVisible( m_checkbox, selectable );
	}

	public function SetCanAdd( canAdd : Bool )
	{
		m_canAdd = canAdd;
		if( !( VehicleVisualCustomizationTemplate.IsValid( m_currentTemplate ) ) || VehicleVisualCustomizationTemplate.GetType( m_currentTemplate ) != VehicleVisualCustomizationType.Generic )
		{
			inkImageRef.SetVisible( m_addIcon, canAdd );
		}
	}

	public function SetToggled( toggled : Bool )
	{
		inkRectangleRef.SetVisible( m_checkboxSquare, toggled );
		if( toggled )
		{
			inkFlexRef.SetVisible( m_checkbox, true );
		}
	}

	public function SetSelected( selected : Bool )
	{
		inkImageRef.SetVisible( m_frameSelected, selected );
	}

	public function SetTemplate( template : VehicleVisualCustomizationTemplate )
	{
		m_currentTemplate = template;
		if( VehicleVisualCustomizationTemplate.IsValid( template ) )
		{
			inkFlexRef.SetVisible( m_frame, true );
			inkImageRef.SetVisible( m_templateType, true );
			if( VehicleVisualCustomizationTemplate.GetType( template ) == VehicleVisualCustomizationType.Generic )
			{
				inkImageRef.SetVisible( m_uniqueTemplateImage, false );
				inkFlexRef.SetVisible( m_noTemplate, true );
				inkImageRef.SetVisible( m_addIcon, false );
				inkWidgetRef.SetVisible( m_primaryColorMaskGroup, template.genericData.primaryColorDefined );
				inkWidgetRef.SetVisible( m_secondaryColorMaskGroup, template.genericData.primaryColorDefined || template.genericData.secondaryColorDefined );
				inkWidgetRef.SetVisible( m_lightColorMaskGroup, template.genericData.lightsColorDefined );
				inkImageRef.SetTintColor( m_templateType, m_genericColor );
				if( template.genericData.primaryColorDefined )
				{
					inkImageRef.SetTintColor( m_primaryColorMask, Color.ToSRGB( GenericTemplatePersistentData.GetPrimaryColor( template.genericData ) ) );
				}
				if( template.genericData.secondaryColorDefined )
				{
					inkImageRef.SetTintColor( m_secondaryColorMask, Color.ToSRGB( GenericTemplatePersistentData.GetSecondaryColor( template.genericData ) ) );
				}
				else if( template.genericData.primaryColorDefined )
				{
					inkImageRef.SetTintColor( m_secondaryColorMask, Color.ToSRGB( GenericTemplatePersistentData.GetPrimaryColor( template.genericData ) ) );
				}
				if( template.genericData.lightsColorDefined )
				{
					inkImageRef.SetTintColor( m_lightColorMask, Color.ToSRGB( Color.HSBToColor( template.genericData.lightsColorHue, true ) ) );
				}
			}
			else
			{
				inkWidgetRef.SetVisible( m_primaryColorMaskGroup, false );
				inkWidgetRef.SetVisible( m_secondaryColorMaskGroup, false );
				inkWidgetRef.SetVisible( m_lightColorMaskGroup, false );
				inkImageRef.SetVisible( m_uniqueTemplateImage, true );
				inkFlexRef.SetVisible( m_noTemplate, false );
				inkImageRef.SetTintColor( m_templateType, m_uniqueColor );
				InkImageUtils.RequestSetImage( this, m_uniqueTemplateImage, template.uniqueData.customIcon.GetID() );
			}
		}
		else
		{
			inkWidgetRef.SetVisible( m_primaryColorMaskGroup, false );
			inkWidgetRef.SetVisible( m_secondaryColorMaskGroup, false );
			inkWidgetRef.SetVisible( m_lightColorMaskGroup, false );
			inkImageRef.SetVisible( m_uniqueTemplateImage, false );
			inkImageRef.SetVisible( m_templateType, false );
			inkFlexRef.SetVisible( m_frame, false );
			inkImageRef.SetVisible( m_addIcon, m_canAdd );
			inkFlexRef.SetVisible( m_noTemplate, true );
		}
	}

	public function SetColorCorrectionEnabled( enabled : Bool )
	{
		GetRootWidget().SetEffectEnabled( inkEffectType.ColorCorrection, 'srgbCorrection', enabled );
	}

	protected event OnInitialize()
	{
		super.OnInitialize();
		SetToggleable( false );
		SetToggled( false );
		SetCanAdd( false );
		SetColorCorrectionEnabled( false );
		inkWidgetRef.SetVisible( m_primaryColorMaskGroup, false );
		inkWidgetRef.SetVisible( m_secondaryColorMaskGroup, false );
		inkWidgetRef.SetVisible( m_lightColorMaskGroup, false );
	}

}

class TwintoneTemplateGridController extends inkGridController
{
	private var m_templatesDataSource : ScriptableDataSource;
	private var m_templatesDataView : ScriptableDataView;
	private var m_templatesDataClassifier : VehicleVisualCustomizationTemplateClassifier;
	private var m_templatePositionProvider : VehicleVisualCustomizationTemplatePositionProvider;
	private var m_player : weak< PlayerPuppet >;
	private var m_toggledController : weak< ColorTemplatePreviewVirtualController >;
	private var m_selectedController : weak< ColorTemplatePreviewVirtualController >;
	private var m_canNavigate : Bool;
	default m_canNavigate = true;
	private var m_colorCorrectionEnabled : Bool;
	default m_colorCorrectionEnabled = false;

	public function GetSelectedController() : weak< ColorTemplatePreviewVirtualController >
	{
		return m_selectedController;
	}

	public function GetToggledController() : weak< ColorTemplatePreviewVirtualController >
	{
		return m_toggledController;
	}

	public function GetFirstEmptyIndex() : Uint32
	{
		var i : Uint32;
		var controller : ColorTemplatePreviewVirtualController;
		for( i = 0; i < m_templatesDataSource.GetArraySize(); i += 1 )
		{
			controller = GetControllerAtIndex( i );
			if( !( VehicleVisualCustomizationTemplate.IsValid( controller.GetCurrentData().m_template ) ) )
			{
				return i;
			}
		}
		return ( ( Uint32 )( -1 ) );
	}

	public function GetControllerAtIndex( index : Uint32 ) : ColorTemplatePreviewVirtualController
	{
		return ( ( ColorTemplatePreviewVirtualController )( GetItemWidget( index ).GetControllerByType( 'ColorTemplatePreviewVirtualController' ) ) );
	}

	public export virtual function CanNavigateToItem( item : weak< inkVirtualCompoundItemController > ) : Bool
	{
		var wrappedData : WrappedTemplateData;
		wrappedData = ( ( ColorTemplatePreviewVirtualController )( item ) ).GetCurrentData();
		return wrappedData && VehicleVisualCustomizationTemplate.IsValid( wrappedData.m_template );
	}

	public function SetupTemplatesGrid( templateType : VehicleVisualCustomizationType, component : vehicleVisualCustomizationComponent, optional modelName : CName )
	{
		SetupVirtualGrid();
		PopulateData( templateType, component, modelName );
		RegisterToCallback( 'OnAllElementsSpawned', this, 'OnAllElementsSpawned' );
	}

	public function TryToFocusElement( onlyIfPreviouslySelected : Bool ) : Bool
	{
		if( GetSelectedController() )
		{
			SelectItem( GetSelectedController().GetCurrentData().m_indexInList );
			return true;
		}
		if( !( onlyIfPreviouslySelected ) && ( GetFirstEmptyIndex() != 0 ) )
		{
			SelectItem( 0 );
			return true;
		}
		return false;
	}

	public function UpdateTemplateInGrid( wrappedData : WrappedTemplateData )
	{
		var controller : ColorTemplatePreviewVirtualController;
		controller = GetControllerAtIndex( wrappedData.m_indexInList );
		if( !( controller ) )
		{
			return;
		}
		controller.UpdateData( wrappedData );
	}

	public function DeleteSelectedTemplateInGrid( canChangeCurrentlySelectedIndex : Bool ) : VehicleVisualCustomizationTemplate
	{
		var emptyWrappedData : WrappedTemplateData;
		var deletedTemplate : VehicleVisualCustomizationTemplate;
		var deleteIndex : Uint32;
		var previousNavigationState : Bool;
		emptyWrappedData = new WrappedTemplateData;
		if( GetSelectedController() )
		{
			deleteIndex = GetSelectedController().GetCurrentData().m_indexInList;
			emptyWrappedData.m_parentGridController = this;
			emptyWrappedData.m_indexInList = deleteIndex;
			emptyWrappedData.m_canAcceptSave = GetSelectedController().GetCurrentData().m_canAcceptSave;
			deletedTemplate = GetSelectedController().GetCurrentData().m_template;
			UpdateTemplateInGrid( emptyWrappedData );
			previousNavigationState = m_canNavigate;
			SetCanNavigateInGrid( true );
			UnSelectCurrentItem();
			PackListToTheLeft();
			if( GetFirstEmptyIndex() > 0 )
			{
				if( GetFirstEmptyIndex() > deleteIndex )
				{
					SelectItem( deleteIndex );
				}
				else if( canChangeCurrentlySelectedIndex )
				{
					SelectItem( ( ( Uint32 )( Max( ( ( Int32 )( deleteIndex ) ) - 1, 0 ) ) ) );
				}
			}
			SetCanNavigateInGrid( previousNavigationState );
		}
		return deletedTemplate;
	}

	private function PackListToTheLeft()
	{
		var i : Uint32;
		var controllerA : ColorTemplatePreviewVirtualController;
		var controllerB : ColorTemplatePreviewVirtualController;
		var savedWrappedData : WrappedTemplateData;
		var wrappedData : WrappedTemplateData;
		for( i = 0; i < ( m_templatesDataSource.GetArraySize() - 1 ); i += 1 )
		{
			controllerA = GetControllerAtIndex( i );
			controllerB = GetControllerAtIndex( i + 1 );
			if( !( VehicleVisualCustomizationTemplate.IsValid( controllerA.GetCurrentData().m_template ) ) && VehicleVisualCustomizationTemplate.IsValid( controllerB.GetCurrentData().m_template ) )
			{
				savedWrappedData = controllerA.GetCurrentData();
				wrappedData = controllerB.GetCurrentData();
				wrappedData.m_indexInList = i;
				UpdateTemplateInGrid( wrappedData );
				savedWrappedData.m_indexInList = i + 1;
				UpdateTemplateInGrid( savedWrappedData );
			}
		}
	}

	public function ResetTemplatesGrid()
	{
		ResetVirtualGrid();
		UnregisterFromCallback( 'OnAllElementsSpawned', this, 'OnAllElementsSpawned' );
	}

	public function GetCanNavigateInGrid() : Bool
	{
		return m_canNavigate;
	}

	public function SetCanNavigateInGrid( canNavigate : Bool )
	{
		SetNavigable( canNavigate );
		m_canNavigate = canNavigate;
		if( m_canNavigate )
		{
			CallCustomCallback( 'OnNavigationEnabled' );
		}
		else
		{
			CallCustomCallback( 'OnNavigationDisabled' );
		}
	}

	public function SetColorCorrectionEnabled( enabled : Bool )
	{
		m_colorCorrectionEnabled = enabled;
		if( m_colorCorrectionEnabled )
		{
			CallCustomCallback( 'OnColorCorrectionEnabled' );
		}
		else
		{
			CallCustomCallback( 'OnColorCorrectionDisabled' );
		}
	}

	public function MoveDiscreteNavigation( direction : inkDiscreteNavigationDirection )
	{
		if( !( m_selectedController ) )
		{
			SelectItem( 0, true );
		}
		else
		{
			Navigate( direction );
		}
	}

	public function SetSelectedController( itemController : weak< ColorTemplatePreviewVirtualController > )
	{
		m_selectedController = itemController;
		CallCustomCallback( 'OnControllerSelected' );
	}

	public function SetToggledController( itemController : weak< ColorTemplatePreviewVirtualController > )
	{
		m_toggledController = itemController;
		CallCustomCallback( 'OnTemplateToggled' );
	}

	public function ToggleTemplateInGrid( template : VehicleVisualCustomizationTemplate, selectTemplate : Bool )
	{
		var i : Uint32;
		var controller : ColorTemplatePreviewVirtualController;
		for( i = 0; i < m_templatesDataSource.GetArraySize(); i += 1 )
		{
			controller = GetControllerAtIndex( i );
			if( !( controller ) )
			{
				continue;
			}
			if( VehicleVisualCustomizationTemplate.Equals( controller.GetCurrentData().m_template, template ) )
			{
				ToggleItem( i );
				if( selectTemplate )
				{
					SelectItem( i );
				}
				return;
			}
		}
	}

	private function SetupVirtualGrid()
	{
		m_templatesDataClassifier = new VehicleVisualCustomizationTemplateClassifier;
		m_templatePositionProvider = new VehicleVisualCustomizationTemplatePositionProvider;
		m_templatesDataSource = new ScriptableDataSource;
		m_templatesDataView = new ScriptableDataView;
		m_templatesDataView.SetSource( m_templatesDataSource );
		m_templatesDataView.DisableSorting();
		SetClassifier( m_templatesDataClassifier );
		SetProvider( m_templatePositionProvider );
		SetSource( m_templatesDataView );
	}

	private function ResetVirtualGrid()
	{
		SetSource( NULL );
		SetClassifier( NULL );
		SetProvider( NULL );
		m_templatesDataView.SetSource( NULL );
		m_templatesDataView = NULL;
		m_templatesDataSource = NULL;
		m_templatesDataClassifier = NULL;
		m_templatePositionProvider = NULL;
	}

	private function PopulateData( templateType : VehicleVisualCustomizationType, component : vehicleVisualCustomizationComponent, optional modelName : CName )
	{
		var i : Int32;
		var wrappedTemplate : WrappedTemplateData;
		var wrappedTemplates : array< IScriptable >;
		for( i = 0; i < component.GetMaxNumberOfVisualCustomizationTemplates( templateType ); i += 1 )
		{
			wrappedTemplate = new WrappedTemplateData;
			wrappedTemplate.m_parentGridController = this;
			wrappedTemplate.m_indexInList = ( ( Uint32 )( i ) );
			if( i < component.GetNumberOfStoredVisualCustomizationTemplates( templateType, modelName ) )
			{
				wrappedTemplate.m_template = component.GetStoredVisualCustomizationTemplate( templateType, i, modelName );
			}
			wrappedTemplate.m_canAcceptSave = templateType == VehicleVisualCustomizationType.Generic;
			wrappedTemplates.PushBack( wrappedTemplate );
		}
		m_templatesDataSource.Reset( wrappedTemplates );
	}

	protected event OnAllElementsSpawned()
	{
		UnregisterFromCallback( 'OnAllElementsSpawned', this, 'OnAllElementsSpawned' );
		if( m_canNavigate )
		{
			CallCustomCallback( 'OnNavigationEnabled' );
		}
		else
		{
			CallCustomCallback( 'OnNavigationDisabled' );
		}
		if( m_colorCorrectionEnabled )
		{
			CallCustomCallback( 'OnColorCorrectionEnabled' );
		}
		else
		{
			CallCustomCallback( 'OnColorCorrectionDisabled' );
		}
	}

}

class WrappedTemplateData extends IScriptable
{
	var m_parentGridController : weak< TwintoneTemplateGridController >;
	var m_template : VehicleVisualCustomizationTemplate;
	var m_indexInList : Uint32;
	var m_canAcceptSave : Bool;

	public function SelectInParentGrid()
	{
		if( m_parentGridController )
		{
			m_parentGridController.SelectItem( m_indexInList );
		}
	}

}

class VehicleVisualCustomizationTemplateClassifier extends inkVirtualItemTemplateClassifier
{

	public export virtual function ClassifyItem( data : Variant ) : Uint32
	{
		return 0;
	}

}

class VehicleVisualCustomizationTemplatePositionProvider extends inkItemPositionProvider
{

	public export virtual function GetItemPosition( data : Variant ) : Uint32
	{
		var wrappedData : WrappedTemplateData;
		wrappedData = ( ( WrappedTemplateData )( ( ( IScriptable )data ) ) );
		if( !( wrappedData ) )
		{
			return ( ( Uint32 )( -1 ) );
		}
		return wrappedData.m_indexInList;
	}

	public export virtual function SaveItemPosition( data : Variant, position : Uint32 ) {}
}

