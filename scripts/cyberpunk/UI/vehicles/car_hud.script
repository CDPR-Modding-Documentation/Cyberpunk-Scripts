class hudCarController extends inkHUDGameController
{
	private editable var m_SpeedValue : inkTextRef;
	private const editable var m_RPMChunks : array< inkImageRef >;
	private var m_psmBlackboard : weak< IBlackboard >;
	private var m_PSM_BBID : CallbackHandle;
	private var m_currentZoom : Float;
	private var currentTime : GameTime;
	private var m_activeVehicleUIBlackboard : weak< IBlackboard >;
	private var m_vehicleBBStateConectionId : CallbackHandle;
	private var m_speedBBConnectionId : CallbackHandle;
	private var m_gearBBConnectionId : CallbackHandle;
	private var m_tppBBConnectionId : CallbackHandle;
	private var m_rpmValueBBConnectionId : CallbackHandle;
	private var m_leanAngleBBConnectionId : CallbackHandle;
	private var m_playerStateBBConnectionId : CallbackHandle;
	private var m_activeChunks : Int32;
	private var m_rpmMaxValue : Float;
	private var m_activeVehicle : weak< VehicleObject >;
	private var m_driver : Bool;

	protected event OnInitialize()
	{
		PlayLibraryAnimation( 'intro' );
	}

	protected event OnUninitialize() {}

	protected event OnPlayerAttach( playerPuppet : GameObject )
	{
		m_psmBlackboard = GetPSMBlackboard( playerPuppet );
		if( m_psmBlackboard )
		{
			m_PSM_BBID = m_psmBlackboard.RegisterDelayedListenerFloat( GetAllBlackboardDefs().PlayerStateMachine.ZoomLevel, this, 'OnZoomChange' );
		}
		m_activeVehicle = GetMountedVehicle( GetPlayerControlledObject() );
		m_driver = VehicleComponent.IsDriver( m_activeVehicle.GetGame(), GetPlayerControlledObject() );
		if( m_activeVehicle && m_driver )
		{
			GetRootWidget().SetVisible( CheckIfInTPP() );
			RegisterToVehicle( true );
			Reset();
		}
		else
		{
			GetRootWidget().SetVisible( false );
		}
	}

	protected event OnPlayerDetach( playerPuppet : GameObject )
	{
		m_psmBlackboard.UnregisterDelayedListener( GetAllBlackboardDefs().PlayerStateMachine.ZoomLevel, m_PSM_BBID );
		if( m_activeVehicle )
		{
			GetRootWidget().SetVisible( false );
			RegisterToVehicle( false );
			m_activeVehicle = NULL;
		}
	}

	protected event OnMountingEvent( evt : MountingEvent )
	{
		m_activeVehicle = GetMountedVehicle( GetPlayerControlledObject() );
		m_driver = VehicleComponent.IsDriver( m_activeVehicle.GetGame(), GetPlayerControlledObject() );
		GetRootWidget().SetVisible( false );
		RegisterToVehicle( true );
		Reset();
	}

	protected event OnUnmountingEvent( evt : UnmountingEvent )
	{
		if( !( evt.request.mountData.mountEventOptions.silentUnmount ) )
		{
			GetRootWidget().SetVisible( false );
			RegisterToVehicle( false );
			m_activeVehicle = NULL;
		}
	}

	private function CheckIfInTPP() : Bool
	{
		var activeVehicleUIBlackboard : weak< IBlackboard >;
		if( m_activeVehicle == NULL )
		{
			return false;
		}
		activeVehicleUIBlackboard = GameInstance.GetBlackboardSystem( m_activeVehicle.GetGame() ).Get( GetAllBlackboardDefs().UI_ActiveVehicleData );
		return activeVehicleUIBlackboard.GetBool( GetAllBlackboardDefs().UI_ActiveVehicleData.IsTPPCameraOn );
	}

	private function RegisterToVehicle( register : Bool )
	{
		var vehicle : VehicleObject;
		var vehicleBlackboard : weak< IBlackboard >;
		var activeVehicleUIBlackboard : weak< IBlackboard >;
		var record : weak< Vehicle_Record >;
		var vehEngineData : weak< VehicleEngineData_Record >;
		vehicle = m_activeVehicle;
		if( vehicle == NULL )
		{
			return;
		}
		vehicleBlackboard = vehicle.GetBlackboard();
		if( vehicleBlackboard )
		{
			if( register )
			{
				m_speedBBConnectionId = vehicleBlackboard.RegisterListenerFloat( GetAllBlackboardDefs().Vehicle.SpeedValue, this, 'OnSpeedValueChanged' );
				m_gearBBConnectionId = vehicleBlackboard.RegisterListenerInt( GetAllBlackboardDefs().Vehicle.GearValue, this, 'OnGearValueChanged' );
				m_rpmValueBBConnectionId = vehicleBlackboard.RegisterListenerFloat( GetAllBlackboardDefs().Vehicle.RPMValue, this, 'OnRpmValueChanged' );
				record = vehicle.GetRecord();
				vehEngineData = record.VehEngineData();
				m_rpmMaxValue = vehEngineData.MaxRPM();
			}
			else
			{
				vehicleBlackboard.UnregisterListenerFloat( GetAllBlackboardDefs().Vehicle.SpeedValue, m_speedBBConnectionId );
				vehicleBlackboard.UnregisterListenerInt( GetAllBlackboardDefs().Vehicle.GearValue, m_gearBBConnectionId );
				vehicleBlackboard.UnregisterListenerFloat( GetAllBlackboardDefs().Vehicle.RPMValue, m_rpmValueBBConnectionId );
			}
		}
		activeVehicleUIBlackboard = GameInstance.GetBlackboardSystem( vehicle.GetGame() ).Get( GetAllBlackboardDefs().UI_ActiveVehicleData );
		if( activeVehicleUIBlackboard )
		{
			if( register )
			{
				m_tppBBConnectionId = activeVehicleUIBlackboard.RegisterListenerBool( GetAllBlackboardDefs().UI_ActiveVehicleData.IsTPPCameraOn, this, 'OnCameraModeChanged', true );
			}
			else
			{
				activeVehicleUIBlackboard.UnregisterListenerBool( GetAllBlackboardDefs().UI_ActiveVehicleData.IsTPPCameraOn, m_tppBBConnectionId );
			}
		}
	}

	protected event OnZoomChange( evt : Float )
	{
		m_currentZoom = evt;
	}

	protected event OnRpmMaxChanged( rpmMax : Float ) {}

	protected event OnSpeedValueChanged( speedValue : Float )
	{
		var multiplier : Float;
		speedValue = AbsF( speedValue );
		multiplier = GameInstance.GetStatsDataSystem( m_activeVehicle.GetGame() ).GetValueFromCurve( 'vehicle_ui', speedValue, 'speed_to_multiplier' );
		inkTextRef.SetText( m_SpeedValue, IntToString( RoundMath( speedValue * multiplier ) ) );
	}

	protected event OnGearValueChanged( gearValue : Int32 )
	{
		if( gearValue == ( ( Int32 )( 0 ) ) )
		{
		}
		else
		{
		}
	}

	protected event OnRpmValueChanged( rpmValue : Float )
	{
		drawRPMGaugeFull( rpmValue );
	}

	private function Reset()
	{
		OnSpeedValueChanged( 0.0 );
		OnRpmValueChanged( 0.0 );
	}

	public function drawRPMGaugeFull( rpmValue : Float )
	{
		var level : Float;
		var levelInt : Int32;
		level = ( ( rpmValue / m_rpmMaxValue ) * 5000.0 ) / ( ( Float )( ( m_RPMChunks.Size() * 20 ) ) );
		levelInt = ( ( Int32 )( level ) );
		if( ( rpmValue > 500.0 ) && ( level < 2.0 ) )
		{
			levelInt = 2;
		}
		EvaluateRPMMeterWidget( levelInt );
	}

	private function EvaluateRPMMeterWidget( currentAmountOfChunks : Int32 )
	{
		if( currentAmountOfChunks == m_activeChunks )
		{
			return;
		}
		m_activeChunks = currentAmountOfChunks;
		UpdateChunkVisibility();
	}

	private function UpdateChunkVisibility()
	{
		var i : Int32;
		var visible : Bool;
		for( i = 0; i <= m_RPMChunks.Size(); i += 1 )
		{
			visible = i < m_activeChunks;
			inkImageRef.SetVisible( m_RPMChunks[ i ], visible );
		}
	}

	protected event OnLeanAngleChanged( leanAngle : Float ) {}

	protected event OnCameraModeChanged( mode : Bool )
	{
		if( m_driver )
		{
			GetRootWidget().SetVisible( mode );
		}
	}

}

