abstract class InputContextTransitionDecisions extends DefaultTransition
{

	protected const virtual function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		return true;
	}

	protected const virtual function ToGameplayContext( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		return !( IsOnEnterConditionEnabled() ) || !( EnterCondition( stateContext, scriptInterface ) );
	}

	protected const virtual function ToBaseContext( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		return !( IsOnEnterConditionEnabled() ) || !( EnterCondition( stateContext, scriptInterface ) );
	}

	protected export const virtual function ExitCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		return !( IsOnEnterConditionEnabled() ) || !( EnterCondition( stateContext, scriptInterface ) );
	}

}

abstract class InputContextTransitionEvents extends DefaultTransition
{
	var m_gameplaySettings : weak< GameplaySettingsSystem >;

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_gameplaySettings = GameplaySettingsSystem.GetGameplaySettingsSystemInstance( scriptInterface.executionOwner );
	}

	protected const function ShouldForceRefreshInputHints( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var shouldForceRefresh : StateResultBool;
		shouldForceRefresh = stateContext.GetTemporaryBoolParameter( 'forceRefreshInputHints' );
		if( shouldForceRefresh.valid && shouldForceRefresh.value )
		{
			return true;
		}
		return false;
	}

	protected const function ShowBodyCarryInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		if( !( scriptInterface.executionOwner.PlayerLastUsedKBM() ) )
		{
			if( scriptInterface.HasStatFlag( gamedataStatType.CanShootWhileCarryingBody ) )
			{
				ShowInputHint( scriptInterface, 'DropCarriedObject', 'BodyCarry', "LocKey#43673", inkInputHintHoldIndicationType.FromInputConfig, true );
			}
			else
			{
				ShowInputHint( scriptInterface, 'DropCarriedObject', 'BodyCarry', "LocKey#43673" );
			}
		}
		else
		{
			ShowInputHint( scriptInterface, 'DropCarriedObject', 'BodyCarry', "LocKey#43673" );
		}
		stateContext.SetPermanentBoolParameter( 'isBodyCarryInputHintDisplayed', true, true );
	}

	protected const function RemoveBodyCarryInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHintsBySource( scriptInterface, 'BodyCarry' );
		stateContext.RemovePermanentBoolParameter( 'isBodyCarryInputHintDisplayed' );
	}

	protected const function ShowLadderInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowInputHint( scriptInterface, 'ToggleSprint', 'Ladder', "LocKey#36200" );
		ShowInputHint( scriptInterface, 'Jump', 'Ladder', "LocKey#36201" );
		ShowInputHint( scriptInterface, 'ToggleCrouch', 'Ladder', "LocKey#36204" );
		stateContext.SetPermanentBoolParameter( 'isLadderInputHintDisplayed', true, true );
	}

	protected const function RemoveLadderInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHintsBySource( scriptInterface, 'Ladder' );
		stateContext.RemovePermanentBoolParameter( 'isLadderInputHintDisplayed' );
	}

	protected const function ShowTerminalInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowInputHint( scriptInterface, 'Choice1', 'Terminal', "LocKey#49422" );
		stateContext.SetPermanentBoolParameter( 'isTerminalInputHintDisplayed', true, true );
	}

	protected const function RemoveTerminalInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHintsBySource( scriptInterface, 'Terminal' );
		stateContext.RemovePermanentBoolParameter( 'isTerminalInputHintDisplayed' );
	}

	protected const function ShowGenericExplorationInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		if( stateContext.GetStateMachineCurrentState( 'CombatGadget' ) == 'combatGadgetCharge' )
		{
			ShowInputHint( scriptInterface, 'CancelChargingCG', 'Locomotion', "LocKey#49906" );
		}
		else if( !( IsEmptyHandsForced( stateContext, scriptInterface ) ) )
		{
			ShowInputHint( scriptInterface, 'SwitchItem', 'Locomotion', "LocKey#45381" );
		}
		stateContext.SetPermanentBoolParameter( 'isLocomotionInputHintDisplayed', true, true );
	}

	protected function RemoveGenericExplorationInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHintsBySource( scriptInterface, 'Locomotion' );
		stateContext.RemovePermanentBoolParameter( 'isLocomotionInputHintDisplayed' );
	}

	protected const function ShowMeleeInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowInputHint( scriptInterface, 'MeleeAttack', 'Melee', "LocKey#40351" );
		ShowInputHint( scriptInterface, 'MeleeBlock', 'Melee', "LocKey#36191" );
		if( scriptInterface.executionOwner.PlayerLastUsedKBM() )
		{
			ShowInputHint( scriptInterface, 'MoveX', 'Melee', "LocKey#36192" );
		}
		else
		{
			ShowInputHint( scriptInterface, 'Dodge', 'Melee', "LocKey#36192" );
		}
		stateContext.SetPermanentBoolParameter( 'isMeleeInputHintDisplayed', true, true );
	}

	protected function RemoveMeleeInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHintsBySource( scriptInterface, 'Melee' );
		stateContext.RemovePermanentBoolParameter( 'isMeleeInputHintDisplayed' );
	}

	protected const function ShowRangedInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		if( IsChargeRangedWeapon( scriptInterface ) )
		{
			ShowInputHint( scriptInterface, 'RangedAttack', 'Ranged', "LocKey#47919" );
			stateContext.SetPermanentBoolParameter( 'isChargeHintDisplayed', true, true );
		}
		ShowInputHint( scriptInterface, 'Reload', 'Ranged', "LocKey#36198" );
		ShowInputHint( scriptInterface, 'QuickMelee', 'Ranged', "LocKey#45380" );
		stateContext.SetPermanentBoolParameter( 'isRangedInputHintDisplayed', true, true );
	}

	protected function RemoveRangedInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHintsBySource( scriptInterface, 'Ranged' );
		stateContext.RemovePermanentBoolParameter( 'isRangedInputHintDisplayed' );
		stateContext.RemovePermanentBoolParameter( 'isChargeHintDisplayed' );
	}

	protected const function ShowVehicleDriverInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowInputHint( scriptInterface, 'ToggleVehCamera', 'VehicleDriver', "LocKey#36194" );
		ShowVehicleExitInputHint( stateContext, scriptInterface, true );
		stateContext.SetPermanentBoolParameter( 'isDriverInputHintDisplayed', true, true );
	}

	protected const function ShowVehicleRadioInputHint( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowInputHint( scriptInterface, 'VehicleInsideWheel', 'UI_DPad', "LocKey#49365", inkInputHintHoldIndicationType.FromInputConfig, true );
		stateContext.SetPermanentBoolParameter( 'isVehicleRadioInputHintDisplayed', true, true );
	}

	protected const function RemoveVehicleRadioInputHint( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHintsBySource( scriptInterface, 'UI_DPad' );
		stateContext.RemovePermanentBoolParameter( 'isVehicleRadioInputHintDisplayed' );
	}

	protected const function ShowVehicleRestrictedInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowInputHint( scriptInterface, 'ToggleVehCamera', 'VehicleDriver', "LocKey#36194", inkInputHintHoldIndicationType.FromInputConfig, true );
		ShowVehicleExitInputHint( stateContext, scriptInterface, true );
	}

	protected const function RemoveVehicleRestrictedInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHintsBySource( scriptInterface, 'VehicleDriver' );
	}

	protected const function ShowVehiclePassengerInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowVehicleExitInputHint( stateContext, scriptInterface );
		stateContext.SetPermanentBoolParameter( 'isPassengerInputHintDisplayed', true, true );
	}

	protected const function RemoveVehiclePassengerInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHint( scriptInterface, 'VehicleInsideWheel', 'UI_DPad' );
		RemoveInputHintsBySource( scriptInterface, 'VehiclePassenger' );
		stateContext.RemovePermanentBoolParameter( 'isPassengerInputHintDisplayed' );
	}

	protected const function RemoveVehicleDriverInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHint( scriptInterface, 'VehicleInsideWheel', 'UI_DPad' );
		RemoveInputHintsBySource( scriptInterface, 'VehicleDriver' );
		stateContext.RemovePermanentBoolParameter( 'isDriverInputHintDisplayed' );
	}

	protected const function ShowVehicleDriverCombatInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowInputHint( scriptInterface, 'Reload', 'VehicleDriverCombat', "LocKey#36198" );
		ShowInputHint( scriptInterface, 'WeaponWheel', 'VehicleDriverCombat', "LocKey#36199" );
	}

	protected const function RemoveVehicleDriverCombatInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHintsBySource( scriptInterface, 'VehicleDriverCombat' );
	}

	protected const function ShowVehicleExitInputHint( stateContext : StateContext, scriptInterface : StateGameScriptInterface, optional driver : Bool )
	{
		var vehicle : weak< GameObject >;
		VehicleComponent.GetVehicle( scriptInterface.owner.GetGame(), scriptInterface.executionOwner, vehicle );
		if( vehicle = ( ( BikeObject )( vehicle ) ) )
		{
			ShowInputHint( scriptInterface, 'Exit', 'VehicleDriver', "LocKey#53066", inkInputHintHoldIndicationType.FromInputConfig, true );
		}
		else
		{
			if( driver )
			{
				ShowInputHint( scriptInterface, 'Exit', 'VehicleDriver', "LocKey#36196", inkInputHintHoldIndicationType.FromInputConfig, true );
			}
			else
			{
				ShowInputHint( scriptInterface, 'Exit', 'VehiclePassenger', "LocKey#36196", inkInputHintHoldIndicationType.FromInputConfig, true );
			}
		}
	}

	protected const function ShowVehiclePassengerCombatInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowInputHint( scriptInterface, 'RangedAttack', 'VehiclePassengerCombat', "LocKey#36197" );
		ShowInputHint( scriptInterface, 'Reload', 'VehiclePassengerCombat', "LocKey#36198" );
		ShowInputHint( scriptInterface, 'WeaponWheel', 'VehiclePassengerCombat', "LocKey#36199" );
		stateContext.SetPermanentBoolParameter( 'isPassengerCombatInputHintDisplayed', true, true );
	}

	protected const function RemoveVehiclePassengerCombatInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHintsBySource( scriptInterface, 'VehiclePassengerCombat' );
		stateContext.RemovePermanentBoolParameter( 'isPassengerCombatInputHintDisplayed' );
	}

	protected const function ShowSwimmingInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowInputHint( scriptInterface, 'ToggleSprint', 'Swimming', "LocKey#40155" );
		ShowInputHint( scriptInterface, 'Jump', 'Swimming', "LocKey#40158" );
		ShowInputHint( scriptInterface, 'ToggleCrouch', 'Swimming', "LocKey#40157" );
		stateContext.SetPermanentBoolParameter( 'isSwimmingInputHintDisplayed', true, true );
	}

	protected const function RemoveSwimmingInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveInputHintsBySource( scriptInterface, 'Swimming' );
		stateContext.RemovePermanentBoolParameter( 'isSwimmingInputHintDisplayed' );
	}

	protected function RemoveAllInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveGenericExplorationInputHints( stateContext, scriptInterface );
		RemoveRangedInputHints( stateContext, scriptInterface );
		RemoveMeleeInputHints( stateContext, scriptInterface );
		RemoveBodyCarryInputHints( stateContext, scriptInterface );
		RemoveLadderInputHints( stateContext, scriptInterface );
		RemoveSwimmingInputHints( stateContext, scriptInterface );
		RemoveVehicleDriverInputHints( stateContext, scriptInterface );
		RemoveVehicleDriverCombatInputHints( stateContext, scriptInterface );
		RemoveVehiclePassengerCombatInputHints( stateContext, scriptInterface );
		RemoveVehiclePassengerInputHints( stateContext, scriptInterface );
		RemoveVehicleRestrictedInputHints( stateContext, scriptInterface );
		RemoveVehicleRadioInputHint( stateContext, scriptInterface );
	}

	protected function UpdateWeaponInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		var isInExploration : Bool;
		var isDeviceControlled : Bool;
		var isMeleeWeaponEquipped : Bool;
		var isRangedWeaponEquipped : Bool;
		var inEquipState : Bool;
		var isExaminingDevice : Bool;
		var rightHandWeapon : weak< WeaponObject >;
		var isMeleeInputHintDisplayed : Bool;
		var isRangedInputHintDisplayed : Bool;
		rightHandWeapon = GetActiveWeapon( scriptInterface );
		isMeleeInputHintDisplayed = stateContext.GetBoolParameter( 'isMeleeInputHintDisplayed', true );
		isRangedInputHintDisplayed = stateContext.GetBoolParameter( 'isRangedInputHintDisplayed', true );
		isExaminingDevice = IsExaminingDevice( scriptInterface ) || IsInteractingWithTerminal( scriptInterface );
		isDeviceControlled = scriptInterface.executionOwner.GetTakeOverControlSystem().IsDeviceControlled();
		isInExploration = IsInHighLevelState( stateContext, 'exploration' );
		inEquipState = ( IsRightHandInEquippedState( stateContext ) || IsRightHandInEquippingState( stateContext ) ) || IsInFirstEquip( stateContext );
		isRangedWeaponEquipped = inEquipState && rightHandWeapon.IsRanged();
		isMeleeWeaponEquipped = ( inEquipState && !( isRangedWeaponEquipped ) ) && rightHandWeapon.IsMelee();
		if( ( ( !( isMeleeInputHintDisplayed ) && !( isExaminingDevice ) ) && isInExploration ) && isMeleeWeaponEquipped )
		{
			ShowMeleeInputHints( stateContext, scriptInterface );
		}
		else if( isMeleeInputHintDisplayed && ( ( ( ( ( !( isInExploration ) || !( isMeleeWeaponEquipped ) ) || isExaminingDevice ) || isDeviceControlled ) || ShouldForceRefreshInputHints( stateContext, scriptInterface ) ) || CheckForControllerChange( stateContext, scriptInterface ) ) )
		{
			RemoveMeleeInputHints( stateContext, scriptInterface );
		}
		else if( !( isRangedInputHintDisplayed ) && ( ( ( !( isExaminingDevice ) && isInExploration ) && isRangedWeaponEquipped ) && !( rightHandWeapon.IsHeavyWeapon() ) ) )
		{
			ShowRangedInputHints( stateContext, scriptInterface );
		}
		else if( isRangedInputHintDisplayed && ( ( ( ( ( !( isInExploration ) || !( isRangedWeaponEquipped ) ) || isExaminingDevice ) || isDeviceControlled ) || ShouldForceRefreshInputHints( stateContext, scriptInterface ) ) || rightHandWeapon.GetCurrentTriggerMode().Type() == gamedataTriggerMode.Charge != stateContext.GetBoolParameter( 'isChargeHintDisplayed', true ) ) )
		{
			RemoveRangedInputHints( stateContext, scriptInterface );
		}
	}

	protected function CheckForControllerChange( stateContext : StateContext, scriptInterface : StateGameScriptInterface ) : Bool
	{
		var isKeyboard : Bool;
		isKeyboard = scriptInterface.executionOwner.PlayerLastUsedKBM();
		if( stateContext.GetBoolParameter( 'usingKeyboardAndMouse', true ) && !( isKeyboard ) )
		{
			stateContext.SetPermanentBoolParameter( 'usingKeyboardAndMouse', false, true );
			return true;
		}
		else if( !( stateContext.GetBoolParameter( 'usingKeyboardAndMouse', true ) ) && isKeyboard )
		{
			stateContext.SetPermanentBoolParameter( 'usingKeyboardAndMouse', true, true );
			return true;
		}
		else
		{
			return false;
		}
	}

}

class InitialStateDecisions extends InputContextTransitionDecisions
{

	protected export const function ToUiContext( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var player : weak< PlayerPuppet >;
		var expectedRecordID : TweakDBID;
		var recordID : TweakDBID;
		player = ( ( PlayerPuppet )( scriptInterface.executionOwner ) );
		if( player )
		{
			expectedRecordID = T"Character.Player_Puppet_Menu";
			recordID = player.GetRecordID();
			if( recordID == expectedRecordID )
			{
				return true;
			}
		}
		return false;
	}

}

class DeviceControlContextDecisions extends InputContextTransitionDecisions
{
	private var m_callbackID : CallbackHandle;

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		var allBlackboardDef : AllBlackboardDefinitions;
		if( scriptInterface.localBlackboard )
		{
			allBlackboardDef = GetAllBlackboardDefs();
			m_callbackID = scriptInterface.localBlackboard.RegisterListenerBool( allBlackboardDef.PlayerStateMachine.IsControllingDevice, this, 'OnControllingDeviceChange' );
			EnableOnEnterCondition( scriptInterface.localBlackboard.GetBool( allBlackboardDef.PlayerStateMachine.IsControllingDevice ) );
		}
	}

	protected export function OnDetach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_callbackID = NULL;
	}

	protected event OnControllingDeviceChange( value : Bool )
	{
		EnableOnEnterCondition( value );
	}

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		return true;
	}

}

class DeviceControlContextEvents extends InputContextTransitionEvents
{

	protected export virtual function OnEnter( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveAllInputHints( stateContext, scriptInterface );
	}

	protected export function OnUpdate( timeDelta : Float, stateContext : StateContext, scriptInterface : StateGameScriptInterface ) {}
}

class BraindanceContextDecisions extends InputContextTransitionDecisions
{

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		if( IsPlayerInBraindance( scriptInterface ) )
		{
			return true;
		}
		return false;
	}

}

class DeadContextDecisions extends InputContextTransitionDecisions
{
	private var m_callbackID : CallbackHandle;

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		var allBlackboardDef : AllBlackboardDefinitions;
		if( scriptInterface.localBlackboard )
		{
			allBlackboardDef = GetAllBlackboardDefs();
			m_callbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.Vitals, this, 'OnVitalsChanged' );
			OnVitalsChanged( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.Vitals ) );
		}
	}

	protected export function OnDetach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_callbackID = NULL;
	}

	protected event OnVitalsChanged( value : Int32 )
	{
		EnableOnEnterCondition( value == ( ( Int32 )( gamePSMVitals.Dead ) ) );
	}

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		return true;
	}

}

class BaseContextEvents extends InputContextTransitionEvents
{
	var m_slicingFrame : Int32;

	protected function UpdateHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface, sliced : Bool )
	{
		if( ( m_slicingFrame == 0 ) || !( sliced ) )
		{
			UpdateGenericExplorationInputHints( stateContext, scriptInterface );
		}
		if( ( m_slicingFrame == 1 ) || !( sliced ) )
		{
			UpdateWeaponInputHints( stateContext, scriptInterface );
		}
		if( ( m_slicingFrame == 2 ) || !( sliced ) )
		{
			UpdateLadderInputHints( stateContext, scriptInterface );
		}
		if( ( m_slicingFrame == 3 ) || !( sliced ) )
		{
			UpdateSwimmingInputHints( stateContext, scriptInterface );
		}
		if( ( m_slicingFrame == 4 ) || !( sliced ) )
		{
			UpdateBodyCarryInputHints( stateContext, scriptInterface );
		}
		if( sliced )
		{
			m_slicingFrame += 1;
			m_slicingFrame = m_slicingFrame % 6;
		}
	}

	protected export function OnUpdate( timeDelta : Float, stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		if( m_gameplaySettings.GetIsInputHintEnabled() )
		{
			UpdateHints( stateContext, scriptInterface, true );
		}
	}

	protected function UpdateGenericExplorationInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		var isValidState : Bool;
		isValidState = IsStateValidForExploration( stateContext, scriptInterface );
		if( isValidState && !( stateContext.GetBoolParameter( 'isLocomotionInputHintDisplayed', true ) ) )
		{
			ShowGenericExplorationInputHints( stateContext, scriptInterface );
		}
		else if( ( !( isValidState ) || ShouldForceRefreshInputHints( stateContext, scriptInterface ) ) && stateContext.GetBoolParameter( 'isLocomotionInputHintDisplayed', true ) )
		{
			RemoveGenericExplorationInputHints( stateContext, scriptInterface );
		}
	}

	protected function UpdateBodyCarryInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		var isInBodyCarry : Bool;
		var ChoiceHubsActive : Bool;
		isInBodyCarry = scriptInterface.localBlackboard.GetInt( GetAllBlackboardDefs().PlayerStateMachine.BodyCarrying ) == ( ( Int32 )( gamePSMBodyCarrying.Carry ) );
		ChoiceHubsActive = AreChoiceHubsActive( scriptInterface );
		if( ( isInBodyCarry && !( ChoiceHubsActive ) ) && !( stateContext.GetBoolParameter( 'isBodyCarryInputHintDisplayed', true ) ) )
		{
			ShowBodyCarryInputHints( stateContext, scriptInterface );
		}
		else if( ( !( isInBodyCarry ) || ChoiceHubsActive ) && stateContext.GetBoolParameter( 'isBodyCarryInputHintDisplayed', true ) )
		{
			RemoveBodyCarryInputHints( stateContext, scriptInterface );
		}
	}

	protected function UpdateTerminalInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		var isInteractingWithTerminal : Bool;
		isInteractingWithTerminal = IsInteractingWithTerminal( scriptInterface );
		if( isInteractingWithTerminal && !( stateContext.GetBoolParameter( 'isTerminalInputHintDisplayed', true ) ) )
		{
			ShowTerminalInputHints( stateContext, scriptInterface );
		}
		else if( !( isInteractingWithTerminal ) && stateContext.GetBoolParameter( 'isTerminalInputHintDisplayed', true ) )
		{
			RemoveTerminalInputHints( stateContext, scriptInterface );
		}
	}

	protected function UpdateLadderInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		var locomotionStateName : CName;
		locomotionStateName = GetLocomotionState( stateContext );
		if( ( locomotionStateName == 'ladder' || locomotionStateName == 'ladderSprint' ) || locomotionStateName == 'ladderSlide' )
		{
			if( !( stateContext.GetBoolParameter( 'isLadderInputHintDisplayed', true ) ) )
			{
				ShowLadderInputHints( stateContext, scriptInterface );
			}
		}
		else
		{
			if( stateContext.GetBoolParameter( 'isLadderInputHintDisplayed', true ) )
			{
				RemoveLadderInputHints( stateContext, scriptInterface );
			}
		}
	}

	protected function UpdateSwimmingInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		var isSwimming : Bool;
		isSwimming = stateContext.IsStateMachineActive( 'LocomotionSwimming' );
		if( isSwimming && !( stateContext.GetBoolParameter( 'isSwimmingInputHintDisplayed', true ) ) )
		{
			ShowSwimmingInputHints( stateContext, scriptInterface );
		}
		else if( !( isSwimming ) && stateContext.GetBoolParameter( 'isSwimmingInputHintDisplayed', true ) )
		{
			RemoveSwimmingInputHints( stateContext, scriptInterface );
		}
	}

	protected export virtual function OnExit( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		if( m_gameplaySettings.GetIsInputHintEnabled() )
		{
			UpdateHints( stateContext, scriptInterface, false );
		}
	}

	private function IsStateValidForExploration( stateContext : StateContext, scriptInterface : StateGameScriptInterface ) : Bool
	{
		var locomotionState : CName;
		if( stateContext.GetStateMachineCurrentState( 'HighLevel' ) != 'exploration' )
		{
			return false;
		}
		locomotionState = stateContext.GetStateMachineCurrentState( 'Locomotion' );
		if( ( locomotionState == 'ladder' || locomotionState == 'ladderSprint' ) || locomotionState == 'ladderSlide' )
		{
			return false;
		}
		if( locomotionState == 'climb' )
		{
			return false;
		}
		if( scriptInterface.IsPlayerInBraindance() )
		{
			return false;
		}
		if( stateContext.IsStateMachineActive( 'CarriedObject' ) )
		{
			return false;
		}
		if( scriptInterface.localBlackboard.GetInt( GetAllBlackboardDefs().PlayerStateMachine.Vehicle ) != ( ( Int32 )( gamePSMVehicle.Default ) ) )
		{
			return false;
		}
		if( HasRightWeaponEquipped( scriptInterface ) )
		{
			return false;
		}
		if( scriptInterface.GetWorkspotSystem().IsActorInWorkspot( scriptInterface.executionOwner ) )
		{
			return false;
		}
		if( ( ( ( locomotionState == 'veryHardLand' || scriptInterface.localBlackboard.GetBool( GetAllBlackboardDefs().PlayerStateMachine.IsPlayerInsideMovingElevator ) ) || StatusEffectSystem.ObjectHasStatusEffectWithTag( scriptInterface.executionOwner, 'NoMovement' ) ) || StatusEffectSystem.ObjectHasStatusEffectOfType( scriptInterface.executionOwner, gamedataStatusEffectType.Stunned ) ) || StatusEffectSystem.ObjectHasStatusEffectOfType( scriptInterface.executionOwner, gamedataStatusEffectType.Knockdown ) )
		{
			return false;
		}
		if( scriptInterface.executionOwner.GetTakeOverControlSystem().IsDeviceControlled() )
		{
			return false;
		}
		if( IsExaminingDevice( scriptInterface ) || IsInteractingWithTerminal( scriptInterface ) )
		{
			return false;
		}
		return true;
	}

}

class AimingContextDecisions extends InputContextTransitionDecisions
{
	private var m_leftHandChargeCallbackID : CallbackHandle;
	private var m_upperBodyCallbackID : CallbackHandle;
	private var m_meleeCallbackID : CallbackHandle;
	private var m_leftHandCharge : Bool;
	private var m_isAiming : Bool;
	private var m_meleeBlockActive : Bool;

	protected function UpdateNeedsToBeChecked()
	{
		EnableOnEnterCondition( ( m_leftHandCharge || m_isAiming ) || m_meleeBlockActive );
	}

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		var allBlackboardDef : AllBlackboardDefinitions;
		if( scriptInterface.localBlackboard )
		{
			allBlackboardDef = GetAllBlackboardDefs();
			m_leftHandChargeCallbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.LeftHandCyberware, this, 'OnLeftHandCyberwareChanged' );
			m_upperBodyCallbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.UpperBody, this, 'OnUpperBodyChanged' );
			m_meleeCallbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.Melee, this, 'OnMeleeChanged' );
			UpdateLeftHandCyberware( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.LeftHandCyberware ) );
			UpdateUpperBodyState( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.UpperBody ) );
			UpdateMeleeState( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.Melee ) );
			UpdateNeedsToBeChecked();
		}
	}

	protected export function OnDetach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_leftHandChargeCallbackID = NULL;
		m_upperBodyCallbackID = NULL;
		m_meleeCallbackID = NULL;
	}

	protected function UpdateLeftHandCyberware( value : Int32 )
	{
		m_leftHandCharge = value == ( ( Int32 )( gamePSMLeftHandCyberware.Charge ) );
	}

	protected event OnLeftHandCyberwareChanged( value : Int32 )
	{
		UpdateLeftHandCyberware( value );
		UpdateNeedsToBeChecked();
	}

	protected function UpdateUpperBodyState( value : Int32 )
	{
		m_isAiming = value == ( ( Int32 )( gamePSMUpperBodyStates.Aim ) );
	}

	protected event OnUpperBodyChanged( value : Int32 )
	{
		UpdateUpperBodyState( value );
		UpdateNeedsToBeChecked();
	}

	protected function UpdateMeleeState( value : Int32 )
	{
		m_meleeBlockActive = value == ( ( Int32 )( gamePSMMelee.Block ) );
	}

	protected event OnMeleeChanged( value : Int32 )
	{
		UpdateMeleeState( value );
		UpdateNeedsToBeChecked();
	}

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		return true;
	}

}

class AimingContextEvents extends InputContextTransitionEvents
{

	protected export function OnUpdate( timeDelta : Float, stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		if( m_gameplaySettings.GetIsInputHintEnabled() )
		{
			UpdateWeaponInputHints( stateContext, scriptInterface );
		}
	}

}

class VisionContextDecisions extends InputContextTransitionDecisions
{
	private var m_vehicleCallbackID : CallbackHandle;
	private var m_focusCallbackID : CallbackHandle;
	private var m_vehicleTransition : Bool;
	private var m_isFocusing : Bool;
	private var m_visionHoldPressed : Bool;

	protected function UpdateNeedsToBeChecked()
	{
		if( m_vehicleTransition )
		{
			EnableOnEnterCondition( false );
		}
		EnableOnEnterCondition( m_visionHoldPressed || m_isFocusing );
	}

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		var allBlackboardDef : AllBlackboardDefinitions;
		if( scriptInterface.localBlackboard )
		{
			allBlackboardDef = GetAllBlackboardDefs();
			m_vehicleCallbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.Vehicle, this, 'OnVehicleStateChanged' );
			m_focusCallbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.Vision, this, 'OnVisionChanged' );
			UpdateVehicleStateValue( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.Vehicle ) );
			UpdateVisionValue( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.Vision ) );
		}
		scriptInterface.executionOwner.RegisterInputListener( this, 'VisionHold' );
		UpdateVisionAction( scriptInterface.GetActionValue( 'VisionHold' ) );
		UpdateNeedsToBeChecked();
	}

	protected export function OnDetach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_vehicleCallbackID = NULL;
		m_focusCallbackID = NULL;
		scriptInterface.executionOwner.UnregisterInputListener( this );
	}

	protected function UpdateVisionAction( value : Float )
	{
		m_visionHoldPressed = value > 0.0;
	}

	protected event OnAction( action : ListenerAction, consumer : ListenerActionConsumer )
	{
		if( ListenerAction.GetName( action ) == 'VisionHold' )
		{
			UpdateVisionAction( ListenerAction.GetValue( action ) );
			UpdateNeedsToBeChecked();
		}
	}

	protected function UpdateVehicleStateValue( value : Int32 )
	{
		m_vehicleTransition = value == ( ( Int32 )( gamePSMVehicle.Transition ) );
	}

	protected event OnVehicleStateChanged( value : Int32 )
	{
		UpdateVehicleStateValue( value );
		UpdateNeedsToBeChecked();
	}

	protected function UpdateVisionValue( value : Int32 )
	{
		m_isFocusing = value == ( ( Int32 )( gamePSMVision.Focus ) );
	}

	protected event OnVisionChanged( value : Int32 )
	{
		UpdateVisionValue( value );
		UpdateNeedsToBeChecked();
	}

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		if( m_isFocusing )
		{
			return true;
		}
		if( m_visionHoldPressed && !( stateContext.GetBoolParameter( 'lockHoldInput', true ) ) )
		{
			return true;
		}
		return false;
	}

}

class UiContextDecisions extends InputContextTransitionDecisions
{

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var psmResult : StateResultBool;
		psmResult = stateContext.GetTemporaryBoolParameter( 'OnUIContextActive' );
		return psmResult.value;
	}

	protected const override function ExitCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var psmResult : StateResultBool;
		psmResult = stateContext.GetTemporaryBoolParameter( 'OnUIContextInactive' );
		return psmResult.value;
	}

}

class UiRadialContextDecisions extends InputContextTransitionDecisions
{

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var psmResult : StateResultBool;
		psmResult = stateContext.GetTemporaryBoolParameter( 'OnUIRadialContextActive' );
		return psmResult.value;
	}

	protected const override function ExitCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var psmResult : StateResultBool;
		psmResult = stateContext.GetTemporaryBoolParameter( 'OnUIRadialContextInactive' );
		return psmResult.value;
	}

}

class UiRadialContextEvents extends InputContextTransitionEvents
{
	var m_mouse : Vector4;

	protected function OnUpdate( timeDelta : Float, stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		var leftStick : Vector4;
		leftStick.X = scriptInterface.GetActionValue( 'UI_LookX_Axis' );
		leftStick.Y = scriptInterface.GetActionValue( 'UI_LookY_Axis' );
		if( Vector4.Length( leftStick ) <= 0.40000001 )
		{
			leftStick = Vector4.EmptyVector();
			m_mouse.X += ( ( scriptInterface.GetActionValue( 'mouse_x' ) * timeDelta ) * 100.0 );
			m_mouse.Y += ( ( scriptInterface.GetActionValue( 'mouse_y' ) * timeDelta ) * 100.0 );
			m_mouse.X = ClampF( m_mouse.X, -1.0, 1.0 );
			m_mouse.Y = ClampF( m_mouse.Y, -1.0, 1.0 );
			if( Vector4.Length( m_mouse ) <= 0.40000001 )
			{
				leftStick = Vector4.EmptyVector();
			}
			else
			{
				leftStick = Vector4.Normalize( m_mouse );
			}
		}
		SetUIBlackboardVector4Variable( scriptInterface, GetAllBlackboardDefs().UI_QuickSlotsData.leftStick, leftStick );
	}

	protected function SetUIBlackboardVector4Variable( scriptInterface : StateGameScriptInterface, id : BlackboardID_Vector4, value : Vector4 )
	{
		var blackboardSystem : BlackboardSystem;
		var blackboard : IBlackboard;
		blackboardSystem = scriptInterface.GetBlackboardSystem();
		blackboard = blackboardSystem.Get( GetAllBlackboardDefs().UI_QuickSlotsData );
		blackboard.SetVector4( id, value );
	}

}

class UiQuickHackPanelContextDecisions extends InputContextTransitionDecisions
{

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		if( IsQuickHackPanelOpened( scriptInterface ) )
		{
			return true;
		}
		return false;
	}

}

class UiQuickHackPanelContextEvents extends InputContextTransitionEvents
{

	protected export virtual function OnEnter( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveAllInputHints( stateContext, scriptInterface );
	}

}

class UiVendorContextDecisions extends InputContextTransitionDecisions
{

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var psmResult : StateResultBool;
		psmResult = stateContext.GetTemporaryBoolParameter( 'OnUIVendorContextActive' );
		return psmResult.value;
	}

	protected const override function ExitCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var vendorInactive : StateResultBool;
		vendorInactive = stateContext.GetTemporaryBoolParameter( 'OnUIVendorContextInactive' );
		return vendorInactive.value;
	}

}

class UiPhoneContextDecisions extends InputContextTransitionDecisions
{

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var psmResult : StateResultBool;
		psmResult = stateContext.GetTemporaryBoolParameter( 'OnUIContactListContextActive' );
		return psmResult.value;
	}

	protected const override function ExitCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var psmResult : StateResultBool;
		psmResult = stateContext.GetTemporaryBoolParameter( 'OnUIContactListContextInactive' );
		return psmResult.value;
	}

}

class LadderEnterContextEvents extends InputContextTransitionEvents
{
}

class LadderEnterContextDecisions extends InputContextTransitionDecisions
{

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var ladderEntryDuration : StateResultFloat;
		ladderEntryDuration = stateContext.GetPermanentFloatParameter( 'ladderEntryDuration' );
		if( !( ladderEntryDuration.valid ) )
		{
			return false;
		}
		return true;
	}

}

class VehicleBlockInputContextEvents extends InputContextTransitionEvents
{

	protected export virtual function OnEnter( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveAllInputHints( stateContext, scriptInterface );
	}

}

class VehicleBlockInputContextDecisions extends InputContextTransitionDecisions
{
	private var m_callbackID : CallbackHandle;

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		var allBlackboardDef : AllBlackboardDefinitions;
		if( scriptInterface.localBlackboard )
		{
			allBlackboardDef = GetAllBlackboardDefs();
			m_callbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.Vehicle, this, 'OnVehicleStateChanged' );
			OnVehicleStateChanged( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.Vehicle ) );
		}
	}

	protected export function OnDetach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_callbackID = NULL;
	}

	protected event OnVehicleStateChanged( value : Int32 )
	{
		EnableOnEnterCondition( value == ( ( Int32 )( gamePSMVehicle.Transition ) ) );
	}

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		return true;
	}

}

class VehicleGameplayContextDecisions extends InputContextTransitionDecisions
{
	private var m_callbackID : CallbackHandle;

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		var allBlackboardDef : AllBlackboardDefinitions;
		if( scriptInterface.localBlackboard )
		{
			allBlackboardDef = GetAllBlackboardDefs();
			m_callbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.Vehicle, this, 'OnVehicleStateChanged' );
			OnVehicleStateChanged( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.Vehicle ) );
		}
	}

	protected export function OnDetach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_callbackID = NULL;
	}

	protected event OnVehicleStateChanged( value : Int32 )
	{
		EnableOnEnterCondition( value != ( ( Int32 )( gamePSMVehicle.Default ) ) );
	}

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		return true;
	}

}

class VehiclePassengerContextEvents extends InputContextTransitionEvents
{

	protected export function OnUpdate( timeDelta : Float, stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		UpdatePassengerInputHints( stateContext, scriptInterface );
	}

	protected function UpdatePassengerInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		var currentState : Int32;
		if( m_gameplaySettings.GetIsInputHintEnabled() )
		{
			currentState = scriptInterface.localBlackboard.GetInt( GetAllBlackboardDefs().PlayerStateMachine.Vehicle );
			if( ShouldForceRefreshInputHints( stateContext, scriptInterface ) && stateContext.GetBoolParameter( 'isPassengerInputHintDisplayed', true ) )
			{
				RemoveVehiclePassengerInputHints( stateContext, scriptInterface );
				return;
			}
			if( stateContext.GetBoolParameter( 'doNotDisplayPassengerInputHint', true ) || StatusEffectSystem.ObjectHasStatusEffect( scriptInterface.executionOwner, T"GameplayRestriction.VehicleCombatNoInterruptions" ) )
			{
				if( stateContext.GetBoolParameter( 'isPassengerInputHintDisplayed', true ) )
				{
					RemoveVehiclePassengerInputHints( stateContext, scriptInterface );
				}
				return;
			}
			if( ( ( currentState != ( ( Int32 )( gamePSMVehicle.Scene ) ) ) && !( stateContext.GetBoolParameter( 'isPassengerInputHintDisplayed', true ) ) ) && !( StatusEffectSystem.ObjectHasStatusEffect( scriptInterface.executionOwner, T"GameplayRestriction.VehicleCombatNoInterruptions" ) ) )
			{
				ShowVehiclePassengerInputHints( stateContext, scriptInterface );
			}
			else if( ( currentState == ( ( Int32 )( gamePSMVehicle.Scene ) ) ) && stateContext.GetBoolParameter( 'isPassengerInputHintDisplayed', true ) )
			{
				RemoveVehiclePassengerInputHints( stateContext, scriptInterface );
			}
		}
	}

	protected export virtual function OnEnter( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		var vehicle : weak< GameObject >;
		VehicleComponent.GetVehicle( scriptInterface.owner.GetGame(), scriptInterface.executionOwner, vehicle );
		if( vehicle = ( ( AVObject )( vehicle ) ) )
		{
			stateContext.SetPermanentBoolParameter( 'doNotDisplayPassengerInputHint', true, true );
		}
		ShowVehiclePassengerInputHints( stateContext, scriptInterface );
	}

	protected export virtual function OnExit( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveVehiclePassengerInputHints( stateContext, scriptInterface );
		RemoveVehicleRadioInputHint( stateContext, scriptInterface );
		stateContext.RemovePermanentBoolParameter( 'doNotDisplayPassengerInputHint' );
	}

}

class VehiclePassengerContextDecisions extends VehicleGameplayContextDecisions
{

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		return true;
	}

	protected export const override function ExitCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var currentState : Int32;
		currentState = scriptInterface.localBlackboard.GetInt( GetAllBlackboardDefs().PlayerStateMachine.Vehicle );
		if( currentState == ( ( Int32 )( gamePSMVehicle.Default ) ) )
		{
			return true;
		}
		if( ( currentState != ( ( Int32 )( gamePSMVehicle.Scene ) ) ) && ( currentState != ( ( Int32 )( gamePSMVehicle.Passenger ) ) ) )
		{
			return true;
		}
		return false;
	}

}

class VehicleNoDriveContextEvents extends InputContextTransitionEvents
{

	protected virtual function OnEnter( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveVehicleDriverInputHints( stateContext, scriptInterface );
	}

	protected virtual function OnExit( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowVehicleDriverInputHints( stateContext, scriptInterface );
	}

}

class VehicleNoDriveContextDecisions extends InputContextTransitionDecisions
{
	private var m_callbackID : CallbackHandle;

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		var allBlackboardDef : AllBlackboardDefinitions;
		if( scriptInterface.localBlackboard )
		{
			allBlackboardDef = GetAllBlackboardDefs();
			m_callbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.Vehicle, this, 'OnVehicleStateChanged' );
			OnVehicleStateChanged( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.Vehicle ) );
		}
	}

	protected export function OnDetach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_callbackID = NULL;
	}

	protected event OnVehicleStateChanged( value : Int32 )
	{
		EnableOnEnterCondition( value == ( ( Int32 )( gamePSMVehicle.Driving ) ) );
	}

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		if( StatusEffectSystem.ObjectHasStatusEffectWithTag( scriptInterface.executionOwner, 'NoDriving' ) )
		{
			return true;
		}
		return false;
	}

}

class VehicleQuestRestrictedContextDecisions extends InputContextTransitionDecisions
{

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		if( StatusEffectSystem.ObjectHasStatusEffectWithTag( scriptInterface.executionOwner, 'VehicleOnlyForward' ) )
		{
			return true;
		}
		return false;
	}

}

class VehicleQuestRestrictedContextEvents extends VehicleNoDriveContextEvents
{

	protected override function OnEnter( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowVehicleRestrictedInputHints( stateContext, scriptInterface );
		stateContext.SetPermanentBoolParameter( 'inVehicleRestrictState', true, true );
	}

	protected override function OnExit( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveVehicleRestrictedInputHints( stateContext, scriptInterface );
		stateContext.RemovePermanentBoolParameter( 'inVehicleRestrictState' );
	}

}

class VehicleTankDriverContextDecisions extends InputContextTransitionDecisions
{
	private var m_callbackID : CallbackHandle;

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		var allBlackboardDef : AllBlackboardDefinitions;
		if( scriptInterface.localBlackboard )
		{
			allBlackboardDef = GetAllBlackboardDefs();
			m_callbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.Vehicle, this, 'OnVehicleStateChanged' );
			OnVehicleStateChanged( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.Vehicle ) );
		}
	}

	protected export function OnDetach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_callbackID = NULL;
	}

	protected event OnVehicleStateChanged( value : Int32 )
	{
		EnableOnEnterCondition( value == ( ( Int32 )( gamePSMVehicle.Driving ) ) );
	}

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		var vehicle : weak< GameObject >;
		if( !( VehicleComponent.GetVehicle( scriptInterface.owner.GetGame(), scriptInterface.executionOwner, vehicle ) ) )
		{
			return false;
		}
		if( ( ( TankObject )( vehicle ) ) == NULL )
		{
			return false;
		}
		return true;
	}

}

class VehicleDriverContextEvents extends InputContextTransitionEvents
{

	protected export function OnUpdate( timeDelta : Float, stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		UpdateVehicleDriverInputHints( stateContext, scriptInterface );
	}

	protected function UpdateVehicleDriverInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		if( m_gameplaySettings.GetIsInputHintEnabled() )
		{
			if( ShouldForceRefreshInputHints( stateContext, scriptInterface ) )
			{
				RemoveVehicleDriverInputHints( stateContext, scriptInterface );
				UpdateRadioInputHint( stateContext, scriptInterface );
				return;
			}
			if( !( stateContext.GetBoolParameter( 'isDriverInputHintDisplayed', true ) ) )
			{
				ShowVehicleDriverInputHints( stateContext, scriptInterface );
				UpdateRadioInputHint( stateContext, scriptInterface );
			}
		}
	}

	protected function UpdateRadioInputHint( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		var isRadioBlocked : Bool;
		isRadioBlocked = StatusEffectSystem.ObjectHasStatusEffectWithTag( scriptInterface.executionOwner, 'VehicleBlockRadioInput' );
		if( !( stateContext.GetBoolParameter( 'isVehicleRadioInputHintDisplayed', true ) ) )
		{
			if( !( isRadioBlocked ) )
			{
				ShowVehicleRadioInputHint( stateContext, scriptInterface );
			}
		}
		else
		{
			RemoveVehicleRadioInputHint( stateContext, scriptInterface );
		}
	}

	protected export virtual function OnEnter( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowVehicleDriverInputHints( stateContext, scriptInterface );
		UpdateRadioInputHint( stateContext, scriptInterface );
	}

	protected export virtual function OnExit( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveVehicleDriverInputHints( stateContext, scriptInterface );
		RemoveVehicleRadioInputHint( stateContext, scriptInterface );
	}

}

class VehicleDriverContextDecisions extends InputContextTransitionDecisions
{
	private var m_callbackID : CallbackHandle;

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		var allBlackboardDef : AllBlackboardDefinitions;
		if( scriptInterface.localBlackboard )
		{
			allBlackboardDef = GetAllBlackboardDefs();
			m_callbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.Vehicle, this, 'OnVehicleStateChanged' );
			OnVehicleStateChanged( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.Vehicle ) );
		}
	}

	protected export function OnDetach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_callbackID = NULL;
	}

	protected event OnVehicleStateChanged( value : Int32 )
	{
		EnableOnEnterCondition( value == ( ( Int32 )( gamePSMVehicle.Driving ) ) );
	}

	protected export const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		if( StatusEffectSystem.ObjectHasStatusEffectWithTag( scriptInterface.executionOwner, 'VehicleOnlyForward' ) )
		{
			return false;
		}
		if( StatusEffectSystem.ObjectHasStatusEffectWithTag( scriptInterface.executionOwner, 'NoDriving' ) )
		{
			return false;
		}
		return true;
	}

}

class VehicleDriverCombatContextEvents extends InputContextTransitionEvents
{

	protected virtual function OnEnter( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowVehicleDriverCombatInputHints( stateContext, scriptInterface );
	}

	protected virtual function OnExit( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveVehicleDriverCombatInputHints( stateContext, scriptInterface );
	}

}

class VehicleDriverCombatContextDecisions extends InputContextTransitionDecisions
{
	private var m_callbackID : CallbackHandle;

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		var allBlackboardDef : AllBlackboardDefinitions;
		if( scriptInterface.localBlackboard )
		{
			allBlackboardDef = GetAllBlackboardDefs();
			m_callbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.Vehicle, this, 'OnVehicleStateChanged' );
			OnVehicleStateChanged( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.Vehicle ) );
		}
	}

	protected export function OnDetach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_callbackID = NULL;
	}

	protected event OnVehicleStateChanged( value : Int32 )
	{
		EnableOnEnterCondition( value == ( ( Int32 )( gamePSMVehicle.DriverCombat ) ) );
	}

	protected const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		if( StatusEffectSystem.ObjectHasStatusEffectWithTag( scriptInterface.executionOwner, 'VehicleOnlyForward' ) )
		{
			return false;
		}
		if( StatusEffectSystem.ObjectHasStatusEffectWithTag( scriptInterface.executionOwner, 'NoDriving' ) )
		{
			return false;
		}
		return true;
	}

}

class VehicleNoDriveCombatContextDecisions extends InputContextTransitionDecisions
{
	private var m_callbackID : CallbackHandle;

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		var allBlackboardDef : AllBlackboardDefinitions;
		if( scriptInterface.localBlackboard )
		{
			allBlackboardDef = GetAllBlackboardDefs();
			m_callbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.Vehicle, this, 'OnVehicleStateChanged' );
			OnVehicleStateChanged( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.Vehicle ) );
		}
	}

	protected export function OnDetach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_callbackID = NULL;
	}

	protected event OnVehicleStateChanged( value : Int32 )
	{
		EnableOnEnterCondition( value == ( ( Int32 )( gamePSMVehicle.DriverCombat ) ) );
	}

	protected const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		if( StatusEffectSystem.ObjectHasStatusEffectWithTag( scriptInterface.executionOwner, 'NoDriving' ) )
		{
			return true;
		}
		return false;
	}

}

class VehicleCombatContextEvents extends InputContextTransitionEvents
{

	protected function OnUpdate( timeDelta : Float, stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		UpdateVehicleCombatInputHints( stateContext, scriptInterface );
	}

	protected function UpdateVehicleCombatInputHints( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		if( m_gameplaySettings.GetIsInputHintEnabled() )
		{
			if( ShouldForceRefreshInputHints( stateContext, scriptInterface ) )
			{
				RemoveVehiclePassengerCombatInputHints( stateContext, scriptInterface );
			}
			if( !( stateContext.GetBoolParameter( 'isPassengerCombatInputHintDisplayed', true ) ) )
			{
				ShowVehiclePassengerCombatInputHints( stateContext, scriptInterface );
			}
		}
	}

	protected virtual function OnEnter( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		ShowVehiclePassengerCombatInputHints( stateContext, scriptInterface );
	}

	protected virtual function OnExit( stateContext : StateContext, scriptInterface : StateGameScriptInterface )
	{
		RemoveVehiclePassengerCombatInputHints( stateContext, scriptInterface );
	}

}

class VehicleCombatContextDecisions extends InputContextTransitionDecisions
{
	private var m_callbackID : CallbackHandle;

	protected export function OnAttach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		var allBlackboardDef : AllBlackboardDefinitions;
		if( scriptInterface.localBlackboard )
		{
			allBlackboardDef = GetAllBlackboardDefs();
			m_callbackID = scriptInterface.localBlackboard.RegisterListenerInt( allBlackboardDef.PlayerStateMachine.Vehicle, this, 'OnVehicleStateChanged' );
			OnVehicleStateChanged( scriptInterface.localBlackboard.GetInt( allBlackboardDef.PlayerStateMachine.Vehicle ) );
		}
	}

	protected export function OnDetach( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface )
	{
		m_callbackID = NULL;
	}

	protected event OnVehicleStateChanged( value : Int32 )
	{
		EnableOnEnterCondition( value == ( ( Int32 )( gamePSMVehicle.Combat ) ) );
	}

	protected const override function EnterCondition( const stateContext : StateContext, const scriptInterface : StateGameScriptInterface ) : Bool
	{
		return true;
	}

}

