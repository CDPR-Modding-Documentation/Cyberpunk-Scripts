class TimeDilationParameters extends IScriptable
{
	var reason : CName;
	var timeDilation : Float;
	default timeDilation = 0.01f;
	var playerTimeDilation : Float;
	default playerTimeDilation = 0.01f;
	var duration : Float;
	default duration = 9999.0f;
	var easeInCurve : CName;
	var easeOutCurve : CName;
}

class TimeDilationHelper
{

	public static function GetTimeDilationParameters( out timeDilationParameters : TimeDilationParameters, profileName : String )
	{
		timeDilationParameters = new TimeDilationParameters;
		timeDilationParameters.reason = TimeDilationHelper.GetCNameFromTimeSystemTweak( profileName, "reason" );
		timeDilationParameters.timeDilation = TimeDilationHelper.GetFloatFromTimeSystemTweak( profileName, "timeDilation" );
		timeDilationParameters.playerTimeDilation = TimeDilationHelper.GetFloatFromTimeSystemTweak( profileName, "playerTimeDilation" );
		timeDilationParameters.duration = TimeDilationHelper.GetFloatFromTimeSystemTweak( profileName, "duration" );
		timeDilationParameters.easeInCurve = TimeDilationHelper.GetCNameFromTimeSystemTweak( profileName, "easeInCurve" );
		timeDilationParameters.easeOutCurve = TimeDilationHelper.GetCNameFromTimeSystemTweak( profileName, "easeOutCurve" );
	}

	public static function SetTimeDilationWithProfile( requester : weak< GameObject >, profileName : String, enable : Bool ) : Bool
	{
		var timeDilationParameters : TimeDilationParameters;
		var reason : CName;
		var timeDilation : Float;
		var playerTimeDilation : Float;
		var duration : Float;
		var easeInCurve : CName;
		var easeOutCurve : CName;
		if( !( requester ) )
		{
			return false;
		}
		TimeDilationHelper.GetTimeDilationParameters( timeDilationParameters, profileName );
		reason = timeDilationParameters.reason;
		timeDilation = timeDilationParameters.timeDilation;
		playerTimeDilation = timeDilationParameters.playerTimeDilation;
		duration = timeDilationParameters.duration;
		easeInCurve = timeDilationParameters.easeInCurve;
		easeOutCurve = timeDilationParameters.easeOutCurve;
		if( enable )
		{
			SetTimeDilation( requester, reason, timeDilation, duration, easeInCurve, easeOutCurve );
			SetTimeDilationOnPlayer( requester, reason, playerTimeDilation, duration, easeInCurve, easeOutCurve );
		}
		else
		{
			UnSetTimeDilation( requester, reason, easeOutCurve );
		}
		return true;
	}

	public static function SetTimeDilation( requester : weak< GameObject >, reason : CName, timeDilation : Float, optional duration : Float, easeInCurve : CName, easeOutCurve : CName, optional listener : TimeDilationListener ) : Bool
	{
		var timeSystem : TimeSystem;
		timeSystem = GameInstance.GetTimeSystem( requester.GetGame() );
		if( ( !( timeSystem ) || timeSystem.IsTimeDilationActive() ) || IsMultiplayer() )
		{
			return false;
		}
		timeSystem.SetIgnoreTimeDilationOnLocalPlayerZero( false );
		timeSystem.SetTimeDilation( reason, timeDilation, duration, easeInCurve, easeOutCurve, listener );
		return true;
	}

	public static function SetTimeDilationOnPlayer( requester : weak< GameObject >, reason : CName, timeDilation : Float, optional duration : Float, easeInCurve : CName, easeOutCurve : CName, optional listener : TimeDilationListener ) : Bool
	{
		var timeSystem : TimeSystem;
		timeSystem = GameInstance.GetTimeSystem( requester.GetGame() );
		if( ( !( timeSystem ) || timeSystem.IsTimeDilationActive() ) || IsMultiplayer() )
		{
			return false;
		}
		timeSystem.SetTimeDilationOnLocalPlayerZero( reason, timeDilation, duration, easeInCurve, easeOutCurve,  );
		return true;
	}

	public static function UnSetTimeDilation( requester : weak< GameObject >, optional reason : CName, optional easeOutCurve : CName ) : Bool
	{
		var timeSystem : TimeSystem;
		timeSystem = GameInstance.GetTimeSystem( requester.GetGame() );
		if( ( !( timeSystem ) || !( timeSystem.IsTimeDilationActive() ) ) || IsMultiplayer() )
		{
			return false;
		}
		if( !( IsNameValid( easeOutCurve ) ) )
		{
			timeSystem.UnsetTimeDilation( reason, '' );
			timeSystem.UnsetTimeDilationOnLocalPlayerZero( '' );
		}
		else
		{
			timeSystem.UnsetTimeDilation( reason, easeOutCurve );
			timeSystem.UnsetTimeDilationOnLocalPlayerZero( easeOutCurve );
		}
		return true;
	}

	public static function SetIndividualTimeDilation( target : weak< GameObject >, reason : CName, timeDilation : Float, optional duration : Float, optional easeInCurve : CName, optional easeOutCurve : CName ) : Bool
	{
		if( IsMultiplayer() )
		{
			return false;
		}
		( ( gamePuppet )( target ) ).SetIndividualTimeDilation( reason, timeDilation, duration, easeInCurve, easeOutCurve );
		return true;
	}

	public static function UnsetIndividualTimeDilation( target : weak< GameObject >, optional easeOutCurve : CName ) : Bool
	{
		if( IsMultiplayer() )
		{
			return false;
		}
		( ( gamePuppet )( target ) ).UnsetIndividualTimeDilation( easeOutCurve );
		return true;
	}

	public static function GetFloatFromTimeSystemTweak( tweakDBPath : String, paramName : String ) : Float
	{
		return TDB.GetFloat( TDBID.Create( ( ( "timeSystem." + tweakDBPath ) + "." ) + paramName ), 0.0 );
	}

	public static function GetCNameFromTimeSystemTweak( tweakDBPath : String, paramName : String ) : CName
	{
		return TDB.GetCName( TDBID.Create( ( ( "timeSystem." + tweakDBPath ) + "." ) + paramName ), '' );
	}

	public constexpr static function GetTimeDilationKey() : CName
	{
		return 'timeDilation';
	}

	public constexpr static function GetSandevistanKey() : CName
	{
		return 'sandevistan';
	}

	public constexpr static function GetSandevistanVersusSandevistanKey() : CName
	{
		return 'sandevistanVersusSandevistan';
	}

	public constexpr static function GetKerenzikovKey() : CName
	{
		return 'kereznikov';
	}

	public constexpr static function GetFocusModeKey() : CName
	{
		return 'focusMode';
	}

}

