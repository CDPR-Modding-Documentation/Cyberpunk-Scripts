class AnimationsLoadedCondition extends AIbehaviorconditionScript
{
	editable var m_coreAnims : Bool;
	editable var m_melee : Bool;

	protected export override function Activate( context : ScriptExecutionContext )
	{
		SetUpdateInterval( context, RandomizeOffsetForUpdateInterval( 0.1 ) );
	}

	private export override function Check( context : ScriptExecutionContext ) : AIbehaviorConditionOutcomes
	{
		if( m_coreAnims )
		{
			return AIActionHelper.PreloadCoreAnimations( GetPuppet( context ), m_melee );
		}
		else
		{
			return AIActionHelper.PreloadBaseAnimations( GetPuppet( context ), m_melee );
		}
		return false;
	}

}

class AnimationsLoadedTask extends AIbehaviortaskScript
{
	editable var m_coreAnims : Bool;
	editable var m_setSignal : Bool;
	editable var m_melee : Bool;

	protected export override function Activate( context : ScriptExecutionContext )
	{
		SetUpdateInterval( context, RandomizeOffsetForUpdateInterval( 0.2 ) );
	}

	private export override function Update( context : ScriptExecutionContext ) : AIbehaviorUpdateOutcome
	{
		if( m_coreAnims )
		{
			if( AIActionHelper.PreloadCoreAnimations( GetPuppet( context ), m_melee ) )
			{
				if( m_setSignal && !( m_melee ) )
				{
					AIActionHelper.AnimationsLoadedSignal( GetPuppet( context ) );
				}
				else
				{
					return AIbehaviorUpdateOutcome.SUCCESS;
				}
			}
			return AIbehaviorUpdateOutcome.IN_PROGRESS;
		}
		else
		{
			if( AIActionHelper.PreloadBaseAnimations( GetPuppet( context ), m_melee ) )
			{
				if( m_setSignal && !( m_melee ) )
				{
					AIActionHelper.AnimationsLoadedSignal( GetPuppet( context ) );
				}
				else
				{
					return AIbehaviorUpdateOutcome.SUCCESS;
				}
			}
		}
		return AIbehaviorUpdateOutcome.IN_PROGRESS;
	}

}

