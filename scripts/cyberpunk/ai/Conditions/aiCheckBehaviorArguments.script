abstract class CheckArguments extends AIbehaviorconditionScript
{
	editable var m_argumentVar : CName;

	public override function GetDescription( context : ScriptExecutionContext ) : String
	{
		return ( super.GetDescription( context ) + " " ) + ( ( String )( m_argumentVar ) );
	}

}

class CheckArgumentBoolean extends CheckArguments
{
	editable var m_customVar : Bool;

	protected export override function Check( context : ScriptExecutionContext ) : AIbehaviorConditionOutcomes
	{
		return ScriptExecutionContext.GetArgumentBool( context, m_argumentVar ) == m_customVar;
	}

}

class CheckArgumentInt extends CheckArguments
{
	editable var m_customVar : Int32;
	editable var m_comparator : ECompareOp;

	protected override function Check( context : ScriptExecutionContext ) : AIbehaviorConditionOutcomes
	{
		return Compare( m_comparator, ScriptExecutionContext.GetArgumentInt( context, m_argumentVar ), m_customVar );
	}

}

class CheckElapsedTimeFromArgumentFloat extends CheckArguments
{
	editable var m_customVar : Float;
	editable var m_comparator : ECompareOp;

	protected override function Check( context : ScriptExecutionContext ) : AIbehaviorConditionOutcomes
	{
		return CompareF( m_comparator, EngineTime.ToFloat( ScriptExecutionContext.GetAITime( context ) ) - ScriptExecutionContext.GetArgumentFloat( context, m_argumentVar ), m_customVar );
	}

}

class CheckArgumentFloat extends CheckArguments
{
	editable var m_customVar : Float;
	editable var m_comparator : ECompareOp;

	protected override function Check( context : ScriptExecutionContext ) : AIbehaviorConditionOutcomes
	{
		return CompareF( m_comparator, ScriptExecutionContext.GetArgumentFloat( context, m_argumentVar ), m_customVar );
	}

}

class CheckArgumentName extends CheckArguments
{
	editable var m_customVar : CName;

	protected override function Check( context : ScriptExecutionContext ) : AIbehaviorConditionOutcomes
	{
		return ScriptExecutionContext.GetArgumentName( context, m_argumentVar ) == m_customVar;
	}

}

class CheckArgumentObjectSet extends CheckArguments
{

	protected export override function Check( context : ScriptExecutionContext ) : AIbehaviorConditionOutcomes
	{
		return ScriptExecutionContext.GetArgumentObject( context, m_argumentVar ) != NULL;
	}

}

