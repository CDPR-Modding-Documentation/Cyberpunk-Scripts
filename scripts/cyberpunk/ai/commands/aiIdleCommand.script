class HoldPositionCommandTask extends AIbehaviortaskScript
{
	protected editable inlined var m_inCommand : AIArgumentMapping;
	protected var m_currentCommand : weak< AIHoldPositionCommand >;
	protected var m_activationTimeStamp : Float;
	protected var m_commandDuration : Float;

	protected override function Activate( context : ScriptExecutionContext )
	{
		SetUpdateInterval( context, RandomizeOffsetForUpdateInterval( 0.2 ) );
	}

	protected override function Update( context : ScriptExecutionContext ) : AIbehaviorUpdateOutcome
	{
		var rawCommand : IScriptable;
		var typedCommand : AIHoldPositionCommand;
		rawCommand = ScriptExecutionContext.GetScriptableMappingValue( context, m_inCommand );
		typedCommand = ( ( AIHoldPositionCommand )( rawCommand ) );
		if( m_currentCommand && !( typedCommand ) )
		{
			CancelCommand( context, typedCommand );
			return AIbehaviorUpdateOutcome.IN_PROGRESS;
		}
		if( typedCommand == m_currentCommand )
		{
			if( ( m_commandDuration >= 0.0 ) && ( EngineTime.ToFloat( ScriptExecutionContext.GetAITime( context ) ) > ( m_activationTimeStamp + m_commandDuration ) ) )
			{
				CancelCommand( context, typedCommand );
				if( typedCommand && typedCommand.state == AICommandState.Executing )
				{
					GetPuppet( context ).GetAIControllerComponent().StopExecutingCommand( typedCommand, true );
				}
			}
			return AIbehaviorUpdateOutcome.IN_PROGRESS;
		}
		m_currentCommand = typedCommand;
		m_commandDuration = typedCommand.duration;
		m_activationTimeStamp = EngineTime.ToFloat( ScriptExecutionContext.GetAITime( context ) );
		return AIbehaviorUpdateOutcome.IN_PROGRESS;
	}

	protected final function CancelCommand( context : ScriptExecutionContext, typedCommand : AIHoldPositionCommand )
	{
		ScriptExecutionContext.SetMappingValue( context, m_inCommand, NULL );
		m_activationTimeStamp = 0.0;
		m_commandDuration = -1.0;
		m_currentCommand = NULL;
	}

}

