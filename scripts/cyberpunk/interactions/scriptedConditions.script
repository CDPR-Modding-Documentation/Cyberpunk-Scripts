class GrappleInteractionCondition extends InteractionScriptedCondition
{

	public export const function Test( const activatorObject : weak< GameObject >, const hotSpotObject : weak< GameObject > ) : Bool
	{
		return IsAreaBetweenPlayerAndVictim( activatorObject, hotSpotObject );
	}

	protected const function IsAreaBetweenPlayerAndVictim( const activatorObject : weak< GameObject >, const hotSpotObject : weak< GameObject > ) : Bool
	{
		var maxGrabDistOverCover : Float;
		var toHotSpot : Vector4;
		var distanceFromHotspot : Float;
		var behindCoverHeightDifferenceLockout : Float;
		maxGrabDistOverCover = 1.29999995;
		toHotSpot = hotSpotObject.GetWorldPosition() - activatorObject.GetWorldPosition();
		distanceFromHotspot = Vector4.Length2D( toHotSpot );
		behindCoverHeightDifferenceLockout = -0.5;
		if( !( SpatialQueriesHelper.HasSpaceInFront( activatorObject, toHotSpot, 1.29999995, 0.5, distanceFromHotspot, 0.40000001 ) ) )
		{
			return false;
		}
		if( ( toHotSpot.Z < behindCoverHeightDifferenceLockout ) && !( SpatialQueriesHelper.HasSpaceInFront( activatorObject, toHotSpot, 0.60000002, 0.5, distanceFromHotspot, 0.69999999 ) ) )
		{
			return false;
		}
		if( distanceFromHotspot < maxGrabDistOverCover )
		{
			return true;
		}
		return SpatialQueriesHelper.HasSpaceInFront( hotSpotObject, toHotSpot * -1.0, 0.60000002, 0.5, distanceFromHotspot - maxGrabDistOverCover, 1.10000002 );
	}

}

class ContainerStateInteractionCondition extends InteractionScriptedCondition
{

	public export const function Test( const activatorObject : weak< GameObject >, const hotSpotObject : weak< GameObject > ) : Bool
	{
		var container : gameLootContainerBase;
		container = ( ( gameLootContainerBase )( hotSpotObject ) );
		if( container )
		{
			return !( container.IsDisabled() );
		}
		else
		{
			return false;
		}
	}

}

class DeviceDirectInteractionCondition extends InteractionScriptedCondition
{

	public export const function Test( const activatorObject : weak< GameObject >, const hotSpotObject : weak< GameObject > ) : Bool
	{
		return ( ( Device )( hotSpotObject ) ).IsDirectInteractionCondition();
	}

}

class IsPlayerNotInteractingWithDevice extends InteractionScriptedCondition
{

	public const function Test( const activatorObject : weak< GameObject >, const hotSpotObject : weak< GameObject > ) : Bool
	{
		const var player : PlayerPuppet;
		var result : Bool;
		player = ( ( PlayerPuppet )( activatorObject ) );
		result = !( player.GetPlayerStateMachineBlackboard().GetBool( GetAllBlackboardDefs().PlayerStateMachine.IsInteractingWithDevice ) );
		return result;
	}

}

class DeviceRemoteInteractionCondition extends InteractionScriptedCondition
{

	public const function Test( const activatorObject : weak< GameObject >, const hotSpotObject : weak< GameObject > ) : Bool
	{
		if( !( IsScannerTarget( hotSpotObject ) ) && !( IsLookaAtTarget( activatorObject, hotSpotObject ) ) )
		{
			return false;
		}
		return ShouldEnableLayer( hotSpotObject );
	}

	private const function IsScannerTarget( const hotSpotObject : weak< GameObject > ) : Bool
	{
		var blackBoard : IBlackboard;
		var entityID : EntityID;
		blackBoard = GameInstance.GetBlackboardSystem( hotSpotObject.GetGame() ).Get( GetAllBlackboardDefs().UI_Scanner );
		entityID = blackBoard.GetEntityID( GetAllBlackboardDefs().UI_Scanner.ScannedObject );
		return hotSpotObject.GetEntityID() == entityID;
	}

	private const function IsLookaAtTarget( const activatorObject : weak< GameObject >, const hotSpotObject : weak< GameObject > ) : Bool
	{
		return GameInstance.GetInteractionManager( activatorObject.GetGame() ).IsInteractionLookAtTarget( activatorObject, hotSpotObject );
	}

	private const function ShouldEnableLayer( const hotSpotObject : weak< GameObject > ) : Bool
	{
		if( hotSpotObject )
		{
			return hotSpotObject.ShouldEnableRemoteLayer();
		}
		else
		{
			return false;
		}
	}

}

class PlayerIsSwimmingCondition extends InteractionScriptedCondition
{

	public const function Test( const activatorObject : weak< GameObject >, const hotSpotObject : weak< GameObject > ) : Bool
	{
		const var player : PlayerPuppet;
		var result : Bool;
		player = ( ( PlayerPuppet )( activatorObject ) );
		result = player.GetPlayerStateMachineBlackboard().GetInt( GetAllBlackboardDefs().PlayerStateMachine.HighLevel ) == ( ( Int32 )( gamePSMHighLevel.Swimming ) );
		return result;
	}

}

class LootPickupScriptedCondition extends InteractionScriptedCondition
{

	public export const function Test( const activatorObject : weak< GameObject >, const hotSpotObject : weak< GameObject > ) : Bool
	{
		var weaponRecord : WeaponItem_Record;
		var weaponObject : WeaponObject;
		var ItemDropObject : gameItemDropObject;
		ItemDropObject = ( ( gameItemDropObject )( hotSpotObject ) );
		weaponObject = ( ( WeaponObject )( ItemDropObject.GetItemObject() ) );
		if( weaponObject )
		{
			weaponRecord = weaponObject.GetWeaponRecord();
			if( weaponRecord.EquipArea().Type() == gamedataEquipmentArea.WeaponHeavy )
			{
				if( ( ( PlayerPuppet )( activatorObject ) ).GetPlayerStateMachineBlackboard().GetBool( GetAllBlackboardDefs().PlayerStateMachine.Carrying ) )
				{
					return false;
				}
			}
		}
		return true;
	}

}

