class GameEffectExecutor_StimOnHit extends EffectExecutor_Scripted
{
	editable var stimType : gamedataStimType;
	editable var silentStimType : gamedataStimType;
	const editable var suppressedByStimTypes : array< gamedataStimType >;

	private function CreateStim( ctx : EffectScriptContext, stimuliType : gamedataStimType, position : Vector4, radius : Float ) : Bool
	{
		var stimInfo : StimuliMergeInfo;
		var stimRecord : Stim_Record;
		var stimSystem : StimuliSystem;
		stimSystem = GameInstance.GetStimuliSystem( EffectScriptContext.GetGameInstance( ctx ) );
		stimRecord = stimSystem.GetStimRecord( stimuliType );
		if( radius <= 0.0 )
		{
			radius = stimRecord.Radius();
		}
		stimInfo.position = position;
		stimInfo.instigator = ( ( GameObject )( EffectScriptContext.GetInstigator( ctx ) ) );
		stimInfo.radius = radius;
		stimInfo.type = stimuliType;
		stimInfo.propagationType = gamedataStimPropagation.Audio;
		stimInfo.targets = stimRecord.Targets().Type();
		stimSystem.BroadcastMergeableStimuli( stimInfo, suppressedByStimTypes );
		return true;
	}

	public export function Process( ctx : EffectScriptContext, applierCtx : EffectExecutionScriptContext ) : Bool
	{
		var position : Vector4;
		var weapon : WeaponObject;
		position = EffectExecutionScriptContext.GetHitPosition( applierCtx );
		if( !( Vector4.IsZero( position ) ) && !( IsMuted( ctx, applierCtx ) ) )
		{
			if( GameInstance.GetStatsSystem( EffectScriptContext.GetGameInstance( ctx ) ).GetStatValue( EffectScriptContext.GetWeapon( ctx ).GetEntityID(), gamedataStatType.CanSilentKill ) > 0.0 )
			{
				if( !( CreateStim( ctx, silentStimType, position, -1.0 ) ) )
				{
					return false;
				}
				weapon = ( ( WeaponObject )( EffectScriptContext.GetWeapon( ctx ) ) );
				if( weapon && WeaponObject.GetWeaponType( weapon.GetItemID() ) == gamedataItemType.Wea_SniperRifle )
				{
					if( !( CreateStim( ctx, stimType, position, 5.0 ) ) )
					{
						return false;
					}
				}
			}
			else
			{
				if( !( CreateStim( ctx, stimType, position, -1.0 ) ) )
				{
					return false;
				}
				if( !( CreateStim( ctx, silentStimType, position, 20.0 ) ) )
				{
					return false;
				}
			}
			return true;
		}
		return false;
	}

	private function IsMuted( ctx : EffectScriptContext, applierCtx : EffectExecutionScriptContext ) : Bool
	{
		var sourceMuted : Bool;
		sourceMuted = GameInstance.GetStatusEffectSystem( EffectScriptContext.GetGameInstance( ctx ) ).HasStatusEffect( EffectScriptContext.GetSource( ctx ).GetEntityID(), T"BaseStatusEffect.PersonalSoundSilencerPlayerBuff" );
		return sourceMuted;
	}

}

