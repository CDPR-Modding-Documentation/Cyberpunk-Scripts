class BillboardDeviceController extends ScriptableDeviceComponent
{

	public const override function GetPS() : BillboardDeviceControllerPS
	{
		return ( ( BillboardDeviceControllerPS )( GetBasePS() ) );
	}

}

class BillboardDeviceControllerPS extends ScriptableDeviceComponentPS
{
	default m_tweakDBRecord = T"Devices.Billboard";
	default m_tweakDBDescriptionRecord = T"device_descriptions.Billboard";
	default m_deviceName = "LocKey#153";
	[ category = "Audio" ][ customEditor = "AudioEvent" ]
	instanceeditable var m_glitchSFX : CName;
	default m_glitchSFX = 'amb_int_custom_megabuilding_01_adverts_interactive_nicola_01_select_q110';
	[ category = "Lightning" ]
	instanceeditable var m_useLights : Bool;
	default m_useLights = true;
	[ category = "Lightning" ]
	const instanceeditable var m_lightsSettings : array< EditableGameLightSettings >;
	[ category = "Appearances" ]
	instanceeditable var m_useDeviceAppearence : Bool;
	default m_useDeviceAppearence = true;

	protected event OnInstantiated()
	{
		super.OnInstantiated();
		if( !( IsStringValid( m_deviceName ) ) )
		{
			m_deviceName = "Gameplay-Devices-DisplayNames-Billboard";
		}
	}

	protected const override function CanCreateAnyQuickHackActions() : Bool
	{
		return true;
	}

	protected override function GetQuickHackActions( out outActions : array< DeviceAction >, const context : ref< GetActionsContext > )
	{
		var currentAction : ScriptableDeviceAction;
		currentAction = ActionGlitchScreen( T"DeviceAction.GlitchScreenSuicide", T"QuickHack.SuicideHackBase" );
		currentAction.SetDurationValue( GetDistractionDuration( currentAction ) );
		outActions.PushBack( currentAction );
		currentAction = ActionGlitchScreen( T"DeviceAction.GlitchScreenBlind", T"QuickHack.BlindHack" );
		currentAction.SetDurationValue( GetDistractionDuration( currentAction ) );
		outActions.PushBack( currentAction );
		currentAction = ActionGlitchScreen( T"DeviceAction.GlitchScreenGrenade", T"QuickHack.GrenadeHackBase" );
		currentAction.SetDurationValue( GetDistractionDuration( currentAction ) );
		outActions.PushBack( currentAction );
		if( !( GlitchScreen.IsDefaultConditionMet( this, context ) ) )
		{
			SetActionsInactiveAll( outActions, "LocKey#7003" );
		}
		currentAction = ActionQuickHackDistraction();
		currentAction.SetObjectActionID( T"DeviceAction.MalfunctionClassHack" );
		currentAction.SetDurationValue( GetDistractionDuration( currentAction ) );
		currentAction.SetInactiveWithReason( QuickHackDistraction.IsDefaultConditionMet( this, context ), "LocKey#7003" );
		outActions.PushBack( currentAction );
		if( IsGlitching() || IsDistracting() )
		{
			SetActionsInactiveAll( outActions, "LocKey#7004" );
		}
		FinalizeGetQuickHackActions( outActions, context );
	}

	public const override function GetClearance() : Clearance
	{
		return Clearance.CreateClearance( 2, 2 );
	}

	public const function GetGlitchSFX() : CName
	{
		return m_glitchSFX;
	}

	public const function IsUsingLights() : Bool
	{
		return m_useLights;
	}

	public const function IsUsingDeviceAppearence() : Bool
	{
		return m_useDeviceAppearence;
	}

	public const function GetLightsSettings() : array< EditableGameLightSettings >
	{
		return m_lightsSettings;
	}

	protected override function GetBackgroundTextureTweakDBID() : TweakDBID
	{
		return T"DeviceIcons.ScreenDeviceBackground";
	}

	protected override function GetDeviceIconTweakDBID() : TweakDBID
	{
		return T"DeviceIcons.ScreenDeviceIcon";
	}

}

