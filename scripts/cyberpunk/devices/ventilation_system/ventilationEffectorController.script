class ToggleEffect extends ActionBool
{

	public function SetProperties()
	{
		actionName = 'ToggleEffect';
		prop = DeviceActionPropertyFunctions.SetUpProperty_Bool( 'ToggleEffect', true, 'LocKey#17809', 'LocKey#17809' );
	}

	public constexpr static function IsDefaultConditionMet( device : ScriptableDeviceComponentPS, const context : ref< GetActionsContext > ) : Bool
	{
		return true;
	}

}

class VentilationEffectorController extends ScriptableDeviceComponent
{

	public const override function GetPS() : VentilationEffectorControllerPS
	{
		return ( ( VentilationEffectorControllerPS )( GetBasePS() ) );
	}

}

class VentilationEffectorControllerPS extends ActivatedDeviceControllerPS
{
	default m_tweakDBRecord = T"Devices.VentilationEffector";
	default m_tweakDBDescriptionRecord = T"device_descriptions.VentilationEffector";
	default m_revealDevicesGrid = true;
	default m_drawGridLink = false;

	private function ActionToggleEffect() : ToggleEffect
	{
		var action : ToggleEffect;
		action = new ToggleEffect;
		action.clearanceLevel = 1;
		action.SetUp( this );
		action.SetProperties();
		action.AddDeviceName( m_deviceName );
		action.CreateActionWidgetPackage();
		return action;
	}

	public override function GetActions( out actions : array< DeviceAction >, context : GetActionsContext ) : Bool
	{
		actions.PushBack( ActionToggleEffect() );
		SetActionIllegality( actions, m_illegalActions.regularActions );
		return true;
	}

	public function OnToggleEffect( evt : ToggleEffect ) : EntityNotificationType
	{
		var notifier : ActionNotifier;
		notifier = new ActionNotifier;
		notifier.SetNone();
		if( IsON() )
		{
			SetDeviceState( EDeviceStatus.OFF );
		}
		else
		{
			SetDeviceState( EDeviceStatus.ON );
		}
		Notify( notifier, evt );
		return EntityNotificationType.SendThisEventToEntity;
	}

	protected override function GetDeviceIconTweakDBID() : TweakDBID
	{
		return T"DeviceIcons.VentilationDeviceIcon";
	}

	protected override function GetBackgroundTextureTweakDBID() : TweakDBID
	{
		return T"DeviceIcons.VentilationDeviceBackground";
	}

}

