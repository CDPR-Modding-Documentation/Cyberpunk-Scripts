struct ActivatedDeviceAnimSetup
{
	instanceeditable var m_animationTime : Float;
	default m_animationTime = 0.5f;
}

struct ActivatedDeviceSetup
{
	instanceeditable var m_actionName : CName;
	default m_actionName = 'LocKey#233';
	instanceeditable var m_disableOnActivation : Bool;
	instanceeditable var m_glitchOnActivation : Bool;
	instanceeditable var vfxResource : FxResource;
	instanceeditable var activationVFXname : CName;
	[ category = "AvailableInteractions" ]
	instanceeditable var m_hasSimpleInteraction : Bool;
	default m_hasSimpleInteraction = false;
	[ category = "AvailableInteractions" ]
	instanceeditable var m_hasSpiderbotInteraction : Bool;
	[ category = "AvailableInteractions" ]
	instanceeditable var m_hasQuickHack : Bool;
	default m_hasQuickHack = false;
	[ category = "AvailableInteractions" ]
	instanceeditable var m_hasQuickHackDistraction : Bool;
	[ category = "InteractionNamesSetup" ][ customEditor = "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice" ]
	instanceeditable var m_alternativeInteractionName : TweakDBID;
	[ category = "InteractionNamesSetup" ][ customEditor = "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice" ]
	instanceeditable var m_alternativeSpiderbotInteractionName : TweakDBID;
	[ category = "InteractionNamesSetup" ][ customEditor = "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice" ]
	instanceeditable var m_alternativeQuickHackName : TweakDBID;
	instanceeditable inlined var m_activatedDeviceSkillChecks : EngDemoContainer;
	[ category = "Trap Setup" ][ customEditor = "TweakDBGroupInheritance;Attacks.Trap_Attack_Base" ]
	instanceeditable var attackType : TweakDBID;
	[ category = "Trap Setup" ]
	instanceeditable var m_shouldActivateTrapOnAreaEnter : Bool;
	[ category = "Trap Setup" ]
	editable var m_shouldRagdollOnAttack : Bool;
	default m_shouldRagdollOnAttack = true;
	[ category = "UI" ][ customEditor = "TweakDBGroupInheritance;DeviceWidgetDefinition" ]
	instanceeditable editable var m_deviceWidgetRecord : TweakDBID;
	[ category = "UI" ][ customEditor = "TweakDBGroupInheritance;UIIcon" ]
	instanceeditable editable var m_thumbnailIconRecord : TweakDBID;
	default m_thumbnailIconRecord = T"DeviceIcons.GenenericDeviceIcon";
	[ category = "UI" ][ customEditor = "TweakDBGroupInheritance;ActionWidgetDefinition" ]
	instanceeditable editable var m_actionWidgetRecord : TweakDBID;
}

class ActivatedDeviceController extends ScriptableDeviceComponent
{

	public const override function GetPS() : ActivatedDeviceControllerPS
	{
		return ( ( ActivatedDeviceControllerPS )( GetBasePS() ) );
	}

}

class ActivatedDeviceControllerPS extends ScriptableDeviceComponentPS
{
	default m_deviceName = "ActivatedDevice";
	default m_tweakDBRecord = T"Devices.ActivatedDeviceTrap";
	default m_tweakDBDescriptionRecord = T"device_descriptions.ActivatedDeviceTrap";
	default m_shouldScannerShowRole = true;
	protected instanceeditable persistent var m_animationSetup : ActivatedDeviceAnimSetup;
	protected instanceeditable persistent var m_activatedDeviceSetup : ActivatedDeviceSetup;
	protected instanceeditable var m_spiderbotInteractionLocationOverride : NodeRef;
	private persistent var m_industrialArmAnimationOverride : Int32;
	default m_industrialArmAnimationOverride = -1;

	public function GetActionName() : CName
	{
		return m_activatedDeviceSetup.m_actionName;
	}

	public function GetInteractionName() : TweakDBID
	{
		return m_activatedDeviceSetup.m_alternativeInteractionName;
	}

	public function GetQuickHackName() : TweakDBID
	{
		return m_activatedDeviceSetup.m_alternativeQuickHackName;
	}

	public function ShouldGlitchOnActivation() : Bool
	{
		return m_activatedDeviceSetup.m_glitchOnActivation;
	}

	public function GetSpidebotInteractionName() : TweakDBID
	{
		return m_activatedDeviceSetup.m_alternativeSpiderbotInteractionName;
	}

	public function GetVFX() : FxResource
	{
		return m_activatedDeviceSetup.vfxResource;
	}

	public function GetActivationVFXname() : CName
	{
		return m_activatedDeviceSetup.activationVFXname;
	}

	public function GetAttackType() : TweakDBID
	{
		return m_activatedDeviceSetup.attackType;
	}

	public function ShouldRadgollOnAttack() : Bool
	{
		return m_activatedDeviceSetup.m_shouldRagdollOnAttack;
	}

	public function GetAnimationTime() : Float
	{
		return m_animationSetup.m_animationTime;
	}

	public function GetIndustrialArmAnimationOverride() : Int32
	{
		return m_industrialArmAnimationOverride;
	}

	public function GetSpiderbotInteractionLocationOverride() : NodeRef
	{
		return m_spiderbotInteractionLocationOverride;
	}

	public const function HasQuickHack() : Bool
	{
		return m_activatedDeviceSetup.m_hasQuickHack;
	}

	public const function HasQuickHackDistraction() : Bool
	{
		return m_activatedDeviceSetup.m_hasQuickHackDistraction;
	}

	public const function HasSpiderbotInteraction() : Bool
	{
		return m_activatedDeviceSetup.m_hasSpiderbotInteraction;
	}

	public const function ShouldActivateTrapOnAreaEnter() : Bool
	{
		return m_activatedDeviceSetup.m_shouldActivateTrapOnAreaEnter;
	}

	protected override function GetSkillCheckContainerForSetup() : BaseSkillCheckContainer
	{
		return m_activatedDeviceSetup.m_activatedDeviceSkillChecks;
	}

	protected function ActionSpiderbotActivateActivator( interactionTDBID : TweakDBID ) : SpiderbotActivateActivator
	{
		var action : SpiderbotActivateActivator;
		action = new SpiderbotActivateActivator;
		action.SetUp( this );
		action.AddDeviceName( m_deviceName );
		action.CreateInteraction( , , interactionTDBID );
		return action;
	}

	protected function ActionQuestToggleAutomaticAttack( toggle : Bool ) : QuestToggleAutomaticAttack
	{
		var action : QuestToggleAutomaticAttack;
		action = new QuestToggleAutomaticAttack;
		action.SetUp( this );
		action.AddDeviceName( m_deviceName );
		action.SetProperties( toggle );
		return action;
	}

	protected function ActionQuestSetIndustrialArmAnimationOverride() : QuestSetIndustrialArmAnimationOverride
	{
		var action : QuestSetIndustrialArmAnimationOverride;
		action = new QuestSetIndustrialArmAnimationOverride;
		action.SetUp( this );
		action.AddDeviceName( m_deviceName );
		action.SetProperties( -9999 );
		return action;
	}

	protected function ActionQuickHackActivateDevice( interactionTDBID : TweakDBID ) : ActivateDevice
	{
		var action : ActivateDevice;
		action = new ActivateDevice;
		action.clearanceLevel = 2;
		action.SetUp( this );
		action.SetProperties( 'Activate' );
		action.AddDeviceName( m_deviceName );
		action.CreateInteraction( , , interactionTDBID );
		return action;
	}

	protected function ActionActivateDevice( interactionTDBID : TweakDBID ) : ActivateDevice
	{
		var action : ActivateDevice;
		action = new ActivateDevice;
		action.clearanceLevel = 2;
		action.SetUp( this );
		action.SetProperties( m_activatedDeviceSetup.m_actionName );
		action.AddDeviceName( m_deviceName );
		action.CreateActionWidgetPackage();
		if( m_activatedDeviceSetup.m_hasSimpleInteraction )
		{
			action.CreateInteraction( , , interactionTDBID );
		}
		return action;
	}

	protected function ActionQuickHackDistraction( interactionTDBID : TweakDBID ) : QuickHackDistraction
	{
		var action : QuickHackDistraction;
		action = new QuickHackDistraction;
		action = super.ActionQuickHackDistraction();
		action.CreateInteraction( , , interactionTDBID );
		action.SetDurationValue( GetDistractionDuration( action ) );
		return action;
	}

	protected override function ActionEngineering( const context : ref< GetActionsContext > ) : ActionEngineering
	{
		var action : ActionEngineering;
		var additionalActions : array< DeviceAction >;
		action = super.ActionEngineering( context );
		action.clearanceLevel = DefaultActionsParametersHolder.GetToggleOpenClearance();
		action.SetAvailableOnUnpowered();
		action.CreateInteraction( context.processInitiatorObject, additionalActions );
		return action;
	}

	public function OnSpiderbotActivateActivator( evt : SpiderbotActivateActivator ) : EntityNotificationType
	{
		var spiderbotOrderDeviceEvent : SpiderbotOrderDeviceEvent;
		var locationOverrideID : EntityID;
		var locationOverrideObject : weak< GameObject >;
		var locationOverrideNodeRef : GlobalNodeRef;
		m_isSpiderbotInteractionOrdered = true;
		spiderbotOrderDeviceEvent = new SpiderbotOrderDeviceEvent;
		if( m_activatedDeviceSetup.m_hasSpiderbotInteraction )
		{
			spiderbotOrderDeviceEvent.target = ( ( GameObject )( GetOwnerEntityWeak() ) );
		}
		else
		{
			spiderbotOrderDeviceEvent.target = GetNearestViableParent();
		}
		locationOverrideNodeRef = ResolveNodeRefWithEntityID( m_spiderbotInteractionLocationOverride, PersistentID.ExtractEntityID( GetID() ) );
		if( GlobalNodeRef.IsDefined( locationOverrideNodeRef ) )
		{
			locationOverrideID = ( ( EntityID )( locationOverrideNodeRef ) );
			locationOverrideObject = ( ( GameObject )( GameInstance.FindEntityByID( GetGameInstance(), locationOverrideID ) ) );
			spiderbotOrderDeviceEvent.overrideMovementTarget = locationOverrideObject;
		}
		evt.GetExecutor().QueueEvent( spiderbotOrderDeviceEvent );
		return EntityNotificationType.DoNotNotifyEntity;
	}

	private function GetNearestViableParent() : weak< GameObject >
	{
		var flathead : weak< GameObject >;
		var ancestors : array< DeviceComponentPS >;
		var currentParent : weak< Entity >;
		var nearestViableParent : weak< GameObject >;
		var currentDistance : Float;
		var distanceToNearestViableParent : Float;
		var i : Int32;
		GetAncestors( ancestors );
		flathead = ( ( SubCharacterSystem )( GameInstance.GetScriptableSystemsContainer( GetGameInstance() ).Get( 'SubCharacterSystem' ) ) ).GetFlathead();
		for( i = 0; i < ancestors.Size(); i += 1 )
		{
			if( ( ( ScriptableDeviceComponentPS )( ancestors[ i ] ) ).HasAnyAvailableSpiderbotActions() )
			{
				currentParent = ancestors[ i ].GetOwnerEntityWeak();
				if( currentParent )
				{
					currentDistance = Vector4.Distance( currentParent.GetWorldPosition(), flathead.GetWorldPosition() );
					if( ( nearestViableParent == NULL ) || ( currentDistance < distanceToNearestViableParent ) )
					{
						nearestViableParent = ( ( GameObject )( currentParent ) );
						distanceToNearestViableParent = currentDistance;
					}
				}
			}
		}
		return nearestViableParent;
	}

	public override function GetActions( out actions : array< DeviceAction >, context : GetActionsContext ) : Bool
	{
		if( IsDisabled() )
		{
			return false;
		}
		super.GetActions( actions, context );
		actions.PushBack( ActionSetExposeQuickHacks() );
		if( ShouldGlitchOnActivation() && IsGlitching() )
		{
			return false;
		}
		actions.PushBack( ActionActivateDevice( GetInteractionName() ) );
		SetActionIllegality( actions, m_illegalActions.regularActions );
		return true;
	}

	protected const override function CanCreateAnyQuickHackActions() : Bool
	{
		if( IsDisabled() )
		{
			return false;
		}
		else if( HasQuickHack() || HasQuickHackDistraction() )
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	protected override function GetQuickHackActions( out actions : array< DeviceAction >, const context : ref< GetActionsContext > )
	{
		var currentAction : ScriptableDeviceAction;
		if( IsDisabled() )
		{
			return;
		}
		if( HasQuickHack() )
		{
			currentAction = ActionQuickHackActivateDevice( GetQuickHackName() );
			currentAction.SetObjectActionID( T"DeviceAction.ToggleStateClassHack" );
			actions.PushBack( currentAction );
		}
		if( HasQuickHackDistraction() )
		{
			currentAction = ActionQuickHackDistraction( GetQuickHackName() );
			currentAction.SetObjectActionID( T"DeviceAction.MalfunctionClassHack" );
			currentAction.SetInactiveWithReason( !( IsDistracting() ), "LocKey#7004" );
			actions.PushBack( currentAction );
		}
		FinalizeGetQuickHackActions( actions, context );
	}

	protected override function CanCreateAnySpiderbotActions() : Bool
	{
		var ancestors : array< DeviceComponentPS >;
		var i : Int32;
		if( IsDisabled() )
		{
			return false;
		}
		else if( HasSpiderbotInteraction() )
		{
			return true;
		}
		GetAncestors( ancestors );
		for( i = 0; i < ancestors.Size(); i += 1 )
		{
			if( ( ( ScriptableDeviceComponentPS )( ancestors[ i ] ) ).HasAnyAvailableSpiderbotActions() )
			{
				return true;
			}
		}
		return false;
	}

	protected override function GetSpiderbotActions( outActions : ref< array< DeviceAction > >, const context : ref< GetActionsContext > )
	{
		var ancestors : array< DeviceComponentPS >;
		var i : Int32;
		if( IsDisabled() )
		{
			return;
		}
		GetAncestors( ancestors );
		for( i = 0; i < ancestors.Size(); i += 1 )
		{
			if( ( ( ScriptableDeviceComponentPS )( ancestors[ i ] ) ).HasAnyAvailableSpiderbotActions() )
			{
				outActions.PushBack( ActionSpiderbotActivateActivator( GetSpidebotInteractionName() ) );
				break;
			}
		}
		if( HasSpiderbotInteraction() )
		{
			outActions.PushBack( ActionSpiderbotActivateActivator( GetSpidebotInteractionName() ) );
		}
	}

	public override function GetQuestActionByName( actionName : CName ) : DeviceAction
	{
		var action : DeviceAction;
		action = super.GetQuestActionByName( actionName );
		if( action == NULL )
		{
			switch( actionName )
			{
				case 'ActivateDevice':
					action = ActionActivateDevice();
				break;
				case 'QuestEnableAutomaticAttack':
					action = ActionQuestToggleAutomaticAttack( true );
				break;
				case 'QuestDisableAutomaticAttack':
					action = ActionQuestToggleAutomaticAttack( false );
				break;
				case 'QuestSetIndustrialArmAnimationOverride':
					action = ActionQuestSetIndustrialArmAnimationOverride();
				break;
			}
		}
		return action;
	}

	public override function GetQuestActions( out actions : array< DeviceAction >, const context : ref< GetActionsContext > )
	{
		super.GetQuestActions( actions, context );
		actions.PushBack( ActionActivateDevice() );
		actions.PushBack( ActionQuestToggleAutomaticAttack( true ) );
		actions.PushBack( ActionQuestToggleAutomaticAttack( false ) );
		actions.PushBack( ActionQuestSetIndustrialArmAnimationOverride() );
	}

	protected override function OnActivateDevice( evt : ActivateDevice ) : EntityNotificationType
	{
		super.OnActivateDevice( evt );
		UseNotifier( evt );
		if( IsON() )
		{
			SetDeviceState( EDeviceStatus.OFF );
		}
		else
		{
			SetDeviceState( EDeviceStatus.ON );
		}
		if( m_activatedDeviceSetup.m_disableOnActivation )
		{
			SetDeviceState( EDeviceStatus.DISABLED );
		}
		if( ShouldGlitchOnActivation() )
		{
			m_isGlitching = true;
		}
		return EntityNotificationType.SendThisEventToEntity;
	}

	protected function OnQuestToggleAutomaticAttack( evt : QuestToggleAutomaticAttack ) : EntityNotificationType
	{
		UseNotifier( evt );
		m_activatedDeviceSetup.m_shouldActivateTrapOnAreaEnter = ( ( Bool )evt.prop.first );
		return EntityNotificationType.DoNotNotifyEntity;
	}

	protected function OnQuestSetIndustrialArmAnimationOverride( evt : QuestSetIndustrialArmAnimationOverride ) : EntityNotificationType
	{
		UseNotifier( evt );
		m_industrialArmAnimationOverride = ( ( Int32 )evt.prop.first );
		return EntityNotificationType.SendThisEventToEntity;
	}

	public override function OnActionEngineering( evt : ActionEngineering ) : EntityNotificationType
	{
		if( !( evt.WasPassed() ) )
		{
			return EntityNotificationType.DoNotNotifyEntity;
		}
		super.OnActionEngineering( evt );
		return EntityNotificationType.SendThisEventToEntity;
	}

	public function ActivateThisDevice()
	{
		var activateAction : ActivateDevice;
		activateAction = new ActivateDevice;
		activateAction = ActionActivateDevice();
		ExecutePSAction( activateAction );
	}

	protected override function GetInkWidgetTweakDBID( const context : ref< GetActionsContext > ) : TweakDBID
	{
		if( TDBID.IsValid( m_activatedDeviceSetup.m_deviceWidgetRecord ) )
		{
			return m_activatedDeviceSetup.m_deviceWidgetRecord;
		}
		else
		{
			return T"DevicesUIDefinitions.GenericDeviceWidget";
		}
	}

	protected override function GetDeviceIconTweakDBID() : TweakDBID
	{
		return m_activatedDeviceSetup.m_thumbnailIconRecord;
	}

}

class QuestToggleAutomaticAttack extends ActionBool
{

	public function SetProperties( toggle : Bool )
	{
		if( toggle )
		{
			actionName = 'QuestEnableAutomaticAttack';
			prop = DeviceActionPropertyFunctions.SetUpProperty_Bool( actionName, toggle, 'QuestEnableAutomaticAttack', 'QuestDisableAutomaticAttack' );
		}
		else
		{
			actionName = 'QuestDisableAutomaticAttack';
			prop = DeviceActionPropertyFunctions.SetUpProperty_Bool( actionName, toggle, 'QuestEnableAutomaticAttack', 'QuestDisableAutomaticAttack' );
		}
	}

}

class QuestSetIndustrialArmAnimationOverride extends ActionInt
{

	public function SetProperties( animation : Int32 )
	{
		actionName = 'QuestSetIndustrialArmAnimationOverride';
		prop = DeviceActionPropertyFunctions.SetUpProperty_Int( 'animNumer', animation );
	}

}

