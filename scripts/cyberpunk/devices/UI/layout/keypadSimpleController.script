class KeypadButtonSpawnData extends IScriptable
{
	var m_widgetName : CName;
	var m_locKey : String;
	var m_isActionButton : Bool;
	var m_widgetData : SDeviceWidgetPackage;

	public function Initialize( widgetName : CName, locKey : String, isActionButton : Bool, widgetData : SDeviceWidgetPackage )
	{
		m_widgetName = widgetName;
		m_locKey = locKey;
		m_isActionButton = isActionButton;
		m_widgetData = widgetData;
		m_widgetData.displayName = "LocKey#53646";
	}

}

class KeypadDeviceController extends DeviceWidgetControllerBase
{
	private var m_enteredPasswordWidget : weak< inkText >;
	private var m_passwordStatusWidget : weak< inkText >;
	private var m_actionButton : weak< inkWidget >;
	private var m_ActionText : weak< inkText >;
	private var m_passwordsList : array< CName >;
	private var m_cardName : String;
	private var m_isPasswordKnown : Bool;
	private var m_row1 : weak< inkHorizontalPanel >;
	private var m_row2 : weak< inkHorizontalPanel >;
	private var m_row3 : weak< inkHorizontalPanel >;
	private var m_row4 : weak< inkHorizontalPanel >;

	protected event OnInitialize()
	{
		m_enteredPasswordWidget = ( ( inkText )( GetWidget( 'safeArea/enteredPassword' ) ) );
		m_passwordStatusWidget = ( ( inkText )( GetWidget( 'safeArea/passwordStatus' ) ) );
		m_row1 = ( ( inkHorizontalPanel )( GetWidget( 'safeArea/keypadButtonsVert/row1' ) ) );
		m_row2 = ( ( inkHorizontalPanel )( GetWidget( 'safeArea/keypadButtonsVert/row2' ) ) );
		m_row3 = ( ( inkHorizontalPanel )( GetWidget( 'safeArea/keypadButtonsVert/row3' ) ) );
		m_row4 = ( ( inkHorizontalPanel )( GetWidget( 'safeArea/keypadButtonsVert/row4' ) ) );
		m_enteredPasswordWidget.SetText( "" );
		m_passwordStatusWidget.SetLocalizedTextScript( "LocKey#42212" );
	}

	public override function Initialize( gameController : DeviceInkGameControllerBase, widgetData : SDeviceWidgetPackage )
	{
		HideActionWidgets();
		inkTextRef.SetLocalizedTextScript( m_statusNameWidget, widgetData.deviceStatus, widgetData.textData );
		inkTextRef.SetLocalizedTextScript( m_displayNameWidget, widgetData.displayName );
		m_cardName = ( ( String )( ( ( DoorWidgetCustomData )( widgetData.customData ) ).GetCardName() ) );
		m_isPasswordKnown = ( ( DoorWidgetCustomData )( widgetData.customData ) ).IsPasswordKnown();
		if( !( m_isInitialized ) )
		{
			AddKeypadButtons( m_row1, 1, widgetData, gameController );
			AddKeypadButtons( m_row2, 2, widgetData, gameController );
			AddKeypadButtons( m_row3, 3, widgetData, gameController );
			AddKeypadButtons( m_row4, 4, widgetData, gameController );
		}
		if( m_actionButton && !( CheckPassword() ) )
		{
			m_passwordStatusWidget.SetState( 'Locked' );
			inkTextRef.SetState( m_statusNameWidget, 'Locked' );
		}
		else if( widgetData.widgetState == EWidgetState.ALLOWED )
		{
			m_passwordStatusWidget.SetState( 'Allowed' );
			inkTextRef.SetState( m_statusNameWidget, 'Allowed' );
		}
		else if( widgetData.widgetState == EWidgetState.LOCKED )
		{
			m_passwordStatusWidget.SetState( 'Locked' );
			inkTextRef.SetState( m_statusNameWidget, 'Locked' );
		}
		else if( widgetData.widgetState == EWidgetState.SEALED )
		{
			m_passwordStatusWidget.SetState( 'Sealed' );
			inkTextRef.SetState( m_statusNameWidget, 'Sealed' );
		}
		else
		{
			m_passwordStatusWidget.SetState( 'Allowed' );
			inkTextRef.SetState( m_statusNameWidget, 'Allowed' );
		}
		m_isInitialized = true;
		if( gameController != NULL )
		{
			gameController.SetUICameraZoomState( true );
		}
	}

	private function AddKeypadButtons( parentWidget : weak< inkWidget >, rowNumber : Int32, widgetData : SDeviceWidgetPackage, gameController : DeviceInkGameControllerBase )
	{
		var i : Int32;
		var asyncSpawnData : AsyncSpawnData;
		var buttonSpawnData : KeypadButtonSpawnData;
		for( i = ( ( rowNumber - 1 ) * 3 ) + 1; i < ( ( ( rowNumber - 1 ) * 3 ) + 4 ); i += 1 )
		{
			buttonSpawnData = new KeypadButtonSpawnData;
			switch( i )
			{
				case 1:
					buttonSpawnData.Initialize( '1', "LocKey#910", false, widgetData );
				break;
				case 2:
					buttonSpawnData.Initialize( '2', "LocKey#911", false, widgetData );
				break;
				case 3:
					buttonSpawnData.Initialize( '3', "LocKey#912", false, widgetData );
				break;
				case 4:
					buttonSpawnData.Initialize( '4', "LocKey#913", false, widgetData );
				break;
				case 5:
					buttonSpawnData.Initialize( '5', "LocKey#914", false, widgetData );
				break;
				case 6:
					buttonSpawnData.Initialize( '6', "LocKey#915", false, widgetData );
				break;
				case 7:
					buttonSpawnData.Initialize( '7', "LocKey#916", false, widgetData );
				break;
				case 8:
					buttonSpawnData.Initialize( '8', "LocKey#917", false, widgetData );
				break;
				case 9:
					buttonSpawnData.Initialize( '9', "LocKey#918", false, widgetData );
				break;
				case 10:
					buttonSpawnData.Initialize( 'Cancel', "LocKey#920", false, widgetData );
				break;
				case 11:
					buttonSpawnData.Initialize( '0', "LocKey#890", false, widgetData );
				break;
				case 12:
					buttonSpawnData.Initialize( 'AuthorizeUser', "LocKey#53646", true, widgetData );
				break;
			}
			asyncSpawnData = new AsyncSpawnData;
			asyncSpawnData.Initialize( this, 'OnKeypadButtonWidgetSpawned', buttonSpawnData, gameController );
			CreateWidgetAsync( parentWidget, 'keypad_button', , asyncSpawnData );
		}
	}

	protected event OnKeypadButtonWidgetSpawned( widget : inkWidget, userData : IScriptable )
	{
		var textWidget : inkText;
		var actionWidget : inkWidget;
		var asyncSpawnData : AsyncSpawnData;
		var buttonSpawnData : KeypadButtonSpawnData;
		var i : Int32;
		var actionWidgetName : String;
		var gameController : DeviceInkGameControllerBase;
		asyncSpawnData = ( ( AsyncSpawnData )( userData ) );
		if( !( asyncSpawnData ) )
		{
			return false;
		}
		buttonSpawnData = ( ( KeypadButtonSpawnData )asyncSpawnData.m_widgetData );
		if( !( buttonSpawnData ) )
		{
			return false;
		}
		widget.SetSizeRule( inkESizeRule.Stretch );
		textWidget = ( ( inkText )( widget.GetController().GetWidget( 'displayName' ) ) );
		widget.RegisterToCallback( 'OnRelease', this, 'OnMouseButtonReleased' );
		widget.SetName( buttonSpawnData.m_widgetName );
		textWidget.SetLocalizedTextScript( buttonSpawnData.m_locKey );
		if( buttonSpawnData.m_isActionButton )
		{
			gameController = ( ( DeviceInkGameControllerBase )( asyncSpawnData.m_controller ) );
			if( gameController )
			{
				m_actionButton = widget;
				for( i = 0; i < buttonSpawnData.m_widgetData.actionWidgets.Size(); i += 1 )
				{
					actionWidgetName = buttonSpawnData.m_widgetData.actionWidgets[ i ].widgetName;
					if( actionWidgetName != "AuthorizeUser" )
					{
						continue;
					}
					buttonSpawnData.m_widgetData.actionWidgets[ i ].displayName = buttonSpawnData.m_locKey;
					actionWidget = GetActionWidget( buttonSpawnData.m_widgetData.actionWidgets[ i ], gameController );
					m_passwordsList = ( ( AuthorizeUser )( buttonSpawnData.m_widgetData.actionWidgets[ i ].action ) ).GetValidPasswords();
					if( actionWidget == NULL )
					{
						actionWidget = m_actionButton;
						AddActionWidget( actionWidget, buttonSpawnData.m_widgetData.actionWidgets[ i ], gameController );
					}
					ResolveAction( buttonSpawnData.m_widgetData.actionWidgets[ i ] );
					InitializeActionWidget( gameController, actionWidget, buttonSpawnData.m_widgetData.actionWidgets[ i ] );
					if( !( CheckPassword() ) )
					{
						m_passwordStatusWidget.SetState( 'Locked' );
						inkTextRef.SetState( m_statusNameWidget, 'Locked' );
					}
					break;
				}
			}
		}
	}

	protected event OnMouseButtonReleased( e : inkPointerEvent )
	{
		var button : weak< inkWidget >;
		if( e.IsAction( 'click' ) )
		{
			button = e.GetTarget();
			HandleButtonClicked( button );
		}
	}

	private function HandleButtonClicked( button : weak< inkWidget > )
	{
		var enteredPassword : String;
		var buttonName : CName;
		buttonName = button.GetName();
		enteredPassword = m_enteredPasswordWidget.GetText();
		m_passwordStatusWidget.SetLocalizedTextString( "LocKey#42212" );
		if( buttonName == 'AuthorizeUser' && !( CheckPassword() ) )
		{
			m_passwordStatusWidget.SetLocalizedTextScript( "LocKey#42213" );
			m_passwordStatusWidget.SetState( 'Locked' );
			inkTextRef.SetState( m_statusNameWidget, 'Locked' );
			enteredPassword = "";
			m_enteredPasswordWidget.SetText( enteredPassword );
		}
		else if( buttonName == 'Cancel' )
		{
			if( m_enteredPasswordWidget.GetText() != "" )
			{
				m_enteredPasswordWidget.SetText( "" );
			}
		}
		else if( ( ( ( ( ( ( ( ( ( buttonName == '1' || buttonName == '2' ) || buttonName == '3' ) || buttonName == '4' ) || buttonName == '5' ) || buttonName == '6' ) || buttonName == '0' ) || buttonName == '7' ) || buttonName == '8' ) || buttonName == '9' ) && ( StrLen( m_enteredPasswordWidget.GetText() ) < 6 ) )
		{
			enteredPassword = m_enteredPasswordWidget.GetText() + ( ( String )( buttonName ) );
			m_enteredPasswordWidget.SetText( enteredPassword );
		}
		RefreshActionButtons();
	}

	private function CheckPassword() : Bool
	{
		var i : Int32;
		for( i = 0; i < m_passwordsList.Size(); i += 1 )
		{
			if( StringToName( m_enteredPasswordWidget.GetText() ) == m_passwordsList[ i ] )
			{
				return true;
			}
		}
		return false;
	}

	private function RefreshActionButtons()
	{
		var i : Int32;
		if( CheckPassword() )
		{
			for( i = 0; i < m_actionWidgetsData.Size(); i += 1 )
			{
				ResolveAction( m_actionWidgetsData[ i ] );
				m_actionButton.CallCustomCallback( 'OnExecuteButtonAction' );
			}
			m_passwordStatusWidget.SetLocalizedTextScript( "LocKey#42214" );
			m_passwordStatusWidget.SetState( 'Allowed' );
			inkTextRef.SetState( m_statusNameWidget, 'Allowed' );
			m_actionButton.SetState( 'Press' );
		}
		else
		{
			m_actionButton.SetState( 'Default' );
			m_passwordStatusWidget.SetState( 'Locked' );
			inkTextRef.SetState( m_statusNameWidget, 'Locked' );
		}
	}

	protected override function ResolveAction( widgetData : SActionWidgetPackage )
	{
		var data : ResolveActionData;
		var actions : array< weak< DeviceAction > >;
		var action : ScriptableDeviceAction;
		data = new ResolveActionData;
		data.m_password = m_enteredPasswordWidget.GetText();
		actions = ( ( DeviceActionWidgetControllerBase )( widgetData.widget.GetController() ) ).GetActions();
		action = ( ( ScriptableDeviceAction )( actions[ 0 ] ) );
		action.ResolveAction( data );
	}

}

