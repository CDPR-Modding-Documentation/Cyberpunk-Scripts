class DoorTerminalMasterInkGameControllerBase extends MasterDeviceInkGameControllerBase
{
	protected var m_currentlyActiveDevices : array< PersistentID >;

	protected override function UpdateThumbnailWidgets( const widgetsData : ref< array< SThumbnailWidgetPackage > > )
	{
		var i : Int32;
		var widget : inkWidget;
		if( widgetsData.Size() == 1 )
		{
			m_currentlyActiveDevices.PushBack( widgetsData[ i ].ownerID );
			RequestDeviceWidgetsUpdate( m_currentlyActiveDevices );
		}
		else
		{
			for( i = 0; i < widgetsData.Size(); i += 1 )
			{
				widget = GetThumbnailWidget( widgetsData[ i ] );
				if( widget == NULL )
				{
					CreateThumbnailWidgetAsync( GetRootWidget(), widgetsData[ i ] );
				}
				else
				{
					InitializeThumbnailWidget( widget, widgetsData[ i ] );
				}
			}
			GoUp();
		}
	}

	protected override function UpdateDeviceWidgets( const widgetsData : ref< array< SDeviceWidgetPackage > > )
	{
		var i : Int32;
		var widget : inkWidget;
		var element : SBreadcrumbElementData;
		super.UpdateDeviceWidgets( widgetsData );
		m_currentlyActiveDevices.Clear();
		for( i = 0; i < widgetsData.Size(); i += 1 )
		{
			if( !( IsOwner( widgetsData[ i ].ownerID ) ) )
			{
				m_currentlyActiveDevices.PushBack( widgetsData[ i ].ownerID );
			}
			widget = GetDeviceWidget( widgetsData[ i ] );
			if( widget == NULL )
			{
				CreateDeviceWidgetAsync( GetRootWidget(), widgetsData[ i ] );
			}
			else
			{
				InitializeDeviceWidget( widget, widgetsData[ i ] );
			}
		}
		element = GetCurrentBreadcrumbElement();
		if( element.elementName != "device" )
		{
			element.elementName = "device";
			GoDown( element );
		}
	}

	protected override function Refresh( state : EDeviceStatus )
	{
		SetupWidgets();
		RequestDeviceWidgetsUpdate( m_currentlyActiveDevices );
		switch( state )
		{
			case EDeviceStatus.ON:
				TurnOn();
			break;
			case EDeviceStatus.OFF:
				TurnOff();
			break;
			case EDeviceStatus.UNPOWERED:
				TurnOff();
			break;
			case EDeviceStatus.DISABLED:
				TurnOff();
			break;
			default:
				break;
		}
		super.Refresh( state );
	}

	protected override function ResolveBreadcrumbLevel()
	{
		var element : SBreadcrumbElementData;
		element = GetCurrentBreadcrumbElement();
		if( !( IsStringValid( element.elementName ) ) )
		{
			RequestThumbnailWidgetsUpdate();
		}
		else if( element.elementName == "device" )
		{
			RequestDeviceWidgetsUpdate( m_currentlyActiveDevices );
		}
	}

	protected function TurnOn()
	{
		m_rootWidget.SetVisible( true );
		ResolveBreadcrumbLevel();
	}

	protected function TurnOff()
	{
		m_rootWidget.SetVisible( false );
	}

}

