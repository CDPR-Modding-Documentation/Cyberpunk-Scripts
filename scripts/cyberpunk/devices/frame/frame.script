class Frame extends InteractiveDevice
{
	default m_controllerTypeName = 'FrameController';
	private instanceeditable var m_isLinkedToPower : Bool;
	default m_isLinkedToPower = false;
	private editable var m_smartFrameName : String;
	default m_smartFrameName = "SMARTFRAMESâ„¢";
	private editable var m_smartFrameDescriptionLocKey : String;
	default m_smartFrameDescriptionLocKey = "UI-SmartFrames-Description";
	private var m_systemHandler : weak< inkISystemRequestsHandler >;
	private var m_squatFactToken : Uint32;
	private var m_questFactToken : Uint32;
	private var m_powerFactToken : Uint32;
	private var m_activePhotoID : Int32;
	default m_activePhotoID = 0;
	private var m_activePhotoHash : Uint32;
	private var m_activePhotoUV : RectF;
	private var m_frameSwitcherToken : inkGameNotificationToken;

	protected event OnFrameInitialisation( evt : FrameInitialisation )
	{
		var ps : FramePS;
		var frameComp : frameWidgetComponent;
		ps = GetPS();
		frameComp = ( ( frameWidgetComponent )( m_uiComponent ) );
		m_activePhotoHash = ps.GetHash();
		m_activePhotoUV = ps.GetUV();
		frameComp.InitDefaultScreenshot();
		if( m_activePhotoHash != 0 )
		{
			frameComp.InitScreenshot( m_activePhotoHash, evt.widget, this, 'OnScreenshotChanged' );
			frameComp.StartGlitchTransition();
			GameObjectEffectHelper.StartEffectEvent( this, 'frameEffect' );
		}
		frameComp.GetRequestHandler().RegisterToCallback( 'OnDeleteSreenshotComplete', this, 'OnDeleteSreenshotComplete' );
		if( m_isLinkedToPower )
		{
			LinkToPower();
		}
	}

	protected event OnRequestComponents( ri : EntityRequestComponentsInterface )
	{
		super.OnRequestComponents( ri );
		EntityRequestComponentsInterface.RequestComponent( ri, 'ui', 'frameWidgetComponent', true );
	}

	protected event OnTakeControl( ri : EntityResolveComponentsInterface )
	{
		super.OnTakeControl( ri );
		m_uiComponent = ( ( frameWidgetComponent )( EntityResolveComponentsInterface.GetComponent( ri, 'ui' ) ) );
		m_controller = ( ( FrameController )( EntityResolveComponentsInterface.GetComponent( ri, 'controller' ) ) );
	}

	protected event OnScanningLookedAt( evt : ScanningLookAtEvent )
	{
		super.OnScanningLookedAt( evt );
	}

	private const override function GetController() : FrameController
	{
		return ( ( FrameController )( m_controller ) );
	}

	public const override function GetDevicePS() : FrameControllerPS
	{
		return GetController().GetPS();
	}

	protected const override function GetPS() : FramePS
	{
		return ( ( FramePS )( super.GetPS() ) );
	}

	public const override function CompileScannerChunks() : Bool
	{
		var nameChunk : ScannerName;
		var deviceStatusChunk : ScannerDeviceStatus;
		var descriptionChunk : ScannerDescription;
		var nameParams : inkTextParams;
		var customDescriptions : array< String >;
		var scannerBlackboard : weak< IBlackboard >;
		var devicePS : ScriptableDeviceComponentPS;
		devicePS = GetDevicePS();
		scannerBlackboard = GameInstance.GetBlackboardSystem( GetGame() ).Get( GetAllBlackboardDefs().UI_ScannerModules );
		if( !( devicePS ) || !( scannerBlackboard ) )
		{
			return false;
		}
		if( devicePS.IsDisabled() )
		{
			return false;
		}
		scannerBlackboard.SetInt( GetAllBlackboardDefs().UI_ScannerModules.ObjectType, ( ( Int32 )( ScannerObjectType.DEVICE ) ), true );
		nameParams = new inkTextParams;
		nameParams.AddString( "TEXT_PRIMARY", m_smartFrameName );
		nameParams.AddString( "TEXT_SECONDARY", "" );
		nameChunk = new ScannerName;
		nameChunk.SetTextParams( nameParams );
		scannerBlackboard.SetVariant( GetAllBlackboardDefs().UI_ScannerModules.ScannerName, nameChunk );
		if( devicePS.ShouldScannerShowStatus() )
		{
			deviceStatusChunk = new ScannerDeviceStatus;
			deviceStatusChunk.Set( LocKeyToString( TweakDBInterface.GetScannableDataRecord( devicePS.GetScannerStatusRecord() ).LocalizedDescription() ) );
			deviceStatusChunk.SetFriendlyName( TweakDBInterface.GetScannableDataRecord( devicePS.GetScannerStatusRecord() ).FriendlyName() );
			scannerBlackboard.SetVariant( GetAllBlackboardDefs().UI_ScannerModules.ScannerDeviceStatus, deviceStatusChunk );
		}
		descriptionChunk = new ScannerDescription;
		descriptionChunk.Set( m_smartFrameDescriptionLocKey, customDescriptions );
		scannerBlackboard.SetVariant( GetAllBlackboardDefs().UI_ScannerModules.ScannerDescription, descriptionChunk );
		return true;
	}

	public const override function DeterminGameplayRole() : EGameplayRole
	{
		return EGameplayRole.SmartFrame;
	}

	private function LinkToPower()
	{
		var questSystem : QuestsSystem;
		questSystem = GameInstance.GetQuestsSystem( GetGame() );
		m_questFactToken = questSystem.RegisterEntity( 'q302_squat_sh_unlocked', GetEntityID() );
		if( !( TestPowerFact( questSystem ) ) )
		{
			m_uiComponent.Toggle( false );
			GetDevicePS().SetInteractionState( false );
		}
	}

	private function TestPowerFact( questSystem : QuestsSystem ) : Bool
	{
		return questSystem.GetFact( 'q302_squat_sh_unlocked' );
	}

	protected event OnFactChangedEvent( evt : FactChangedEvent )
	{
		var questSystem : QuestsSystem;
		questSystem = GameInstance.GetQuestsSystem( GetGame() );
		if( TestPowerFact( questSystem ) )
		{
			m_uiComponent.Toggle( true );
			GetDevicePS().SetInteractionState( true );
			questSystem.UnregisterEntity( 'q302_squat_sh_unlocked', m_questFactToken );
		}
	}

	private function UpdateCurrentPhoto()
	{
		var frameComp : frameWidgetComponent;
		frameComp = ( ( frameWidgetComponent )( m_uiComponent ) );
		if( m_activePhotoHash != 0 )
		{
			if( frameComp.GetRequestHandler().RequestGameScreenshotByHash( m_activePhotoHash, frameComp.GetScreenshotWidget(), this, 'OnScreenshotChanged' ) )
			{
				frameComp.StartGlitchTransition();
				GameObjectEffectHelper.StartEffectEvent( this, 'glitchEffect' );
			}
		}
		else
		{
			GameObjectEffectHelper.StartEffectEvent( this, 'glitchEffect' );
			frameComp.SetDefaultScreenshot( true );
		}
	}

	private function TrySpawnFrameSwitcherPopup() : Bool
	{
		if( GetBlackboard().GetBool( GetAllBlackboardDefs().UIGameData.Popup_FrameSwitcher_IsShown ) )
		{
			return false;
		}
		SpawnFrameSwitcherPopup();
		return true;
	}

	private function SpawnFrameSwitcherPopup()
	{
		var evt : FrameSwitcherEvent;
		evt = new FrameSwitcherEvent;
		evt.frame = this;
		evt.hash = m_activePhotoHash;
		evt.index = m_activePhotoID;
		evt.uv = m_activePhotoUV;
		GetPlayer( GetGame() ).QueueEvent( evt );
	}

	private function Open()
	{
		var uiSystem : UISystem;
		uiSystem = GameInstance.GetUISystem( GetGame() );
		uiSystem.PushGameContext( UIGameContext.QuickHack );
		GetBlackboard().SetBool( GetAllBlackboardDefs().UIGameData.Popup_FrameSwitcher_IsShown, true );
	}

	private function Close()
	{
		var uiSystem : UISystem;
		uiSystem = GameInstance.GetUISystem( GetGame() );
		uiSystem.PopGameContext( UIGameContext.QuickHack );
		GetBlackboard().SetBool( GetAllBlackboardDefs().UIGameData.Popup_FrameSwitcher_IsShown, false );
	}

	public const function GetFrameSize() : Vector2
	{
		return ( ( frameWidgetComponent )( m_uiComponent ) ).GetFormat();
	}

	protected event OnFrameSwitcher( evt : FrameSwitcher )
	{
		if( TrySpawnFrameSwitcherPopup() )
		{
			Open();
		}
	}

	protected event OnFrameSwitch( evt : FrameSwitch )
	{
		m_activePhotoHash = evt.hash;
		m_activePhotoID = evt.index;
		m_activePhotoUV = evt.uv;
		UpdateCurrentPhoto();
		Close();
		GetPS().SetHash( m_activePhotoHash );
		GetPS().SetUV( m_activePhotoUV );
	}

	protected event OnFrameCancel( evt : FrameCancel )
	{
		Close();
	}

	protected event OnScreenshotChanged( screenshotSize : Vector2 )
	{
		var frameComp : frameWidgetComponent;
		var widget : weak< inkImage >;
		frameComp = ( ( frameWidgetComponent )( m_uiComponent ) );
		widget = frameComp.GetScreenshotWidget();
		frameComp.StopGlitchTransition();
		if( ( screenshotSize.X == 0.0 ) || ( screenshotSize.Y == 0.0 ) )
		{
			frameComp.SetDefaultScreenshot( true );
		}
		else
		{
			frameComp.SetDefaultScreenshot( false );
			widget.SetDynamicTextureUV( m_activePhotoUV );
		}
		widget.FlagForVisualInvalidation();
	}

	protected event OnDeleteSreenshotComplete( hash : Uint32 )
	{
		var frameComp : frameWidgetComponent;
		frameComp = ( ( frameWidgetComponent )( m_uiComponent ) );
		if( hash == m_activePhotoHash )
		{
			frameComp.SetDefaultScreenshot( true );
		}
	}

}

class FrameInitialisation extends Event
{
	var widget : weak< inkImage >;
}

class FrameSwitcherEvent extends Event
{
	var frame : weak< Frame >;
	var hash : Uint32;
	var index : Int32;
	var uv : RectF;
}

class FrameSwitch extends Event
{
	var hash : Uint32;
	var index : Int32;
	var uv : RectF;
}

class FrameCancel extends Event
{
}

class FramePS extends GameObjectPS
{
	private persistent var m_screenshotHash : Uint32;
	default m_screenshotHash = 0;
	private persistent var m_screenshotID : Int32;
	default m_screenshotID = -1;
	private persistent var m_screenshotUVLeft : Float;
	private persistent var m_screenshotUVRight : Float;
	private persistent var m_screenshotUVTop : Float;
	private persistent var m_screenshotUVBottom : Float;

	public function SetHash( hash : Uint32 )
	{
		m_screenshotHash = hash;
	}

	public function SetUV( uv : RectF )
	{
		m_screenshotUVLeft = uv.Left;
		m_screenshotUVRight = uv.Right;
		m_screenshotUVTop = uv.Top;
		m_screenshotUVBottom = uv.Bottom;
	}

	public const function GetHash() : Uint32
	{
		return m_screenshotHash;
	}

	public const function GetIndex() : Int32
	{
		return m_screenshotID;
	}

	public const function GetUV() : RectF
	{
		var rect : RectF;
		rect.Left = m_screenshotUVLeft;
		rect.Right = m_screenshotUVRight;
		rect.Top = m_screenshotUVTop;
		rect.Bottom = m_screenshotUVBottom;
		return rect;
	}

}

