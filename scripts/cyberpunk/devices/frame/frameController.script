class inkFrameNotificationData extends inkGameNotificationData
{
	var frame : weak< Frame >;
	var hash : Uint32;
	var index : Int32;
	var uv : RectF;
	var shouldApply : Bool;

	public function SetAsRemove()
	{
		hash = 0;
		index = -1;
		uv.Left = 0.0;
		uv.Right = 1.0;
		uv.Top = 0.0;
		uv.Bottom = 1.0;
		shouldApply = true;
	}

}

class FrameController extends ScriptableDeviceComponent
{

	public const override function GetPS() : FrameControllerPS
	{
		return ( ( FrameControllerPS )( GetBasePS() ) );
	}

}

class FrameControllerPS extends ScriptableDeviceComponentPS
{
	default m_deviceName = "Frame";
	default m_hasUICameraZoom = true;

	public override function GetActions( out actions : array< DeviceAction >, context : GetActionsContext ) : Bool
	{
		if( FrameSwitcher.IsPlayerInAcceptableState( this, context ) )
		{
			actions.PushBack( ActionOpen() );
		}
		SetActionIllegality( actions, m_illegalActions.regularActions );
		return true;
	}

	protected function ActionOpen() : FrameSwitcher
	{
		var action : FrameSwitcher;
		action = new FrameSwitcher;
		action.clearanceLevel = DefaultActionsParametersHolder.GetInteractiveClearance();
		action.SetUp( this );
		action.SetProperties();
		action.AddDeviceName( m_deviceName );
		action.CreateInteraction();
		return action;
	}

	public function OnFrameSwitcher( evt : FrameSwitcher ) : EntityNotificationType
	{
		UseNotifier( evt );
		if( evt.IsStarted() )
		{
			ExecutePSAction( evt, this );
		}
		return EntityNotificationType.SendThisEventToEntity;
	}

}

class FrameSwitcher extends ActionBool
{

	public function SetProperties()
	{
		actionName = 'FrameSwitcher';
		prop = DeviceActionPropertyFunctions.SetUpProperty_Bool( actionName, true, actionName, actionName );
	}

	public static function IsPlayerInAcceptableState( device : ScriptableDeviceComponentPS, const context : ref< GetActionsContext > ) : Bool
	{
		var playerSMBlackboard : IBlackboard;
		playerSMBlackboard = GetPlayerStateMachine( context.processInitiatorObject );
		if( playerSMBlackboard.GetBool( GetAllBlackboardDefs().PlayerStateMachine.Carrying ) )
		{
			return false;
		}
		if( StatusEffectSystem.ObjectHasStatusEffectWithTag( context.processInitiatorObject, 'PhoneCall' ) )
		{
			return false;
		}
		if( StatusEffectSystem.ObjectHasStatusEffectWithTag( context.processInitiatorObject, 'NoWorldInteractions' ) )
		{
			return false;
		}
		return true;
	}

	public static function GetPlayerStateMachine( requester : GameObject ) : IBlackboard
	{
		var playerStateMachineBlackboard : IBlackboard;
		var playerPuppet : PlayerPuppet;
		playerPuppet = ( ( PlayerPuppet )( GameInstance.GetPlayerSystem( requester.GetGame() ).GetLocalPlayerMainGameObject() ) );
		playerStateMachineBlackboard = GameInstance.GetBlackboardSystem( requester.GetGame() ).GetLocalInstanced( playerPuppet.GetEntityID(), GetAllBlackboardDefs().PlayerStateMachine );
		return playerStateMachineBlackboard;
	}

}

