class HoloTable extends InteractiveDevice
{
	default m_controllerTypeName = 'HoloTableController';
	editable var componentCounter : Int32;
	var m_meshTable : array< MeshComponent >;
	var m_currentMesh : Int32;
	var m_glitchMesh : MeshComponent;

	public const override function GetDevicePS() : HoloTableControllerPS
	{
		return GetController().GetPS();
	}

	protected const override function GetController() : HoloTableController
	{
		return ( ( HoloTableController )( m_controller ) );
	}

	protected event OnRequestComponents( ri : EntityRequestComponentsInterface )
	{
		var i : Int32;
		var compName : String;
		for( i = 0; i < componentCounter; i += 1 )
		{
			compName = "mesh" + i;
			EntityRequestComponentsInterface.RequestComponent( ri, StringToName( compName ), 'MeshComponent', false );
		}
		EntityRequestComponentsInterface.RequestComponent( ri, 'GlitchMesh', 'MeshComponent', false );
		super.OnRequestComponents( ri );
	}

	protected event OnTakeControl( ri : EntityResolveComponentsInterface )
	{
		var i : Int32;
		var compName : String;
		for( i = 0; i < componentCounter; i += 1 )
		{
			compName = "mesh" + i;
			m_meshTable.PushBack( ( ( MeshComponent )( EntityResolveComponentsInterface.GetComponent( ri, StringToName( compName ) ) ) ) );
		}
		m_glitchMesh = ( ( MeshComponent )( EntityResolveComponentsInterface.GetComponent( ri, 'GlitchMesh' ) ) );
		super.OnTakeControl( ri );
		m_controller = ( ( HoloTableController )( EntityResolveComponentsInterface.GetComponent( ri, 'controller' ) ) );
	}

	protected override function ResolveGameplayState()
	{
		super.ResolveGameplayState();
		GetDevicePS().SetMeshesAmount( componentCounter );
		SetActiveMesh();
	}

	protected function SetActiveMesh()
	{
		if( GetDeviceState() == EDeviceStatus.ON )
		{
			m_meshTable[ m_currentMesh ].Toggle( false );
			m_meshTable[ GetDevicePS().GetActiveStationIndex() ].Toggle( true );
			m_currentMesh = GetDevicePS().GetActiveStationIndex();
		}
		else
		{
			TurnOffMeshes();
		}
	}

	protected function TurnOffMeshes()
	{
		var i : Int32;
		for( i = 0; i < m_meshTable.Size(); i += 1 )
		{
			m_meshTable[ GetDevicePS().GetActiveStationIndex() ].Toggle( false );
		}
		GameObjectEffectHelper.StopEffectEvent( this, 'light_cone_dust' );
	}

	protected event OnNextStation( evt : NextStation )
	{
		SetActiveMesh();
		UpdateDeviceState();
	}

	protected event OnPreviousStation( evt : PreviousStation )
	{
		SetActiveMesh();
		UpdateDeviceState();
	}

	protected override function TurnOnDevice()
	{
		GameObjectEffectHelper.StartEffectEvent( this, 'light_cone_dust' );
		SetActiveMesh();
		UpdateDeviceState();
	}

	protected override function TurnOffDevice()
	{
		super.TurnOffDevice();
		TurnOffMeshes();
		UpdateDeviceState();
	}

	protected override function CutPower()
	{
		super.CutPower();
		TurnOffMeshes();
		UpdateDeviceState();
	}

	protected override function DeactivateDevice()
	{
		super.DeactivateDevice();
		TurnOffMeshes();
	}

	protected const override function DeterminGameplayRole() : EGameplayRole
	{
		return EGameplayRole.Distract;
	}

	protected override function StartGlitching( glitchState : EGlitchState, optional intensity : Float )
	{
		TurnOffMeshes();
		if( m_glitchMesh )
		{
			m_glitchMesh.Toggle( true );
		}
	}

	protected override function StopGlitching()
	{
		if( m_glitchMesh )
		{
			m_glitchMesh.Toggle( false );
		}
		if( GetDevicePS().IsON() )
		{
			SetActiveMesh();
		}
	}

}

