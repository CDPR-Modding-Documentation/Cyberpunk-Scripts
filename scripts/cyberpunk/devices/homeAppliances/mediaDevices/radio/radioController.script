class RadioController extends MediaDeviceController
{

	public const override function GetPS() : RadioControllerPS
	{
		return ( ( RadioControllerPS )( GetBasePS() ) );
	}

}

struct RadioSetup
{
	instanceeditable var m_startingStation : ERadioStationList;
	instanceeditable var m_isInteractive : Bool;
	[ customEditor = "AudioEvent" ]
	instanceeditable var m_glitchSFX : CName;
}

class RadioControllerPS extends MediaDeviceControllerPS
{
	default m_deviceName = "LocKey#96";
	default m_tweakDBRecord = T"Devices.Radio";
	default m_tweakDBDescriptionRecord = T"device_descriptions.Radio";
	protected instanceeditable var m_radioSetup : RadioSetup;
	protected var m_stations : array< RadioStationsMap >;
	private var m_stationsInitialized : Bool;

	protected event OnInstantiated()
	{
		super.OnInstantiated();
		if( !( IsStringValid( m_deviceName ) ) )
		{
			m_deviceName = "LocKey#96";
		}
		InitializeRadioStations();
	}

	protected override function GameAttached()
	{
		InitializeRadioStations();
		m_amountOfStations = m_stations.Size();
		m_activeChannelName = m_stations[ m_activeStation ].channelName;
		m_isInteractive = m_radioSetup.m_isInteractive;
	}

	protected const override function CanCreateAnyQuickHackActions() : Bool
	{
		return true;
	}

	public function GetGlitchSFX() : CName
	{
		return m_radioSetup.m_glitchSFX;
	}

	protected override function GetQuickHackActions( out actions : array< DeviceAction >, context : GetActionsContext )
	{
		var action : ScriptableDeviceAction;
		action = ActionQuickHackDistraction();
		action.SetObjectActionID( T"DeviceAction.MalfunctionClassHack" );
		action.SetDurationValue( GetDistractionDuration( action ) );
		action.SetInactiveWithReason( !( IsDistracting() ), "LocKey#7004" );
		actions.PushBack( action );
		FinalizeGetQuickHackActions( actions, context );
	}

	public const function GetStationByIndex( index : Int32 ) : RadioStationsMap
	{
		var invalidStation : RadioStationsMap;
		if( ( index < 0 ) || ( index >= m_stations.Size() ) )
		{
			return invalidStation;
		}
		return m_stations[ index ];
	}

	public override function OnNextStation( evt : NextStation ) : EntityNotificationType
	{
		super.OnNextStation( evt );
		m_activeChannelName = m_stations[ m_activeStation ].channelName;
		return EntityNotificationType.SendThisEventToEntity;
	}

	public override function OnPreviousStation( evt : PreviousStation ) : EntityNotificationType
	{
		super.OnPreviousStation( evt );
		m_activeChannelName = m_stations[ m_activeStation ].channelName;
		return EntityNotificationType.SendThisEventToEntity;
	}

	public virtual function OnQuestDefaultStation( evt : QuestDefaultStation ) : EntityNotificationType
	{
		m_activeStation = ( ( Int32 )( m_radioSetup.m_startingStation ) );
		m_activeChannelName = m_stations[ m_activeStation ].channelName;
		UseNotifier( evt );
		return EntityNotificationType.SendThisEventToEntity;
	}

	public override function GetActiveStationIndex() : Int32
	{
		if( !( m_dataInitialized ) )
		{
			m_dataInitialized = true;
			m_activeStation = ( ( Int32 )( m_radioSetup.m_startingStation ) );
		}
		return m_activeStation;
	}

	public const function GetActiveStationEnumValue() : ERadioStationList
	{
		var returnValue : ERadioStationList;
		if( ( m_activeStation >= 0 ) && ( m_activeStation < m_stations.Size() ) )
		{
			returnValue = m_stations[ m_activeStation ].stationID;
		}
		else
		{
			returnValue = ERadioStationList.NONE;
		}
		return returnValue;
	}

	public constexpr function OnSpiderbotDistraction( evt : SpiderbotDistraction ) : EntityNotificationType
	{
		return EntityNotificationType.SendThisEventToEntity;
	}

	public function CauseDistraction()
	{
		var action : ScriptableDeviceAction;
		action = ActionQuickHackDistraction();
		ExecutePSAction( action );
	}

	protected override function ActionQuickHackDistraction() : QuickHackDistraction
	{
		var action : QuickHackDistraction;
		action = new QuickHackDistraction;
		action.SetUp( this );
		action.SetProperties();
		action.AddDeviceName( m_deviceName );
		action.CreateInteraction();
		action.SetDurationValue( GetDistractionDuration( action ) );
		return action;
	}

	public override function OnQuickHackDistraction( evt : QuickHackDistraction ) : EntityNotificationType
	{
		var type : EntityNotificationType;
		type = super.OnQuickHackDistraction( evt );
		if( type == EntityNotificationType.DoNotNotifyEntity )
		{
			return type;
		}
		if( evt.IsStarted() )
		{
			if( IsOFF() )
			{
				ExecutePSAction( ActionSetDeviceON() );
			}
			ExecutePSAction( ActionNextStation() );
		}
		return EntityNotificationType.SendThisEventToEntity;
	}

	public export function PushResaveData( data : RadioResaveData ) {}

	private function InitializeRadioStations()
	{
		if( m_stationsInitialized )
		{
			return;
		}
		m_stations.PushBack( CreateRadioStation( 'radio_station_02_aggro_ind', "Gameplay-Devices-Radio-RadioStationAggroIndie", ERadioStationList.AGGRO_INDUSTRIAL ) );
		m_stations.PushBack( CreateRadioStation( 'radio_station_03_elec_ind', "Gameplay-Devices-Radio-RadioStationElectroIndie", ERadioStationList.ELECTRO_INDUSTRIAL ) );
		m_stations.PushBack( CreateRadioStation( 'radio_station_04_hiphop', "Gameplay-Devices-Radio-RadioStationHipHop", ERadioStationList.HIP_HOP ) );
		m_stations.PushBack( CreateRadioStation( 'radio_station_07_aggro_techno', "Gameplay-Devices-Radio-RadioStationAggroTechno", ERadioStationList.AGGRO_TECHNO ) );
		m_stations.PushBack( CreateRadioStation( 'radio_station_09_downtempo', "Gameplay-Devices-Radio-RadioStationDownTempo", ERadioStationList.DOWNTEMPO ) );
		m_stations.PushBack( CreateRadioStation( 'radio_station_01_att_rock', "Gameplay-Devices-Radio-RadioStationAttRock", ERadioStationList.ATTITUDE_ROCK ) );
		m_stations.PushBack( CreateRadioStation( 'radio_station_05_pop', "Gameplay-Devices-Radio-RadioStationPop", ERadioStationList.POP ) );
		m_stations.PushBack( CreateRadioStation( 'radio_station_10_latino', "Gameplay-Devices-Radio-RadioStationLatino", ERadioStationList.LATINO ) );
		m_stations.PushBack( CreateRadioStation( 'radio_station_11_metal', "Gameplay-Devices-Radio-RadioStationMetal", ERadioStationList.METAL ) );
		m_stationsInitialized = true;
	}

	private function CreateRadioStation( SoundEvt : CName, ChannelName : String, stationID : ERadioStationList ) : RadioStationsMap
	{
		var station : RadioStationsMap;
		station.soundEvent = SoundEvt;
		station.channelName = ChannelName;
		station.stationID = stationID;
		return station;
	}

	protected override function DetermineGameplayViability( context : GetActionsContext, hasActiveActions : Bool ) : Bool
	{
		return RadioViabilityInterpreter.Evaluate( this, hasActiveActions );
	}

	public override function GetDeviceIconPath() : String
	{
		return "base/gameplay/gui/brushes/devices/icon_radio.widgetbrush";
	}

	protected override function GetBackgroundTextureTweakDBID() : TweakDBID
	{
		return T"DeviceIcons.RadioDeviceBackground";
	}

	protected override function GetDeviceIconTweakDBID() : TweakDBID
	{
		return T"DeviceIcons.RadioDeviceIcon";
	}

	public override function GetDeviceWidget( context : GetActionsContext ) : SDeviceWidgetPackage
	{
		var widgetData : SDeviceWidgetPackage;
		widgetData = super.GetDeviceWidget( context );
		widgetData.deviceStatus = "LocKey#42211";
		widgetData.textData = GetDeviceStatusTextData();
		return widgetData;
	}

}

enum ERadioStationList
{
	AGGRO_INDUSTRIAL = 0,
	ELECTRO_INDUSTRIAL = 1,
	HIP_HOP = 2,
	AGGRO_TECHNO = 3,
	DOWNTEMPO = 4,
	ATTITUDE_ROCK = 5,
	POP = 6,
	LATINO = 7,
	METAL = 8,
	NONE = 9,
}

