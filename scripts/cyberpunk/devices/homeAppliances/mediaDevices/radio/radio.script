struct RadioStationsMap
{
	[ customEditor = "AudioEvent" ]
	instanceeditable var soundEvent : CName;
	instanceeditable var channelName : String;
	instanceeditable var stationID : ERadioStationList;
}

struct RadioResaveData
{
	var m_mediaResaveData : MediaResaveData;
	var m_stations : array< RadioStationsMap >;
}

class Radio extends InteractiveDevice
{
	default m_controllerTypeName = 'RadioController';
	private var m_stations : array< RadioStationsMap >;
	private var m_startingStation : Int32;
	private var m_isInteractive : Bool;
	private var m_isShortGlitchActive : Bool;
	private var m_shortGlitchDelayID : DelayID;

	protected event OnRequestComponents( ri : EntityRequestComponentsInterface )
	{
		EntityRequestComponentsInterface.RequestComponent( ri, 'audio', 'soundComponent', false );
		EntityRequestComponentsInterface.RequestComponent( ri, 'radio_ui', 'worlduiWidgetComponent', false );
		super.OnRequestComponents( ri );
	}

	protected event OnTakeControl( ri : EntityResolveComponentsInterface )
	{
		super.OnTakeControl( ri );
		m_uiComponent = ( ( worlduiWidgetComponent )( EntityResolveComponentsInterface.GetComponent( ri, 'radio_ui' ) ) );
		m_controller = ( ( RadioController )( EntityResolveComponentsInterface.GetComponent( ri, 'controller' ) ) );
	}

	protected override function ResolveGameplayState()
	{
		super.ResolveGameplayState();
		if( IsUIdirty() && m_isInsideLogicArea )
		{
			RefreshUI();
		}
	}

	protected event OnToggleON( evt : ToggleON )
	{
		super.OnToggleON( evt );
		TriggerArreaEffectDistraction( GetDefaultDistractionAreaEffectData(), evt.GetExecutor() );
	}

	protected event OnTogglePower( evt : TogglePower )
	{
		super.OnTogglePower( evt );
		TriggerArreaEffectDistraction( GetDefaultDistractionAreaEffectData(), evt.GetExecutor() );
	}

	public export override function ResavePersistentData( ps : PersistentState ) : Bool
	{
		var psDevice : RadioControllerPS;
		var mediaData : MediaResaveData;
		var radioData : RadioResaveData;
		super.ResavePersistentData( ps );
		mediaData.m_mediaDeviceData.m_initialStation = m_startingStation;
		mediaData.m_mediaDeviceData.m_amountOfStations = m_stations.Size();
		mediaData.m_mediaDeviceData.m_activeChannelName = m_stations[ m_startingStation ].channelName;
		mediaData.m_mediaDeviceData.m_isInteractive = m_isInteractive;
		radioData.m_mediaResaveData = mediaData;
		radioData.m_stations = m_stations;
		psDevice.PushResaveData( radioData );
		return true;
	}

	protected override function RestoreDeviceState()
	{
		super.RestoreDeviceState();
	}

	public const override function GetDevicePS() : RadioControllerPS
	{
		return GetController().GetPS();
	}

	protected const override function GetController() : RadioController
	{
		return ( ( RadioController )( m_controller ) );
	}

	private function PlayGivenStation()
	{
		var station : RadioStationsMap;
		var stationIndex : Int32;
		var isMetal : Bool;
		stationIndex = GetDevicePS().GetActiveStationIndex();
		station = GetDevicePS().GetStationByIndex( stationIndex );
		AudioSwitch( this, 'radio_station', station.soundEvent, 'radio' );
		isMetal = ( ( station.soundEvent == 'radio_station_11_metal' ) ? ( true ) : ( false ) );
		MetalItUp( isMetal );
	}

	private function MetalItUp( isMetal : Bool )
	{
		if( GetDevicePS().GetDurabilityType() != EDeviceDurabilityType.INVULNERABLE )
		{
			if( isMetal )
			{
				GetDevicePS().SetDurabilityType( EDeviceDurabilityType.INDESTRUCTIBLE );
			}
			else
			{
				GetDevicePS().SetDurabilityType( EDeviceDurabilityType.DESTRUCTIBLE );
			}
		}
	}

	protected event OnNextStation( evt : NextStation )
	{
		PlayGivenStation();
		UpdateDeviceState();
		RefreshUI();
		TriggerArreaEffectDistraction( GetDefaultDistractionAreaEffectData(), evt.GetExecutor() );
	}

	protected event OnPreviousStation( evt : PreviousStation )
	{
		PlayGivenStation();
		UpdateDeviceState();
		RefreshUI();
		TriggerArreaEffectDistraction( GetDefaultDistractionAreaEffectData(), evt.GetExecutor() );
	}

	protected event OnQuestSetChannel( evt : QuestSetChannel )
	{
		PlayGivenStation();
		RefreshUI();
	}

	protected event OnQuestDefaultStation( evt : QuestDefaultStation )
	{
		PlayGivenStation();
		RefreshUI();
	}

	protected event OnSpiderbotDistraction( evt : SpiderbotDistraction )
	{
		OrderSpiderbot();
	}

	protected event OnSpiderbotOrderCompletedEvent( evt : SpiderbotOrderCompletedEvent )
	{
		SendSetIsSpiderbotInteractionOrderedEvent( false );
		GameInstance.GetActivityLogSystem( GetGame() ).AddLog( "SPIDERBOT HAS FINISHED ACTIVATING THE DEVICE ... " );
		GetDevicePS().CauseDistraction();
	}

	protected override function TurnOnDevice()
	{
		super.TurnOnDevice();
		if( m_uiComponent )
		{
			m_uiComponent.Toggle( true );
		}
		PlayGivenStation();
		UpdateDeviceState();
		GameObjectEffectHelper.ActivateEffectAction( this, gamedataFxActionType.Start, 'radio_idle' );
		RefreshUI();
	}

	protected override function TurnOffDevice()
	{
		super.TurnOffDevice();
		AudioSwitch( this, 'radio_station', 'station_none', 'radio' );
		UpdateDeviceState();
		GameObjectEffectHelper.ActivateEffectAction( this, gamedataFxActionType.BreakLoop, 'radio_idle' );
		RefreshUI();
	}

	protected override function CutPower()
	{
		super.CutPower();
		if( m_uiComponent )
		{
			m_uiComponent.Toggle( false );
		}
		GameObjectEffectHelper.ActivateEffectAction( this, gamedataFxActionType.BreakLoop, 'radio_idle' );
		UpdateDeviceState();
	}

	protected override function DeactivateDevice()
	{
		super.DeactivateDevice();
		if( m_uiComponent )
		{
			m_uiComponent.Toggle( false );
		}
		GameObjectEffectHelper.ActivateEffectAction( this, gamedataFxActionType.Kill, 'radio_idle' );
	}

	public const override function DeterminGameplayRole() : EGameplayRole
	{
		return EGameplayRole.Distract;
	}

	protected override function StartGlitching( glitchState : EGlitchState, optional intensity : Float )
	{
		var evt : AdvertGlitchEvent;
		if( intensity == 0.0 )
		{
			intensity = 1.0;
		}
		evt = new AdvertGlitchEvent;
		evt.SetShouldGlitch( intensity );
		QueueEvent( evt );
		UpdateDeviceState();
		PlaySound( this, GetDevicePS().GetGlitchSFX() );
	}

	protected override function StopGlitching()
	{
		var evt : AdvertGlitchEvent;
		evt = new AdvertGlitchEvent;
		evt.SetShouldGlitch( 0.0 );
		QueueEvent( evt );
	}

	private function StartShortGlitch()
	{
		var evt : StopShortGlitchEvent;
		if( GetDevicePS().IsGlitching() )
		{
			return;
		}
		if( !( m_isShortGlitchActive ) )
		{
			evt = new StopShortGlitchEvent;
			StartGlitching( EGlitchState.DEFAULT, 1.0 );
			m_shortGlitchDelayID = GameInstance.GetDelaySystem( GetGame() ).DelayEvent( this, evt, 0.25 );
			m_isShortGlitchActive = true;
		}
	}

	protected event OnStopShortGlitch( evt : StopShortGlitchEvent )
	{
		m_isShortGlitchActive = false;
		if( !( GetDevicePS().IsGlitching() ) )
		{
			StopGlitching();
		}
	}

}

