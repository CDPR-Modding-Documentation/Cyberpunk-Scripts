class DoorProximityDetector extends ProximityDetector
{
	default m_controllerTypeName = 'DoorProximityDetectorController';
	private instanceeditable var m_debugIsBlinkOn : Bool;
	private var m_triggeredAlarmID : DelayID;
	private var m_blinkInterval : Float;
	default m_blinkInterval = 2.0f;

	protected event OnRequestComponents( ri : EntityRequestComponentsInterface )
	{
		super.OnRequestComponents( ri );
	}

	protected event OnTakeControl( ri : EntityResolveComponentsInterface )
	{
		super.OnTakeControl( ri );
		m_controller = ( ( DoorProximityDetectorController )( EntityResolveComponentsInterface.GetComponent( ri, 'controller' ) ) );
	}

	protected event OnGameAttached()
	{
		var secSys : SecuritySystemControllerPS;
		if( m_debugIsBlinkOn )
		{
			TriggerAlarmBehavior( true );
		}
		secSys = GetDevicePS().GetSecuritySystem();
		if( secSys )
		{
			if( !( secSys.IsSystemSafe() ) )
			{
				TriggerAlarmBehavior( true );
			}
		}
	}

	protected event OnDetach()
	{
		TriggerAlarmBehavior( false );
	}

	public const override function GetDevicePS() : DoorProximityDetectorControllerPS
	{
		return GetController().GetPS();
	}

	private const override function GetController() : DoorProximityDetectorController
	{
		return ( ( DoorProximityDetectorController )( m_controller ) );
	}

	protected override function TurnOffDevice()
	{
		super.TurnOffDevice();
		SetMeshAppearance( 'off' );
	}

	protected override function TurnOnDevice()
	{
		super.TurnOnDevice();
		LockDevice( true );
	}

	protected override function LockDevice( shouldLock : Bool )
	{
		var meshName : CName;
		if( shouldLock )
		{
			meshName = 'on';
		}
		else
		{
			meshName = 'green';
		}
		SetMeshAppearance( meshName );
	}

	private function TriggerAlarmBehavior( yes : Bool )
	{
		var ds : DelaySystem;
		var alarm : AlarmEvent;
		if( GetDevicePS().GetSecuritySystem().IsRestarting() )
		{
			LockDevice( false );
			return;
		}
		ds = GameInstance.GetDelaySystem( GetGame() );
		if( !( ds ) )
		{
			return;
		}
		if( yes )
		{
			if( !( IsAlarmTriggered() ) )
			{
				alarm = new AlarmEvent;
				m_triggeredAlarmID = ds.DelayEvent( this, alarm, m_blinkInterval );
			}
		}
		else
		{
			if( IsAlarmTriggered() )
			{
				CancelAlarmCallback();
				if( GetDevicePS().GetSecuritySystem().IsRestarting() )
				{
					LockDevice( false );
				}
				else
				{
					LockDevice( true );
				}
			}
		}
	}

	protected event OnSecuritySystemOutput( evt : SecuritySystemOutput )
	{
		if( evt.GetCachedSecurityState() == ESecuritySystemState.COMBAT )
		{
			TriggerAlarmBehavior( true );
		}
		else
		{
			TriggerAlarmBehavior( false );
		}
	}

	private function IsAlarmTriggered() : Bool
	{
		var nullID : DelayID;
		if( m_triggeredAlarmID == nullID )
		{
			return false;
		}
		return true;
	}

	protected event OnAlarmBlink( evt : AlarmEvent )
	{
		if( GetDevicePS().GetSecuritySystem().IsRestarting() )
		{
			CancelAlarmCallback();
			TriggerAlarmBehavior( false );
			return false;
		}
		if( evt.isValid )
		{
			SetMeshAppearance( 'bars' );
		}
		else
		{
			SetMeshAppearance( 'alarm' );
		}
		evt.isValid = !( evt.isValid );
		m_triggeredAlarmID = GameInstance.GetDelaySystem( GetGame() ).DelayEvent( this, evt, m_blinkInterval );
	}

	private function CancelAlarmCallback()
	{
		var ds : DelaySystem;
		var emptyID : DelayID;
		ds = GameInstance.GetDelaySystem( GetGame() );
		if( !( ds ) )
		{
			return;
		}
		ds.CancelCallback( m_triggeredAlarmID );
		ds.CancelDelay( m_triggeredAlarmID );
		m_triggeredAlarmID = emptyID;
	}

	protected override function StartGlitching( glitchState : EGlitchState, optional intensity : Float )
	{
		SetMeshAppearance( 'glitch' );
	}

	protected override function StopGlitching()
	{
		LockDevice( true );
	}

}

