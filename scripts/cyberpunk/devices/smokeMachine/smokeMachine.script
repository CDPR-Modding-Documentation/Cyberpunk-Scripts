class SmokeMachine extends BasicDistractionDevice
{
	default m_controllerTypeName = 'SmokeMachineController';
	protected instanceeditable var m_areaComponent : TriggerComponent;
	protected var m_highLightActive : Bool;
	protected var m_entities : array< weak< Entity > >;

	protected event OnRequestComponents( ri : EntityRequestComponentsInterface )
	{
		EntityRequestComponentsInterface.RequestComponent( ri, 'area', 'TriggerComponent', false );
		super.OnRequestComponents( ri );
	}

	protected event OnTakeControl( ri : EntityResolveComponentsInterface )
	{
		super.OnTakeControl( ri );
		m_areaComponent = ( ( TriggerComponent )( EntityResolveComponentsInterface.GetComponent( ri, 'area' ) ) );
		m_controller = ( ( SmokeMachineController )( EntityResolveComponentsInterface.GetComponent( ri, 'controller' ) ) );
	}

	protected event OnPersitentStateInitialized( evt : GameAttachedEvent )
	{
		super.OnPersitentStateInitialized( evt );
	}

	protected event OnOverloadDevice( evt : OverloadDevice )
	{
		if( evt.IsStarted() )
		{
			GetDevicePS().GetDeviceOperationsContainer().Execute( 'smoke_effect_blind', this );
			ApplyStatusEffect();
		}
		else
		{
			RemoveStatusEffect();
		}
	}

	protected override function StartDistraction( optional loopAnimation : Bool )
	{
		GetDevicePS().GetDeviceOperationsContainer().Execute( 'smoke_effect_distraction', this );
	}

	public const override function GetDevicePS() : SmokeMachineControllerPS
	{
		return GetController().GetPS();
	}

	private const override function GetController() : SmokeMachineController
	{
		return ( ( SmokeMachineController )( m_controller ) );
	}

	protected event OnAreaEnter( evt : AreaEnteredEvent )
	{
		var activator : weak< NPCPuppet >;
		super.OnAreaEnter( evt );
		activator = ( ( NPCPuppet )( EntityGameInterface.GetEntity( evt.activator ) ) );
		if( ( activator != NULL ) && m_highLightActive )
		{
			ToggleHighlightOnSingleTarget( true, activator.GetEntityID() );
		}
	}

	protected event OnAreaExit( evt : AreaExitedEvent )
	{
		var activator : weak< NPCPuppet >;
		super.OnAreaExit( evt );
		activator = ( ( NPCPuppet )( EntityGameInterface.GetEntity( evt.activator ) ) );
		if( ( activator != NULL ) && m_highLightActive )
		{
			ToggleHighlightOnSingleTarget( false, activator.GetEntityID() );
		}
	}

	public const function GetEntitiesInArea() : array< Entity >
	{
		return m_areaComponent.GetOverlappingEntities();
	}

	protected function ApplyStatusEffect()
	{
		var statusEffectID : TweakDBID;
		var entities : array< Entity >;
		var i : Int32;
		statusEffectID = T"BaseStatusEffect.Blind";
		entities = GetEntitiesInArea();
		for( i = 0; i < entities.Size(); i += 1 )
		{
			GameInstance.GetStatusEffectSystem( GetGame() ).ApplyStatusEffect( entities[ i ].GetEntityID(), statusEffectID );
			m_entities.PushBack( entities[ i ] );
		}
	}

	protected function RemoveStatusEffect()
	{
		var statusEffectID : TweakDBID;
		var i : Int32;
		statusEffectID = T"BaseStatusEffect.Blind";
		for( i = 0; i < m_entities.Size(); i += 1 )
		{
			GameInstance.GetStatusEffectSystem( GetGame() ).RemoveStatusEffect( m_entities[ i ].GetEntityID(), statusEffectID );
		}
		m_entities.Clear();
	}

	protected event OnRevealDeviceRequest( evt : RevealDeviceRequest )
	{
		super.OnRevealDeviceRequest( evt );
		if( !( GetDevicePS().ShouldRevealDevicesGrid() ) )
		{
			return true;
		}
		ToggleHighlightOnTargets( evt.shouldReveal );
	}

	protected function CreateHighlight( highlightType : EFocusForcedHighlightType ) : FocusForcedHighlightData
	{
		var highlight : FocusForcedHighlightData;
		highlight = new FocusForcedHighlightData;
		highlight.sourceID = GetEntityID();
		highlight.sourceName = GetClassName();
		highlight.highlightType = highlightType;
		highlight.inTransitionTime = 0.0;
		highlight.outTransitionTime = 0.0;
		highlight.priority = EPriority.VeryHigh;
		return highlight;
	}

	private function ToggleHighlightOnTargets( toggle : Bool )
	{
		var i : Int32;
		var entities : array< Entity >;
		entities = GetEntitiesInArea();
		m_highLightActive = toggle;
		for( i = 0; i < entities.Size(); i += 1 )
		{
			if( ( ( NPCPuppet )( entities[ i ] ) ) != NULL )
			{
				ToggleHighlightOnSingleTarget( toggle, entities[ i ].GetEntityID() );
			}
		}
	}

	protected function ToggleHighlightOnSingleTarget( toggle : Bool, id : EntityID )
	{
		var evt : ForceVisionApperanceEvent;
		var highlight : FocusForcedHighlightData;
		highlight = CreateHighlight( EFocusForcedHighlightType.DISTRACTION );
		evt = new ForceVisionApperanceEvent;
		evt.apply = toggle;
		evt.forcedHighlight = highlight;
		QueueEventForEntityID( id, evt );
	}

	public const override function DeterminGameplayRole() : EGameplayRole
	{
		return EGameplayRole.Distract;
	}

}

