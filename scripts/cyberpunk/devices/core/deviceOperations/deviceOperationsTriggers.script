class DelayedDeviceOperationTriggerEvent extends Event
{
	var triggerHandler : DeviceOperationsTrigger;
	var namedOperation : OperationExecutionData;
}

class OperationExecutionData extends IScriptable
{
	instanceeditable var operationName : CName;
	instanceeditable var delay : Float;
	instanceeditable var resetDelay : Bool;
	var delayID : DelayID;
	var isDelayActive : Bool;
}

class DeviceOperationTriggerData extends IScriptable
{
	const instanceeditable inlined var operationsToExecute : array< OperationExecutionData >;
}

class ActivatorOperationTriggerData extends DeviceOperationTriggerData
{
}

class FactOperationTriggerData extends DeviceOperationTriggerData
{
	[ category = "Trigger Data" ]
	instanceeditable var comparisionType : EComparisonOperator;
	[ category = "Trigger Data" ]
	instanceeditable var factName : CName;
	[ category = "Trigger Data" ]
	instanceeditable var factValue : Int32;
	default factValue = 1;
	var callbackID : Uint32;
}

class FocusModeOperationTriggerData extends DeviceOperationTriggerData
{
	[ category = "Trigger Data" ]
	instanceeditable var operationType : ETriggerOperationType;
	[ category = "Trigger Data" ]
	instanceeditable var isLookedAt : Bool;
	default isLookedAt = true;
}

class SensesOperationTriggerData extends DeviceOperationTriggerData
{
	[ category = "Trigger Data" ]
	instanceeditable var isActivatorPlayer : Bool;
	[ category = "Trigger Data" ]
	instanceeditable var isActivatorNPC : Bool;
	[ category = "Trigger Data" ]
	instanceeditable var attitudeGroup : CName;
	[ category = "Trigger Data" ]
	instanceeditable var operationType : ETriggerOperationType;
}

class HitOperationTriggerData extends DeviceOperationTriggerData
{
	[ category = "Trigger Data" ]
	instanceeditable var isAttackerPlayer : Bool;
	default isAttackerPlayer = true;
	[ category = "Trigger Data" ]
	instanceeditable var isAttackerNPC : Bool;
	[ category = "Trigger Data" ]
	instanceeditable var bullets : Bool;
	default bullets = true;
	[ category = "Trigger Data" ]
	instanceeditable var explosions : Bool;
	[ category = "Trigger Data" ]
	instanceeditable var melee : Bool;
	[ category = "Trigger Data" ][ rangeMin = "0.f" ][ rangeMax = "100.f" ]
	instanceeditable var healthPercentage : Float;
	default healthPercentage = 100.0f;
}

class InteractionAreaOperationTriggerData extends DeviceOperationTriggerData
{
	[ category = "Trigger Data" ]
	instanceeditable var isActivatorPlayer : Bool;
	[ category = "Trigger Data" ]
	instanceeditable var isActivatorNPC : Bool;
	[ category = "Trigger Data" ]
	instanceeditable var areaTag : CName;
	[ category = "Trigger Data" ]
	instanceeditable var operationType : gameinteractionsEInteractionEventType;
}

class TriggerVolumeOperationTriggerData extends DeviceOperationTriggerData
{
	[ category = "Trigger Data" ]
	instanceeditable var isActivatorPlayer : Bool;
	[ category = "Trigger Data" ]
	instanceeditable var isActivatorNPC : Bool;
	[ category = "Trigger Data" ]
	instanceeditable var canNPCBeDead : Bool;
	default canNPCBeDead = true;
	[ category = "Trigger Data" ]
	instanceeditable var componentName : CName;
	[ category = "Trigger Data" ]
	instanceeditable var operationType : ETriggerOperationType;
}

class DeviceActionOperationTriggerData extends DeviceOperationTriggerData
{
	[ category = "Trigger Data" ]
	instanceeditable inlined var action : ScriptableDeviceAction;
}

class CustomActionOperationTriggerData extends DeviceOperationTriggerData
{
	[ category = "Trigger Data" ]
	instanceeditable var actionID : CName;
}

class DoorStateOperationTriggerData extends DeviceOperationTriggerData
{
	[ category = "Trigger Data" ]
	instanceeditable var state : EDoorStatus;
}

class BaseStateOperationTriggerData extends DeviceOperationTriggerData
{
	[ category = "Trigger Data" ]
	instanceeditable var state : EDeviceStatus;
}

abstract class DeviceOperationsTrigger extends IScriptable
{

	public virtual function Initialize( owner : GameObject ) {}

	public virtual function UnInitialize( owner : GameObject ) {}

	protected function GetOperationsContainer( owner : GameObject ) : DeviceOperationsContainer
	{
		var device : Device;
		device = ( ( Device )( owner ) );
		if( device != NULL )
		{
			return device.GetDevicePS().GetDeviceOperationsContainer();
		}
		return NULL;
	}

	protected function ExecuteOperationByName( operationName : CName, owner : GameObject, container : DeviceOperationsContainer )
	{
		if( GetOperationsContainer( owner ) != NULL )
		{
			GetOperationsContainer( owner ).Execute( operationName, owner );
		}
	}

	protected function RestoreOperationByName( operationName : CName, owner : GameObject, container : DeviceOperationsContainer )
	{
		if( GetOperationsContainer( owner ) != NULL )
		{
			GetOperationsContainer( owner ).Restore( operationName, owner );
		}
	}

	protected function ResolveOperationsOnTrigger( trigger : DeviceOperationTriggerData, owner : GameObject, container : DeviceOperationsContainer )
	{
		var i : Int32;
		var namedOperation : OperationExecutionData;
		if( trigger == NULL )
		{
			return;
		}
		for( i = 0; i < trigger.operationsToExecute.Size(); i += 1 )
		{
			namedOperation = trigger.operationsToExecute[ i ];
			if( namedOperation == NULL )
			{
				continue;
			}
			if( namedOperation.delay <= 0.0 )
			{
				ExecuteOperationByName( trigger.operationsToExecute[ i ].operationName, owner, container );
			}
			else
			{
				if( !( namedOperation.isDelayActive ) )
				{
					DelayTriggerExecution( namedOperation, owner );
				}
				else
				{
					if( namedOperation.resetDelay )
					{
						GameInstance.GetDelaySystem( owner.GetGame() ).CancelDelay( namedOperation.delayID );
						DelayTriggerExecution( namedOperation, owner );
					}
				}
			}
		}
	}

	protected function RestoreOperationsOnTrigger( trigger : DeviceOperationTriggerData, owner : GameObject, container : DeviceOperationsContainer )
	{
		var i : Int32;
		var namedOperation : OperationExecutionData;
		if( trigger == NULL )
		{
			return;
		}
		for( i = 0; i < trigger.operationsToExecute.Size(); i += 1 )
		{
			namedOperation = trigger.operationsToExecute[ i ];
			if( namedOperation == NULL )
			{
				continue;
			}
			RestoreOperationByName( trigger.operationsToExecute[ i ].operationName, owner, container );
		}
	}

	protected function DelayTriggerExecution( namedOperation : OperationExecutionData, owner : GameObject )
	{
		var evt : DelayedDeviceOperationTriggerEvent;
		var delayID : DelayID;
		if( ( GetOperationsContainer( owner ) == NULL ) || !( GetOperationsContainer( owner ).IsOperationEnabled( namedOperation.operationName ) ) )
		{
			return;
		}
		evt = new DelayedDeviceOperationTriggerEvent;
		evt.namedOperation = namedOperation;
		evt.triggerHandler = this;
		delayID = GameInstance.GetDelaySystem( owner.GetGame() ).DelayEvent( owner, evt, namedOperation.delay );
		SetDelayIdOnNamedOperation( delayID, namedOperation );
	}

	public virtual function SetDelayIdOnNamedOperation( delayID : DelayID, namedOperation : OperationExecutionData )
	{
		namedOperation.delayID = delayID;
		namedOperation.isDelayActive = true;
	}

	public virtual function ClearDelayIdOnNamedOperation( namedOperation : OperationExecutionData )
	{
		namedOperation.isDelayActive = false;
	}

	protected function IsPlayerActivator( activator : weak< GameObject > ) : Bool
	{
		return ( ( PlayerPuppet )( activator ) ) || ( ( Muppet )( activator ) );
	}

}

class FactOperationsTrigger extends DeviceOperationsTrigger
{
	instanceeditable inlined var m_triggerData : FactOperationTriggerData;

	public override function Initialize( owner : GameObject )
	{
		RegisterQuestDBCallback( owner );
	}

	public override function UnInitialize( owner : GameObject )
	{
		UnRegisterQuestDBCallback( owner );
	}

	public function EvaluateTrigger( owner : weak< GameObject >, factName : CName, container : DeviceOperationsContainer )
	{
		var currentValue : Int32;
		if( ( owner != NULL ) && factName == m_triggerData.factName )
		{
			currentValue = GetFact( owner.GetGame(), factName );
			switch( m_triggerData.comparisionType )
			{
				case EComparisonOperator.Equal:
					if( currentValue != m_triggerData.factValue )
					{
						return;
					}
				break;
				case EComparisonOperator.NotEqual:
					if( currentValue == m_triggerData.factValue )
					{
						return;
					}
				break;
				case EComparisonOperator.More:
					if( currentValue <= m_triggerData.factValue )
					{
						return;
					}
				break;
				case EComparisonOperator.MoreOrEqual:
					if( currentValue < m_triggerData.factValue )
					{
						return;
					}
				break;
				case EComparisonOperator.Less:
					if( currentValue >= m_triggerData.factValue )
					{
						return;
					}
				break;
				case EComparisonOperator.LessOrEqual:
					if( currentValue > m_triggerData.factValue )
					{
						return;
					}
				break;
				default:
					break;
			}
		}
		ResolveOperationsOnTrigger( m_triggerData, owner, container );
	}

	public function RegisterQuestDBCallback( owner : GameObject )
	{
		m_triggerData.callbackID = GameInstance.GetQuestsSystem( owner.GetGame() ).RegisterEntity( m_triggerData.factName, owner.GetEntityID() );
	}

	public function UnRegisterQuestDBCallback( owner : GameObject )
	{
		if( IsNameValid( m_triggerData.factName ) && ( m_triggerData.callbackID > ( ( Uint32 )( 0 ) ) ) )
		{
			GameInstance.GetQuestsSystem( owner.GetGame() ).UnregisterEntity( m_triggerData.factName, m_triggerData.callbackID );
		}
	}

}

class FocusModeOperationsTrigger extends DeviceOperationsTrigger
{
	instanceeditable inlined var m_triggerData : FocusModeOperationTriggerData;

	public function EvaluateTrigger( owner : weak< GameObject >, operationType : ETriggerOperationType, container : DeviceOperationsContainer )
	{
		if( m_triggerData.operationType == operationType )
		{
			if( ( m_triggerData.operationType == ETriggerOperationType.ENTER && m_triggerData.isLookedAt ) && !( IsLookedAt( owner ) ) )
			{
				return;
			}
			ResolveOperationsOnTrigger( m_triggerData, owner, container );
		}
	}

	private function IsLookedAt( object : GameObject ) : Bool
	{
		var lookedAtObect : GameObject;
		lookedAtObect = GameInstance.GetTargetingSystem( object.GetGame() ).GetLookAtObject( ( ( PlayerPuppet )( GameInstance.GetPlayerSystem( object.GetGame() ).GetLocalPlayerMainGameObject() ) ) );
		return lookedAtObect == object;
	}

}

class SensesOperationsTrigger extends DeviceOperationsTrigger
{
	protected instanceeditable inlined var m_triggerData : SensesOperationTriggerData;

	public function EvaluateTrigger( owner : weak< GameObject >, activator : weak< GameObject >, operationType : ETriggerOperationType, container : DeviceOperationsContainer )
	{
		var attitudeGroup : CName;
		var attitudeAgent : AttitudeAgent;
		if( m_triggerData == NULL )
		{
			return;
		}
		if( m_triggerData.operationType == operationType )
		{
			if( IsPlayerActivator( activator ) && m_triggerData.isActivatorPlayer )
			{
				ResolveOperationsOnTrigger( m_triggerData, owner, container );
			}
			else if( !( IsPlayerActivator( activator ) ) && m_triggerData.isActivatorNPC )
			{
				if( IsNameValid( m_triggerData.attitudeGroup ) )
				{
					attitudeAgent = activator.GetAttitudeAgent();
					if( attitudeAgent != NULL )
					{
						attitudeGroup = attitudeAgent.GetAttitudeGroup();
						if( attitudeGroup != m_triggerData.attitudeGroup )
						{
							return;
						}
					}
				}
				ResolveOperationsOnTrigger( m_triggerData, owner, container );
			}
		}
	}

}

class HitOperationsTrigger extends DeviceOperationsTrigger
{
	protected instanceeditable inlined var m_triggerData : HitOperationTriggerData;

	public function EvaluateTrigger( owner : weak< GameObject >, activator : weak< GameObject >, attackData : AttackData, container : DeviceOperationsContainer )
	{
		var attackType : gamedataAttackType;
		var healthPercentage : Float;
		var device : Device;
		device = ( ( Device )( owner ) );
		if( device == NULL )
		{
			return;
		}
		attackType = attackData.GetAttackType();
		healthPercentage = device.GetCurrentHealth();
		if( m_triggerData == NULL )
		{
			return;
		}
		if( AttackData.IsRangedOrDirect( attackType ) && !( m_triggerData.bullets ) )
		{
			return;
		}
		if( AttackData.IsExplosion( attackType ) && !( m_triggerData.explosions ) )
		{
			return;
		}
		if( AttackData.IsMelee( attackType ) && !( m_triggerData.melee ) )
		{
			return;
		}
		if( healthPercentage > m_triggerData.healthPercentage )
		{
			return;
		}
		if( IsPlayerActivator( activator ) && m_triggerData.isAttackerPlayer )
		{
			ResolveOperationsOnTrigger( m_triggerData, owner, container );
		}
		else if( !( IsPlayerActivator( activator ) ) && m_triggerData.isAttackerNPC )
		{
			ResolveOperationsOnTrigger( m_triggerData, owner, container );
		}
	}

}

class InteractionAreaOperationsTrigger extends DeviceOperationsTrigger
{
	protected instanceeditable inlined var m_triggerData : InteractionAreaOperationTriggerData;

	public function EvaluateTrigger( areaTag : CName, owner : weak< GameObject >, activator : weak< GameObject >, operationType : gameinteractionsEInteractionEventType, container : DeviceOperationsContainer )
	{
		if( m_triggerData == NULL )
		{
			return;
		}
		if( m_triggerData.areaTag == areaTag && m_triggerData.operationType == operationType )
		{
			if( IsPlayerActivator( activator ) && m_triggerData.isActivatorPlayer )
			{
				ResolveOperationsOnTrigger( m_triggerData, owner, container );
			}
			else if( !( IsPlayerActivator( activator ) ) && m_triggerData.isActivatorNPC )
			{
				ResolveOperationsOnTrigger( m_triggerData, owner, container );
			}
		}
	}

}

class TriggerVolumeOperationsTrigger extends DeviceOperationsTrigger
{
	protected instanceeditable inlined var m_triggerData : TriggerVolumeOperationTriggerData;

	public function EvaluateTrigger( componentName : CName, owner : weak< GameObject >, activator : weak< GameObject >, operationType : ETriggerOperationType, container : DeviceOperationsContainer )
	{
		if( m_triggerData == NULL )
		{
			return;
		}
		if( m_triggerData.componentName == componentName && m_triggerData.operationType == operationType )
		{
			if( IsPlayerActivator( activator ) && m_triggerData.isActivatorPlayer )
			{
				ResolveOperationsOnTrigger( m_triggerData, owner, container );
			}
			else if( !( IsPlayerActivator( activator ) ) && m_triggerData.isActivatorNPC )
			{
				if( m_triggerData.canNPCBeDead || activator.IsActive() )
				{
					ResolveOperationsOnTrigger( m_triggerData, owner, container );
				}
			}
		}
	}

}

class DeviceActionOperationsTrigger extends DeviceOperationsTrigger
{
	protected instanceeditable inlined var m_triggerData : DeviceActionOperationTriggerData;

	public function EvaluateTrigger( actionClassName : CName, owner : weak< GameObject >, container : DeviceOperationsContainer )
	{
		var currentActionName : CName;
		if( m_triggerData == NULL )
		{
			return;
		}
		currentActionName = m_triggerData.action.GetClassName();
		if( currentActionName == actionClassName )
		{
			ResolveOperationsOnTrigger( m_triggerData, owner, container );
		}
	}

	public function RestoreOperation( actionClassName : CName, owner : weak< GameObject >, container : DeviceOperationsContainer )
	{
		if( m_triggerData.action.GetClassName() == actionClassName )
		{
			RestoreOperationsOnTrigger( m_triggerData, owner, container );
		}
	}

}

class CustomActionOperationsTriggers extends DeviceOperationsTrigger
{
	protected instanceeditable inlined var m_triggerData : CustomActionOperationTriggerData;

	public function EvaluateTrigger( actionID : CName, owner : weak< GameObject >, container : DeviceOperationsContainer )
	{
		if( m_triggerData == NULL )
		{
			return;
		}
		if( m_triggerData.actionID == actionID )
		{
			ResolveOperationsOnTrigger( m_triggerData, owner, container );
		}
	}

	public function RestoreOperation( actionID : CName, owner : weak< GameObject >, container : DeviceOperationsContainer )
	{
		if( m_triggerData == NULL )
		{
			return;
		}
		if( m_triggerData.actionID == actionID )
		{
			RestoreOperationsOnTrigger( m_triggerData, owner, container );
		}
	}

}

class DoorStateOperationsTrigger extends DeviceOperationsTrigger
{
	protected instanceeditable inlined var m_triggerData : DoorStateOperationTriggerData;
	private var m_wasStateCached : Bool;
	private var m_cachedState : EDoorStatus;

	public function EvaluateTrigger( state : EDoorStatus, owner : weak< GameObject >, container : DeviceOperationsContainer )
	{
		if( m_wasStateCached && m_cachedState == state )
		{
			return;
		}
		m_cachedState = state;
		m_wasStateCached = true;
		if( m_triggerData == NULL )
		{
			return;
		}
		if( m_triggerData.state == state )
		{
			ResolveOperationsOnTrigger( m_triggerData, owner, container );
		}
	}

}

class BaseStateOperationsTrigger extends DeviceOperationsTrigger
{
	protected instanceeditable inlined var m_triggerData : BaseStateOperationTriggerData;
	private var m_wasStateCached : Bool;
	private var m_cachedState : EDeviceStatus;

	public function EvaluateTrigger( state : EDeviceStatus, owner : weak< GameObject >, container : DeviceOperationsContainer )
	{
		if( m_wasStateCached && m_cachedState == state )
		{
			return;
		}
		m_cachedState = state;
		m_wasStateCached = true;
		if( m_triggerData == NULL )
		{
			return;
		}
		if( m_triggerData.state == state )
		{
			ResolveOperationsOnTrigger( m_triggerData, owner, container );
		}
	}

}

class ActivatorOperationsTrigger extends DeviceOperationsTrigger
{
	protected instanceeditable inlined var m_triggerData : ActivatorOperationTriggerData;

	public function EvaluateTrigger( owner : weak< GameObject >, container : DeviceOperationsContainer )
	{
		var device : weak< Device >;
		if( m_triggerData == NULL )
		{
			return;
		}
		device = ( ( Device )( owner ) );
		if( device && !( device.GetDevicePS().IsDisabled() ) )
		{
			ResolveOperationsOnTrigger( m_triggerData, owner, container );
		}
	}

}

